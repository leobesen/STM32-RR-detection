
SERVER_NUCLEO_LB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd6c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  0800cea8  0800cea8  0001cea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d140  0800d140  0001d140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d148  0800d148  0001d148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d14c  0800d14c  0001d14c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000058  20000004  0800d150  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  2000005c  0800d1a8  0002005c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003d  200000f8  0800d241  000200f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000138  0800d27e  00020138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 000000a8  2000014c  0800d28f  0002014c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000a94  200001f4  0800d337  000201f4  2**2
                  ALLOC
 12 ._user_heap_stack 00000c00  20000c88  0800d337  00020c88  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 17 .debug_info   0004d732  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 0000874c  00000000  00000000  0006d956  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00003698  00000000  00000000  000760a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 000032c0  00000000  00000000  00079740  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  000111be  00000000  00000000  0007ca00  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   0003d4af  00000000  00000000  0008dbbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    001169db  00000000  00000000  000cb06d  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  001e1a48  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000e640  00000000  00000000  001e1ac4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001f4 	.word	0x200001f4
 8000158:	00000000 	.word	0x00000000
 800015c:	0800ce90 	.word	0x0800ce90

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001f8 	.word	0x200001f8
 8000178:	0800ce90 	.word	0x0800ce90

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800019c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001a0:	f000 b972 	b.w	8000488 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	4604      	mov	r4, r0
 80001c4:	4688      	mov	r8, r1
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d14b      	bne.n	8000262 <__udivmoddi4+0xa6>
 80001ca:	428a      	cmp	r2, r1
 80001cc:	4615      	mov	r5, r2
 80001ce:	d967      	bls.n	80002a0 <__udivmoddi4+0xe4>
 80001d0:	fab2 f282 	clz	r2, r2
 80001d4:	b14a      	cbz	r2, 80001ea <__udivmoddi4+0x2e>
 80001d6:	f1c2 0720 	rsb	r7, r2, #32
 80001da:	fa01 f302 	lsl.w	r3, r1, r2
 80001de:	fa20 f707 	lsr.w	r7, r0, r7
 80001e2:	4095      	lsls	r5, r2
 80001e4:	ea47 0803 	orr.w	r8, r7, r3
 80001e8:	4094      	lsls	r4, r2
 80001ea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001ee:	0c23      	lsrs	r3, r4, #16
 80001f0:	fbb8 f7fe 	udiv	r7, r8, lr
 80001f4:	fa1f fc85 	uxth.w	ip, r5
 80001f8:	fb0e 8817 	mls	r8, lr, r7, r8
 80001fc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000200:	fb07 f10c 	mul.w	r1, r7, ip
 8000204:	4299      	cmp	r1, r3
 8000206:	d909      	bls.n	800021c <__udivmoddi4+0x60>
 8000208:	18eb      	adds	r3, r5, r3
 800020a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800020e:	f080 811b 	bcs.w	8000448 <__udivmoddi4+0x28c>
 8000212:	4299      	cmp	r1, r3
 8000214:	f240 8118 	bls.w	8000448 <__udivmoddi4+0x28c>
 8000218:	3f02      	subs	r7, #2
 800021a:	442b      	add	r3, r5
 800021c:	1a5b      	subs	r3, r3, r1
 800021e:	b2a4      	uxth	r4, r4
 8000220:	fbb3 f0fe 	udiv	r0, r3, lr
 8000224:	fb0e 3310 	mls	r3, lr, r0, r3
 8000228:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800022c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000230:	45a4      	cmp	ip, r4
 8000232:	d909      	bls.n	8000248 <__udivmoddi4+0x8c>
 8000234:	192c      	adds	r4, r5, r4
 8000236:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800023a:	f080 8107 	bcs.w	800044c <__udivmoddi4+0x290>
 800023e:	45a4      	cmp	ip, r4
 8000240:	f240 8104 	bls.w	800044c <__udivmoddi4+0x290>
 8000244:	3802      	subs	r0, #2
 8000246:	442c      	add	r4, r5
 8000248:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024c:	eba4 040c 	sub.w	r4, r4, ip
 8000250:	2700      	movs	r7, #0
 8000252:	b11e      	cbz	r6, 800025c <__udivmoddi4+0xa0>
 8000254:	40d4      	lsrs	r4, r2
 8000256:	2300      	movs	r3, #0
 8000258:	e9c6 4300 	strd	r4, r3, [r6]
 800025c:	4639      	mov	r1, r7
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	428b      	cmp	r3, r1
 8000264:	d909      	bls.n	800027a <__udivmoddi4+0xbe>
 8000266:	2e00      	cmp	r6, #0
 8000268:	f000 80eb 	beq.w	8000442 <__udivmoddi4+0x286>
 800026c:	2700      	movs	r7, #0
 800026e:	e9c6 0100 	strd	r0, r1, [r6]
 8000272:	4638      	mov	r0, r7
 8000274:	4639      	mov	r1, r7
 8000276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027a:	fab3 f783 	clz	r7, r3
 800027e:	2f00      	cmp	r7, #0
 8000280:	d147      	bne.n	8000312 <__udivmoddi4+0x156>
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__udivmoddi4+0xd0>
 8000286:	4282      	cmp	r2, r0
 8000288:	f200 80fa 	bhi.w	8000480 <__udivmoddi4+0x2c4>
 800028c:	1a84      	subs	r4, r0, r2
 800028e:	eb61 0303 	sbc.w	r3, r1, r3
 8000292:	2001      	movs	r0, #1
 8000294:	4698      	mov	r8, r3
 8000296:	2e00      	cmp	r6, #0
 8000298:	d0e0      	beq.n	800025c <__udivmoddi4+0xa0>
 800029a:	e9c6 4800 	strd	r4, r8, [r6]
 800029e:	e7dd      	b.n	800025c <__udivmoddi4+0xa0>
 80002a0:	b902      	cbnz	r2, 80002a4 <__udivmoddi4+0xe8>
 80002a2:	deff      	udf	#255	; 0xff
 80002a4:	fab2 f282 	clz	r2, r2
 80002a8:	2a00      	cmp	r2, #0
 80002aa:	f040 808f 	bne.w	80003cc <__udivmoddi4+0x210>
 80002ae:	1b49      	subs	r1, r1, r5
 80002b0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002b4:	fa1f f885 	uxth.w	r8, r5
 80002b8:	2701      	movs	r7, #1
 80002ba:	fbb1 fcfe 	udiv	ip, r1, lr
 80002be:	0c23      	lsrs	r3, r4, #16
 80002c0:	fb0e 111c 	mls	r1, lr, ip, r1
 80002c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c8:	fb08 f10c 	mul.w	r1, r8, ip
 80002cc:	4299      	cmp	r1, r3
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0x124>
 80002d0:	18eb      	adds	r3, r5, r3
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0x122>
 80002d8:	4299      	cmp	r1, r3
 80002da:	f200 80cd 	bhi.w	8000478 <__udivmoddi4+0x2bc>
 80002de:	4684      	mov	ip, r0
 80002e0:	1a59      	subs	r1, r3, r1
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1410 	mls	r4, lr, r0, r1
 80002ec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x14c>
 80002f8:	192c      	adds	r4, r5, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x14a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80b6 	bhi.w	8000472 <__udivmoddi4+0x2b6>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e79f      	b.n	8000252 <__udivmoddi4+0x96>
 8000312:	f1c7 0c20 	rsb	ip, r7, #32
 8000316:	40bb      	lsls	r3, r7
 8000318:	fa22 fe0c 	lsr.w	lr, r2, ip
 800031c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000320:	fa01 f407 	lsl.w	r4, r1, r7
 8000324:	fa20 f50c 	lsr.w	r5, r0, ip
 8000328:	fa21 f30c 	lsr.w	r3, r1, ip
 800032c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000330:	4325      	orrs	r5, r4
 8000332:	fbb3 f9f8 	udiv	r9, r3, r8
 8000336:	0c2c      	lsrs	r4, r5, #16
 8000338:	fb08 3319 	mls	r3, r8, r9, r3
 800033c:	fa1f fa8e 	uxth.w	sl, lr
 8000340:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000344:	fb09 f40a 	mul.w	r4, r9, sl
 8000348:	429c      	cmp	r4, r3
 800034a:	fa02 f207 	lsl.w	r2, r2, r7
 800034e:	fa00 f107 	lsl.w	r1, r0, r7
 8000352:	d90b      	bls.n	800036c <__udivmoddi4+0x1b0>
 8000354:	eb1e 0303 	adds.w	r3, lr, r3
 8000358:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800035c:	f080 8087 	bcs.w	800046e <__udivmoddi4+0x2b2>
 8000360:	429c      	cmp	r4, r3
 8000362:	f240 8084 	bls.w	800046e <__udivmoddi4+0x2b2>
 8000366:	f1a9 0902 	sub.w	r9, r9, #2
 800036a:	4473      	add	r3, lr
 800036c:	1b1b      	subs	r3, r3, r4
 800036e:	b2ad      	uxth	r5, r5
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800037c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000380:	45a2      	cmp	sl, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x1da>
 8000384:	eb1e 0404 	adds.w	r4, lr, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	d26b      	bcs.n	8000466 <__udivmoddi4+0x2aa>
 800038e:	45a2      	cmp	sl, r4
 8000390:	d969      	bls.n	8000466 <__udivmoddi4+0x2aa>
 8000392:	3802      	subs	r0, #2
 8000394:	4474      	add	r4, lr
 8000396:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800039a:	fba0 8902 	umull	r8, r9, r0, r2
 800039e:	eba4 040a 	sub.w	r4, r4, sl
 80003a2:	454c      	cmp	r4, r9
 80003a4:	46c2      	mov	sl, r8
 80003a6:	464b      	mov	r3, r9
 80003a8:	d354      	bcc.n	8000454 <__udivmoddi4+0x298>
 80003aa:	d051      	beq.n	8000450 <__udivmoddi4+0x294>
 80003ac:	2e00      	cmp	r6, #0
 80003ae:	d069      	beq.n	8000484 <__udivmoddi4+0x2c8>
 80003b0:	ebb1 050a 	subs.w	r5, r1, sl
 80003b4:	eb64 0403 	sbc.w	r4, r4, r3
 80003b8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003bc:	40fd      	lsrs	r5, r7
 80003be:	40fc      	lsrs	r4, r7
 80003c0:	ea4c 0505 	orr.w	r5, ip, r5
 80003c4:	e9c6 5400 	strd	r5, r4, [r6]
 80003c8:	2700      	movs	r7, #0
 80003ca:	e747      	b.n	800025c <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f703 	lsr.w	r7, r0, r3
 80003d4:	4095      	lsls	r5, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	fa21 f303 	lsr.w	r3, r1, r3
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	4338      	orrs	r0, r7
 80003e4:	0c01      	lsrs	r1, r0, #16
 80003e6:	fbb3 f7fe 	udiv	r7, r3, lr
 80003ea:	fa1f f885 	uxth.w	r8, r5
 80003ee:	fb0e 3317 	mls	r3, lr, r7, r3
 80003f2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f6:	fb07 f308 	mul.w	r3, r7, r8
 80003fa:	428b      	cmp	r3, r1
 80003fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x256>
 8000402:	1869      	adds	r1, r5, r1
 8000404:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000408:	d22f      	bcs.n	800046a <__udivmoddi4+0x2ae>
 800040a:	428b      	cmp	r3, r1
 800040c:	d92d      	bls.n	800046a <__udivmoddi4+0x2ae>
 800040e:	3f02      	subs	r7, #2
 8000410:	4429      	add	r1, r5
 8000412:	1acb      	subs	r3, r1, r3
 8000414:	b281      	uxth	r1, r0
 8000416:	fbb3 f0fe 	udiv	r0, r3, lr
 800041a:	fb0e 3310 	mls	r3, lr, r0, r3
 800041e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000422:	fb00 f308 	mul.w	r3, r0, r8
 8000426:	428b      	cmp	r3, r1
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x27e>
 800042a:	1869      	adds	r1, r5, r1
 800042c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000430:	d217      	bcs.n	8000462 <__udivmoddi4+0x2a6>
 8000432:	428b      	cmp	r3, r1
 8000434:	d915      	bls.n	8000462 <__udivmoddi4+0x2a6>
 8000436:	3802      	subs	r0, #2
 8000438:	4429      	add	r1, r5
 800043a:	1ac9      	subs	r1, r1, r3
 800043c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000440:	e73b      	b.n	80002ba <__udivmoddi4+0xfe>
 8000442:	4637      	mov	r7, r6
 8000444:	4630      	mov	r0, r6
 8000446:	e709      	b.n	800025c <__udivmoddi4+0xa0>
 8000448:	4607      	mov	r7, r0
 800044a:	e6e7      	b.n	800021c <__udivmoddi4+0x60>
 800044c:	4618      	mov	r0, r3
 800044e:	e6fb      	b.n	8000248 <__udivmoddi4+0x8c>
 8000450:	4541      	cmp	r1, r8
 8000452:	d2ab      	bcs.n	80003ac <__udivmoddi4+0x1f0>
 8000454:	ebb8 0a02 	subs.w	sl, r8, r2
 8000458:	eb69 020e 	sbc.w	r2, r9, lr
 800045c:	3801      	subs	r0, #1
 800045e:	4613      	mov	r3, r2
 8000460:	e7a4      	b.n	80003ac <__udivmoddi4+0x1f0>
 8000462:	4660      	mov	r0, ip
 8000464:	e7e9      	b.n	800043a <__udivmoddi4+0x27e>
 8000466:	4618      	mov	r0, r3
 8000468:	e795      	b.n	8000396 <__udivmoddi4+0x1da>
 800046a:	4667      	mov	r7, ip
 800046c:	e7d1      	b.n	8000412 <__udivmoddi4+0x256>
 800046e:	4681      	mov	r9, r0
 8000470:	e77c      	b.n	800036c <__udivmoddi4+0x1b0>
 8000472:	3802      	subs	r0, #2
 8000474:	442c      	add	r4, r5
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0x14c>
 8000478:	f1ac 0c02 	sub.w	ip, ip, #2
 800047c:	442b      	add	r3, r5
 800047e:	e72f      	b.n	80002e0 <__udivmoddi4+0x124>
 8000480:	4638      	mov	r0, r7
 8000482:	e708      	b.n	8000296 <__udivmoddi4+0xda>
 8000484:	4637      	mov	r7, r6
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0xa0>

08000488 <__aeabi_idiv0>:
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop

0800048c <LIS3DH_WriteIO>:

//Functions definitions
//Private functions
//Write IO
void LIS3DH_WriteIO(accConfig acc, uint8_t reg, uint8_t *dataW, uint8_t size)
{
 800048c:	b5b0      	push	{r4, r5, r7, lr}
 800048e:	b088      	sub	sp, #32
 8000490:	af00      	add	r7, sp, #0
 8000492:	1d3c      	adds	r4, r7, #4
 8000494:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000498:	70fb      	strb	r3, [r7, #3]
 800049a:	466b      	mov	r3, sp
 800049c:	461d      	mov	r5, r3
	uint8_t data[1 + size];
 800049e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80004a2:	1c58      	adds	r0, r3, #1
 80004a4:	1e43      	subs	r3, r0, #1
 80004a6:	61bb      	str	r3, [r7, #24]
 80004a8:	4603      	mov	r3, r0
 80004aa:	4619      	mov	r1, r3
 80004ac:	f04f 0200 	mov.w	r2, #0
 80004b0:	f04f 0300 	mov.w	r3, #0
 80004b4:	f04f 0400 	mov.w	r4, #0
 80004b8:	00d4      	lsls	r4, r2, #3
 80004ba:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80004be:	00cb      	lsls	r3, r1, #3
 80004c0:	4603      	mov	r3, r0
 80004c2:	4619      	mov	r1, r3
 80004c4:	f04f 0200 	mov.w	r2, #0
 80004c8:	f04f 0300 	mov.w	r3, #0
 80004cc:	f04f 0400 	mov.w	r4, #0
 80004d0:	00d4      	lsls	r4, r2, #3
 80004d2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80004d6:	00cb      	lsls	r3, r1, #3
 80004d8:	4603      	mov	r3, r0
 80004da:	3307      	adds	r3, #7
 80004dc:	08db      	lsrs	r3, r3, #3
 80004de:	00db      	lsls	r3, r3, #3
 80004e0:	ebad 0d03 	sub.w	sp, sp, r3
 80004e4:	466b      	mov	r3, sp
 80004e6:	3300      	adds	r3, #0
 80004e8:	617b      	str	r3, [r7, #20]
	data[0] = reg;
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	78fa      	ldrb	r2, [r7, #3]
 80004ee:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<=size; i++)
 80004f0:	2301      	movs	r3, #1
 80004f2:	61fb      	str	r3, [r7, #28]
 80004f4:	e00c      	b.n	8000510 <LIS3DH_WriteIO+0x84>
		data[i]=dataW[i-1];
 80004f6:	69fb      	ldr	r3, [r7, #28]
 80004f8:	3b01      	subs	r3, #1
 80004fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80004fc:	4413      	add	r3, r2
 80004fe:	7819      	ldrb	r1, [r3, #0]
 8000500:	697a      	ldr	r2, [r7, #20]
 8000502:	69fb      	ldr	r3, [r7, #28]
 8000504:	4413      	add	r3, r2
 8000506:	460a      	mov	r2, r1
 8000508:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<=size; i++)
 800050a:	69fb      	ldr	r3, [r7, #28]
 800050c:	3301      	adds	r3, #1
 800050e:	61fb      	str	r3, [r7, #28]
 8000510:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000514:	69fa      	ldr	r2, [r7, #28]
 8000516:	429a      	cmp	r2, r3
 8000518:	dded      	ble.n	80004f6 <LIS3DH_WriteIO+0x6a>
	//Enable CS
	HAL_GPIO_WritePin(acc.GPIOx_CS, acc.GPIO_Pin_CS, GPIO_PIN_RESET);
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	89b9      	ldrh	r1, [r7, #12]
 800051e:	2200      	movs	r2, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f004 fef9 	bl	8005318 <HAL_GPIO_WritePin>
	//set register value and data
	HAL_SPI_Transmit(acc.accSPI, data, 1 + size, 1000);
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	6979      	ldr	r1, [r7, #20]
 800052a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800052e:	b29b      	uxth	r3, r3
 8000530:	3301      	adds	r3, #1
 8000532:	b29a      	uxth	r2, r3
 8000534:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000538:	f007 fd62 	bl	8008000 <HAL_SPI_Transmit>
	//Disable CS
	HAL_GPIO_WritePin(acc.GPIOx_CS, acc.GPIO_Pin_CS, GPIO_PIN_SET);
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	89b9      	ldrh	r1, [r7, #12]
 8000540:	2201      	movs	r2, #1
 8000542:	4618      	mov	r0, r3
 8000544:	f004 fee8 	bl	8005318 <HAL_GPIO_WritePin>
 8000548:	46ad      	mov	sp, r5
}
 800054a:	bf00      	nop
 800054c:	3720      	adds	r7, #32
 800054e:	46bd      	mov	sp, r7
 8000550:	bdb0      	pop	{r4, r5, r7, pc}

08000552 <LIS3DH_ReadIO>:
//2. Read IO
void LIS3DH_ReadIO(accConfig acc, uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8000552:	b590      	push	{r4, r7, lr}
 8000554:	b087      	sub	sp, #28
 8000556:	af00      	add	r7, sp, #0
 8000558:	1d3c      	adds	r4, r7, #4
 800055a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800055e:	70fb      	strb	r3, [r7, #3]
	uint8_t spiBuf = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	75fb      	strb	r3, [r7, #23]
	spiBuf = reg | 0x80;
 8000564:	78fb      	ldrb	r3, [r7, #3]
 8000566:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800056a:	b2db      	uxtb	r3, r3
 800056c:	75fb      	strb	r3, [r7, #23]
	//Enable CS
	HAL_GPIO_WritePin(acc.GPIOx_CS, acc.GPIO_Pin_CS, GPIO_PIN_RESET);
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	89b9      	ldrh	r1, [r7, #12]
 8000572:	2200      	movs	r2, #0
 8000574:	4618      	mov	r0, r3
 8000576:	f004 fecf 	bl	8005318 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800057a:	2001      	movs	r0, #1
 800057c:	f003 fb0a 	bl	8003b94 <HAL_Delay>
	//set register value
	HAL_SPI_Transmit(acc.accSPI, &spiBuf, 1, 1000);
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f107 0117 	add.w	r1, r7, #23
 8000586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058a:	2201      	movs	r2, #1
 800058c:	f007 fd38 	bl	8008000 <HAL_SPI_Transmit>
	//HAL_Delay(1);
	//Transmit data
	HAL_SPI_Receive(acc.accSPI, &dataR[0], size, 1000);
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000596:	b29a      	uxth	r2, r3
 8000598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800059e:	f007 fe9d 	bl	80082dc <HAL_SPI_Receive>
	//Disable CS
	HAL_Delay(1);
 80005a2:	2001      	movs	r0, #1
 80005a4:	f003 faf6 	bl	8003b94 <HAL_Delay>
	HAL_GPIO_WritePin(acc.GPIOx_CS, acc.GPIO_Pin_CS, GPIO_PIN_SET);
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	89b9      	ldrh	r1, [r7, #12]
 80005ac:	2201      	movs	r2, #1
 80005ae:	4618      	mov	r0, r3
 80005b0:	f004 feb2 	bl	8005318 <HAL_GPIO_WritePin>
	
//	for(uint8_t i=0; i<(size&0x3); i++)
//	{
//		dataR[i] = spiBuf[i];
//	}
}
 80005b4:	bf00      	nop
 80005b6:	371c      	adds	r7, #28
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd90      	pop	{r4, r7, pc}

080005bc <LIS3DH_Init>:


//1. Accelerometer initialise function
char* LIS3DH_Init(accConfig acc, LIS3DH_InitTypeDef *accInitDef)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b089      	sub	sp, #36	; 0x24
 80005c0:	af02      	add	r7, sp, #8
 80005c2:	1d3c      	adds	r4, r7, #4
 80005c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80005c8:	603b      	str	r3, [r7, #0]
	uint8_t spiData = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	74fb      	strb	r3, [r7, #19]
	uint8_t spiData_aux = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	74bb      	strb	r3, [r7, #18]
	
	//memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
	
	//Enable Axes and Output Data Rate//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		    //Enable Axes
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	789b      	ldrb	r3, [r3, #2]
 80005d6:	b25b      	sxtb	r3, r3
 80005d8:	f003 0307 	and.w	r3, r3, #7
 80005dc:	b25a      	sxtb	r2, r3
 80005de:	7cfb      	ldrb	r3, [r7, #19]
 80005e0:	b25b      	sxtb	r3, r3
 80005e2:	4313      	orrs	r3, r2
 80005e4:	b25b      	sxtb	r3, r3
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	74fb      	strb	r3, [r7, #19]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	b25b      	sxtb	r3, r3
 80005f0:	f023 030f 	bic.w	r3, r3, #15
 80005f4:	b25a      	sxtb	r2, r3
 80005f6:	7cfb      	ldrb	r3, [r7, #19]
 80005f8:	b25b      	sxtb	r3, r3
 80005fa:	4313      	orrs	r3, r2
 80005fc:	b25b      	sxtb	r3, r3
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	74fb      	strb	r3, [r7, #19]
	//Write to accelerometer
	LIS3DH_WriteIO(acc, CTRL_REG1, &spiData, 1);
 8000602:	2301      	movs	r3, #1
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	f107 0313 	add.w	r3, r7, #19
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	2320      	movs	r3, #32
 800060e:	1d3a      	adds	r2, r7, #4
 8000610:	ca07      	ldmia	r2, {r0, r1, r2}
 8000612:	f7ff ff3b 	bl	800048c <LIS3DH_WriteIO>
	HAL_Delay(10);
 8000616:	200a      	movs	r0, #10
 8000618:	f003 fabc 	bl	8003b94 <HAL_Delay>
	LIS3DH_ReadIO(acc, CTRL_REG1, &spiData_aux, 1);
 800061c:	2301      	movs	r3, #1
 800061e:	9301      	str	r3, [sp, #4]
 8000620:	f107 0312 	add.w	r3, r7, #18
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2320      	movs	r3, #32
 8000628:	1d3a      	adds	r2, r7, #4
 800062a:	ca07      	ldmia	r2, {r0, r1, r2}
 800062c:	f7ff ff91 	bl	8000552 <LIS3DH_ReadIO>
	HAL_Delay(10);
 8000630:	200a      	movs	r0, #10
 8000632:	f003 faaf 	bl	8003b94 <HAL_Delay>
	//sprintf(buffer, "%#x, %#x", spiData, spiData_aux);


	//** 2. Full-Scale selection, self test and 4-wire SPI **//
	spiData = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	74fb      	strb	r3, [r7, #19]
	spiData |= (accInitDef->fullScale & 0x30);	//Full-Scale
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	785b      	ldrb	r3, [r3, #1]
 800063e:	b25b      	sxtb	r3, r3
 8000640:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000644:	b25a      	sxtb	r2, r3
 8000646:	7cfb      	ldrb	r3, [r7, #19]
 8000648:	b25b      	sxtb	r3, r3
 800064a:	4313      	orrs	r3, r2
 800064c:	b25b      	sxtb	r3, r3
 800064e:	b2db      	uxtb	r3, r3
 8000650:	74fb      	strb	r3, [r7, #19]
	spiData |= BDU;
 8000652:	7cfb      	ldrb	r3, [r7, #19]
 8000654:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000658:	b2db      	uxtb	r3, r3
 800065a:	74fb      	strb	r3, [r7, #19]
	if(accInitDef->mode == HIGH_RESOLUTION)
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	791b      	ldrb	r3, [r3, #4]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d104      	bne.n	800066e <LIS3DH_Init+0xb2>
		spiData |= HR;	//High-resolution
 8000664:	7cfb      	ldrb	r3, [r7, #19]
 8000666:	f043 0308 	orr.w	r3, r3, #8
 800066a:	b2db      	uxtb	r3, r3
 800066c:	74fb      	strb	r3, [r7, #19]
	//Write to accelerometer
	LIS3DH_WriteIO(acc, CTRL_REG4, &spiData, 1);
 800066e:	2301      	movs	r3, #1
 8000670:	9301      	str	r3, [sp, #4]
 8000672:	f107 0313 	add.w	r3, r7, #19
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	2323      	movs	r3, #35	; 0x23
 800067a:	1d3a      	adds	r2, r7, #4
 800067c:	ca07      	ldmia	r2, {r0, r1, r2}
 800067e:	f7ff ff05 	bl	800048c <LIS3DH_WriteIO>
	HAL_Delay(10);
 8000682:	200a      	movs	r0, #10
 8000684:	f003 fa86 	bl	8003b94 <HAL_Delay>
	LIS3DH_ReadIO(acc, CTRL_REG4, &spiData_aux, 1);
 8000688:	2301      	movs	r3, #1
 800068a:	9301      	str	r3, [sp, #4]
 800068c:	f107 0312 	add.w	r3, r7, #18
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2323      	movs	r3, #35	; 0x23
 8000694:	1d3a      	adds	r2, r7, #4
 8000696:	ca07      	ldmia	r2, {r0, r1, r2}
 8000698:	f7ff ff5b 	bl	8000552 <LIS3DH_ReadIO>
	HAL_Delay(10);
 800069c:	200a      	movs	r0, #10
 800069e:	f003 fa79 	bl	8003b94 <HAL_Delay>
	//sprintf(buffer, "%#x, %#x", spiData, spiData_aux);


	//Enable Axes and Output Data Rate//
	//Set CTRL REG4 settings value
	spiData = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	74fb      	strb	r3, [r7, #19]
	spiData |= (accInitDef->enableAxes & 0x07);		    //Enable Axes
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	789b      	ldrb	r3, [r3, #2]
 80006aa:	b25b      	sxtb	r3, r3
 80006ac:	f003 0307 	and.w	r3, r3, #7
 80006b0:	b25a      	sxtb	r2, r3
 80006b2:	7cfb      	ldrb	r3, [r7, #19]
 80006b4:	b25b      	sxtb	r3, r3
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b25b      	sxtb	r3, r3
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	74fb      	strb	r3, [r7, #19]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	b25b      	sxtb	r3, r3
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	b25a      	sxtb	r2, r3
 80006ca:	7cfb      	ldrb	r3, [r7, #19]
 80006cc:	b25b      	sxtb	r3, r3
 80006ce:	4313      	orrs	r3, r2
 80006d0:	b25b      	sxtb	r3, r3
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	74fb      	strb	r3, [r7, #19]
	//Write to accelerometer
	LIS3DH_WriteIO(acc, CTRL_REG1, &spiData, 1);
 80006d6:	2301      	movs	r3, #1
 80006d8:	9301      	str	r3, [sp, #4]
 80006da:	f107 0313 	add.w	r3, r7, #19
 80006de:	9300      	str	r3, [sp, #0]
 80006e0:	2320      	movs	r3, #32
 80006e2:	1d3a      	adds	r2, r7, #4
 80006e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80006e6:	f7ff fed1 	bl	800048c <LIS3DH_WriteIO>
	HAL_Delay(10);
 80006ea:	200a      	movs	r0, #10
 80006ec:	f003 fa52 	bl	8003b94 <HAL_Delay>
	LIS3DH_ReadIO(acc, CTRL_REG1, &spiData_aux, 1);
 80006f0:	2301      	movs	r3, #1
 80006f2:	9301      	str	r3, [sp, #4]
 80006f4:	f107 0312 	add.w	r3, r7, #18
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2320      	movs	r3, #32
 80006fc:	1d3a      	adds	r2, r7, #4
 80006fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000700:	f7ff ff27 	bl	8000552 <LIS3DH_ReadIO>
	HAL_Delay(10);
 8000704:	200a      	movs	r0, #10
 8000706:	f003 fa45 	bl	8003b94 <HAL_Delay>
//	spiData = 0;
//	spiData |= STREAM_MODE;
//	LIS3DH_WriteIO(FIFO_CTRL_REG, &spiData, 1);

	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	78db      	ldrb	r3, [r3, #3]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d015      	beq.n	800073e <LIS3DH_Init+0x182>
	{
		spiData = 0x0;
 8000712:	2300      	movs	r3, #0
 8000714:	74fb      	strb	r3, [r7, #19]
		//spiData |= I1_OVERRUN;
		//Write to accelerometer
		LIS3DH_WriteIO(acc, CTRL_REG3, &spiData, 1);
 8000716:	2301      	movs	r3, #1
 8000718:	9301      	str	r3, [sp, #4]
 800071a:	f107 0313 	add.w	r3, r7, #19
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	2322      	movs	r3, #34	; 0x22
 8000722:	1d3a      	adds	r2, r7, #4
 8000724:	ca07      	ldmia	r2, {r0, r1, r2}
 8000726:	f7ff feb1 	bl	800048c <LIS3DH_WriteIO>
		LIS3DH_ReadIO(acc, CTRL_REG3, &spiData_aux, 1);
 800072a:	2301      	movs	r3, #1
 800072c:	9301      	str	r3, [sp, #4]
 800072e:	f107 0312 	add.w	r3, r7, #18
 8000732:	9300      	str	r3, [sp, #0]
 8000734:	2322      	movs	r3, #34	; 0x22
 8000736:	1d3a      	adds	r2, r7, #4
 8000738:	ca07      	ldmia	r2, {r0, r1, r2}
 800073a:	f7ff ff0a 	bl	8000552 <LIS3DH_ReadIO>
		//sprintf(buffer, "%#x, %#x", spiData, spiData_aux);
	}

	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	785b      	ldrb	r3, [r3, #1]
 8000742:	2b10      	cmp	r3, #16
 8000744:	d022      	beq.n	800078c <LIS3DH_Init+0x1d0>
 8000746:	2b10      	cmp	r3, #16
 8000748:	dc02      	bgt.n	8000750 <LIS3DH_Init+0x194>
 800074a:	2b00      	cmp	r3, #0
 800074c:	d005      	beq.n	800075a <LIS3DH_Init+0x19e>
 800074e:	e06c      	b.n	800082a <LIS3DH_Init+0x26e>
 8000750:	2b20      	cmp	r3, #32
 8000752:	d034      	beq.n	80007be <LIS3DH_Init+0x202>
 8000754:	2b30      	cmp	r3, #48	; 0x30
 8000756:	d04b      	beq.n	80007f0 <LIS3DH_Init+0x234>
 8000758:	e067      	b.n	800082a <LIS3DH_Init+0x26e>
	{
		case FS_2:
			if(accInitDef->mode == HIGH_RESOLUTION)
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	791b      	ldrb	r3, [r3, #4]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d103      	bne.n	800076a <LIS3DH_Init+0x1ae>
				lis3dh_Sensitivity = SENSITIVITY_1;
 8000762:	4b3c      	ldr	r3, [pc, #240]	; (8000854 <LIS3DH_Init+0x298>)
 8000764:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000768:	601a      	str	r2, [r3, #0]
			if(accInitDef->mode == NORMAL)
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	791b      	ldrb	r3, [r3, #4]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d103      	bne.n	800077a <LIS3DH_Init+0x1be>
				lis3dh_Sensitivity = SENSITIVITY_4;
 8000772:	4b38      	ldr	r3, [pc, #224]	; (8000854 <LIS3DH_Init+0x298>)
 8000774:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8000778:	601a      	str	r2, [r3, #0]
			if(accInitDef->mode == LOW_POWER)
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	791b      	ldrb	r3, [r3, #4]
 800077e:	2b02      	cmp	r3, #2
 8000780:	d14c      	bne.n	800081c <LIS3DH_Init+0x260>
				lis3dh_Sensitivity = SENSITIVITY_16;
 8000782:	4b34      	ldr	r3, [pc, #208]	; (8000854 <LIS3DH_Init+0x298>)
 8000784:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8000788:	601a      	str	r2, [r3, #0]
			break;
 800078a:	e047      	b.n	800081c <LIS3DH_Init+0x260>
		
		case FS_4:
			if(accInitDef->mode == HIGH_RESOLUTION)
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	791b      	ldrb	r3, [r3, #4]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d103      	bne.n	800079c <LIS3DH_Init+0x1e0>
				lis3dh_Sensitivity = SENSITIVITY_2;
 8000794:	4b2f      	ldr	r3, [pc, #188]	; (8000854 <LIS3DH_Init+0x298>)
 8000796:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800079a:	601a      	str	r2, [r3, #0]
			if(accInitDef->mode == NORMAL)
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	791b      	ldrb	r3, [r3, #4]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d103      	bne.n	80007ac <LIS3DH_Init+0x1f0>
				lis3dh_Sensitivity = SENSITIVITY_8;
 80007a4:	4b2b      	ldr	r3, [pc, #172]	; (8000854 <LIS3DH_Init+0x298>)
 80007a6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80007aa:	601a      	str	r2, [r3, #0]
			if(accInitDef->mode == LOW_POWER)
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	791b      	ldrb	r3, [r3, #4]
 80007b0:	2b02      	cmp	r3, #2
 80007b2:	d135      	bne.n	8000820 <LIS3DH_Init+0x264>
				lis3dh_Sensitivity = SENSITIVITY_32;
 80007b4:	4b27      	ldr	r3, [pc, #156]	; (8000854 <LIS3DH_Init+0x298>)
 80007b6:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80007ba:	601a      	str	r2, [r3, #0]
			break;
 80007bc:	e030      	b.n	8000820 <LIS3DH_Init+0x264>
		
		case FS_8:
			if(accInitDef->mode == HIGH_RESOLUTION)
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	791b      	ldrb	r3, [r3, #4]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d103      	bne.n	80007ce <LIS3DH_Init+0x212>
				lis3dh_Sensitivity = SENSITIVITY_4;
 80007c6:	4b23      	ldr	r3, [pc, #140]	; (8000854 <LIS3DH_Init+0x298>)
 80007c8:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80007cc:	601a      	str	r2, [r3, #0]
			if(accInitDef->mode == NORMAL)
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	791b      	ldrb	r3, [r3, #4]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d103      	bne.n	80007de <LIS3DH_Init+0x222>
				lis3dh_Sensitivity = SENSITIVITY_16;
 80007d6:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <LIS3DH_Init+0x298>)
 80007d8:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80007dc:	601a      	str	r2, [r3, #0]
			if(accInitDef->mode == LOW_POWER)
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	791b      	ldrb	r3, [r3, #4]
 80007e2:	2b02      	cmp	r3, #2
 80007e4:	d11e      	bne.n	8000824 <LIS3DH_Init+0x268>
				lis3dh_Sensitivity = SENSITIVITY_64;
 80007e6:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <LIS3DH_Init+0x298>)
 80007e8:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 80007ec:	601a      	str	r2, [r3, #0]
			break;
 80007ee:	e019      	b.n	8000824 <LIS3DH_Init+0x268>
		
		case FS_16:
			if(accInitDef->mode == HIGH_RESOLUTION)
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	791b      	ldrb	r3, [r3, #4]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d102      	bne.n	80007fe <LIS3DH_Init+0x242>
				lis3dh_Sensitivity = SENSITIVITY_12;
 80007f8:	4b16      	ldr	r3, [pc, #88]	; (8000854 <LIS3DH_Init+0x298>)
 80007fa:	4a17      	ldr	r2, [pc, #92]	; (8000858 <LIS3DH_Init+0x29c>)
 80007fc:	601a      	str	r2, [r3, #0]
			if(accInitDef->mode == NORMAL)
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	791b      	ldrb	r3, [r3, #4]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d102      	bne.n	800080c <LIS3DH_Init+0x250>
				lis3dh_Sensitivity = SENSITIVITY_48;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <LIS3DH_Init+0x298>)
 8000808:	4a14      	ldr	r2, [pc, #80]	; (800085c <LIS3DH_Init+0x2a0>)
 800080a:	601a      	str	r2, [r3, #0]
			if(accInitDef->mode == LOW_POWER)
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	791b      	ldrb	r3, [r3, #4]
 8000810:	2b02      	cmp	r3, #2
 8000812:	d109      	bne.n	8000828 <LIS3DH_Init+0x26c>
				lis3dh_Sensitivity = SENSITIVITY_192;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <LIS3DH_Init+0x298>)
 8000816:	4a12      	ldr	r2, [pc, #72]	; (8000860 <LIS3DH_Init+0x2a4>)
 8000818:	601a      	str	r2, [r3, #0]
			break;
 800081a:	e005      	b.n	8000828 <LIS3DH_Init+0x26c>
			break;
 800081c:	bf00      	nop
 800081e:	e004      	b.n	800082a <LIS3DH_Init+0x26e>
			break;
 8000820:	bf00      	nop
 8000822:	e002      	b.n	800082a <LIS3DH_Init+0x26e>
			break;
 8000824:	bf00      	nop
 8000826:	e000      	b.n	800082a <LIS3DH_Init+0x26e>
			break;
 8000828:	bf00      	nop
	}
	//_LIS3DH_CS_DISABLE;

	//Filter impulse response
	for	(int j=0; j<N; j++)	h[j]=1.0/N;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
 800082e:	e009      	b.n	8000844 <LIS3DH_Init+0x288>
 8000830:	4a0c      	ldr	r2, [pc, #48]	; (8000864 <LIS3DH_Init+0x2a8>)
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	4413      	add	r3, r2
 8000838:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	3301      	adds	r3, #1
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	2b0f      	cmp	r3, #15
 8000848:	ddf2      	ble.n	8000830 <LIS3DH_Init+0x274>

	return buffer;
 800084a:	4b07      	ldr	r3, [pc, #28]	; (8000868 <LIS3DH_Init+0x2ac>)
}
 800084c:	4618      	mov	r0, r3
 800084e:	371c      	adds	r7, #28
 8000850:	46bd      	mov	sp, r7
 8000852:	bd90      	pop	{r4, r7, pc}
 8000854:	20000004 	.word	0x20000004
 8000858:	41400000 	.word	0x41400000
 800085c:	42400000 	.word	0x42400000
 8000860:	43400000 	.word	0x43400000
 8000864:	20000210 	.word	0x20000210
 8000868:	20000714 	.word	0x20000714

0800086c <LIS3DH_GetDataRaw>:
//2. Get Accelerometer raw data
accDataRaw LIS3DH_GetDataRaw(accConfig acc, LIS3DH_Operation_Mode mode)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af02      	add	r7, sp, #8
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	4638      	mov	r0, r7
 8000876:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t spiBuf[2];
	accDataRaw tempDataRaw = {0};
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	809a      	strh	r2, [r3, #4]
	uint8_t numBits = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	77fb      	strb	r3, [r7, #31]
	uint8_t UINT16_LEN = 16;
 8000888:	2310      	movs	r3, #16
 800088a:	77bb      	strb	r3, [r7, #30]
	if(mode == LOW_POWER) numBits = 8; //not implemented yet
 800088c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000890:	2b02      	cmp	r3, #2
 8000892:	d101      	bne.n	8000898 <LIS3DH_GetDataRaw+0x2c>
 8000894:	2308      	movs	r3, #8
 8000896:	77fb      	strb	r3, [r7, #31]
	if(mode == NORMAL) numBits = 10;
 8000898:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800089c:	2b01      	cmp	r3, #1
 800089e:	d101      	bne.n	80008a4 <LIS3DH_GetDataRaw+0x38>
 80008a0:	230a      	movs	r3, #10
 80008a2:	77fb      	strb	r3, [r7, #31]
	if(mode == HIGH_RESOLUTION) numBits = 12;
 80008a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d101      	bne.n	80008b0 <LIS3DH_GetDataRaw+0x44>
 80008ac:	230c      	movs	r3, #12
 80008ae:	77fb      	strb	r3, [r7, #31]

	//Read X data
	LIS3DH_ReadIO(acc, OUT_X_L, spiBuf, 2);
 80008b0:	2302      	movs	r3, #2
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	2328      	movs	r3, #40	; 0x28
 80008bc:	463a      	mov	r2, r7
 80008be:	ca07      	ldmia	r2, {r0, r1, r2}
 80008c0:	f7ff fe47 	bl	8000552 <LIS3DH_ReadIO>
	/* x = (MSB<<8) + LSB */
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 80008c4:	7f7b      	ldrb	r3, [r7, #29]
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	021b      	lsls	r3, r3, #8
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	7f3b      	ldrb	r3, [r7, #28]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	4413      	add	r3, r2
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	82bb      	strh	r3, [r7, #20]
	/* Shift from left-justified to right-justified */
	tempDataRaw.x >>= (UINT16_LEN-numBits);
 80008d6:	8abb      	ldrh	r3, [r7, #20]
 80008d8:	4619      	mov	r1, r3
 80008da:	7fba      	ldrb	r2, [r7, #30]
 80008dc:	7ffb      	ldrb	r3, [r7, #31]
 80008de:	1ad3      	subs	r3, r2, r3
 80008e0:	fa41 f303 	asr.w	r3, r1, r3
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	82bb      	strh	r3, [r7, #20]
	/* Need to handle negative number */
	if((tempDataRaw.x  & ( 0x0001<<(numBits-1) )) ==  0x0001<<(numBits-1)  )
 80008e8:	8abb      	ldrh	r3, [r7, #20]
 80008ea:	4619      	mov	r1, r3
 80008ec:	7ffb      	ldrb	r3, [r7, #31]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	2201      	movs	r2, #1
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	ea01 0203 	and.w	r2, r1, r3
 80008fa:	7ffb      	ldrb	r3, [r7, #31]
 80008fc:	3b01      	subs	r3, #1
 80008fe:	2101      	movs	r1, #1
 8000900:	fa01 f303 	lsl.w	r3, r1, r3
 8000904:	429a      	cmp	r2, r3
 8000906:	d115      	bne.n	8000934 <LIS3DH_GetDataRaw+0xc8>
	{
			tempDataRaw.x  = ~tempDataRaw.x ;            //invert bits
 8000908:	8abb      	ldrh	r3, [r7, #20]
 800090a:	43db      	mvns	r3, r3
 800090c:	b29b      	uxth	r3, r3
 800090e:	82bb      	strh	r3, [r7, #20]
			tempDataRaw.x  &= ( 0xFFFF>>(16-numBits) );  //but keep just the numBits
 8000910:	8abb      	ldrh	r3, [r7, #20]
 8000912:	b21a      	sxth	r2, r3
 8000914:	7ffb      	ldrb	r3, [r7, #31]
 8000916:	f1c3 0310 	rsb	r3, r3, #16
 800091a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800091e:	fa41 f303 	asr.w	r3, r1, r3
 8000922:	b21b      	sxth	r3, r3
 8000924:	4013      	ands	r3, r2
 8000926:	b21b      	sxth	r3, r3
 8000928:	b29b      	uxth	r3, r3
 800092a:	82bb      	strh	r3, [r7, #20]
			tempDataRaw.x  = ~tempDataRaw.x ;            //invert bits
 800092c:	8abb      	ldrh	r3, [r7, #20]
 800092e:	43db      	mvns	r3, r3
 8000930:	b29b      	uxth	r3, r3
 8000932:	82bb      	strh	r3, [r7, #20]
    }

	//Read Y data
	LIS3DH_ReadIO(acc, OUT_Y_L, spiBuf, 2);
 8000934:	2302      	movs	r3, #2
 8000936:	9301      	str	r3, [sp, #4]
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	9300      	str	r3, [sp, #0]
 800093e:	232a      	movs	r3, #42	; 0x2a
 8000940:	463a      	mov	r2, r7
 8000942:	ca07      	ldmia	r2, {r0, r1, r2}
 8000944:	f7ff fe05 	bl	8000552 <LIS3DH_ReadIO>
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 8000948:	7f7b      	ldrb	r3, [r7, #29]
 800094a:	b29b      	uxth	r3, r3
 800094c:	021b      	lsls	r3, r3, #8
 800094e:	b29a      	uxth	r2, r3
 8000950:	7f3b      	ldrb	r3, [r7, #28]
 8000952:	b29b      	uxth	r3, r3
 8000954:	4413      	add	r3, r2
 8000956:	b29b      	uxth	r3, r3
 8000958:	82fb      	strh	r3, [r7, #22]
	tempDataRaw.y >>= (UINT16_LEN-numBits); //Shift from left-justified to right-justified
 800095a:	8afb      	ldrh	r3, [r7, #22]
 800095c:	4619      	mov	r1, r3
 800095e:	7fba      	ldrb	r2, [r7, #30]
 8000960:	7ffb      	ldrb	r3, [r7, #31]
 8000962:	1ad3      	subs	r3, r2, r3
 8000964:	fa41 f303 	asr.w	r3, r1, r3
 8000968:	b29b      	uxth	r3, r3
 800096a:	82fb      	strh	r3, [r7, #22]
	if((tempDataRaw.y  & ( 0x0001<<(numBits-1) )) ==  0x0001<<(numBits-1)  ) //Need to handle negative number
 800096c:	8afb      	ldrh	r3, [r7, #22]
 800096e:	4619      	mov	r1, r3
 8000970:	7ffb      	ldrb	r3, [r7, #31]
 8000972:	3b01      	subs	r3, #1
 8000974:	2201      	movs	r2, #1
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	ea01 0203 	and.w	r2, r1, r3
 800097e:	7ffb      	ldrb	r3, [r7, #31]
 8000980:	3b01      	subs	r3, #1
 8000982:	2101      	movs	r1, #1
 8000984:	fa01 f303 	lsl.w	r3, r1, r3
 8000988:	429a      	cmp	r2, r3
 800098a:	d115      	bne.n	80009b8 <LIS3DH_GetDataRaw+0x14c>
	{
		tempDataRaw.y  = ~tempDataRaw.x ;            //invert bits
 800098c:	8abb      	ldrh	r3, [r7, #20]
 800098e:	43db      	mvns	r3, r3
 8000990:	b29b      	uxth	r3, r3
 8000992:	82fb      	strh	r3, [r7, #22]
		tempDataRaw.y  &= ( 0xFFFF>>(16-numBits) );  //but keep just the 10-bits
 8000994:	8afb      	ldrh	r3, [r7, #22]
 8000996:	b21a      	sxth	r2, r3
 8000998:	7ffb      	ldrb	r3, [r7, #31]
 800099a:	f1c3 0310 	rsb	r3, r3, #16
 800099e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80009a2:	fa41 f303 	asr.w	r3, r1, r3
 80009a6:	b21b      	sxth	r3, r3
 80009a8:	4013      	ands	r3, r2
 80009aa:	b21b      	sxth	r3, r3
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	82fb      	strh	r3, [r7, #22]
		tempDataRaw.y  = ~tempDataRaw.x ;            //invert bits
 80009b0:	8abb      	ldrh	r3, [r7, #20]
 80009b2:	43db      	mvns	r3, r3
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	82fb      	strh	r3, [r7, #22]
	}
	
	//Read Z data
	LIS3DH_ReadIO(acc, OUT_Z_L, spiBuf, 2);
 80009b8:	2302      	movs	r3, #2
 80009ba:	9301      	str	r3, [sp, #4]
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	232c      	movs	r3, #44	; 0x2c
 80009c4:	463a      	mov	r2, r7
 80009c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80009c8:	f7ff fdc3 	bl	8000552 <LIS3DH_ReadIO>
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 80009cc:	7f7b      	ldrb	r3, [r7, #29]
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	021b      	lsls	r3, r3, #8
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	7f3b      	ldrb	r3, [r7, #28]
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	4413      	add	r3, r2
 80009da:	b29b      	uxth	r3, r3
 80009dc:	833b      	strh	r3, [r7, #24]
	tempDataRaw.z >>= (UINT16_LEN-numBits); //Shift from left-justified to right-justified
 80009de:	8b3b      	ldrh	r3, [r7, #24]
 80009e0:	4619      	mov	r1, r3
 80009e2:	7fba      	ldrb	r2, [r7, #30]
 80009e4:	7ffb      	ldrb	r3, [r7, #31]
 80009e6:	1ad3      	subs	r3, r2, r3
 80009e8:	fa41 f303 	asr.w	r3, r1, r3
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	833b      	strh	r3, [r7, #24]
	if((tempDataRaw.z  & ( 0x0001<<(numBits-1) )) ==  0x0001<<(numBits-1)  ) //Need to handle negative number
 80009f0:	8b3b      	ldrh	r3, [r7, #24]
 80009f2:	4619      	mov	r1, r3
 80009f4:	7ffb      	ldrb	r3, [r7, #31]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	2201      	movs	r2, #1
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	ea01 0203 	and.w	r2, r1, r3
 8000a02:	7ffb      	ldrb	r3, [r7, #31]
 8000a04:	3b01      	subs	r3, #1
 8000a06:	2101      	movs	r1, #1
 8000a08:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d115      	bne.n	8000a3c <LIS3DH_GetDataRaw+0x1d0>
	{
		tempDataRaw.z  = ~tempDataRaw.x ;            //invert bits
 8000a10:	8abb      	ldrh	r3, [r7, #20]
 8000a12:	43db      	mvns	r3, r3
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	833b      	strh	r3, [r7, #24]
		tempDataRaw.z  &= ( 0xFFFF>>(16-numBits) );  //but keep just the 10-bits
 8000a18:	8b3b      	ldrh	r3, [r7, #24]
 8000a1a:	b21a      	sxth	r2, r3
 8000a1c:	7ffb      	ldrb	r3, [r7, #31]
 8000a1e:	f1c3 0310 	rsb	r3, r3, #16
 8000a22:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a26:	fa41 f303 	asr.w	r3, r1, r3
 8000a2a:	b21b      	sxth	r3, r3
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	b21b      	sxth	r3, r3
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	833b      	strh	r3, [r7, #24]
		tempDataRaw.z  = ~tempDataRaw.x ;            //invert bits
 8000a34:	8abb      	ldrh	r3, [r7, #20]
 8000a36:	43db      	mvns	r3, r3
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	833b      	strh	r3, [r7, #24]
	}
	
	return tempDataRaw;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	6818      	ldr	r0, [r3, #0]
 8000a46:	6010      	str	r0, [r2, #0]
 8000a48:	889b      	ldrh	r3, [r3, #4]
 8000a4a:	8093      	strh	r3, [r2, #4]
	
}
 8000a4c:	68f8      	ldr	r0, [r7, #12]
 8000a4e:	3720      	adds	r7, #32
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <begin>:
#include <stdlib.h>     /* abs */

float temperature;
//uint16_t IR, RED;

void begin(void){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0

	  uint8_t temp = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	717b      	strb	r3, [r7, #5]
	  uint8_t mode = 0x03; // [0,7]
 8000a5e:	2303      	movs	r3, #3
 8000a60:	73fb      	strb	r3, [r7, #15]
	  bool temperature = false;
 8000a62:	2300      	movs	r3, #0
 8000a64:	73bb      	strb	r3, [r7, #14]
	  bool spo2_hs = true;
 8000a66:	2301      	movs	r3, #1
 8000a68:	737b      	strb	r3, [r7, #13]
	  uint8_t spo2_sr = 1; // [0,7]
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	733b      	strb	r3, [r7, #12]
	  uint8_t pulse_width = 0; // [0,3]
 8000a6e:	2300      	movs	r3, #0
 8000a70:	72fb      	strb	r3, [r7, #11]
	  uint8_t red_level = 0x0A; // 0b00001111; // [0,15]
 8000a72:	230a      	movs	r3, #10
 8000a74:	72bb      	strb	r3, [r7, #10]
	  uint8_t ir_level = 0x0A; // [0,15]
 8000a76:	230a      	movs	r3, #10
 8000a78:	727b      	strb	r3, [r7, #9]
	  uint8_t hr_ready_int = false;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	723b      	strb	r3, [r7, #8]
	  uint8_t spo2_ready_int = false;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	71fb      	strb	r3, [r7, #7]
	  uint8_t temp_ready_int = false;
 8000a82:	2300      	movs	r3, #0
 8000a84:	71bb      	strb	r3, [r7, #6]


	  //Reset
	  read_byte( MAX30100_MODE_CONFIG, &temp );
 8000a86:	1d7b      	adds	r3, r7, #5
 8000a88:	4619      	mov	r1, r3
 8000a8a:	2006      	movs	r0, #6
 8000a8c:	f000 f976 	bl	8000d7c <read_byte>

	  temp |= (1<<6);
 8000a90:	797b      	ldrb	r3, [r7, #5]
 8000a92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_MODE_CONFIG, temp);
 8000a9a:	797b      	ldrb	r3, [r7, #5]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	2006      	movs	r0, #6
 8000aa0:	f000 f950 	bl	8000d44 <write_byte>

	  //Wait for the end of reset state/process
	  do
	  {
		read_byte(MAX30100_MODE_CONFIG, &temp);
 8000aa4:	1d7b      	adds	r3, r7, #5
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	2006      	movs	r0, #6
 8000aaa:	f000 f967 	bl	8000d7c <read_byte>
	    temp &= (1<<6);
 8000aae:	797b      	ldrb	r3, [r7, #5]
 8000ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	717b      	strb	r3, [r7, #5]
	  }
	  while (temp != 0);
 8000ab8:	797b      	ldrb	r3, [r7, #5]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1f2      	bne.n	8000aa4 <begin+0x50>

	  //Mode Configuration
	  read_byte( MAX30100_MODE_CONFIG, &temp );
 8000abe:	1d7b      	adds	r3, r7, #5
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	2006      	movs	r0, #6
 8000ac4:	f000 f95a 	bl	8000d7c <read_byte>

	  temp |= mode;
 8000ac8:	797a      	ldrb	r2, [r7, #5]
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_MODE_CONFIG, temp);
 8000ad2:	797b      	ldrb	r3, [r7, #5]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	2006      	movs	r0, #6
 8000ad8:	f000 f934 	bl	8000d44 <write_byte>
	  temp = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_MODE_CONFIG, &temp ); //check
 8000ae0:	1d7b      	adds	r3, r7, #5
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	2006      	movs	r0, #6
 8000ae6:	f000 f949 	bl	8000d7c <read_byte>

	  //Temperature sensor activation
	  read_byte( MAX30100_MODE_CONFIG, &temp );
 8000aea:	1d7b      	adds	r3, r7, #5
 8000aec:	4619      	mov	r1, r3
 8000aee:	2006      	movs	r0, #6
 8000af0:	f000 f944 	bl	8000d7c <read_byte>

	  if ( temperature == true )
 8000af4:	7bbb      	ldrb	r3, [r7, #14]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d005      	beq.n	8000b06 <begin+0xb2>
	    temp |= (1<<3);
 8000afa:	797b      	ldrb	r3, [r7, #5]
 8000afc:	f043 0308 	orr.w	r3, r3, #8
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	717b      	strb	r3, [r7, #5]
 8000b04:	e004      	b.n	8000b10 <begin+0xbc>
	  else
	    temp &= ~(1<<3);
 8000b06:	797b      	ldrb	r3, [r7, #5]
 8000b08:	f023 0308 	bic.w	r3, r3, #8
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	717b      	strb	r3, [r7, #5]

	  write_byte(MAX30100_MODE_CONFIG, temp);
 8000b10:	797b      	ldrb	r3, [r7, #5]
 8000b12:	4619      	mov	r1, r3
 8000b14:	2006      	movs	r0, #6
 8000b16:	f000 f915 	bl	8000d44 <write_byte>
	  temp = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_MODE_CONFIG, &temp ); //check
 8000b1e:	1d7b      	adds	r3, r7, #5
 8000b20:	4619      	mov	r1, r3
 8000b22:	2006      	movs	r0, #6
 8000b24:	f000 f92a 	bl	8000d7c <read_byte>

	  //SPO2 high resolution activation
	  read_byte( MAX30100_SPO2_CONFIG, &temp );
 8000b28:	1d7b      	adds	r3, r7, #5
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	2007      	movs	r0, #7
 8000b2e:	f000 f925 	bl	8000d7c <read_byte>

	  if (spo2_hs == true)
 8000b32:	7b7b      	ldrb	r3, [r7, #13]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d005      	beq.n	8000b44 <begin+0xf0>
	    temp |= (1<<6);
 8000b38:	797b      	ldrb	r3, [r7, #5]
 8000b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	717b      	strb	r3, [r7, #5]
 8000b42:	e004      	b.n	8000b4e <begin+0xfa>

	  else
	    temp &= ~(1<<6);
 8000b44:	797b      	ldrb	r3, [r7, #5]
 8000b46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_SPO2_CONFIG, temp);
 8000b4e:	797b      	ldrb	r3, [r7, #5]
 8000b50:	4619      	mov	r1, r3
 8000b52:	2007      	movs	r0, #7
 8000b54:	f000 f8f6 	bl	8000d44 <write_byte>

	  //SPO2 sample rate configuration
	  read_byte( MAX30100_SPO2_CONFIG, &temp );
 8000b58:	1d7b      	adds	r3, r7, #5
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	2007      	movs	r0, #7
 8000b5e:	f000 f90d 	bl	8000d7c <read_byte>
	  temp |= (spo2_sr << 2);
 8000b62:	7b3b      	ldrb	r3, [r7, #12]
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	b25a      	sxtb	r2, r3
 8000b68:	797b      	ldrb	r3, [r7, #5]
 8000b6a:	b25b      	sxtb	r3, r3
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	b25b      	sxtb	r3, r3
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	717b      	strb	r3, [r7, #5]

	  write_byte( MAX30100_SPO2_CONFIG, temp );
 8000b74:	797b      	ldrb	r3, [r7, #5]
 8000b76:	4619      	mov	r1, r3
 8000b78:	2007      	movs	r0, #7
 8000b7a:	f000 f8e3 	bl	8000d44 <write_byte>
	  temp = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_SPO2_CONFIG, &temp ); //check
 8000b82:	1d7b      	adds	r3, r7, #5
 8000b84:	4619      	mov	r1, r3
 8000b86:	2007      	movs	r0, #7
 8000b88:	f000 f8f8 	bl	8000d7c <read_byte>

	  //LED pulse width configuration
	  read_byte( MAX30100_SPO2_CONFIG, &temp );
 8000b8c:	1d7b      	adds	r3, r7, #5
 8000b8e:	4619      	mov	r1, r3
 8000b90:	2007      	movs	r0, #7
 8000b92:	f000 f8f3 	bl	8000d7c <read_byte>

	  temp |= pulse_width;
 8000b96:	797a      	ldrb	r2, [r7, #5]
 8000b98:	7afb      	ldrb	r3, [r7, #11]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_SPO2_CONFIG, temp);
 8000ba0:	797b      	ldrb	r3, [r7, #5]
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	2007      	movs	r0, #7
 8000ba6:	f000 f8cd 	bl	8000d44 <write_byte>
	  temp = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_SPO2_CONFIG, &temp ); //check
 8000bae:	1d7b      	adds	r3, r7, #5
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	2007      	movs	r0, #7
 8000bb4:	f000 f8e2 	bl	8000d7c <read_byte>

	  //LED red current level
	  read_byte( MAX30100_LED_CONFIG, &temp );
 8000bb8:	1d7b      	adds	r3, r7, #5
 8000bba:	4619      	mov	r1, r3
 8000bbc:	2009      	movs	r0, #9
 8000bbe:	f000 f8dd 	bl	8000d7c <read_byte>

	  temp |= (red_level << 4);
 8000bc2:	7abb      	ldrb	r3, [r7, #10]
 8000bc4:	011b      	lsls	r3, r3, #4
 8000bc6:	b25a      	sxtb	r2, r3
 8000bc8:	797b      	ldrb	r3, [r7, #5]
 8000bca:	b25b      	sxtb	r3, r3
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	b25b      	sxtb	r3, r3
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_LED_CONFIG, temp);
 8000bd4:	797b      	ldrb	r3, [r7, #5]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	2009      	movs	r0, #9
 8000bda:	f000 f8b3 	bl	8000d44 <write_byte>
	  temp = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_LED_CONFIG, &temp ); //check
 8000be2:	1d7b      	adds	r3, r7, #5
 8000be4:	4619      	mov	r1, r3
 8000be6:	2009      	movs	r0, #9
 8000be8:	f000 f8c8 	bl	8000d7c <read_byte>

	  //LED ir current level
	  read_byte( MAX30100_LED_CONFIG, &temp );
 8000bec:	1d7b      	adds	r3, r7, #5
 8000bee:	4619      	mov	r1, r3
 8000bf0:	2009      	movs	r0, #9
 8000bf2:	f000 f8c3 	bl	8000d7c <read_byte>

	  temp |= ir_level;
 8000bf6:	797a      	ldrb	r2, [r7, #5]
 8000bf8:	7a7b      	ldrb	r3, [r7, #9]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_LED_CONFIG, temp);
 8000c00:	797b      	ldrb	r3, [r7, #5]
 8000c02:	4619      	mov	r1, r3
 8000c04:	2009      	movs	r0, #9
 8000c06:	f000 f89d 	bl	8000d44 <write_byte>
	  temp = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_LED_CONFIG, &temp ); //check
 8000c0e:	1d7b      	adds	r3, r7, #5
 8000c10:	4619      	mov	r1, r3
 8000c12:	2009      	movs	r0, #9
 8000c14:	f000 f8b2 	bl	8000d7c <read_byte>

	  //Heart rate data ready interruption
	  read_byte( MAX30100_INT_ENABLE, &temp );
 8000c18:	1d7b      	adds	r3, r7, #5
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f000 f8ad 	bl	8000d7c <read_byte>
	  if (hr_ready_int == true)
 8000c22:	7a3b      	ldrb	r3, [r7, #8]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d105      	bne.n	8000c34 <begin+0x1e0>
	    temp |= (1<<5);
 8000c28:	797b      	ldrb	r3, [r7, #5]
 8000c2a:	f043 0320 	orr.w	r3, r3, #32
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	717b      	strb	r3, [r7, #5]
 8000c32:	e004      	b.n	8000c3e <begin+0x1ea>
	  else
	    temp &= ~(1<<5);
 8000c34:	797b      	ldrb	r3, [r7, #5]
 8000c36:	f023 0320 	bic.w	r3, r3, #32
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	717b      	strb	r3, [r7, #5]

	  write_byte(MAX30100_INT_ENABLE, temp);
 8000c3e:	797b      	ldrb	r3, [r7, #5]
 8000c40:	4619      	mov	r1, r3
 8000c42:	2001      	movs	r0, #1
 8000c44:	f000 f87e 	bl	8000d44 <write_byte>
	  temp = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_INT_ENABLE, &temp ); //check
 8000c4c:	1d7b      	adds	r3, r7, #5
 8000c4e:	4619      	mov	r1, r3
 8000c50:	2001      	movs	r0, #1
 8000c52:	f000 f893 	bl	8000d7c <read_byte>

	  //SPO2 data ready interruption
	  read_byte( MAX30100_INT_ENABLE, &temp );
 8000c56:	1d7b      	adds	r3, r7, #5
 8000c58:	4619      	mov	r1, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	f000 f88e 	bl	8000d7c <read_byte>
	  if (spo2_ready_int == true)
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d105      	bne.n	8000c72 <begin+0x21e>
	    temp |= (1<<4);
 8000c66:	797b      	ldrb	r3, [r7, #5]
 8000c68:	f043 0310 	orr.w	r3, r3, #16
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	717b      	strb	r3, [r7, #5]
 8000c70:	e004      	b.n	8000c7c <begin+0x228>
	  else
	    temp &= ~(1<<4);
 8000c72:	797b      	ldrb	r3, [r7, #5]
 8000c74:	f023 0310 	bic.w	r3, r3, #16
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	717b      	strb	r3, [r7, #5]

	  write_byte(MAX30100_INT_ENABLE, temp);
 8000c7c:	797b      	ldrb	r3, [r7, #5]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	2001      	movs	r0, #1
 8000c82:	f000 f85f 	bl	8000d44 <write_byte>
	  temp = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_INT_ENABLE, &temp ); //check
 8000c8a:	1d7b      	adds	r3, r7, #5
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f000 f874 	bl	8000d7c <read_byte>

	  //Temperature data ready interruption
	  read_byte(MAX30100_INT_ENABLE, &temp );
 8000c94:	1d7b      	adds	r3, r7, #5
 8000c96:	4619      	mov	r1, r3
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f000 f86f 	bl	8000d7c <read_byte>
	  if (temp_ready_int == true)
 8000c9e:	79bb      	ldrb	r3, [r7, #6]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d105      	bne.n	8000cb0 <begin+0x25c>
	    temp |= (1<<6);
 8000ca4:	797b      	ldrb	r3, [r7, #5]
 8000ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	717b      	strb	r3, [r7, #5]
 8000cae:	e004      	b.n	8000cba <begin+0x266>
	  else
	    temp &= ~(1<<6);
 8000cb0:	797b      	ldrb	r3, [r7, #5]
 8000cb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	717b      	strb	r3, [r7, #5]

	  write_byte(MAX30100_INT_ENABLE, temp);
 8000cba:	797b      	ldrb	r3, [r7, #5]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	f000 f840 	bl	8000d44 <write_byte>
	  temp = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_INT_ENABLE, &temp ); //check
 8000cc8:	1d7b      	adds	r3, r7, #5
 8000cca:	4619      	mov	r1, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f000 f855 	bl	8000d7c <read_byte>
}
 8000cd2:	bf00      	nop
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <readFIFO>:


void readFIFO(uint16_t* RED, uint16_t* IR){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af02      	add	r7, sp, #8
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
   /* Burst read four bytes from the FIFO
    * to obtain 16-bit ADC values for IR
    * and RED reflectance.
    */
	uint8_t data[4];
   data[0] = MAX30100_FIFO_DATA;
 8000ce6:	2305      	movs	r3, #5
 8000ce8:	733b      	strb	r3, [r7, #12]
   HAL_I2C_Master_Transmit(&hi2c3, MAX30100_ADDR, data, 1, 100);
 8000cea:	f107 020c 	add.w	r2, r7, #12
 8000cee:	2364      	movs	r3, #100	; 0x64
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	21ae      	movs	r1, #174	; 0xae
 8000cf6:	4812      	ldr	r0, [pc, #72]	; (8000d40 <readFIFO+0x64>)
 8000cf8:	f004 fbf4 	bl	80054e4 <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Receive(&hi2c3, MAX30100_ADDR, data, 4, 1000); // Read four times from the FIFO
 8000cfc:	f107 020c 	add.w	r2, r7, #12
 8000d00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	2304      	movs	r3, #4
 8000d08:	21ae      	movs	r1, #174	; 0xae
 8000d0a:	480d      	ldr	r0, [pc, #52]	; (8000d40 <readFIFO+0x64>)
 8000d0c:	f004 fcde 	bl	80056cc <HAL_I2C_Master_Receive>

   // Combine bytes to get the actual number
   IR[0] = (data[0]<<8) | data[1];
 8000d10:	7b3b      	ldrb	r3, [r7, #12]
 8000d12:	021b      	lsls	r3, r3, #8
 8000d14:	b21a      	sxth	r2, r3
 8000d16:	7b7b      	ldrb	r3, [r7, #13]
 8000d18:	b21b      	sxth	r3, r3
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	b21b      	sxth	r3, r3
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	801a      	strh	r2, [r3, #0]
   RED[0] = (data[2]<<8) | data[3];
 8000d24:	7bbb      	ldrb	r3, [r7, #14]
 8000d26:	021b      	lsls	r3, r3, #8
 8000d28:	b21a      	sxth	r2, r3
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	b21b      	sxth	r3, r3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	b21b      	sxth	r3, r3
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	801a      	strh	r2, [r3, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000794 	.word	0x20000794

08000d44 <write_byte>:
   HAL_I2C_Master_Receive(&hi2c3, MAX30100_ADDR, &tempFrac, 1, 100);

   temperature  = (float) tempFrac * 0.0625 + (int8_t) tempInt;
}

void write_byte(uint8_t reg, uint8_t data){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af02      	add	r7, sp, #8
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	460a      	mov	r2, r1
 8000d4e:	71fb      	strb	r3, [r7, #7]
 8000d50:	4613      	mov	r3, r2
 8000d52:	71bb      	strb	r3, [r7, #6]
   /*  Write to the register of a device. Note the char
    *  type must be used due to the MBED i2c functions
    */
   uint8_t transfer[2] = {reg, data};
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	733b      	strb	r3, [r7, #12]
 8000d58:	79bb      	ldrb	r3, [r7, #6]
 8000d5a:	737b      	strb	r3, [r7, #13]
   HAL_I2C_Master_Transmit(&hi2c3, MAX30100_ADDR, transfer, 2, 100);
 8000d5c:	f107 020c 	add.w	r2, r7, #12
 8000d60:	2364      	movs	r3, #100	; 0x64
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	2302      	movs	r3, #2
 8000d66:	21ae      	movs	r1, #174	; 0xae
 8000d68:	4803      	ldr	r0, [pc, #12]	; (8000d78 <write_byte+0x34>)
 8000d6a:	f004 fbbb 	bl	80054e4 <HAL_I2C_Master_Transmit>
}
 8000d6e:	bf00      	nop
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000794 	.word	0x20000794

08000d7c <read_byte>:

void read_byte(uint8_t reg, uint8_t* data){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af02      	add	r7, sp, #8
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]

	   HAL_I2C_Master_Transmit(&hi2c3, MAX30100_ADDR, &reg, 1, 100);
 8000d88:	1dfa      	adds	r2, r7, #7
 8000d8a:	2364      	movs	r3, #100	; 0x64
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	2301      	movs	r3, #1
 8000d90:	21ae      	movs	r1, #174	; 0xae
 8000d92:	4807      	ldr	r0, [pc, #28]	; (8000db0 <read_byte+0x34>)
 8000d94:	f004 fba6 	bl	80054e4 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c3, MAX30100_ADDR, data, 1, 100);
 8000d98:	2364      	movs	r3, #100	; 0x64
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	683a      	ldr	r2, [r7, #0]
 8000da0:	21ae      	movs	r1, #174	; 0xae
 8000da2:	4803      	ldr	r0, [pc, #12]	; (8000db0 <read_byte+0x34>)
 8000da4:	f004 fc92 	bl	80056cc <HAL_I2C_Master_Receive>
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000794 	.word	0x20000794

08000db4 <writeByte>:
float q[4] = {1.0f, 0.0f, 0.0f, 0.0f};           // vector to hold quaternion
float eInt[3] = {0.0f, 0.0f, 0.0f};              // vector to hold integral error for Mahony method


void writeByte(accConfig acc, uint8_t reg, uint8_t data)
{
 8000db4:	b590      	push	{r4, r7, lr}
 8000db6:	b087      	sub	sp, #28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	1d3c      	adds	r4, r7, #4
 8000dbc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000dc0:	70fb      	strb	r3, [r7, #3]
	uint8_t spiReg = reg;
 8000dc2:	78fb      	ldrb	r3, [r7, #3]
 8000dc4:	75fb      	strb	r3, [r7, #23]
	//Enable CS
	HAL_GPIO_WritePin(acc.GPIOx_CS, acc.GPIO_Pin_CS, GPIO_PIN_RESET);
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	89b9      	ldrh	r1, [r7, #12]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f004 faa3 	bl	8005318 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(acc.accSPI, &spiReg, 1, 100);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f107 0117 	add.w	r1, r7, #23
 8000dd8:	2364      	movs	r3, #100	; 0x64
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f007 f910 	bl	8008000 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(acc.accSPI, &data, 1, 100);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	2364      	movs	r3, #100	; 0x64
 8000de4:	2201      	movs	r2, #1
 8000de6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000dea:	f007 f909 	bl	8008000 <HAL_SPI_Transmit>
	//Disable CS
	HAL_GPIO_WritePin(acc.GPIOx_CS, acc.GPIO_Pin_CS, GPIO_PIN_SET);
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	89b9      	ldrh	r1, [r7, #12]
 8000df2:	2201      	movs	r2, #1
 8000df4:	4618      	mov	r0, r3
 8000df6:	f004 fa8f 	bl	8005318 <HAL_GPIO_WritePin>

}
 8000dfa:	bf00      	nop
 8000dfc:	371c      	adds	r7, #28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd90      	pop	{r4, r7, pc}

08000e02 <readByte>:

void readByte(accConfig acc, uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8000e02:	b590      	push	{r4, r7, lr}
 8000e04:	b087      	sub	sp, #28
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	1d3c      	adds	r4, r7, #4
 8000e0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000e0e:	70fb      	strb	r3, [r7, #3]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8000e10:	78fb      	ldrb	r3, [r7, #3]
 8000e12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	753b      	strb	r3, [r7, #20]
	//Enable CS
	HAL_GPIO_WritePin(acc.GPIOx_CS, acc.GPIO_Pin_CS, GPIO_PIN_RESET);
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	89b9      	ldrh	r1, [r7, #12]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f004 fa79 	bl	8005318 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(acc.accSPI, spiBuf, 1, 100);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f107 0114 	add.w	r1, r7, #20
 8000e2c:	2364      	movs	r3, #100	; 0x64
 8000e2e:	2201      	movs	r2, #1
 8000e30:	f007 f8e6 	bl	8008000 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(acc.accSPI, dataR, size, 10000);
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000e40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000e42:	f007 fa4b 	bl	80082dc <HAL_SPI_Receive>
	//Disable CS
	HAL_GPIO_WritePin(acc.GPIOx_CS, acc.GPIO_Pin_CS, GPIO_PIN_SET);
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	89b9      	ldrh	r1, [r7, #12]
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f004 fa63 	bl	8005318 <HAL_GPIO_WritePin>


}
 8000e52:	bf00      	nop
 8000e54:	371c      	adds	r7, #28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd90      	pop	{r4, r7, pc}

08000e5a <readAccelData>:
  }
}


accDataRaw readAccelData(accConfig acc)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b08a      	sub	sp, #40	; 0x28
 8000e5e:	af02      	add	r7, sp, #8
 8000e60:	60f8      	str	r0, [r7, #12]
 8000e62:	4638      	mov	r0, r7
 8000e64:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint8_t rawData[6];  // x/y/z accel register data stored here
  accDataRaw data;

  readByte(acc, ACCEL_XOUT_H, &rawData[0], 6);  // Read the six raw data registers into data array
 8000e68:	2306      	movs	r3, #6
 8000e6a:	9301      	str	r3, [sp, #4]
 8000e6c:	f107 0318 	add.w	r3, r7, #24
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	233b      	movs	r3, #59	; 0x3b
 8000e74:	463a      	mov	r2, r7
 8000e76:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e78:	f7ff ffc3 	bl	8000e02 <readByte>
  data.x = (uint16_t)(((uint16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8000e7c:	7e3b      	ldrb	r3, [r7, #24]
 8000e7e:	021b      	lsls	r3, r3, #8
 8000e80:	b21a      	sxth	r2, r3
 8000e82:	7e7b      	ldrb	r3, [r7, #25]
 8000e84:	b21b      	sxth	r3, r3
 8000e86:	4313      	orrs	r3, r2
 8000e88:	b21b      	sxth	r3, r3
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	823b      	strh	r3, [r7, #16]
  data.y = (uint16_t)(((uint16_t)rawData[2] << 8) | rawData[3]) ;
 8000e8e:	7ebb      	ldrb	r3, [r7, #26]
 8000e90:	021b      	lsls	r3, r3, #8
 8000e92:	b21a      	sxth	r2, r3
 8000e94:	7efb      	ldrb	r3, [r7, #27]
 8000e96:	b21b      	sxth	r3, r3
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	b21b      	sxth	r3, r3
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	827b      	strh	r3, [r7, #18]
  data.z = (uint16_t)(((uint16_t)rawData[4] << 8) | rawData[5]) ;
 8000ea0:	7f3b      	ldrb	r3, [r7, #28]
 8000ea2:	021b      	lsls	r3, r3, #8
 8000ea4:	b21a      	sxth	r2, r3
 8000ea6:	7f7b      	ldrb	r3, [r7, #29]
 8000ea8:	b21b      	sxth	r3, r3
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	b21b      	sxth	r3, r3
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	82bb      	strh	r3, [r7, #20]

  return data;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	f107 0310 	add.w	r3, r7, #16
 8000eba:	6818      	ldr	r0, [r3, #0]
 8000ebc:	6010      	str	r0, [r2, #0]
 8000ebe:	889b      	ldrh	r3, [r3, #4]
 8000ec0:	8093      	strh	r3, [r2, #4]
}
 8000ec2:	68f8      	ldr	r0, [r7, #12]
 8000ec4:	3720      	adds	r7, #32
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <initMPU9250>:
	writeByte(acc, I2C_SLV0_CTRL, 0x81);
}


void initMPU9250(accConfig acc)
{  
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t c;

	// Initialize MPU9250 device
  // wake up device
  writeByte(acc, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 8000ed8:	2300      	movs	r3, #0
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	236b      	movs	r3, #107	; 0x6b
 8000ede:	1d3a      	adds	r2, r7, #4
 8000ee0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ee2:	f7ff ff67 	bl	8000db4 <writeByte>
  readByte(acc, PWR_MGMT_1, &c, 1);
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	9301      	str	r3, [sp, #4]
 8000eea:	f107 0317 	add.w	r3, r7, #23
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	236b      	movs	r3, #107	; 0x6b
 8000ef2:	1d3a      	adds	r2, r7, #4
 8000ef4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ef6:	f7ff ff84 	bl	8000e02 <readByte>
  HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 8000efa:	2064      	movs	r0, #100	; 0x64
 8000efc:	f002 fe4a 	bl	8003b94 <HAL_Delay>

  // get stable time source
  writeByte(acc, PWR_MGMT_1, 0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8000f00:	2301      	movs	r3, #1
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	236b      	movs	r3, #107	; 0x6b
 8000f06:	1d3a      	adds	r2, r7, #4
 8000f08:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f0a:	f7ff ff53 	bl	8000db4 <writeByte>
  readByte(acc, PWR_MGMT_1, &c, 1);
 8000f0e:	2301      	movs	r3, #1
 8000f10:	9301      	str	r3, [sp, #4]
 8000f12:	f107 0317 	add.w	r3, r7, #23
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	236b      	movs	r3, #107	; 0x6b
 8000f1a:	1d3a      	adds	r2, r7, #4
 8000f1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f1e:	f7ff ff70 	bl	8000e02 <readByte>
  // Configure Gyro and Accelerometer
  // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively; 
  // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
  // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
  writeByte(acc, CONFIG, 0x03);
 8000f22:	2303      	movs	r3, #3
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	231a      	movs	r3, #26
 8000f28:	1d3a      	adds	r2, r7, #4
 8000f2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f2c:	f7ff ff42 	bl	8000db4 <writeByte>
  readByte(acc, CONFIG, &c, 1);
 8000f30:	2301      	movs	r3, #1
 8000f32:	9301      	str	r3, [sp, #4]
 8000f34:	f107 0317 	add.w	r3, r7, #23
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	231a      	movs	r3, #26
 8000f3c:	1d3a      	adds	r2, r7, #4
 8000f3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f40:	f7ff ff5f 	bl	8000e02 <readByte>
  // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  writeByte(acc, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 8000f44:	2304      	movs	r3, #4
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	2319      	movs	r3, #25
 8000f4a:	1d3a      	adds	r2, r7, #4
 8000f4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f4e:	f7ff ff31 	bl	8000db4 <writeByte>
  readByte(acc, SMPLRT_DIV, &c, 1);
 8000f52:	2301      	movs	r3, #1
 8000f54:	9301      	str	r3, [sp, #4]
 8000f56:	f107 0317 	add.w	r3, r7, #23
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2319      	movs	r3, #25
 8000f5e:	1d3a      	adds	r2, r7, #4
 8000f60:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f62:	f7ff ff4e 	bl	8000e02 <readByte>
  //writeByte(GYRO_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
  //writeByte(GYRO_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
  //writeByte(GYRO_CONFIG, c | Gscale << 3); // Set full scale range for the gyro

  // Set accelerometer configuration
  readByte(acc, ACCEL_CONFIG, &c, 1);
 8000f66:	2301      	movs	r3, #1
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	f107 0317 	add.w	r3, r7, #23
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	231c      	movs	r3, #28
 8000f72:	1d3a      	adds	r2, r7, #4
 8000f74:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f76:	f7ff ff44 	bl	8000e02 <readByte>
  writeByte(acc, ACCEL_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 8000f7a:	7dfb      	ldrb	r3, [r7, #23]
 8000f7c:	f003 031f 	and.w	r3, r3, #31
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	231c      	movs	r3, #28
 8000f86:	1d3a      	adds	r2, r7, #4
 8000f88:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f8a:	f7ff ff13 	bl	8000db4 <writeByte>
  writeByte(acc, ACCEL_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 8000f8e:	7dfb      	ldrb	r3, [r7, #23]
 8000f90:	f023 0318 	bic.w	r3, r3, #24
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	231c      	movs	r3, #28
 8000f9a:	1d3a      	adds	r2, r7, #4
 8000f9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f9e:	f7ff ff09 	bl	8000db4 <writeByte>
  writeByte(acc, ACCEL_CONFIG, c | Ascale << 3); // Set full scale range for the accelerometer
 8000fa2:	4b42      	ldr	r3, [pc, #264]	; (80010ac <initMPU9250+0x1e0>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	b25a      	sxtb	r2, r3
 8000faa:	7dfb      	ldrb	r3, [r7, #23]
 8000fac:	b25b      	sxtb	r3, r3
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	b25b      	sxtb	r3, r3
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	231c      	movs	r3, #28
 8000fb8:	1d3a      	adds	r2, r7, #4
 8000fba:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fbc:	f7ff fefa 	bl	8000db4 <writeByte>
  readByte(acc, ACCEL_CONFIG, &c, 1);
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	9301      	str	r3, [sp, #4]
 8000fc4:	f107 0317 	add.w	r3, r7, #23
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	231c      	movs	r3, #28
 8000fcc:	1d3a      	adds	r2, r7, #4
 8000fce:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fd0:	f7ff ff17 	bl	8000e02 <readByte>
  // Set accelerometer sample rate configuration
  // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
  // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  readByte(acc, ACCEL_CONFIG2, &c, 1);
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	9301      	str	r3, [sp, #4]
 8000fd8:	f107 0317 	add.w	r3, r7, #23
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	231d      	movs	r3, #29
 8000fe0:	1d3a      	adds	r2, r7, #4
 8000fe2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fe4:	f7ff ff0d 	bl	8000e02 <readByte>
  writeByte(acc, ACCEL_CONFIG2, c & ~0x0F); // Clear accel_fchoice_b (bit 3) and A_DLPFG (b	its [2:0])
 8000fe8:	7dfb      	ldrb	r3, [r7, #23]
 8000fea:	f023 030f 	bic.w	r3, r3, #15
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	231d      	movs	r3, #29
 8000ff4:	1d3a      	adds	r2, r7, #4
 8000ff6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ff8:	f7ff fedc 	bl	8000db4 <writeByte>
  writeByte(acc, ACCEL_CONFIG2, c | 0x06); // Set accelerometer rate to 1 kHz and bandwidth to 21 Hz
 8000ffc:	7dfb      	ldrb	r3, [r7, #23]
 8000ffe:	f043 0306 	orr.w	r3, r3, #6
 8001002:	b2db      	uxtb	r3, r3
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	231d      	movs	r3, #29
 8001008:	1d3a      	adds	r2, r7, #4
 800100a:	ca07      	ldmia	r2, {r0, r1, r2}
 800100c:	f7ff fed2 	bl	8000db4 <writeByte>
  readByte(acc, ACCEL_CONFIG2, &c, 1);
 8001010:	2301      	movs	r3, #1
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	f107 0317 	add.w	r3, r7, #23
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	231d      	movs	r3, #29
 800101c:	1d3a      	adds	r2, r7, #4
 800101e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001020:	f7ff feef 	bl	8000e02 <readByte>
  // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips 
  // can join the I2C bus and all can be controlled by the Arduino as master
  writeByte(acc, INT_PIN_CFG, 0x22);
 8001024:	2322      	movs	r3, #34	; 0x22
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2337      	movs	r3, #55	; 0x37
 800102a:	1d3a      	adds	r2, r7, #4
 800102c:	ca07      	ldmia	r2, {r0, r1, r2}
 800102e:	f7ff fec1 	bl	8000db4 <writeByte>
  writeByte(acc, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 8001032:	2301      	movs	r3, #1
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2338      	movs	r3, #56	; 0x38
 8001038:	1d3a      	adds	r2, r7, #4
 800103a:	ca07      	ldmia	r2, {r0, r1, r2}
 800103c:	f7ff feba 	bl	8000db4 <writeByte>

  // Power off gyro
  readByte(acc, PWR_MGMT_2, &c, 1);
 8001040:	2301      	movs	r3, #1
 8001042:	9301      	str	r3, [sp, #4]
 8001044:	f107 0317 	add.w	r3, r7, #23
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	236c      	movs	r3, #108	; 0x6c
 800104c:	1d3a      	adds	r2, r7, #4
 800104e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001050:	f7ff fed7 	bl	8000e02 <readByte>
  c |= 0x07;
 8001054:	7dfb      	ldrb	r3, [r7, #23]
 8001056:	f043 0307 	orr.w	r3, r3, #7
 800105a:	b2db      	uxtb	r3, r3
 800105c:	75fb      	strb	r3, [r7, #23]
  c &= 0xC7;
 800105e:	7dfb      	ldrb	r3, [r7, #23]
 8001060:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001064:	b2db      	uxtb	r3, r3
 8001066:	75fb      	strb	r3, [r7, #23]
  writeByte(acc, PWR_MGMT_2, c); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8001068:	7dfb      	ldrb	r3, [r7, #23]
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	236c      	movs	r3, #108	; 0x6c
 800106e:	1d3a      	adds	r2, r7, #4
 8001070:	ca07      	ldmia	r2, {r0, r1, r2}
 8001072:	f7ff fe9f 	bl	8000db4 <writeByte>

  //Power off temperature
  readByte(acc, PWR_MGMT_1, &c, 1);
 8001076:	2301      	movs	r3, #1
 8001078:	9301      	str	r3, [sp, #4]
 800107a:	f107 0317 	add.w	r3, r7, #23
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	236b      	movs	r3, #107	; 0x6b
 8001082:	1d3a      	adds	r2, r7, #4
 8001084:	ca07      	ldmia	r2, {r0, r1, r2}
 8001086:	f7ff febc 	bl	8000e02 <readByte>
  c |= 0x08;
 800108a:	7dfb      	ldrb	r3, [r7, #23]
 800108c:	f043 0308 	orr.w	r3, r3, #8
 8001090:	b2db      	uxtb	r3, r3
 8001092:	75fb      	strb	r3, [r7, #23]
  writeByte(acc, PWR_MGMT_1, c); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8001094:	7dfb      	ldrb	r3, [r7, #23]
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	236b      	movs	r3, #107	; 0x6b
 800109a:	1d3a      	adds	r2, r7, #4
 800109c:	ca07      	ldmia	r2, {r0, r1, r2}
 800109e:	f7ff fe89 	bl	8000db4 <writeByte>

}
 80010a2:	bf00      	nop
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000250 	.word	0x20000250

080010b0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80010c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4013      	ands	r3, r2
 80010d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010d4:	68fb      	ldr	r3, [r7, #12]
}
 80010d6:	bf00      	nop
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80010ea:	463b      	mov	r3, r7
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
 80010f8:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010fa:	4b29      	ldr	r3, [pc, #164]	; (80011a0 <MX_ADC1_Init+0xbc>)
 80010fc:	4a29      	ldr	r2, [pc, #164]	; (80011a4 <MX_ADC1_Init+0xc0>)
 80010fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001100:	4b27      	ldr	r3, [pc, #156]	; (80011a0 <MX_ADC1_Init+0xbc>)
 8001102:	2200      	movs	r2, #0
 8001104:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001106:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <MX_ADC1_Init+0xbc>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800110c:	4b24      	ldr	r3, [pc, #144]	; (80011a0 <MX_ADC1_Init+0xbc>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001112:	4b23      	ldr	r3, [pc, #140]	; (80011a0 <MX_ADC1_Init+0xbc>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001118:	4b21      	ldr	r3, [pc, #132]	; (80011a0 <MX_ADC1_Init+0xbc>)
 800111a:	2204      	movs	r2, #4
 800111c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800111e:	4b20      	ldr	r3, [pc, #128]	; (80011a0 <MX_ADC1_Init+0xbc>)
 8001120:	2200      	movs	r2, #0
 8001122:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001124:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <MX_ADC1_Init+0xbc>)
 8001126:	2200      	movs	r2, #0
 8001128:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800112a:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <MX_ADC1_Init+0xbc>)
 800112c:	2201      	movs	r2, #1
 800112e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <MX_ADC1_Init+0xbc>)
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001138:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <MX_ADC1_Init+0xbc>)
 800113a:	2200      	movs	r2, #0
 800113c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800113e:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <MX_ADC1_Init+0xbc>)
 8001140:	2200      	movs	r2, #0
 8001142:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001144:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <MX_ADC1_Init+0xbc>)
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <MX_ADC1_Init+0xbc>)
 800114e:	2200      	movs	r2, #0
 8001150:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <MX_ADC1_Init+0xbc>)
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800115a:	4811      	ldr	r0, [pc, #68]	; (80011a0 <MX_ADC1_Init+0xbc>)
 800115c:	f002 ff2a 	bl	8003fb4 <HAL_ADC_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001166:	f001 ff6b 	bl	8003040 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <MX_ADC1_Init+0xc4>)
 800116c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800116e:	2306      	movs	r3, #6
 8001170:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001176:	237f      	movs	r3, #127	; 0x7f
 8001178:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800117a:	2304      	movs	r3, #4
 800117c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001182:	463b      	mov	r3, r7
 8001184:	4619      	mov	r1, r3
 8001186:	4806      	ldr	r0, [pc, #24]	; (80011a0 <MX_ADC1_Init+0xbc>)
 8001188:	f003 f942 	bl	8004410 <HAL_ADC_ConfigChannel>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001192:	f001 ff55 	bl	8003040 <Error_Handler>
  }

}
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000730 	.word	0x20000730
 80011a4:	50040000 	.word	0x50040000
 80011a8:	1d500080 	.word	0x1d500080

080011ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a0d      	ldr	r2, [pc, #52]	; (8001200 <HAL_ADC_MspInit+0x54>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d113      	bne.n	80011f6 <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011ce:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011d2:	f7ff ff6d 	bl	80010b0 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	2001      	movs	r0, #1
 80011d8:	f7ff ff6a 	bl	80010b0 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011dc:	2304      	movs	r3, #4
 80011de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e0:	2303      	movs	r3, #3
 80011e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	4619      	mov	r1, r3
 80011ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f2:	f003 ff21 	bl	8005038 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011f6:	bf00      	nop
 80011f8:	3720      	adds	r7, #32
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	50040000 	.word	0x50040000

08001204 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8001204:	b5b0      	push	{r4, r5, r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <APPD_EnableCPU2+0x34>)
 800120c:	1d3c      	adds	r4, r7, #4
 800120e:	461d      	mov	r5, r3
 8001210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001214:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001218:	c403      	stmia	r4!, {r0, r1}
 800121a:	8022      	strh	r2, [r4, #0]
 800121c:	3402      	adds	r4, #2
 800121e:	0c13      	lsrs	r3, r2, #16
 8001220:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8001222:	f00a fce7 	bl	800bbf4 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	4618      	mov	r0, r3
 800122a:	f00a f802 	bl	800b232 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800122e:	bf00      	nop
}
 8001230:	3720      	adds	r7, #32
 8001232:	46bd      	mov	sp, r7
 8001234:	bdb0      	pop	{r4, r5, r7, pc}
 8001236:	bf00      	nop
 8001238:	0800cea8 	.word	0x0800cea8

0800123c <LL_C2_PWR_SetPowerMode>:
  *         @arg @ref LL_PWR_MODE_STANDBY
  *         @arg @ref LL_PWR_MODE_SHUTDOWN
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001244:	4b07      	ldr	r3, [pc, #28]	; (8001264 <LL_C2_PWR_SetPowerMode+0x28>)
 8001246:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800124a:	f023 0207 	bic.w	r2, r3, #7
 800124e:	4905      	ldr	r1, [pc, #20]	; (8001264 <LL_C2_PWR_SetPowerMode+0x28>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4313      	orrs	r3, r2
 8001254:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	58000400 	.word	0x58000400

08001268 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800127a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4313      	orrs	r3, r2
 8001282:	608b      	str	r3, [r1, #8]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8001294:	f000 f80a 	bl	80012ac <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001298:	4903      	ldr	r1, [pc, #12]	; (80012a8 <APPE_Init+0x18>)
 800129a:	2000      	movs	r0, #0
 800129c:	f000 fd62 	bl	8001d64 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80012a0:	f000 f812 	bl	80012c8 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80012a4:	bf00      	nop
}
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000848 	.word	0x20000848

080012ac <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80012b0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012b4:	f7ff ffd8 	bl	8001268 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80012b8:	f00b fb64 	bl	800c984 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80012bc:	2004      	movs	r0, #4
 80012be:	f7ff ffbd 	bl	800123c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 80012c2:	bf00      	nop
}
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80012ce:	f00a faf5 	bl	800b8bc <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 80012d2:	4a11      	ldr	r2, [pc, #68]	; (8001318 <appe_Tl_Init+0x50>)
 80012d4:	2100      	movs	r1, #0
 80012d6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80012da:	f00b fc73 	bl	800cbc4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80012de:	4b0f      	ldr	r3, [pc, #60]	; (800131c <appe_Tl_Init+0x54>)
 80012e0:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80012e2:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <appe_Tl_Init+0x58>)
 80012e4:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80012e6:	463b      	mov	r3, r7
 80012e8:	4619      	mov	r1, r3
 80012ea:	480e      	ldr	r0, [pc, #56]	; (8001324 <appe_Tl_Init+0x5c>)
 80012ec:	f009 ffb8 	bl	800b260 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80012f0:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <appe_Tl_Init+0x60>)
 80012f2:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80012f4:	4b0d      	ldr	r3, [pc, #52]	; (800132c <appe_Tl_Init+0x64>)
 80012f6:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80012f8:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <appe_Tl_Init+0x68>)
 80012fa:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80012fc:	f240 533c 	movw	r3, #1340	; 0x53c
 8001300:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8001302:	f107 0308 	add.w	r3, r7, #8
 8001306:	4618      	mov	r0, r3
 8001308:	f00a fbea 	bl	800bae0 <TL_MM_Init>

  TL_Enable();
 800130c:	f00a fad0 	bl	800b8b0 <TL_Enable>

  return;
 8001310:	bf00      	nop
}
 8001312:	3720      	adds	r7, #32
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	0800b299 	.word	0x0800b299
 800131c:	20030724 	.word	0x20030724
 8001320:	08001335 	.word	0x08001335
 8001324:	0800134b 	.word	0x0800134b
 8001328:	2003093c 	.word	0x2003093c
 800132c:	20030830 	.word	0x20030830
 8001330:	200301e8 	.word	0x200301e8

08001334 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800133e:	bf00      	nop
}
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 8001352:	f7ff ff57 	bl	8001204 <APPD_EnableCPU2>

  APP_BLE_Init( );
 8001356:	f00a fca7 	bl	800bca8 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800135a:	2100      	movs	r1, #0
 800135c:	2001      	movs	r0, #1
 800135e:	f00b fb23 	bl	800c9a8 <UTIL_LPM_SetOffMode>
  return;
 8001362:	bf00      	nop
}
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 800136e:	bf00      	nop
}
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8001382:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001386:	f00b fb3d 	bl	800ca04 <UTIL_SEQ_Run>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800139a:	2100      	movs	r1, #0
 800139c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80013a0:	f00b fc30 	bl	800cc04 <UTIL_SEQ_SetTask>
  return;
 80013a4:	bf00      	nop
}
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80013b4:	2002      	movs	r0, #2
 80013b6:	f00b fc8b 	bl	800ccd0 <UTIL_SEQ_SetEvt>
  return;
 80013ba:	bf00      	nop
}
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80013ca:	2002      	movs	r0, #2
 80013cc:	f00b fc9e 	bl	800cd0c <UTIL_SEQ_WaitEvt>
  return;
 80013d0:	bf00      	nop
}
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <LL_AHB2_GRP1_EnableClock>:
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4013      	ands	r3, r2
 80013fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013fc:	68fb      	ldr	r3, [r7, #12]
}
 80013fe:	bf00      	nop
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001420:	2004      	movs	r0, #4
 8001422:	f7ff ffd9 	bl	80013d8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	2002      	movs	r0, #2
 8001428:	f7ff ffd6 	bl	80013d8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800142c:	2001      	movs	r0, #1
 800142e:	f7ff ffd3 	bl	80013d8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001432:	2010      	movs	r0, #16
 8001434:	f7ff ffd0 	bl	80013d8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001438:	2008      	movs	r0, #8
 800143a:	f7ff ffcd 	bl	80013d8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI2_CS_2_Pin|SPI2_CS_1_Pin, GPIO_PIN_SET);
 800143e:	2201      	movs	r2, #1
 8001440:	2103      	movs	r1, #3
 8001442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001446:	f003 ff67 	bl	8005318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_1_GPIO_Port, SPI1_CS_1_Pin, GPIO_PIN_SET);
 800144a:	2201      	movs	r2, #1
 800144c:	2104      	movs	r1, #4
 800144e:	482e      	ldr	r0, [pc, #184]	; (8001508 <MX_GPIO_Init+0xfc>)
 8001450:	f003 ff62 	bl	8005318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	2123      	movs	r1, #35	; 0x23
 8001458:	482b      	ldr	r0, [pc, #172]	; (8001508 <MX_GPIO_Init+0xfc>)
 800145a:	f003 ff5d 	bl	8005318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_2_GPIO_Port, SPI1_CS_2_Pin, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	2110      	movs	r1, #16
 8001462:	482a      	ldr	r0, [pc, #168]	; (800150c <MX_GPIO_Init+0x100>)
 8001464:	f003 ff58 	bl	8005318 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI2_CS_2_Pin|SPI2_CS_1_Pin;
 8001468:	2303      	movs	r3, #3
 800146a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146c:	2301      	movs	r3, #1
 800146e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001474:	2301      	movs	r3, #1
 8001476:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	4619      	mov	r1, r3
 800147c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001480:	f003 fdda 	bl	8005038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001484:	2310      	movs	r3, #16
 8001486:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001488:	2300      	movs	r3, #0
 800148a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	4619      	mov	r1, r3
 8001494:	481e      	ldr	r0, [pc, #120]	; (8001510 <MX_GPIO_Init+0x104>)
 8001496:	f003 fdcf 	bl	8005038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_1_Pin;
 800149a:	2304      	movs	r3, #4
 800149c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149e:	2301      	movs	r3, #1
 80014a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80014a6:	2301      	movs	r3, #1
 80014a8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI1_CS_1_GPIO_Port, &GPIO_InitStruct);
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	4619      	mov	r1, r3
 80014ae:	4816      	ldr	r0, [pc, #88]	; (8001508 <MX_GPIO_Init+0xfc>)
 80014b0:	f003 fdc2 	bl	8005038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 80014b4:	2323      	movs	r3, #35	; 0x23
 80014b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	4619      	mov	r1, r3
 80014c8:	480f      	ldr	r0, [pc, #60]	; (8001508 <MX_GPIO_Init+0xfc>)
 80014ca:	f003 fdb5 	bl	8005038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_2_Pin;
 80014ce:	2310      	movs	r3, #16
 80014d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d2:	2301      	movs	r3, #1
 80014d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI1_CS_2_GPIO_Port, &GPIO_InitStruct);
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	4619      	mov	r1, r3
 80014e2:	480a      	ldr	r0, [pc, #40]	; (800150c <MX_GPIO_Init+0x100>)
 80014e4:	f003 fda8 	bl	8005038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|B3_Pin;
 80014e8:	2303      	movs	r3, #3
 80014ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	4619      	mov	r1, r3
 80014f8:	4806      	ldr	r0, [pc, #24]	; (8001514 <MX_GPIO_Init+0x108>)
 80014fa:	f003 fd9d 	bl	8005038 <HAL_GPIO_Init>

}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	48000400 	.word	0x48000400
 800150c:	48001000 	.word	0x48001000
 8001510:	48000800 	.word	0x48000800
 8001514:	48000c00 	.word	0x48000c00

08001518 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <LL_EXTI_EnableIT_0_31+0x24>)
 8001522:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001526:	4905      	ldr	r1, [pc, #20]	; (800153c <LL_EXTI_EnableIT_0_31+0x24>)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4313      	orrs	r3, r2
 800152c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	58000800 	.word	0x58000800

08001540 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4904      	ldr	r1, [pc, #16]	; (8001560 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4313      	orrs	r3, r2
 8001552:	600b      	str	r3, [r1, #0]

}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	58000800 	.word	0x58000800

08001564 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800156a:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <ReadRtcSsrValue+0x3c>)
 800156c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156e:	b29b      	uxth	r3, r3
 8001570:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001572:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <ReadRtcSsrValue+0x3c>)
 8001574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001576:	b29b      	uxth	r3, r3
 8001578:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800157a:	e005      	b.n	8001588 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001580:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <ReadRtcSsrValue+0x3c>)
 8001582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001584:	b29b      	uxth	r3, r3
 8001586:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d1f5      	bne.n	800157c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001590:	683b      	ldr	r3, [r7, #0]
}
 8001592:	4618      	mov	r0, r3
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40002800 	.word	0x40002800

080015a4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	460a      	mov	r2, r1
 80015ae:	71fb      	strb	r3, [r7, #7]
 80015b0:	4613      	mov	r3, r2
 80015b2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80015b4:	79ba      	ldrb	r2, [r7, #6]
 80015b6:	491d      	ldr	r1, [pc, #116]	; (800162c <LinkTimerAfter+0x88>)
 80015b8:	4613      	mov	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	4413      	add	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	440b      	add	r3, r1
 80015c2:	3315      	adds	r3, #21
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	2b06      	cmp	r3, #6
 80015cc:	d009      	beq.n	80015e2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80015ce:	7bfa      	ldrb	r2, [r7, #15]
 80015d0:	4916      	ldr	r1, [pc, #88]	; (800162c <LinkTimerAfter+0x88>)
 80015d2:	4613      	mov	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	440b      	add	r3, r1
 80015dc:	3314      	adds	r3, #20
 80015de:	79fa      	ldrb	r2, [r7, #7]
 80015e0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80015e2:	79fa      	ldrb	r2, [r7, #7]
 80015e4:	4911      	ldr	r1, [pc, #68]	; (800162c <LinkTimerAfter+0x88>)
 80015e6:	4613      	mov	r3, r2
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	4413      	add	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	440b      	add	r3, r1
 80015f0:	3315      	adds	r3, #21
 80015f2:	7bfa      	ldrb	r2, [r7, #15]
 80015f4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80015f6:	79fa      	ldrb	r2, [r7, #7]
 80015f8:	490c      	ldr	r1, [pc, #48]	; (800162c <LinkTimerAfter+0x88>)
 80015fa:	4613      	mov	r3, r2
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	4413      	add	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	440b      	add	r3, r1
 8001604:	3314      	adds	r3, #20
 8001606:	79ba      	ldrb	r2, [r7, #6]
 8001608:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800160a:	79ba      	ldrb	r2, [r7, #6]
 800160c:	4907      	ldr	r1, [pc, #28]	; (800162c <LinkTimerAfter+0x88>)
 800160e:	4613      	mov	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	4413      	add	r3, r2
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	440b      	add	r3, r1
 8001618:	3315      	adds	r3, #21
 800161a:	79fa      	ldrb	r2, [r7, #7]
 800161c:	701a      	strb	r2, [r3, #0]

  return;
 800161e:	bf00      	nop
}
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	2000005c 	.word	0x2000005c

08001630 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	460a      	mov	r2, r1
 800163a:	71fb      	strb	r3, [r7, #7]
 800163c:	4613      	mov	r3, r2
 800163e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001640:	4b29      	ldr	r3, [pc, #164]	; (80016e8 <LinkTimerBefore+0xb8>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	b2db      	uxtb	r3, r3
 8001646:	79ba      	ldrb	r2, [r7, #6]
 8001648:	429a      	cmp	r2, r3
 800164a:	d032      	beq.n	80016b2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800164c:	79ba      	ldrb	r2, [r7, #6]
 800164e:	4927      	ldr	r1, [pc, #156]	; (80016ec <LinkTimerBefore+0xbc>)
 8001650:	4613      	mov	r3, r2
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4413      	add	r3, r2
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	440b      	add	r3, r1
 800165a:	3314      	adds	r3, #20
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001660:	7bfa      	ldrb	r2, [r7, #15]
 8001662:	4922      	ldr	r1, [pc, #136]	; (80016ec <LinkTimerBefore+0xbc>)
 8001664:	4613      	mov	r3, r2
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	4413      	add	r3, r2
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	440b      	add	r3, r1
 800166e:	3315      	adds	r3, #21
 8001670:	79fa      	ldrb	r2, [r7, #7]
 8001672:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001674:	79fa      	ldrb	r2, [r7, #7]
 8001676:	491d      	ldr	r1, [pc, #116]	; (80016ec <LinkTimerBefore+0xbc>)
 8001678:	4613      	mov	r3, r2
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	4413      	add	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	440b      	add	r3, r1
 8001682:	3315      	adds	r3, #21
 8001684:	79ba      	ldrb	r2, [r7, #6]
 8001686:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001688:	79fa      	ldrb	r2, [r7, #7]
 800168a:	4918      	ldr	r1, [pc, #96]	; (80016ec <LinkTimerBefore+0xbc>)
 800168c:	4613      	mov	r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	4413      	add	r3, r2
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	440b      	add	r3, r1
 8001696:	3314      	adds	r3, #20
 8001698:	7bfa      	ldrb	r2, [r7, #15]
 800169a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800169c:	79ba      	ldrb	r2, [r7, #6]
 800169e:	4913      	ldr	r1, [pc, #76]	; (80016ec <LinkTimerBefore+0xbc>)
 80016a0:	4613      	mov	r3, r2
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	4413      	add	r3, r2
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	440b      	add	r3, r1
 80016aa:	3314      	adds	r3, #20
 80016ac:	79fa      	ldrb	r2, [r7, #7]
 80016ae:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80016b0:	e014      	b.n	80016dc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80016b2:	79fa      	ldrb	r2, [r7, #7]
 80016b4:	490d      	ldr	r1, [pc, #52]	; (80016ec <LinkTimerBefore+0xbc>)
 80016b6:	4613      	mov	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4413      	add	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	440b      	add	r3, r1
 80016c0:	3315      	adds	r3, #21
 80016c2:	79ba      	ldrb	r2, [r7, #6]
 80016c4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80016c6:	79ba      	ldrb	r2, [r7, #6]
 80016c8:	4908      	ldr	r1, [pc, #32]	; (80016ec <LinkTimerBefore+0xbc>)
 80016ca:	4613      	mov	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	4413      	add	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	440b      	add	r3, r1
 80016d4:	3314      	adds	r3, #20
 80016d6:	79fa      	ldrb	r2, [r7, #7]
 80016d8:	701a      	strb	r2, [r3, #0]
  return;
 80016da:	bf00      	nop
}
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	200000ec 	.word	0x200000ec
 80016ec:	2000005c 	.word	0x2000005c

080016f0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80016fa:	4b4e      	ldr	r3, [pc, #312]	; (8001834 <linkTimer+0x144>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b06      	cmp	r3, #6
 8001702:	d118      	bne.n	8001736 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001704:	4b4b      	ldr	r3, [pc, #300]	; (8001834 <linkTimer+0x144>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4b4b      	ldr	r3, [pc, #300]	; (8001838 <linkTimer+0x148>)
 800170c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800170e:	4a49      	ldr	r2, [pc, #292]	; (8001834 <linkTimer+0x144>)
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001714:	79fa      	ldrb	r2, [r7, #7]
 8001716:	4949      	ldr	r1, [pc, #292]	; (800183c <linkTimer+0x14c>)
 8001718:	4613      	mov	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4413      	add	r3, r2
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	440b      	add	r3, r1
 8001722:	3315      	adds	r3, #21
 8001724:	2206      	movs	r2, #6
 8001726:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001728:	4b45      	ldr	r3, [pc, #276]	; (8001840 <linkTimer+0x150>)
 800172a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800172e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	81fb      	strh	r3, [r7, #14]
 8001734:	e078      	b.n	8001828 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001736:	f000 f909 	bl	800194c <ReturnTimeElapsed>
 800173a:	4603      	mov	r3, r0
 800173c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800173e:	79fa      	ldrb	r2, [r7, #7]
 8001740:	493e      	ldr	r1, [pc, #248]	; (800183c <linkTimer+0x14c>)
 8001742:	4613      	mov	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	4413      	add	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	440b      	add	r3, r1
 800174c:	3308      	adds	r3, #8
 800174e:	6819      	ldr	r1, [r3, #0]
 8001750:	89fb      	ldrh	r3, [r7, #14]
 8001752:	79fa      	ldrb	r2, [r7, #7]
 8001754:	4419      	add	r1, r3
 8001756:	4839      	ldr	r0, [pc, #228]	; (800183c <linkTimer+0x14c>)
 8001758:	4613      	mov	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4413      	add	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	4403      	add	r3, r0
 8001762:	3308      	adds	r3, #8
 8001764:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001766:	79fa      	ldrb	r2, [r7, #7]
 8001768:	4934      	ldr	r1, [pc, #208]	; (800183c <linkTimer+0x14c>)
 800176a:	4613      	mov	r3, r2
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	4413      	add	r3, r2
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	440b      	add	r3, r1
 8001774:	3308      	adds	r3, #8
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800177a:	4b2e      	ldr	r3, [pc, #184]	; (8001834 <linkTimer+0x144>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	4619      	mov	r1, r3
 8001782:	4a2e      	ldr	r2, [pc, #184]	; (800183c <linkTimer+0x14c>)
 8001784:	460b      	mov	r3, r1
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	440b      	add	r3, r1
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	4413      	add	r3, r2
 800178e:	3308      	adds	r3, #8
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	429a      	cmp	r2, r3
 8001796:	d337      	bcc.n	8001808 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001798:	4b26      	ldr	r3, [pc, #152]	; (8001834 <linkTimer+0x144>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800179e:	7b7a      	ldrb	r2, [r7, #13]
 80017a0:	4926      	ldr	r1, [pc, #152]	; (800183c <linkTimer+0x14c>)
 80017a2:	4613      	mov	r3, r2
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4413      	add	r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	440b      	add	r3, r1
 80017ac:	3315      	adds	r3, #21
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80017b2:	e013      	b.n	80017dc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80017b4:	7b7a      	ldrb	r2, [r7, #13]
 80017b6:	4921      	ldr	r1, [pc, #132]	; (800183c <linkTimer+0x14c>)
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	440b      	add	r3, r1
 80017c2:	3315      	adds	r3, #21
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80017c8:	7b7a      	ldrb	r2, [r7, #13]
 80017ca:	491c      	ldr	r1, [pc, #112]	; (800183c <linkTimer+0x14c>)
 80017cc:	4613      	mov	r3, r2
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4413      	add	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	440b      	add	r3, r1
 80017d6:	3315      	adds	r3, #21
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80017dc:	7b3b      	ldrb	r3, [r7, #12]
 80017de:	2b06      	cmp	r3, #6
 80017e0:	d00b      	beq.n	80017fa <linkTimer+0x10a>
 80017e2:	7b3a      	ldrb	r2, [r7, #12]
 80017e4:	4915      	ldr	r1, [pc, #84]	; (800183c <linkTimer+0x14c>)
 80017e6:	4613      	mov	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	440b      	add	r3, r1
 80017f0:	3308      	adds	r3, #8
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68ba      	ldr	r2, [r7, #8]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d2dc      	bcs.n	80017b4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80017fa:	7b7a      	ldrb	r2, [r7, #13]
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fecf 	bl	80015a4 <LinkTimerAfter>
 8001806:	e00f      	b.n	8001828 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <linkTimer+0x144>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	b2da      	uxtb	r2, r3
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ff0c 	bl	8001630 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <linkTimer+0x144>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <linkTimer+0x148>)
 8001820:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001822:	4a04      	ldr	r2, [pc, #16]	; (8001834 <linkTimer+0x144>)
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001828:	89fb      	ldrh	r3, [r7, #14]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200000ec 	.word	0x200000ec
 8001838:	200000ed 	.word	0x200000ed
 800183c:	2000005c 	.word	0x2000005c
 8001840:	200000f0 	.word	0x200000f0

08001844 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	460a      	mov	r2, r1
 800184e:	71fb      	strb	r3, [r7, #7]
 8001850:	4613      	mov	r3, r2
 8001852:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001854:	4b39      	ldr	r3, [pc, #228]	; (800193c <UnlinkTimer+0xf8>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	79fa      	ldrb	r2, [r7, #7]
 800185c:	429a      	cmp	r2, r3
 800185e:	d111      	bne.n	8001884 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001860:	4b36      	ldr	r3, [pc, #216]	; (800193c <UnlinkTimer+0xf8>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4b36      	ldr	r3, [pc, #216]	; (8001940 <UnlinkTimer+0xfc>)
 8001868:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800186a:	79fa      	ldrb	r2, [r7, #7]
 800186c:	4935      	ldr	r1, [pc, #212]	; (8001944 <UnlinkTimer+0x100>)
 800186e:	4613      	mov	r3, r2
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	4413      	add	r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	440b      	add	r3, r1
 8001878:	3315      	adds	r3, #21
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4b2f      	ldr	r3, [pc, #188]	; (800193c <UnlinkTimer+0xf8>)
 8001880:	701a      	strb	r2, [r3, #0]
 8001882:	e03e      	b.n	8001902 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001884:	79fa      	ldrb	r2, [r7, #7]
 8001886:	492f      	ldr	r1, [pc, #188]	; (8001944 <UnlinkTimer+0x100>)
 8001888:	4613      	mov	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4413      	add	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	440b      	add	r3, r1
 8001892:	3314      	adds	r3, #20
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001898:	79fa      	ldrb	r2, [r7, #7]
 800189a:	492a      	ldr	r1, [pc, #168]	; (8001944 <UnlinkTimer+0x100>)
 800189c:	4613      	mov	r3, r2
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	4413      	add	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	440b      	add	r3, r1
 80018a6:	3315      	adds	r3, #21
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80018ac:	79f9      	ldrb	r1, [r7, #7]
 80018ae:	7bfa      	ldrb	r2, [r7, #15]
 80018b0:	4824      	ldr	r0, [pc, #144]	; (8001944 <UnlinkTimer+0x100>)
 80018b2:	460b      	mov	r3, r1
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	440b      	add	r3, r1
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	4403      	add	r3, r0
 80018bc:	3315      	adds	r3, #21
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	b2d8      	uxtb	r0, r3
 80018c2:	4920      	ldr	r1, [pc, #128]	; (8001944 <UnlinkTimer+0x100>)
 80018c4:	4613      	mov	r3, r2
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	4413      	add	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	440b      	add	r3, r1
 80018ce:	3315      	adds	r3, #21
 80018d0:	4602      	mov	r2, r0
 80018d2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80018d4:	7bbb      	ldrb	r3, [r7, #14]
 80018d6:	2b06      	cmp	r3, #6
 80018d8:	d013      	beq.n	8001902 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80018da:	79f9      	ldrb	r1, [r7, #7]
 80018dc:	7bba      	ldrb	r2, [r7, #14]
 80018de:	4819      	ldr	r0, [pc, #100]	; (8001944 <UnlinkTimer+0x100>)
 80018e0:	460b      	mov	r3, r1
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	440b      	add	r3, r1
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4403      	add	r3, r0
 80018ea:	3314      	adds	r3, #20
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	b2d8      	uxtb	r0, r3
 80018f0:	4914      	ldr	r1, [pc, #80]	; (8001944 <UnlinkTimer+0x100>)
 80018f2:	4613      	mov	r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	4413      	add	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	440b      	add	r3, r1
 80018fc:	3314      	adds	r3, #20
 80018fe:	4602      	mov	r2, r0
 8001900:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001902:	79fa      	ldrb	r2, [r7, #7]
 8001904:	490f      	ldr	r1, [pc, #60]	; (8001944 <UnlinkTimer+0x100>)
 8001906:	4613      	mov	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4413      	add	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	440b      	add	r3, r1
 8001910:	330c      	adds	r3, #12
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <UnlinkTimer+0xf8>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b06      	cmp	r3, #6
 800191e:	d107      	bne.n	8001930 <UnlinkTimer+0xec>
 8001920:	79bb      	ldrb	r3, [r7, #6]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d104      	bne.n	8001930 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <UnlinkTimer+0x104>)
 8001928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800192c:	601a      	str	r2, [r3, #0]
  }

  return;
 800192e:	bf00      	nop
 8001930:	bf00      	nop
}
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	200000ec 	.word	0x200000ec
 8001940:	200000ed 	.word	0x200000ed
 8001944:	2000005c 	.word	0x2000005c
 8001948:	200000f0 	.word	0x200000f0

0800194c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001952:	4b1a      	ldr	r3, [pc, #104]	; (80019bc <ReturnTimeElapsed+0x70>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800195a:	d026      	beq.n	80019aa <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 800195c:	f7ff fe02 	bl	8001564 <ReadRtcSsrValue>
 8001960:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001962:	4b16      	ldr	r3, [pc, #88]	; (80019bc <ReturnTimeElapsed+0x70>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	429a      	cmp	r2, r3
 800196a:	d805      	bhi.n	8001978 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 800196c:	4b13      	ldr	r3, [pc, #76]	; (80019bc <ReturnTimeElapsed+0x70>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	607b      	str	r3, [r7, #4]
 8001976:	e00a      	b.n	800198e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <ReturnTimeElapsed+0x74>)
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001984:	4b0d      	ldr	r3, [pc, #52]	; (80019bc <ReturnTimeElapsed+0x70>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	4413      	add	r3, r2
 800198c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800198e:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <ReturnTimeElapsed+0x78>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	461a      	mov	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	fb02 f303 	mul.w	r3, r2, r3
 800199a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 800199c:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <ReturnTimeElapsed+0x7c>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	40d3      	lsrs	r3, r2
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	e001      	b.n	80019ae <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	b29b      	uxth	r3, r3
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200000f0 	.word	0x200000f0
 80019c0:	2000025a 	.word	0x2000025a
 80019c4:	20000259 	.word	0x20000259
 80019c8:	20000258 	.word	0x20000258

080019cc <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d108      	bne.n	80019ee <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80019dc:	f7ff fdc2 	bl	8001564 <ReadRtcSsrValue>
 80019e0:	4602      	mov	r2, r0
 80019e2:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <RestartWakeupCounter+0xa8>)
 80019e4:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80019e6:	2003      	movs	r0, #3
 80019e8:	f003 fb09 	bl	8004ffe <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80019ec:	e03e      	b.n	8001a6c <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80019ee:	88fb      	ldrh	r3, [r7, #6]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d803      	bhi.n	80019fc <RestartWakeupCounter+0x30>
 80019f4:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <RestartWakeupCounter+0xac>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d002      	beq.n	8001a02 <RestartWakeupCounter+0x36>
      Value -= 1;
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001a02:	bf00      	nop
 8001a04:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <RestartWakeupCounter+0xb0>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f7      	beq.n	8001a04 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <RestartWakeupCounter+0xb0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <RestartWakeupCounter+0xb0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001a28:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <RestartWakeupCounter+0xb4>)
 8001a2c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a30:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001a32:	2003      	movs	r0, #3
 8001a34:	f003 faf1 	bl	800501a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <RestartWakeupCounter+0xb8>)
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	0c1b      	lsrs	r3, r3, #16
 8001a3e:	041b      	lsls	r3, r3, #16
 8001a40:	88fa      	ldrh	r2, [r7, #6]
 8001a42:	4910      	ldr	r1, [pc, #64]	; (8001a84 <RestartWakeupCounter+0xb8>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001a48:	f7ff fd8c 	bl	8001564 <ReadRtcSsrValue>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <RestartWakeupCounter+0xa8>)
 8001a50:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <RestartWakeupCounter+0xb0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689a      	ldr	r2, [r3, #8]
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <RestartWakeupCounter+0xb0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a64:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001a66:	f3af 8000 	nop.w
  return ;
 8001a6a:	bf00      	nop
}
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200000f0 	.word	0x200000f0
 8001a78:	20000258 	.word	0x20000258
 8001a7c:	20000254 	.word	0x20000254
 8001a80:	58000800 	.word	0x58000800
 8001a84:	40002800 	.word	0x40002800

08001a88 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001a8e:	4b47      	ldr	r3, [pc, #284]	; (8001bac <RescheduleTimerList+0x124>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a9a:	d108      	bne.n	8001aae <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001a9c:	bf00      	nop
 8001a9e:	4b44      	ldr	r3, [pc, #272]	; (8001bb0 <RescheduleTimerList+0x128>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f7      	bne.n	8001a9e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001aae:	4b40      	ldr	r3, [pc, #256]	; (8001bb0 <RescheduleTimerList+0x128>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	4b3e      	ldr	r3, [pc, #248]	; (8001bb0 <RescheduleTimerList+0x128>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ac0:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001ac2:	4b3c      	ldr	r3, [pc, #240]	; (8001bb4 <RescheduleTimerList+0x12c>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001ac8:	7bfa      	ldrb	r2, [r7, #15]
 8001aca:	493b      	ldr	r1, [pc, #236]	; (8001bb8 <RescheduleTimerList+0x130>)
 8001acc:	4613      	mov	r3, r2
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	4413      	add	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	440b      	add	r3, r1
 8001ad6:	3308      	adds	r3, #8
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001adc:	f7ff ff36 	bl	800194c <ReturnTimeElapsed>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001ae4:	88fb      	ldrh	r3, [r7, #6]
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d205      	bcs.n	8001af8 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001af0:	4b32      	ldr	r3, [pc, #200]	; (8001bbc <RescheduleTimerList+0x134>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]
 8001af6:	e04d      	b.n	8001b94 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	4a31      	ldr	r2, [pc, #196]	; (8001bc0 <RescheduleTimerList+0x138>)
 8001afc:	8812      	ldrh	r2, [r2, #0]
 8001afe:	b292      	uxth	r2, r2
 8001b00:	4413      	add	r3, r2
 8001b02:	461a      	mov	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d906      	bls.n	8001b18 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001b0a:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <RescheduleTimerList+0x138>)
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001b10:	4b2a      	ldr	r3, [pc, #168]	; (8001bbc <RescheduleTimerList+0x134>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]
 8001b16:	e03d      	b.n	8001b94 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	88fb      	ldrh	r3, [r7, #6]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001b22:	4b26      	ldr	r3, [pc, #152]	; (8001bbc <RescheduleTimerList+0x134>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b28:	e034      	b.n	8001b94 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001b2a:	7bfa      	ldrb	r2, [r7, #15]
 8001b2c:	4922      	ldr	r1, [pc, #136]	; (8001bb8 <RescheduleTimerList+0x130>)
 8001b2e:	4613      	mov	r3, r2
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	4413      	add	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	440b      	add	r3, r1
 8001b38:	3308      	adds	r3, #8
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	88fb      	ldrh	r3, [r7, #6]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d20a      	bcs.n	8001b58 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001b42:	7bfa      	ldrb	r2, [r7, #15]
 8001b44:	491c      	ldr	r1, [pc, #112]	; (8001bb8 <RescheduleTimerList+0x130>)
 8001b46:	4613      	mov	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	440b      	add	r3, r1
 8001b50:	3308      	adds	r3, #8
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	e013      	b.n	8001b80 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001b58:	7bfa      	ldrb	r2, [r7, #15]
 8001b5a:	4917      	ldr	r1, [pc, #92]	; (8001bb8 <RescheduleTimerList+0x130>)
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	4413      	add	r3, r2
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	440b      	add	r3, r1
 8001b66:	3308      	adds	r3, #8
 8001b68:	6819      	ldr	r1, [r3, #0]
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	7bfa      	ldrb	r2, [r7, #15]
 8001b6e:	1ac9      	subs	r1, r1, r3
 8001b70:	4811      	ldr	r0, [pc, #68]	; (8001bb8 <RescheduleTimerList+0x130>)
 8001b72:	4613      	mov	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	4403      	add	r3, r0
 8001b7c:	3308      	adds	r3, #8
 8001b7e:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001b80:	7bfa      	ldrb	r2, [r7, #15]
 8001b82:	490d      	ldr	r1, [pc, #52]	; (8001bb8 <RescheduleTimerList+0x130>)
 8001b84:	4613      	mov	r3, r2
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	4413      	add	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	440b      	add	r3, r1
 8001b8e:	3315      	adds	r3, #21
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	2b06      	cmp	r3, #6
 8001b98:	d1c7      	bne.n	8001b2a <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001b9a:	89bb      	ldrh	r3, [r7, #12]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff15 	bl	80019cc <RestartWakeupCounter>

  return ;
 8001ba2:	bf00      	nop
}
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40002800 	.word	0x40002800
 8001bb0:	20000254 	.word	0x20000254
 8001bb4:	200000ec 	.word	0x200000ec
 8001bb8:	2000005c 	.word	0x2000005c
 8001bbc:	200000f4 	.word	0x200000f4
 8001bc0:	2000025c 	.word	0x2000025c

08001bc4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	; 0x28
 8001bc8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bca:	f3ef 8310 	mrs	r3, PRIMASK
 8001bce:	617b      	str	r3, [r7, #20]
  return(result);
 8001bd0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd4:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001bd6:	4b5e      	ldr	r3, [pc, #376]	; (8001d50 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	22ca      	movs	r2, #202	; 0xca
 8001bde:	625a      	str	r2, [r3, #36]	; 0x24
 8001be0:	4b5b      	ldr	r3, [pc, #364]	; (8001d50 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2253      	movs	r2, #83	; 0x53
 8001be8:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8001bea:	4b59      	ldr	r3, [pc, #356]	; (8001d50 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	4b57      	ldr	r3, [pc, #348]	; (8001d50 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bfc:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001bfe:	4b55      	ldr	r3, [pc, #340]	; (8001d54 <HW_TS_RTC_Wakeup_Handler+0x190>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001c06:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001c0a:	4953      	ldr	r1, [pc, #332]	; (8001d58 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4413      	add	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	440b      	add	r3, r1
 8001c16:	330c      	adds	r3, #12
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d170      	bne.n	8001d02 <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001c20:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001c24:	494c      	ldr	r1, [pc, #304]	; (8001d58 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001c26:	4613      	mov	r3, r2
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	440b      	add	r3, r1
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001c34:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001c38:	4947      	ldr	r1, [pc, #284]	; (8001d58 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4413      	add	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	440b      	add	r3, r1
 8001c44:	3310      	adds	r3, #16
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001c4a:	4b44      	ldr	r3, [pc, #272]	; (8001d5c <HW_TS_RTC_Wakeup_Handler+0x198>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d04e      	beq.n	8001cf2 <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001c54:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001c58:	493f      	ldr	r1, [pc, #252]	; (8001d58 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	440b      	add	r3, r1
 8001c64:	330d      	adds	r3, #13
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d125      	bne.n	8001cba <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001c6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c72:	2101      	movs	r1, #1
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff fde5 	bl	8001844 <UnlinkTimer>
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001c84:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001c88:	4933      	ldr	r1, [pc, #204]	; (8001d58 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	440b      	add	r3, r1
 8001c94:	3304      	adds	r3, #4
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c9c:	4611      	mov	r1, r2
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 fa40 	bl	8002124 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001ca4:	4b2a      	ldr	r3, [pc, #168]	; (8001d50 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	22ca      	movs	r2, #202	; 0xca
 8001cac:	625a      	str	r2, [r3, #36]	; 0x24
 8001cae:	4b28      	ldr	r3, [pc, #160]	; (8001d50 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2253      	movs	r2, #83	; 0x53
 8001cb6:	625a      	str	r2, [r3, #36]	; 0x24
 8001cb8:	e013      	b.n	8001ce2 <HW_TS_RTC_Wakeup_Handler+0x11e>
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001cc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f000 f9a1 	bl	8002010 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001cce:	4b20      	ldr	r3, [pc, #128]	; (8001d50 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	22ca      	movs	r2, #202	; 0xca
 8001cd6:	625a      	str	r2, [r3, #36]	; 0x24
 8001cd8:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2253      	movs	r2, #83	; 0x53
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001ce2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ce6:	69fa      	ldr	r2, [r7, #28]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	69b8      	ldr	r0, [r7, #24]
 8001cec:	f000 faa0 	bl	8002230 <HW_TS_RTC_Int_AppNot>
 8001cf0:	e024      	b.n	8001d3c <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8001cf2:	f7ff fec9 	bl	8001a88 <RescheduleTimerList>
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	f383 8810 	msr	PRIMASK, r3
 8001d00:	e01c      	b.n	8001d3c <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001d02:	bf00      	nop
 8001d04:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f7      	beq.n	8001d04 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001d14:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001d28:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001d2a:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001d2c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001d3c:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	22ff      	movs	r2, #255	; 0xff
 8001d44:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001d46:	bf00      	nop
}
 8001d48:	3728      	adds	r7, #40	; 0x28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000254 	.word	0x20000254
 8001d54:	200000ec 	.word	0x200000ec
 8001d58:	2000005c 	.word	0x2000005c
 8001d5c:	200000f4 	.word	0x200000f4
 8001d60:	58000800 	.word	0x58000800

08001d64 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	6039      	str	r1, [r7, #0]
 8001d6e:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001d70:	4a61      	ldr	r2, [pc, #388]	; (8001ef8 <HW_TS_Init+0x194>)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001d76:	4b60      	ldr	r3, [pc, #384]	; (8001ef8 <HW_TS_Init+0x194>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	22ca      	movs	r2, #202	; 0xca
 8001d7e:	625a      	str	r2, [r3, #36]	; 0x24
 8001d80:	4b5d      	ldr	r3, [pc, #372]	; (8001ef8 <HW_TS_Init+0x194>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2253      	movs	r2, #83	; 0x53
 8001d88:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001d8a:	4b5c      	ldr	r3, [pc, #368]	; (8001efc <HW_TS_Init+0x198>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	4a5b      	ldr	r2, [pc, #364]	; (8001efc <HW_TS_Init+0x198>)
 8001d90:	f043 0320 	orr.w	r3, r3, #32
 8001d94:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001d96:	4b59      	ldr	r3, [pc, #356]	; (8001efc <HW_TS_Init+0x198>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	f1c3 0304 	rsb	r3, r3, #4
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	4b55      	ldr	r3, [pc, #340]	; (8001f00 <HW_TS_Init+0x19c>)
 8001daa:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001dac:	4b53      	ldr	r3, [pc, #332]	; (8001efc <HW_TS_Init+0x198>)
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001db4:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001db8:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	fa92 f2a2 	rbit	r2, r2
 8001dc0:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	fab2 f282 	clz	r2, r2
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	40d3      	lsrs	r3, r2
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	3301      	adds	r3, #1
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4b4c      	ldr	r3, [pc, #304]	; (8001f04 <HW_TS_Init+0x1a0>)
 8001dd4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001dd6:	4b49      	ldr	r3, [pc, #292]	; (8001efc <HW_TS_Init+0x198>)
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	3301      	adds	r3, #1
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	4b48      	ldr	r3, [pc, #288]	; (8001f08 <HW_TS_Init+0x1a4>)
 8001de8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001dea:	4b47      	ldr	r3, [pc, #284]	; (8001f08 <HW_TS_Init+0x1a4>)
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	4a44      	ldr	r2, [pc, #272]	; (8001f04 <HW_TS_Init+0x1a0>)
 8001df2:	7812      	ldrb	r2, [r2, #0]
 8001df4:	fb02 f303 	mul.w	r3, r2, r3
 8001df8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001dfc:	4a40      	ldr	r2, [pc, #256]	; (8001f00 <HW_TS_Init+0x19c>)
 8001dfe:	7812      	ldrb	r2, [r2, #0]
 8001e00:	40d3      	lsrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d904      	bls.n	8001e18 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001e0e:	4b3f      	ldr	r3, [pc, #252]	; (8001f0c <HW_TS_Init+0x1a8>)
 8001e10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e14:	801a      	strh	r2, [r3, #0]
 8001e16:	e003      	b.n	8001e20 <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	4b3b      	ldr	r3, [pc, #236]	; (8001f0c <HW_TS_Init+0x1a8>)
 8001e1e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001e20:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001e24:	f7ff fb8c 	bl	8001540 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001e28:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001e2c:	f7ff fb74 	bl	8001518 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d143      	bne.n	8001ebe <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001e36:	4b36      	ldr	r3, [pc, #216]	; (8001f10 <HW_TS_Init+0x1ac>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001e3c:	4b35      	ldr	r3, [pc, #212]	; (8001f14 <HW_TS_Init+0x1b0>)
 8001e3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e42:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001e44:	2300      	movs	r3, #0
 8001e46:	75fb      	strb	r3, [r7, #23]
 8001e48:	e00c      	b.n	8001e64 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001e4a:	7dfa      	ldrb	r2, [r7, #23]
 8001e4c:	4932      	ldr	r1, [pc, #200]	; (8001f18 <HW_TS_Init+0x1b4>)
 8001e4e:	4613      	mov	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	440b      	add	r3, r1
 8001e58:	330c      	adds	r3, #12
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001e5e:	7dfb      	ldrb	r3, [r7, #23]
 8001e60:	3301      	adds	r3, #1
 8001e62:	75fb      	strb	r3, [r7, #23]
 8001e64:	7dfb      	ldrb	r3, [r7, #23]
 8001e66:	2b05      	cmp	r3, #5
 8001e68:	d9ef      	bls.n	8001e4a <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001e6a:	4b2c      	ldr	r3, [pc, #176]	; (8001f1c <HW_TS_Init+0x1b8>)
 8001e6c:	2206      	movs	r2, #6
 8001e6e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001e70:	4b21      	ldr	r3, [pc, #132]	; (8001ef8 <HW_TS_Init+0x194>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	4b1f      	ldr	r3, [pc, #124]	; (8001ef8 <HW_TS_Init+0x194>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e82:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001e84:	4b1c      	ldr	r3, [pc, #112]	; (8001ef8 <HW_TS_Init+0x194>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <HW_TS_Init+0x194>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001e98:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001e9a:	4b21      	ldr	r3, [pc, #132]	; (8001f20 <HW_TS_Init+0x1bc>)
 8001e9c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ea0:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001ea2:	2003      	movs	r0, #3
 8001ea4:	f003 f8b9 	bl	800501a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001ea8:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <HW_TS_Init+0x194>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <HW_TS_Init+0x194>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	e00a      	b.n	8001ed4 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001ebe:	4b0e      	ldr	r3, [pc, #56]	; (8001ef8 <HW_TS_Init+0x194>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d002      	beq.n	8001ed4 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001ece:	2003      	movs	r0, #3
 8001ed0:	f003 f895 	bl	8004ffe <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001ed4:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <HW_TS_Init+0x194>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	22ff      	movs	r2, #255	; 0xff
 8001edc:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2103      	movs	r1, #3
 8001ee2:	2003      	movs	r0, #3
 8001ee4:	f003 f849 	bl	8004f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001ee8:	2003      	movs	r0, #3
 8001eea:	f003 f860 	bl	8004fae <HAL_NVIC_EnableIRQ>

  return;
 8001eee:	bf00      	nop
}
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000254 	.word	0x20000254
 8001efc:	40002800 	.word	0x40002800
 8001f00:	20000258 	.word	0x20000258
 8001f04:	20000259 	.word	0x20000259
 8001f08:	2000025a 	.word	0x2000025a
 8001f0c:	2000025c 	.word	0x2000025c
 8001f10:	200000f4 	.word	0x200000f4
 8001f14:	200000f0 	.word	0x200000f0
 8001f18:	2000005c 	.word	0x2000005c
 8001f1c:	200000ec 	.word	0x200000ec
 8001f20:	58000800 	.word	0x58000800

08001f24 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b08b      	sub	sp, #44	; 0x2c
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	603b      	str	r3, [r7, #0]
 8001f30:	4613      	mov	r3, r2
 8001f32:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f3a:	f3ef 8310 	mrs	r3, PRIMASK
 8001f3e:	61fb      	str	r3, [r7, #28]
  return(result);
 8001f40:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001f42:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f44:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001f46:	e004      	b.n	8001f52 <HW_TS_Create+0x2e>
  {
    loop++;
 8001f48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001f52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f56:	2b05      	cmp	r3, #5
 8001f58:	d80c      	bhi.n	8001f74 <HW_TS_Create+0x50>
 8001f5a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001f5e:	492b      	ldr	r1, [pc, #172]	; (800200c <HW_TS_Create+0xe8>)
 8001f60:	4613      	mov	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	4413      	add	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	440b      	add	r3, r1
 8001f6a:	330c      	adds	r3, #12
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1e9      	bne.n	8001f48 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001f74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f78:	2b06      	cmp	r3, #6
 8001f7a:	d037      	beq.n	8001fec <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001f7c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001f80:	4922      	ldr	r1, [pc, #136]	; (800200c <HW_TS_Create+0xe8>)
 8001f82:	4613      	mov	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	4413      	add	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	440b      	add	r3, r1
 8001f8c:	330c      	adds	r3, #12
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
 8001f92:	6a3b      	ldr	r3, [r7, #32]
 8001f94:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001f9c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001fa0:	491a      	ldr	r1, [pc, #104]	; (800200c <HW_TS_Create+0xe8>)
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	4413      	add	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	440b      	add	r3, r1
 8001fac:	3310      	adds	r3, #16
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001fb2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001fb6:	4915      	ldr	r1, [pc, #84]	; (800200c <HW_TS_Create+0xe8>)
 8001fb8:	4613      	mov	r3, r2
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	4413      	add	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	440b      	add	r3, r1
 8001fc2:	330d      	adds	r3, #13
 8001fc4:	79fa      	ldrb	r2, [r7, #7]
 8001fc6:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001fc8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001fcc:	490f      	ldr	r1, [pc, #60]	; (800200c <HW_TS_Create+0xe8>)
 8001fce:	4613      	mov	r3, r2
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	4413      	add	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	440b      	add	r3, r1
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001fe2:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001fea:	e007      	b.n	8001ffc <HW_TS_Create+0xd8>
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8001ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002000:	4618      	mov	r0, r3
 8002002:	372c      	adds	r7, #44	; 0x2c
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	2000005c 	.word	0x2000005c

08002010 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800201a:	f3ef 8310 	mrs	r3, PRIMASK
 800201e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002020:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002022:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002024:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002026:	2003      	movs	r0, #3
 8002028:	f002 ffcf 	bl	8004fca <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800202c:	4b37      	ldr	r3, [pc, #220]	; (800210c <HW_TS_Stop+0xfc>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	22ca      	movs	r2, #202	; 0xca
 8002034:	625a      	str	r2, [r3, #36]	; 0x24
 8002036:	4b35      	ldr	r3, [pc, #212]	; (800210c <HW_TS_Stop+0xfc>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2253      	movs	r2, #83	; 0x53
 800203e:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002040:	79fa      	ldrb	r2, [r7, #7]
 8002042:	4933      	ldr	r1, [pc, #204]	; (8002110 <HW_TS_Stop+0x100>)
 8002044:	4613      	mov	r3, r2
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	4413      	add	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	440b      	add	r3, r1
 800204e:	330c      	adds	r3, #12
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d148      	bne.n	80020ea <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	2100      	movs	r1, #0
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fbf1 	bl	8001844 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002062:	4b2c      	ldr	r3, [pc, #176]	; (8002114 <HW_TS_Stop+0x104>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002068:	7cfb      	ldrb	r3, [r7, #19]
 800206a:	2b06      	cmp	r3, #6
 800206c:	d135      	bne.n	80020da <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800206e:	4b2a      	ldr	r3, [pc, #168]	; (8002118 <HW_TS_Stop+0x108>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800207a:	d108      	bne.n	800208e <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800207c:	bf00      	nop
 800207e:	4b23      	ldr	r3, [pc, #140]	; (800210c <HW_TS_Stop+0xfc>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f7      	bne.n	800207e <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800208e:	4b1f      	ldr	r3, [pc, #124]	; (800210c <HW_TS_Stop+0xfc>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	4b1d      	ldr	r3, [pc, #116]	; (800210c <HW_TS_Stop+0xfc>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020a0:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80020a2:	bf00      	nop
 80020a4:	4b19      	ldr	r3, [pc, #100]	; (800210c <HW_TS_Stop+0xfc>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f7      	beq.n	80020a4 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80020b4:	4b15      	ldr	r3, [pc, #84]	; (800210c <HW_TS_Stop+0xfc>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4b13      	ldr	r3, [pc, #76]	; (800210c <HW_TS_Stop+0xfc>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80020c8:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80020ca:	4b14      	ldr	r3, [pc, #80]	; (800211c <HW_TS_Stop+0x10c>)
 80020cc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80020d0:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80020d2:	2003      	movs	r0, #3
 80020d4:	f002 ffa1 	bl	800501a <HAL_NVIC_ClearPendingIRQ>
 80020d8:	e007      	b.n	80020ea <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80020da:	4b11      	ldr	r3, [pc, #68]	; (8002120 <HW_TS_Stop+0x110>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	7cfa      	ldrb	r2, [r7, #19]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d001      	beq.n	80020ea <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 80020e6:	f7ff fccf 	bl	8001a88 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80020ea:	4b08      	ldr	r3, [pc, #32]	; (800210c <HW_TS_Stop+0xfc>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	22ff      	movs	r2, #255	; 0xff
 80020f2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80020f4:	2003      	movs	r0, #3
 80020f6:	f002 ff5a 	bl	8004fae <HAL_NVIC_EnableIRQ>
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002104:	bf00      	nop
}
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000254 	.word	0x20000254
 8002110:	2000005c 	.word	0x2000005c
 8002114:	200000ec 	.word	0x200000ec
 8002118:	40002800 	.word	0x40002800
 800211c:	58000800 	.word	0x58000800
 8002120:	200000ed 	.word	0x200000ed

08002124 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	6039      	str	r1, [r7, #0]
 800212e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002130:	79fa      	ldrb	r2, [r7, #7]
 8002132:	493b      	ldr	r1, [pc, #236]	; (8002220 <HW_TS_Start+0xfc>)
 8002134:	4613      	mov	r3, r2
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	4413      	add	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	440b      	add	r3, r1
 800213e:	330c      	adds	r3, #12
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d103      	bne.n	8002150 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff ff60 	bl	8002010 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002150:	f3ef 8310 	mrs	r3, PRIMASK
 8002154:	60fb      	str	r3, [r7, #12]
  return(result);
 8002156:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002158:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800215a:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800215c:	2003      	movs	r0, #3
 800215e:	f002 ff34 	bl	8004fca <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8002162:	4b30      	ldr	r3, [pc, #192]	; (8002224 <HW_TS_Start+0x100>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	22ca      	movs	r2, #202	; 0xca
 800216a:	625a      	str	r2, [r3, #36]	; 0x24
 800216c:	4b2d      	ldr	r3, [pc, #180]	; (8002224 <HW_TS_Start+0x100>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2253      	movs	r2, #83	; 0x53
 8002174:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002176:	79fa      	ldrb	r2, [r7, #7]
 8002178:	4929      	ldr	r1, [pc, #164]	; (8002220 <HW_TS_Start+0xfc>)
 800217a:	4613      	mov	r3, r2
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	4413      	add	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	440b      	add	r3, r1
 8002184:	330c      	adds	r3, #12
 8002186:	2202      	movs	r2, #2
 8002188:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800218a:	79fa      	ldrb	r2, [r7, #7]
 800218c:	4924      	ldr	r1, [pc, #144]	; (8002220 <HW_TS_Start+0xfc>)
 800218e:	4613      	mov	r3, r2
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	4413      	add	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	440b      	add	r3, r1
 8002198:	3308      	adds	r3, #8
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800219e:	79fa      	ldrb	r2, [r7, #7]
 80021a0:	491f      	ldr	r1, [pc, #124]	; (8002220 <HW_TS_Start+0xfc>)
 80021a2:	4613      	mov	r3, r2
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	4413      	add	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	440b      	add	r3, r1
 80021ac:	3304      	adds	r3, #4
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff fa9b 	bl	80016f0 <linkTimer>
 80021ba:	4603      	mov	r3, r0
 80021bc:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80021be:	4b1a      	ldr	r3, [pc, #104]	; (8002228 <HW_TS_Start+0x104>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80021c4:	4b19      	ldr	r3, [pc, #100]	; (800222c <HW_TS_Start+0x108>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	7c7a      	ldrb	r2, [r7, #17]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d002      	beq.n	80021d6 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 80021d0:	f7ff fc5a 	bl	8001a88 <RescheduleTimerList>
 80021d4:	e013      	b.n	80021fe <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80021d6:	79fa      	ldrb	r2, [r7, #7]
 80021d8:	4911      	ldr	r1, [pc, #68]	; (8002220 <HW_TS_Start+0xfc>)
 80021da:	4613      	mov	r3, r2
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	4413      	add	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	440b      	add	r3, r1
 80021e4:	3308      	adds	r3, #8
 80021e6:	6819      	ldr	r1, [r3, #0]
 80021e8:	8a7b      	ldrh	r3, [r7, #18]
 80021ea:	79fa      	ldrb	r2, [r7, #7]
 80021ec:	1ac9      	subs	r1, r1, r3
 80021ee:	480c      	ldr	r0, [pc, #48]	; (8002220 <HW_TS_Start+0xfc>)
 80021f0:	4613      	mov	r3, r2
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	4413      	add	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	4403      	add	r3, r0
 80021fa:	3308      	adds	r3, #8
 80021fc:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HW_TS_Start+0x100>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	22ff      	movs	r2, #255	; 0xff
 8002206:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002208:	2003      	movs	r0, #3
 800220a:	f002 fed0 	bl	8004fae <HAL_NVIC_EnableIRQ>
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002218:	bf00      	nop
}
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	2000005c 	.word	0x2000005c
 8002224:	20000254 	.word	0x20000254
 8002228:	200000ec 	.word	0x200000ec
 800222c:	200000ed 	.word	0x200000ed

08002230 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	460b      	mov	r3, r1
 800223a:	607a      	str	r2, [r7, #4]
 800223c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4798      	blx	r3

  return;
 8002242:	bf00      	nop
}
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <LL_AHB2_GRP1_EnableClock>:
{
 800224a:	b480      	push	{r7}
 800224c:	b085      	sub	sp, #20
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002256:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002258:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4313      	orrs	r3, r2
 8002260:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002266:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4013      	ands	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800226e:	68fb      	ldr	r3, [r7, #12]
}
 8002270:	bf00      	nop
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002288:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800228a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4313      	orrs	r3, r2
 8002292:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002298:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4013      	ands	r3, r2
 800229e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022a0:	68fb      	ldr	r3, [r7, #12]
}
 80022a2:	bf00      	nop
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
	...

080022b0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80022b4:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <MX_I2C1_Init+0x74>)
 80022b6:	4a1c      	ldr	r2, [pc, #112]	; (8002328 <MX_I2C1_Init+0x78>)
 80022b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 80022ba:	4b1a      	ldr	r3, [pc, #104]	; (8002324 <MX_I2C1_Init+0x74>)
 80022bc:	4a1b      	ldr	r2, [pc, #108]	; (800232c <MX_I2C1_Init+0x7c>)
 80022be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80022c0:	4b18      	ldr	r3, [pc, #96]	; (8002324 <MX_I2C1_Init+0x74>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022c6:	4b17      	ldr	r3, [pc, #92]	; (8002324 <MX_I2C1_Init+0x74>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022cc:	4b15      	ldr	r3, [pc, #84]	; (8002324 <MX_I2C1_Init+0x74>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80022d2:	4b14      	ldr	r3, [pc, #80]	; (8002324 <MX_I2C1_Init+0x74>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <MX_I2C1_Init+0x74>)
 80022da:	2200      	movs	r2, #0
 80022dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022de:	4b11      	ldr	r3, [pc, #68]	; (8002324 <MX_I2C1_Init+0x74>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022e4:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <MX_I2C1_Init+0x74>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022ea:	480e      	ldr	r0, [pc, #56]	; (8002324 <MX_I2C1_Init+0x74>)
 80022ec:	f003 f86a 	bl	80053c4 <HAL_I2C_Init>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80022f6:	f000 fea3 	bl	8003040 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80022fa:	2100      	movs	r1, #0
 80022fc:	4809      	ldr	r0, [pc, #36]	; (8002324 <MX_I2C1_Init+0x74>)
 80022fe:	f003 fcbb 	bl	8005c78 <HAL_I2CEx_ConfigAnalogFilter>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002308:	f000 fe9a 	bl	8003040 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800230c:	2100      	movs	r1, #0
 800230e:	4805      	ldr	r0, [pc, #20]	; (8002324 <MX_I2C1_Init+0x74>)
 8002310:	f003 fcfd 	bl	8005d0e <HAL_I2CEx_ConfigDigitalFilter>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800231a:	f000 fe91 	bl	8003040 <Error_Handler>
  }

}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	200007e0 	.word	0x200007e0
 8002328:	40005400 	.word	0x40005400
 800232c:	00300f38 	.word	0x00300f38

08002330 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8002334:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <MX_I2C3_Init+0x74>)
 8002336:	4a1c      	ldr	r2, [pc, #112]	; (80023a8 <MX_I2C3_Init+0x78>)
 8002338:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 800233a:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <MX_I2C3_Init+0x74>)
 800233c:	f640 6214 	movw	r2, #3604	; 0xe14
 8002340:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002342:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <MX_I2C3_Init+0x74>)
 8002344:	2200      	movs	r2, #0
 8002346:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002348:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <MX_I2C3_Init+0x74>)
 800234a:	2201      	movs	r2, #1
 800234c:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <MX_I2C3_Init+0x74>)
 8002350:	2200      	movs	r2, #0
 8002352:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002354:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <MX_I2C3_Init+0x74>)
 8002356:	2200      	movs	r2, #0
 8002358:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800235a:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <MX_I2C3_Init+0x74>)
 800235c:	2200      	movs	r2, #0
 800235e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002360:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <MX_I2C3_Init+0x74>)
 8002362:	2200      	movs	r2, #0
 8002364:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002366:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <MX_I2C3_Init+0x74>)
 8002368:	2200      	movs	r2, #0
 800236a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800236c:	480d      	ldr	r0, [pc, #52]	; (80023a4 <MX_I2C3_Init+0x74>)
 800236e:	f003 f829 	bl	80053c4 <HAL_I2C_Init>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002378:	f000 fe62 	bl	8003040 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800237c:	2100      	movs	r1, #0
 800237e:	4809      	ldr	r0, [pc, #36]	; (80023a4 <MX_I2C3_Init+0x74>)
 8002380:	f003 fc7a 	bl	8005c78 <HAL_I2CEx_ConfigAnalogFilter>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800238a:	f000 fe59 	bl	8003040 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800238e:	2100      	movs	r1, #0
 8002390:	4804      	ldr	r0, [pc, #16]	; (80023a4 <MX_I2C3_Init+0x74>)
 8002392:	f003 fcbc 	bl	8005d0e <HAL_I2CEx_ConfigDigitalFilter>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800239c:	f000 fe50 	bl	8003040 <Error_Handler>
  }

}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20000794 	.word	0x20000794
 80023a8:	40005c00 	.word	0x40005c00

080023ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b088      	sub	sp, #32
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b4:	f107 030c 	add.w	r3, r7, #12
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a1d      	ldr	r2, [pc, #116]	; (8002440 <HAL_I2C_MspInit+0x94>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d118      	bne.n	8002400 <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ce:	2002      	movs	r0, #2
 80023d0:	f7ff ff3b 	bl	800224a <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023da:	2312      	movs	r3, #18
 80023dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023de:	2301      	movs	r3, #1
 80023e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023e6:	2304      	movs	r3, #4
 80023e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ea:	f107 030c 	add.w	r3, r7, #12
 80023ee:	4619      	mov	r1, r3
 80023f0:	4814      	ldr	r0, [pc, #80]	; (8002444 <HAL_I2C_MspInit+0x98>)
 80023f2:	f002 fe21 	bl	8005038 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023f6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80023fa:	f7ff ff3f 	bl	800227c <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80023fe:	e01b      	b.n	8002438 <HAL_I2C_MspInit+0x8c>
  else if(i2cHandle->Instance==I2C3)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a10      	ldr	r2, [pc, #64]	; (8002448 <HAL_I2C_MspInit+0x9c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d116      	bne.n	8002438 <HAL_I2C_MspInit+0x8c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800240a:	2004      	movs	r0, #4
 800240c:	f7ff ff1d 	bl	800224a <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002410:	2303      	movs	r3, #3
 8002412:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002414:	2312      	movs	r3, #18
 8002416:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002418:	2301      	movs	r3, #1
 800241a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241c:	2300      	movs	r3, #0
 800241e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002420:	2304      	movs	r3, #4
 8002422:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002424:	f107 030c 	add.w	r3, r7, #12
 8002428:	4619      	mov	r1, r3
 800242a:	4808      	ldr	r0, [pc, #32]	; (800244c <HAL_I2C_MspInit+0xa0>)
 800242c:	f002 fe04 	bl	8005038 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002430:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002434:	f7ff ff22 	bl	800227c <LL_APB1_GRP1_EnableClock>
}
 8002438:	bf00      	nop
 800243a:	3720      	adds	r7, #32
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40005400 	.word	0x40005400
 8002444:	48000400 	.word	0x48000400
 8002448:	40005c00 	.word	0x40005c00
 800244c:	48000800 	.word	0x48000800

08002450 <LL_RCC_LSE_SetDriveCapability>:
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800245c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002460:	f023 0218 	bic.w	r2, r3, #24
 8002464:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4313      	orrs	r3, r2
 800246c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002482:	f001 fb01 	bl	8003a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002486:	f000 f87d 	bl	8002584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800248a:	f7fe ffbf 	bl	800140c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800248e:	f001 f9bd 	bl	800380c <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8002492:	f001 fa69 	bl	8003968 <MX_USB_PCD_Init>
  MX_RF_Init();
 8002496:	f000 fdda 	bl	800304e <MX_RF_Init>
  MX_RTC_Init();
 800249a:	f000 fe09 	bl	80030b0 <MX_RTC_Init>
  MX_I2C3_Init();
 800249e:	f7ff ff47 	bl	8002330 <MX_I2C3_Init>
  MX_SPI1_Init();
 80024a2:	f000 fe9b 	bl	80031dc <MX_SPI1_Init>
  MX_SPI2_Init();
 80024a6:	f000 fed7 	bl	8003258 <MX_SPI2_Init>
  MX_TIM16_Init();
 80024aa:	f001 f939 	bl	8003720 <MX_TIM16_Init>
  MX_I2C1_Init();
 80024ae:	f7ff feff 	bl	80022b0 <MX_I2C1_Init>
  MX_ADC1_Init();
 80024b2:	f7fe fe17 	bl	80010e4 <MX_ADC1_Init>
  //ACC Config

  /*
   * LIS3DH
   * */
  LIS3DH_ReadIO(acc1_1, WHO_AM_I, &WAI_LIS3DH_1, 1);
 80024b6:	4a26      	ldr	r2, [pc, #152]	; (8002550 <main+0xd4>)
 80024b8:	2301      	movs	r3, #1
 80024ba:	9301      	str	r3, [sp, #4]
 80024bc:	4b25      	ldr	r3, [pc, #148]	; (8002554 <main+0xd8>)
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	230f      	movs	r3, #15
 80024c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80024c4:	f7fe f845 	bl	8000552 <LIS3DH_ReadIO>
  LIS3DH_Init(acc1_1, &myAccConfigDef);
 80024c8:	4a21      	ldr	r2, [pc, #132]	; (8002550 <main+0xd4>)
 80024ca:	4b23      	ldr	r3, [pc, #140]	; (8002558 <main+0xdc>)
 80024cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80024ce:	f7fe f875 	bl	80005bc <LIS3DH_Init>

  LIS3DH_ReadIO(acc1_2, WHO_AM_I, &WAI_LIS3DH_2, 1);
 80024d2:	4a22      	ldr	r2, [pc, #136]	; (800255c <main+0xe0>)
 80024d4:	2301      	movs	r3, #1
 80024d6:	9301      	str	r3, [sp, #4]
 80024d8:	4b21      	ldr	r3, [pc, #132]	; (8002560 <main+0xe4>)
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	230f      	movs	r3, #15
 80024de:	ca07      	ldmia	r2, {r0, r1, r2}
 80024e0:	f7fe f837 	bl	8000552 <LIS3DH_ReadIO>
  LIS3DH_Init(acc1_2, &myAccConfigDef);
 80024e4:	4a1d      	ldr	r2, [pc, #116]	; (800255c <main+0xe0>)
 80024e6:	4b1c      	ldr	r3, [pc, #112]	; (8002558 <main+0xdc>)
 80024e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80024ea:	f7fe f867 	bl	80005bc <LIS3DH_Init>

  /*
   * MPU9250
   * */
   readByte(acc2_1, WHO_AM_I_MPU9250, &WAI_MPU9250, 1);
 80024ee:	4a1d      	ldr	r2, [pc, #116]	; (8002564 <main+0xe8>)
 80024f0:	2301      	movs	r3, #1
 80024f2:	9301      	str	r3, [sp, #4]
 80024f4:	4b1c      	ldr	r3, [pc, #112]	; (8002568 <main+0xec>)
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	2375      	movs	r3, #117	; 0x75
 80024fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80024fc:	f7fe fc81 	bl	8000e02 <readByte>

   initMPU9250(acc2_1);
 8002500:	4b18      	ldr	r3, [pc, #96]	; (8002564 <main+0xe8>)
 8002502:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002506:	f7fe fce1 	bl	8000ecc <initMPU9250>

  /*
   * MAX30100
   * */
   read_byte(reg, &ID_MAX30100);
 800250a:	4b18      	ldr	r3, [pc, #96]	; (800256c <main+0xf0>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	4918      	ldr	r1, [pc, #96]	; (8002570 <main+0xf4>)
 8002510:	4618      	mov	r0, r3
 8002512:	f7fe fc33 	bl	8000d7c <read_byte>

   begin();
 8002516:	f7fe fa9d 	bl	8000a54 <begin>
   /*
    *  ADC
    * */

  // Calibrate The ADC On Power-Up For Better Accuracy
  HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 800251a:	217f      	movs	r1, #127	; 0x7f
 800251c:	4815      	ldr	r0, [pc, #84]	; (8002574 <main+0xf8>)
 800251e:	f002 fb91 	bl	8004c44 <HAL_ADCEx_Calibration_Start>

   /*
    * Register functions
    * */
   UTIL_SEQ_RegTask( 1<< READ_ACC_TASK, UTIL_SEQ_RFU, read_acc );
 8002522:	4a15      	ldr	r2, [pc, #84]	; (8002578 <main+0xfc>)
 8002524:	2100      	movs	r1, #0
 8002526:	2010      	movs	r0, #16
 8002528:	f00a fb4c 	bl	800cbc4 <UTIL_SEQ_RegTask>
   UTIL_SEQ_RegTask( 1<< READ_FSR_TASK, UTIL_SEQ_RFU, read_fsr );
 800252c:	4a13      	ldr	r2, [pc, #76]	; (800257c <main+0x100>)
 800252e:	2100      	movs	r1, #0
 8002530:	2020      	movs	r0, #32
 8002532:	f00a fb47 	bl	800cbc4 <UTIL_SEQ_RegTask>
   UTIL_SEQ_RegTask( 1<< READ_PPG_TASK, UTIL_SEQ_RFU, read_ppg );
 8002536:	4a12      	ldr	r2, [pc, #72]	; (8002580 <main+0x104>)
 8002538:	2100      	movs	r1, #0
 800253a:	2040      	movs	r0, #64	; 0x40
 800253c:	f00a fb42 	bl	800cbc4 <UTIL_SEQ_RegTask>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  APPE_Init();
 8002540:	f7fe fea6 	bl	8001290 <APPE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002548:	f00a fa5c 	bl	800ca04 <UTIL_SEQ_Run>
 800254c:	e7fa      	b.n	8002544 <main+0xc8>
 800254e:	bf00      	nop
 8002550:	20000010 	.word	0x20000010
 8002554:	2000025e 	.word	0x2000025e
 8002558:	20000008 	.word	0x20000008
 800255c:	2000001c 	.word	0x2000001c
 8002560:	2000025f 	.word	0x2000025f
 8002564:	20000028 	.word	0x20000028
 8002568:	20000260 	.word	0x20000260
 800256c:	20000034 	.word	0x20000034
 8002570:	20000261 	.word	0x20000261
 8002574:	20000730 	.word	0x20000730
 8002578:	08002771 	.word	0x08002771
 800257c:	080026f1 	.word	0x080026f1
 8002580:	08002991 	.word	0x08002991

08002584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b0ae      	sub	sp, #184	; 0xb8
 8002588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800258a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800258e:	2248      	movs	r2, #72	; 0x48
 8002590:	2100      	movs	r1, #0
 8002592:	4618      	mov	r0, r3
 8002594:	f00a fc73 	bl	800ce7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002598:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	605a      	str	r2, [r3, #4]
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	60da      	str	r2, [r3, #12]
 80025a6:	611a      	str	r2, [r3, #16]
 80025a8:	615a      	str	r2, [r3, #20]
 80025aa:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025ac:	1d3b      	adds	r3, r7, #4
 80025ae:	2250      	movs	r2, #80	; 0x50
 80025b0:	2100      	movs	r1, #0
 80025b2:	4618      	mov	r0, r3
 80025b4:	f00a fc63 	bl	800ce7e <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80025b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c6:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80025c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f023 0303 	bic.w	r3, r3, #3
 80025d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80025dc:	f003 fcc8 	bl	8005f70 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80025e0:	2000      	movs	r0, #0
 80025e2:	f7ff ff35 	bl	8002450 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025e6:	4b41      	ldr	r3, [pc, #260]	; (80026ec <SystemClock_Config+0x168>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025ee:	4a3f      	ldr	r2, [pc, #252]	; (80026ec <SystemClock_Config+0x168>)
 80025f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	4b3d      	ldr	r3, [pc, #244]	; (80026ec <SystemClock_Config+0x168>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025fe:	603b      	str	r3, [r7, #0]
 8002600:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002602:	2327      	movs	r3, #39	; 0x27
 8002604:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002606:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800260a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800260c:	2301      	movs	r3, #1
 800260e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002610:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002614:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002616:	2301      	movs	r3, #1
 8002618:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800261c:	2340      	movs	r3, #64	; 0x40
 800261e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002622:	2300      	movs	r3, #0
 8002624:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002628:	2360      	movs	r3, #96	; 0x60
 800262a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800262e:	2300      	movs	r3, #0
 8002630:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002634:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002638:	4618      	mov	r0, r3
 800263a:	f004 f84b 	bl	80066d4 <HAL_RCC_OscConfig>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002644:	f000 fcfc 	bl	8003040 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002648:	236f      	movs	r3, #111	; 0x6f
 800264a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800264c:	2302      	movs	r3, #2
 800264e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002650:	2300      	movs	r3, #0
 8002652:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002654:	2300      	movs	r3, #0
 8002656:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002658:	2300      	movs	r3, #0
 800265a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800265c:	2300      	movs	r3, #0
 800265e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002660:	2300      	movs	r3, #0
 8002662:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002664:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002668:	2101      	movs	r1, #1
 800266a:	4618      	mov	r0, r3
 800266c:	f004 fbc6 	bl	8006dfc <HAL_RCC_ClockConfig>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8002676:	f000 fce3 	bl	8003040 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 800267a:	f643 530d 	movw	r3, #15629	; 0x3d0d
 800267e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8002680:	2318      	movs	r3, #24
 8002682:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002684:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002688:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800268a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800268e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002690:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002694:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8002696:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 800269a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800269c:	2300      	movs	r3, #0
 800269e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80026a0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80026a6:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80026aa:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80026ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80026b0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80026b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80026b6:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80026b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026bc:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80026be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026c2:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80026c4:	2300      	movs	r3, #0
 80026c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80026c8:	2310      	movs	r3, #16
 80026ca:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026cc:	1d3b      	adds	r3, r7, #4
 80026ce:	4618      	mov	r0, r3
 80026d0:	f004 ffde 	bl	8007690 <HAL_RCCEx_PeriphCLKConfig>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <SystemClock_Config+0x15a>
  {
    Error_Handler();
 80026da:	f000 fcb1 	bl	8003040 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80026de:	f005 f94c 	bl	800797a <HAL_RCCEx_EnableMSIPLLMode>
}
 80026e2:	bf00      	nop
 80026e4:	37b8      	adds	r7, #184	; 0xb8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	58000400 	.word	0x58000400

080026f0 <read_fsr>:

/* USER CODE BEGIN 4 */
void read_fsr(void){
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0


	HAL_ADC_Start(&hadc1);
 80026f4:	481a      	ldr	r0, [pc, #104]	; (8002760 <read_fsr+0x70>)
 80026f6:	f001 fda3 	bl	8004240 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80026fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026fe:	4818      	ldr	r0, [pc, #96]	; (8002760 <read_fsr+0x70>)
 8002700:	f001 fdf2 	bl	80042e8 <HAL_ADC_PollForConversion>
	raw_fsr = HAL_ADC_GetValue(&hadc1);
 8002704:	4816      	ldr	r0, [pc, #88]	; (8002760 <read_fsr+0x70>)
 8002706:	f001 fe75 	bl	80043f4 <HAL_ADC_GetValue>
 800270a:	4603      	mov	r3, r0
 800270c:	b29a      	uxth	r2, r3
 800270e:	4b15      	ldr	r3, [pc, #84]	; (8002764 <read_fsr+0x74>)
 8002710:	801a      	strh	r2, [r3, #0]

	ble_buff_FSR[0+counter_fsr] = (raw_fsr & 0x00FF);
 8002712:	4b14      	ldr	r3, [pc, #80]	; (8002764 <read_fsr+0x74>)
 8002714:	8819      	ldrh	r1, [r3, #0]
 8002716:	4b14      	ldr	r3, [pc, #80]	; (8002768 <read_fsr+0x78>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	b2c9      	uxtb	r1, r1
 800271e:	4b13      	ldr	r3, [pc, #76]	; (800276c <read_fsr+0x7c>)
 8002720:	5499      	strb	r1, [r3, r2]
	ble_buff_FSR[1+counter_fsr] = ((raw_fsr >> 8) & 0x00FF);
 8002722:	4b10      	ldr	r3, [pc, #64]	; (8002764 <read_fsr+0x74>)
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	0a1b      	lsrs	r3, r3, #8
 8002728:	b29a      	uxth	r2, r3
 800272a:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <read_fsr+0x78>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	3301      	adds	r3, #1
 8002730:	b2d1      	uxtb	r1, r2
 8002732:	4a0e      	ldr	r2, [pc, #56]	; (800276c <read_fsr+0x7c>)
 8002734:	54d1      	strb	r1, [r2, r3]

	if(counter_fsr == 18){
 8002736:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <read_fsr+0x78>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b12      	cmp	r3, #18
 800273c:	d108      	bne.n	8002750 <read_fsr+0x60>
		counter_fsr=0;
 800273e:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <read_fsr+0x78>)
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << SEND_FSR_DATA_BLE_TASK, CFG_SCH_PRIO_1);
 8002744:	2101      	movs	r1, #1
 8002746:	f44f 7080 	mov.w	r0, #256	; 0x100
 800274a:	f00a fa5b 	bl	800cc04 <UTIL_SEQ_SetTask>
		counter_fsr+=2;
	/*
	 * BUFFER --> [0:19]
	 * */
	//HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
}
 800274e:	e005      	b.n	800275c <read_fsr+0x6c>
		counter_fsr+=2;
 8002750:	4b05      	ldr	r3, [pc, #20]	; (8002768 <read_fsr+0x78>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	3302      	adds	r3, #2
 8002756:	b2da      	uxtb	r2, r3
 8002758:	4b03      	ldr	r3, [pc, #12]	; (8002768 <read_fsr+0x78>)
 800275a:	701a      	strb	r2, [r3, #0]
}
 800275c:	bf00      	nop
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20000730 	.word	0x20000730
 8002764:	2000082c 	.word	0x2000082c
 8002768:	200005f1 	.word	0x200005f1
 800276c:	200005d8 	.word	0x200005d8

08002770 <read_acc>:

void read_acc(void){
 8002770:	b590      	push	{r4, r7, lr}
 8002772:	b087      	sub	sp, #28
 8002774:	af02      	add	r7, sp, #8

	acc_data_raw[0] = LIS3DH_GetDataRaw(acc1_1, HIGH_RESOLUTION);
 8002776:	4c7f      	ldr	r4, [pc, #508]	; (8002974 <read_acc+0x204>)
 8002778:	4638      	mov	r0, r7
 800277a:	4b7f      	ldr	r3, [pc, #508]	; (8002978 <read_acc+0x208>)
 800277c:	2200      	movs	r2, #0
 800277e:	9200      	str	r2, [sp, #0]
 8002780:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002782:	f7fe f873 	bl	800086c <LIS3DH_GetDataRaw>
 8002786:	4622      	mov	r2, r4
 8002788:	463b      	mov	r3, r7
 800278a:	6819      	ldr	r1, [r3, #0]
 800278c:	6011      	str	r1, [r2, #0]
 800278e:	889b      	ldrh	r3, [r3, #4]
 8002790:	8093      	strh	r3, [r2, #4]
	acc_data_raw[1] = LIS3DH_GetDataRaw(acc1_2, HIGH_RESOLUTION);
 8002792:	4c78      	ldr	r4, [pc, #480]	; (8002974 <read_acc+0x204>)
 8002794:	4638      	mov	r0, r7
 8002796:	4b79      	ldr	r3, [pc, #484]	; (800297c <read_acc+0x20c>)
 8002798:	2200      	movs	r2, #0
 800279a:	9200      	str	r2, [sp, #0]
 800279c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800279e:	f7fe f865 	bl	800086c <LIS3DH_GetDataRaw>
 80027a2:	1da3      	adds	r3, r4, #6
 80027a4:	463a      	mov	r2, r7
 80027a6:	6811      	ldr	r1, [r2, #0]
 80027a8:	6019      	str	r1, [r3, #0]
 80027aa:	8892      	ldrh	r2, [r2, #4]
 80027ac:	809a      	strh	r2, [r3, #4]
	acc_data_raw[2] = readAccelData(acc2_1);
 80027ae:	4c71      	ldr	r4, [pc, #452]	; (8002974 <read_acc+0x204>)
 80027b0:	4638      	mov	r0, r7
 80027b2:	4b73      	ldr	r3, [pc, #460]	; (8002980 <read_acc+0x210>)
 80027b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027b6:	f7fe fb50 	bl	8000e5a <readAccelData>
 80027ba:	f104 030c 	add.w	r3, r4, #12
 80027be:	463a      	mov	r2, r7
 80027c0:	6811      	ldr	r1, [r2, #0]
 80027c2:	6019      	str	r1, [r3, #0]
 80027c4:	8892      	ldrh	r2, [r2, #4]
 80027c6:	809a      	strh	r2, [r3, #4]

	for(int i=0;i<4;i++){
 80027c8:	2300      	movs	r3, #0
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	e090      	b.n	80028f0 <read_acc+0x180>
		//X
		ble_buff_ACC[i][0+counter_acc] = (acc_data_raw[i].x & 0x00FF);
 80027ce:	4969      	ldr	r1, [pc, #420]	; (8002974 <read_acc+0x204>)
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	4613      	mov	r3, r2
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4413      	add	r3, r2
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	440b      	add	r3, r1
 80027dc:	881a      	ldrh	r2, [r3, #0]
 80027de:	4b69      	ldr	r3, [pc, #420]	; (8002984 <read_acc+0x214>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	461c      	mov	r4, r3
 80027e4:	b2d0      	uxtb	r0, r2
 80027e6:	4968      	ldr	r1, [pc, #416]	; (8002988 <read_acc+0x218>)
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	4613      	mov	r3, r2
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	440b      	add	r3, r1
 80027f4:	4423      	add	r3, r4
 80027f6:	4602      	mov	r2, r0
 80027f8:	701a      	strb	r2, [r3, #0]
		ble_buff_ACC[i][1+counter_acc] = ((acc_data_raw[i].x >> 8) & 0x00FF);
 80027fa:	495e      	ldr	r1, [pc, #376]	; (8002974 <read_acc+0x204>)
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	4613      	mov	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4413      	add	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	440b      	add	r3, r1
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	0a1b      	lsrs	r3, r3, #8
 800280c:	b29a      	uxth	r2, r3
 800280e:	4b5d      	ldr	r3, [pc, #372]	; (8002984 <read_acc+0x214>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	1c59      	adds	r1, r3, #1
 8002814:	b2d4      	uxtb	r4, r2
 8002816:	485c      	ldr	r0, [pc, #368]	; (8002988 <read_acc+0x218>)
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	4613      	mov	r3, r2
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	1a9b      	subs	r3, r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4403      	add	r3, r0
 8002824:	440b      	add	r3, r1
 8002826:	4622      	mov	r2, r4
 8002828:	701a      	strb	r2, [r3, #0]
		//Y
		ble_buff_ACC[i][2+counter_acc] = (acc_data_raw[i].y & 0x00FF);
 800282a:	4952      	ldr	r1, [pc, #328]	; (8002974 <read_acc+0x204>)
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	4613      	mov	r3, r2
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4413      	add	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	440b      	add	r3, r1
 8002838:	3302      	adds	r3, #2
 800283a:	881a      	ldrh	r2, [r3, #0]
 800283c:	4b51      	ldr	r3, [pc, #324]	; (8002984 <read_acc+0x214>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	1c99      	adds	r1, r3, #2
 8002842:	b2d4      	uxtb	r4, r2
 8002844:	4850      	ldr	r0, [pc, #320]	; (8002988 <read_acc+0x218>)
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	4613      	mov	r3, r2
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	4403      	add	r3, r0
 8002852:	440b      	add	r3, r1
 8002854:	4622      	mov	r2, r4
 8002856:	701a      	strb	r2, [r3, #0]
		ble_buff_ACC[i][3+counter_acc] = ((acc_data_raw[i].y >> 8) & 0x00FF);
 8002858:	4946      	ldr	r1, [pc, #280]	; (8002974 <read_acc+0x204>)
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	4613      	mov	r3, r2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	4413      	add	r3, r2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	440b      	add	r3, r1
 8002866:	3302      	adds	r3, #2
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	0a1b      	lsrs	r3, r3, #8
 800286c:	b29a      	uxth	r2, r3
 800286e:	4b45      	ldr	r3, [pc, #276]	; (8002984 <read_acc+0x214>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	1cd9      	adds	r1, r3, #3
 8002874:	b2d4      	uxtb	r4, r2
 8002876:	4844      	ldr	r0, [pc, #272]	; (8002988 <read_acc+0x218>)
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	4613      	mov	r3, r2
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	1a9b      	subs	r3, r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	4403      	add	r3, r0
 8002884:	440b      	add	r3, r1
 8002886:	4622      	mov	r2, r4
 8002888:	701a      	strb	r2, [r3, #0]
		//Z
		ble_buff_ACC[i][4+counter_acc] = (acc_data_raw[i].z & 0x00FF);
 800288a:	493a      	ldr	r1, [pc, #232]	; (8002974 <read_acc+0x204>)
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4613      	mov	r3, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	4413      	add	r3, r2
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	440b      	add	r3, r1
 8002898:	3304      	adds	r3, #4
 800289a:	881a      	ldrh	r2, [r3, #0]
 800289c:	4b39      	ldr	r3, [pc, #228]	; (8002984 <read_acc+0x214>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	1d19      	adds	r1, r3, #4
 80028a2:	b2d4      	uxtb	r4, r2
 80028a4:	4838      	ldr	r0, [pc, #224]	; (8002988 <read_acc+0x218>)
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4613      	mov	r3, r2
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4403      	add	r3, r0
 80028b2:	440b      	add	r3, r1
 80028b4:	4622      	mov	r2, r4
 80028b6:	701a      	strb	r2, [r3, #0]
		ble_buff_ACC[i][5+counter_acc] = ((acc_data_raw[i].z >> 8) & 0x00FF);
 80028b8:	492e      	ldr	r1, [pc, #184]	; (8002974 <read_acc+0x204>)
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4613      	mov	r3, r2
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	4413      	add	r3, r2
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	440b      	add	r3, r1
 80028c6:	3304      	adds	r3, #4
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	0a1b      	lsrs	r3, r3, #8
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	4b2d      	ldr	r3, [pc, #180]	; (8002984 <read_acc+0x214>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	1d59      	adds	r1, r3, #5
 80028d4:	b2d4      	uxtb	r4, r2
 80028d6:	482c      	ldr	r0, [pc, #176]	; (8002988 <read_acc+0x218>)
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4613      	mov	r3, r2
 80028dc:	011b      	lsls	r3, r3, #4
 80028de:	1a9b      	subs	r3, r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	4403      	add	r3, r0
 80028e4:	440b      	add	r3, r1
 80028e6:	4622      	mov	r2, r4
 80028e8:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<4;i++){
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	3301      	adds	r3, #1
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2b03      	cmp	r3, #3
 80028f4:	f77f af6b 	ble.w	80027ce <read_acc+0x5e>
	}
	counter_acc+=6;
 80028f8:	4b22      	ldr	r3, [pc, #136]	; (8002984 <read_acc+0x214>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	3306      	adds	r3, #6
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	4b20      	ldr	r3, [pc, #128]	; (8002984 <read_acc+0x214>)
 8002902:	701a      	strb	r2, [r3, #0]

	if(counter_acc == 30){
 8002904:	4b1f      	ldr	r3, [pc, #124]	; (8002984 <read_acc+0x214>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b1e      	cmp	r3, #30
 800290a:	d106      	bne.n	800291a <read_acc+0x1aa>
		// send first pack
		acc_pack_number = 0x01;
 800290c:	4b1f      	ldr	r3, [pc, #124]	; (800298c <read_acc+0x21c>)
 800290e:	2201      	movs	r2, #1
 8002910:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << SEND_ACC_DATA_BLE_TASK, CFG_SCH_PRIO_1);
 8002912:	2101      	movs	r1, #1
 8002914:	2080      	movs	r0, #128	; 0x80
 8002916:	f00a f975 	bl	800cc04 <UTIL_SEQ_SetTask>
	}
	if(counter_acc == 60){
 800291a:	4b1a      	ldr	r3, [pc, #104]	; (8002984 <read_acc+0x214>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b3c      	cmp	r3, #60	; 0x3c
 8002920:	d106      	bne.n	8002930 <read_acc+0x1c0>
		// send second pack
		acc_pack_number = 0x02;
 8002922:	4b1a      	ldr	r3, [pc, #104]	; (800298c <read_acc+0x21c>)
 8002924:	2202      	movs	r2, #2
 8002926:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << SEND_ACC_DATA_BLE_TASK, CFG_SCH_PRIO_1);
 8002928:	2101      	movs	r1, #1
 800292a:	2080      	movs	r0, #128	; 0x80
 800292c:	f00a f96a 	bl	800cc04 <UTIL_SEQ_SetTask>
	}
	if(counter_acc == 90){
 8002930:	4b14      	ldr	r3, [pc, #80]	; (8002984 <read_acc+0x214>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b5a      	cmp	r3, #90	; 0x5a
 8002936:	d106      	bne.n	8002946 <read_acc+0x1d6>
		// send third pack
		acc_pack_number = 0x03;
 8002938:	4b14      	ldr	r3, [pc, #80]	; (800298c <read_acc+0x21c>)
 800293a:	2203      	movs	r2, #3
 800293c:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << SEND_ACC_DATA_BLE_TASK, CFG_SCH_PRIO_1);
 800293e:	2101      	movs	r1, #1
 8002940:	2080      	movs	r0, #128	; 0x80
 8002942:	f00a f95f 	bl	800cc04 <UTIL_SEQ_SetTask>
	}
	if(counter_acc == 120){
 8002946:	4b0f      	ldr	r3, [pc, #60]	; (8002984 <read_acc+0x214>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b78      	cmp	r3, #120	; 0x78
 800294c:	d106      	bne.n	800295c <read_acc+0x1ec>
		// send fourth pack
		acc_pack_number = 0x04;
 800294e:	4b0f      	ldr	r3, [pc, #60]	; (800298c <read_acc+0x21c>)
 8002950:	2204      	movs	r2, #4
 8002952:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << SEND_ACC_DATA_BLE_TASK, CFG_SCH_PRIO_1);
 8002954:	2101      	movs	r1, #1
 8002956:	2080      	movs	r0, #128	; 0x80
 8002958:	f00a f954 	bl	800cc04 <UTIL_SEQ_SetTask>
	}

	if(counter_acc == 120)
 800295c:	4b09      	ldr	r3, [pc, #36]	; (8002984 <read_acc+0x214>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b78      	cmp	r3, #120	; 0x78
 8002962:	d102      	bne.n	800296a <read_acc+0x1fa>
		counter_acc = 0;
 8002964:	4b07      	ldr	r3, [pc, #28]	; (8002984 <read_acc+0x214>)
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]

}
 800296a:	bf00      	nop
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	bd90      	pop	{r4, r7, pc}
 8002972:	bf00      	nop
 8002974:	20000830 	.word	0x20000830
 8002978:	20000010 	.word	0x20000010
 800297c:	2000001c 	.word	0x2000001c
 8002980:	20000028 	.word	0x20000028
 8002984:	200005ef 	.word	0x200005ef
 8002988:	200003f8 	.word	0x200003f8
 800298c:	200005f2 	.word	0x200005f2

08002990 <read_ppg>:


void read_ppg(void){
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
	/*
	 * MAX30100
	 * */
	readFIFO(&RED, &IR);
 8002994:	4935      	ldr	r1, [pc, #212]	; (8002a6c <read_ppg+0xdc>)
 8002996:	4836      	ldr	r0, [pc, #216]	; (8002a70 <read_ppg+0xe0>)
 8002998:	f7fe f9a0 	bl	8000cdc <readFIFO>

	ble_buff_PPG[0][0+counter_ppg] = (RED & 0x00FF);
 800299c:	4b34      	ldr	r3, [pc, #208]	; (8002a70 <read_ppg+0xe0>)
 800299e:	8819      	ldrh	r1, [r3, #0]
 80029a0:	4b34      	ldr	r3, [pc, #208]	; (8002a74 <read_ppg+0xe4>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	461a      	mov	r2, r3
 80029a6:	b2c9      	uxtb	r1, r1
 80029a8:	4b33      	ldr	r3, [pc, #204]	; (8002a78 <read_ppg+0xe8>)
 80029aa:	5499      	strb	r1, [r3, r2]
	ble_buff_PPG[0][1+counter_ppg] = ((RED >> 8) & 0x00FF);
 80029ac:	4b30      	ldr	r3, [pc, #192]	; (8002a70 <read_ppg+0xe0>)
 80029ae:	881b      	ldrh	r3, [r3, #0]
 80029b0:	0a1b      	lsrs	r3, r3, #8
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	4b2f      	ldr	r3, [pc, #188]	; (8002a74 <read_ppg+0xe4>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	3301      	adds	r3, #1
 80029ba:	b2d1      	uxtb	r1, r2
 80029bc:	4a2e      	ldr	r2, [pc, #184]	; (8002a78 <read_ppg+0xe8>)
 80029be:	54d1      	strb	r1, [r2, r3]

	ble_buff_PPG[1][0+counter_ppg] = (IR & 0x00FF);
 80029c0:	4b2a      	ldr	r3, [pc, #168]	; (8002a6c <read_ppg+0xdc>)
 80029c2:	881a      	ldrh	r2, [r3, #0]
 80029c4:	4b2b      	ldr	r3, [pc, #172]	; (8002a74 <read_ppg+0xe4>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	4619      	mov	r1, r3
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	4b2a      	ldr	r3, [pc, #168]	; (8002a78 <read_ppg+0xe8>)
 80029ce:	440b      	add	r3, r1
 80029d0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	ble_buff_PPG[1][1+counter_ppg] = ((IR >> 8) & 0x00FF);
 80029d4:	4b25      	ldr	r3, [pc, #148]	; (8002a6c <read_ppg+0xdc>)
 80029d6:	881b      	ldrh	r3, [r3, #0]
 80029d8:	0a1b      	lsrs	r3, r3, #8
 80029da:	b29a      	uxth	r2, r3
 80029dc:	4b25      	ldr	r3, [pc, #148]	; (8002a74 <read_ppg+0xe4>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	3301      	adds	r3, #1
 80029e2:	b2d1      	uxtb	r1, r2
 80029e4:	4a24      	ldr	r2, [pc, #144]	; (8002a78 <read_ppg+0xe8>)
 80029e6:	4413      	add	r3, r2
 80029e8:	460a      	mov	r2, r1
 80029ea:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

	counter_ppg+=2;
 80029ee:	4b21      	ldr	r3, [pc, #132]	; (8002a74 <read_ppg+0xe4>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	3302      	adds	r3, #2
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	4b1f      	ldr	r3, [pc, #124]	; (8002a74 <read_ppg+0xe4>)
 80029f8:	701a      	strb	r2, [r3, #0]

	if(counter_ppg == 50){
 80029fa:	4b1e      	ldr	r3, [pc, #120]	; (8002a74 <read_ppg+0xe4>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b32      	cmp	r3, #50	; 0x32
 8002a00:	d107      	bne.n	8002a12 <read_ppg+0x82>
		// send first pack
		ppg_pack_number = 0x01;
 8002a02:	4b1e      	ldr	r3, [pc, #120]	; (8002a7c <read_ppg+0xec>)
 8002a04:	2201      	movs	r2, #1
 8002a06:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << SEND_PPG_DATA_BLE_TASK, CFG_SCH_PRIO_1);
 8002a08:	2101      	movs	r1, #1
 8002a0a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002a0e:	f00a f8f9 	bl	800cc04 <UTIL_SEQ_SetTask>
	}
	if(counter_ppg == 100){
 8002a12:	4b18      	ldr	r3, [pc, #96]	; (8002a74 <read_ppg+0xe4>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b64      	cmp	r3, #100	; 0x64
 8002a18:	d107      	bne.n	8002a2a <read_ppg+0x9a>
		// send second pack
		ppg_pack_number = 0x02;
 8002a1a:	4b18      	ldr	r3, [pc, #96]	; (8002a7c <read_ppg+0xec>)
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << SEND_PPG_DATA_BLE_TASK, CFG_SCH_PRIO_1);
 8002a20:	2101      	movs	r1, #1
 8002a22:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002a26:	f00a f8ed 	bl	800cc04 <UTIL_SEQ_SetTask>
	}
	if(counter_ppg == 150){
 8002a2a:	4b12      	ldr	r3, [pc, #72]	; (8002a74 <read_ppg+0xe4>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b96      	cmp	r3, #150	; 0x96
 8002a30:	d107      	bne.n	8002a42 <read_ppg+0xb2>
		// send third pack
		ppg_pack_number = 0x03;
 8002a32:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <read_ppg+0xec>)
 8002a34:	2203      	movs	r2, #3
 8002a36:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << SEND_PPG_DATA_BLE_TASK, CFG_SCH_PRIO_1);
 8002a38:	2101      	movs	r1, #1
 8002a3a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002a3e:	f00a f8e1 	bl	800cc04 <UTIL_SEQ_SetTask>
	}
	if(counter_ppg == 200){
 8002a42:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <read_ppg+0xe4>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2bc8      	cmp	r3, #200	; 0xc8
 8002a48:	d107      	bne.n	8002a5a <read_ppg+0xca>
		// send fourth pack
		ppg_pack_number = 0x04;
 8002a4a:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <read_ppg+0xec>)
 8002a4c:	2204      	movs	r2, #4
 8002a4e:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << SEND_PPG_DATA_BLE_TASK, CFG_SCH_PRIO_1);
 8002a50:	2101      	movs	r1, #1
 8002a52:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002a56:	f00a f8d5 	bl	800cc04 <UTIL_SEQ_SetTask>
	}

	if(counter_ppg == 200)
 8002a5a:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <read_ppg+0xe4>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2bc8      	cmp	r3, #200	; 0xc8
 8002a60:	d102      	bne.n	8002a68 <read_ppg+0xd8>
		counter_ppg = 0;
 8002a62:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <read_ppg+0xe4>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]

}
 8002a68:	bf00      	nop
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	20000262 	.word	0x20000262
 8002a70:	20000264 	.word	0x20000264
 8002a74:	200005f0 	.word	0x200005f0
 8002a78:	20000268 	.word	0x20000268
 8002a7c:	200005f3 	.word	0x200005f3

08002a80 <prepare_fsr_ble_pack>:

void prepare_fsr_ble_pack(uint8_t* buff){
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]

	buff[0] = BLE_PACK_ID;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2228      	movs	r2, #40	; 0x28
 8002a8c:	701a      	strb	r2, [r3, #0]
	buff[1] = BLE_FSR_PACK;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	3301      	adds	r3, #1
 8002a92:	2201      	movs	r2, #1
 8002a94:	701a      	strb	r2, [r3, #0]
	buff[2] = 0x01;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3302      	adds	r3, #2
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	701a      	strb	r2, [r3, #0]
	for(int i=3;i<23;i++)
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	e00a      	b.n	8002aba <prepare_fsr_ble_pack+0x3a>
		buff[i] = ble_buff_FSR[i-3];
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1eda      	subs	r2, r3, #3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	440b      	add	r3, r1
 8002aae:	4907      	ldr	r1, [pc, #28]	; (8002acc <prepare_fsr_ble_pack+0x4c>)
 8002ab0:	5c8a      	ldrb	r2, [r1, r2]
 8002ab2:	701a      	strb	r2, [r3, #0]
	for(int i=3;i<23;i++)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b16      	cmp	r3, #22
 8002abe:	ddf1      	ble.n	8002aa4 <prepare_fsr_ble_pack+0x24>

}
 8002ac0:	bf00      	nop
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	200005d8 	.word	0x200005d8

08002ad0 <prepare_acc_ble_pack>:

void prepare_acc_ble_pack(uint8_t* buff){
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b0a6      	sub	sp, #152	; 0x98
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]

	uint8_t acc_buffer[123] = {0};
 8002ad8:	f107 0308 	add.w	r3, r7, #8
 8002adc:	227b      	movs	r2, #123	; 0x7b
 8002ade:	2100      	movs	r1, #0
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f00a f9cc 	bl	800ce7e <memset>

	if(acc_pack_number != 0x00){
 8002ae6:	4bb7      	ldr	r3, [pc, #732]	; (8002dc4 <prepare_acc_ble_pack+0x2f4>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 8165 	beq.w	8002dba <prepare_acc_ble_pack+0x2ea>
		switch(acc_pack_number){
 8002af0:	4bb4      	ldr	r3, [pc, #720]	; (8002dc4 <prepare_acc_ble_pack+0x2f4>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	3b01      	subs	r3, #1
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	f200 8140 	bhi.w	8002d7c <prepare_acc_ble_pack+0x2ac>
 8002afc:	a201      	add	r2, pc, #4	; (adr r2, 8002b04 <prepare_acc_ble_pack+0x34>)
 8002afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b02:	bf00      	nop
 8002b04:	08002b15 	.word	0x08002b15
 8002b08:	08002baf 	.word	0x08002baf
 8002b0c:	08002c49 	.word	0x08002c49
 8002b10:	08002ce3 	.word	0x08002ce3
			case 0x01:
				acc_buffer[0] = BLE_PACK_ID;
 8002b14:	2328      	movs	r3, #40	; 0x28
 8002b16:	723b      	strb	r3, [r7, #8]
				acc_buffer[1] = BLE_ACC_PACK;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	727b      	strb	r3, [r7, #9]
				acc_buffer[2] = acc_pack_number;
 8002b1c:	4ba9      	ldr	r3, [pc, #676]	; (8002dc4 <prepare_acc_ble_pack+0x2f4>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	72bb      	strb	r3, [r7, #10]
				for(int i=0;i<30;i++){
 8002b22:	2300      	movs	r3, #0
 8002b24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b28:	e03c      	b.n	8002ba4 <prepare_acc_ble_pack+0xd4>
					acc_buffer[3 + i] = ble_buff_ACC[0][i];
 8002b2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b2e:	3303      	adds	r3, #3
 8002b30:	49a5      	ldr	r1, [pc, #660]	; (8002dc8 <prepare_acc_ble_pack+0x2f8>)
 8002b32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b36:	440a      	add	r2, r1
 8002b38:	7812      	ldrb	r2, [r2, #0]
 8002b3a:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002b3e:	440b      	add	r3, r1
 8002b40:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[33 + i] = ble_buff_ACC[1][i];
 8002b44:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b48:	3321      	adds	r3, #33	; 0x21
 8002b4a:	499f      	ldr	r1, [pc, #636]	; (8002dc8 <prepare_acc_ble_pack+0x2f8>)
 8002b4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b50:	440a      	add	r2, r1
 8002b52:	3278      	adds	r2, #120	; 0x78
 8002b54:	7812      	ldrb	r2, [r2, #0]
 8002b56:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002b5a:	440b      	add	r3, r1
 8002b5c:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[63 + i] = ble_buff_ACC[2][i];
 8002b60:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b64:	333f      	adds	r3, #63	; 0x3f
 8002b66:	4998      	ldr	r1, [pc, #608]	; (8002dc8 <prepare_acc_ble_pack+0x2f8>)
 8002b68:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b6c:	440a      	add	r2, r1
 8002b6e:	32f0      	adds	r2, #240	; 0xf0
 8002b70:	7812      	ldrb	r2, [r2, #0]
 8002b72:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002b76:	440b      	add	r3, r1
 8002b78:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[93 + i] = ble_buff_ACC[3][i];
 8002b7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b80:	335d      	adds	r3, #93	; 0x5d
 8002b82:	4991      	ldr	r1, [pc, #580]	; (8002dc8 <prepare_acc_ble_pack+0x2f8>)
 8002b84:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b88:	440a      	add	r2, r1
 8002b8a:	f502 72b4 	add.w	r2, r2, #360	; 0x168
 8002b8e:	7812      	ldrb	r2, [r2, #0]
 8002b90:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002b94:	440b      	add	r3, r1
 8002b96:	f803 2c90 	strb.w	r2, [r3, #-144]
				for(int i=0;i<30;i++){
 8002b9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ba4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ba8:	2b1d      	cmp	r3, #29
 8002baa:	ddbe      	ble.n	8002b2a <prepare_acc_ble_pack+0x5a>
				}
				break;
 8002bac:	e0ea      	b.n	8002d84 <prepare_acc_ble_pack+0x2b4>
			case 0x02:
				acc_buffer[0] = BLE_PACK_ID;
 8002bae:	2328      	movs	r3, #40	; 0x28
 8002bb0:	723b      	strb	r3, [r7, #8]
				acc_buffer[1] = BLE_ACC_PACK;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	727b      	strb	r3, [r7, #9]
				acc_buffer[2] = acc_pack_number;
 8002bb6:	4b83      	ldr	r3, [pc, #524]	; (8002dc4 <prepare_acc_ble_pack+0x2f4>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	72bb      	strb	r3, [r7, #10]
				for(int i=30;i<60;i++){
 8002bbc:	231e      	movs	r3, #30
 8002bbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002bc2:	e03c      	b.n	8002c3e <prepare_acc_ble_pack+0x16e>
					acc_buffer[3 + i - 30] = ble_buff_ACC[0][i];
 8002bc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bc8:	3b1b      	subs	r3, #27
 8002bca:	497f      	ldr	r1, [pc, #508]	; (8002dc8 <prepare_acc_ble_pack+0x2f8>)
 8002bcc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002bd0:	440a      	add	r2, r1
 8002bd2:	7812      	ldrb	r2, [r2, #0]
 8002bd4:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002bd8:	440b      	add	r3, r1
 8002bda:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[33 + i- 30] = ble_buff_ACC[1][i];
 8002bde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002be2:	3303      	adds	r3, #3
 8002be4:	4978      	ldr	r1, [pc, #480]	; (8002dc8 <prepare_acc_ble_pack+0x2f8>)
 8002be6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002bea:	440a      	add	r2, r1
 8002bec:	3278      	adds	r2, #120	; 0x78
 8002bee:	7812      	ldrb	r2, [r2, #0]
 8002bf0:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002bf4:	440b      	add	r3, r1
 8002bf6:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[63 + i- 30] = ble_buff_ACC[2][i];
 8002bfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bfe:	3321      	adds	r3, #33	; 0x21
 8002c00:	4971      	ldr	r1, [pc, #452]	; (8002dc8 <prepare_acc_ble_pack+0x2f8>)
 8002c02:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002c06:	440a      	add	r2, r1
 8002c08:	32f0      	adds	r2, #240	; 0xf0
 8002c0a:	7812      	ldrb	r2, [r2, #0]
 8002c0c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002c10:	440b      	add	r3, r1
 8002c12:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[93 + i - 30] = ble_buff_ACC[3][i];
 8002c16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c1a:	333f      	adds	r3, #63	; 0x3f
 8002c1c:	496a      	ldr	r1, [pc, #424]	; (8002dc8 <prepare_acc_ble_pack+0x2f8>)
 8002c1e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002c22:	440a      	add	r2, r1
 8002c24:	f502 72b4 	add.w	r2, r2, #360	; 0x168
 8002c28:	7812      	ldrb	r2, [r2, #0]
 8002c2a:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002c2e:	440b      	add	r3, r1
 8002c30:	f803 2c90 	strb.w	r2, [r3, #-144]
				for(int i=30;i<60;i++){
 8002c34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c38:	3301      	adds	r3, #1
 8002c3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c42:	2b3b      	cmp	r3, #59	; 0x3b
 8002c44:	ddbe      	ble.n	8002bc4 <prepare_acc_ble_pack+0xf4>
				}
				break;
 8002c46:	e09d      	b.n	8002d84 <prepare_acc_ble_pack+0x2b4>
			case 0x03:
				acc_buffer[0] = BLE_PACK_ID;
 8002c48:	2328      	movs	r3, #40	; 0x28
 8002c4a:	723b      	strb	r3, [r7, #8]
				acc_buffer[1] = BLE_ACC_PACK;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	727b      	strb	r3, [r7, #9]
				acc_buffer[2] = acc_pack_number;
 8002c50:	4b5c      	ldr	r3, [pc, #368]	; (8002dc4 <prepare_acc_ble_pack+0x2f4>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	72bb      	strb	r3, [r7, #10]
				for(int i=60;i<90;i++){
 8002c56:	233c      	movs	r3, #60	; 0x3c
 8002c58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002c5c:	e03c      	b.n	8002cd8 <prepare_acc_ble_pack+0x208>
					acc_buffer[3 + i - 60] = ble_buff_ACC[0][i];
 8002c5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c62:	3b39      	subs	r3, #57	; 0x39
 8002c64:	4958      	ldr	r1, [pc, #352]	; (8002dc8 <prepare_acc_ble_pack+0x2f8>)
 8002c66:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002c6a:	440a      	add	r2, r1
 8002c6c:	7812      	ldrb	r2, [r2, #0]
 8002c6e:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002c72:	440b      	add	r3, r1
 8002c74:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[33 + i - 60] = ble_buff_ACC[1][i];
 8002c78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c7c:	3b1b      	subs	r3, #27
 8002c7e:	4952      	ldr	r1, [pc, #328]	; (8002dc8 <prepare_acc_ble_pack+0x2f8>)
 8002c80:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002c84:	440a      	add	r2, r1
 8002c86:	3278      	adds	r2, #120	; 0x78
 8002c88:	7812      	ldrb	r2, [r2, #0]
 8002c8a:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002c8e:	440b      	add	r3, r1
 8002c90:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[63 + i - 60] = ble_buff_ACC[2][i];
 8002c94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c98:	3303      	adds	r3, #3
 8002c9a:	494b      	ldr	r1, [pc, #300]	; (8002dc8 <prepare_acc_ble_pack+0x2f8>)
 8002c9c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002ca0:	440a      	add	r2, r1
 8002ca2:	32f0      	adds	r2, #240	; 0xf0
 8002ca4:	7812      	ldrb	r2, [r2, #0]
 8002ca6:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002caa:	440b      	add	r3, r1
 8002cac:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[93 + i - 60] = ble_buff_ACC[3][i];
 8002cb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cb4:	3321      	adds	r3, #33	; 0x21
 8002cb6:	4944      	ldr	r1, [pc, #272]	; (8002dc8 <prepare_acc_ble_pack+0x2f8>)
 8002cb8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002cbc:	440a      	add	r2, r1
 8002cbe:	f502 72b4 	add.w	r2, r2, #360	; 0x168
 8002cc2:	7812      	ldrb	r2, [r2, #0]
 8002cc4:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002cc8:	440b      	add	r3, r1
 8002cca:	f803 2c90 	strb.w	r2, [r3, #-144]
				for(int i=60;i<90;i++){
 8002cce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002cd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cdc:	2b59      	cmp	r3, #89	; 0x59
 8002cde:	ddbe      	ble.n	8002c5e <prepare_acc_ble_pack+0x18e>
				}
				break;
 8002ce0:	e050      	b.n	8002d84 <prepare_acc_ble_pack+0x2b4>
			case 0x04:
				acc_buffer[0] = BLE_PACK_ID;
 8002ce2:	2328      	movs	r3, #40	; 0x28
 8002ce4:	723b      	strb	r3, [r7, #8]
				acc_buffer[1] = BLE_ACC_PACK;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	727b      	strb	r3, [r7, #9]
				acc_buffer[2] = acc_pack_number;
 8002cea:	4b36      	ldr	r3, [pc, #216]	; (8002dc4 <prepare_acc_ble_pack+0x2f4>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	72bb      	strb	r3, [r7, #10]
				for(int i=90;i<120;i++){
 8002cf0:	235a      	movs	r3, #90	; 0x5a
 8002cf2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002cf6:	e03c      	b.n	8002d72 <prepare_acc_ble_pack+0x2a2>
					acc_buffer[3 + i - 90] = ble_buff_ACC[0][i];
 8002cf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cfc:	3b57      	subs	r3, #87	; 0x57
 8002cfe:	4932      	ldr	r1, [pc, #200]	; (8002dc8 <prepare_acc_ble_pack+0x2f8>)
 8002d00:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002d04:	440a      	add	r2, r1
 8002d06:	7812      	ldrb	r2, [r2, #0]
 8002d08:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002d0c:	440b      	add	r3, r1
 8002d0e:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[33 + i - 90] = ble_buff_ACC[1][i];
 8002d12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d16:	3b39      	subs	r3, #57	; 0x39
 8002d18:	492b      	ldr	r1, [pc, #172]	; (8002dc8 <prepare_acc_ble_pack+0x2f8>)
 8002d1a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002d1e:	440a      	add	r2, r1
 8002d20:	3278      	adds	r2, #120	; 0x78
 8002d22:	7812      	ldrb	r2, [r2, #0]
 8002d24:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002d28:	440b      	add	r3, r1
 8002d2a:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[63 + i - 90] = ble_buff_ACC[2][i];
 8002d2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d32:	3b1b      	subs	r3, #27
 8002d34:	4924      	ldr	r1, [pc, #144]	; (8002dc8 <prepare_acc_ble_pack+0x2f8>)
 8002d36:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002d3a:	440a      	add	r2, r1
 8002d3c:	32f0      	adds	r2, #240	; 0xf0
 8002d3e:	7812      	ldrb	r2, [r2, #0]
 8002d40:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002d44:	440b      	add	r3, r1
 8002d46:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[93 + i - 90] = ble_buff_ACC[3][i];
 8002d4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d4e:	3303      	adds	r3, #3
 8002d50:	491d      	ldr	r1, [pc, #116]	; (8002dc8 <prepare_acc_ble_pack+0x2f8>)
 8002d52:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002d56:	440a      	add	r2, r1
 8002d58:	f502 72b4 	add.w	r2, r2, #360	; 0x168
 8002d5c:	7812      	ldrb	r2, [r2, #0]
 8002d5e:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002d62:	440b      	add	r3, r1
 8002d64:	f803 2c90 	strb.w	r2, [r3, #-144]
				for(int i=90;i<120;i++){
 8002d68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d76:	2b77      	cmp	r3, #119	; 0x77
 8002d78:	ddbe      	ble.n	8002cf8 <prepare_acc_ble_pack+0x228>
				}
				break;
 8002d7a:	e003      	b.n	8002d84 <prepare_acc_ble_pack+0x2b4>
			default:
				acc_pack_number = 0x00;
 8002d7c:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <prepare_acc_ble_pack+0x2f4>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	701a      	strb	r2, [r3, #0]
				break;
 8002d82:	bf00      	nop
		}
		acc_pack_number = 0x00;
 8002d84:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <prepare_acc_ble_pack+0x2f4>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<123;i++)
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d90:	e00f      	b.n	8002db2 <prepare_acc_ble_pack+0x2e2>
			buff[i] = acc_buffer[i];
 8002d92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	f107 0108 	add.w	r1, r7, #8
 8002d9e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002da2:	440a      	add	r2, r1
 8002da4:	7812      	ldrb	r2, [r2, #0]
 8002da6:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<123;i++)
 8002da8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dac:	3301      	adds	r3, #1
 8002dae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002db2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002db6:	2b7a      	cmp	r3, #122	; 0x7a
 8002db8:	ddeb      	ble.n	8002d92 <prepare_acc_ble_pack+0x2c2>
	}
}
 8002dba:	bf00      	nop
 8002dbc:	3798      	adds	r7, #152	; 0x98
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	200005f2 	.word	0x200005f2
 8002dc8:	200003f8 	.word	0x200003f8

08002dcc <prepare_ppg_ble_pack>:
void prepare_ppg_ble_pack(uint8_t* buff){
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b0a2      	sub	sp, #136	; 0x88
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]

	uint8_t ppg_buffer[103] = {0};
 8002dd4:	f107 030c 	add.w	r3, r7, #12
 8002dd8:	2267      	movs	r2, #103	; 0x67
 8002dda:	2100      	movs	r1, #0
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f00a f84e 	bl	800ce7e <memset>

	if(ppg_pack_number != 0x00){
 8002de2:	4b72      	ldr	r3, [pc, #456]	; (8002fac <prepare_ppg_ble_pack+0x1e0>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 80db 	beq.w	8002fa2 <prepare_ppg_ble_pack+0x1d6>
		switch(ppg_pack_number){
 8002dec:	4b6f      	ldr	r3, [pc, #444]	; (8002fac <prepare_ppg_ble_pack+0x1e0>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	3b01      	subs	r3, #1
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	f200 80bc 	bhi.w	8002f70 <prepare_ppg_ble_pack+0x1a4>
 8002df8:	a201      	add	r2, pc, #4	; (adr r2, 8002e00 <prepare_ppg_ble_pack+0x34>)
 8002dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfe:	bf00      	nop
 8002e00:	08002e11 	.word	0x08002e11
 8002e04:	08002e71 	.word	0x08002e71
 8002e08:	08002ed1 	.word	0x08002ed1
 8002e0c:	08002f21 	.word	0x08002f21
			case 0x01:
				ppg_buffer[0] = BLE_PACK_ID;
 8002e10:	2328      	movs	r3, #40	; 0x28
 8002e12:	733b      	strb	r3, [r7, #12]
				ppg_buffer[1] = BLE_PPG_PACK;
 8002e14:	2303      	movs	r3, #3
 8002e16:	737b      	strb	r3, [r7, #13]
				ppg_buffer[2] = ppg_pack_number;
 8002e18:	4b64      	ldr	r3, [pc, #400]	; (8002fac <prepare_ppg_ble_pack+0x1e0>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	73bb      	strb	r3, [r7, #14]
				for(int i=0;i<50;i++){
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e24:	e01f      	b.n	8002e66 <prepare_ppg_ble_pack+0x9a>
					ppg_buffer[3 + i] = ble_buff_PPG[0][i];
 8002e26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e2a:	3303      	adds	r3, #3
 8002e2c:	4960      	ldr	r1, [pc, #384]	; (8002fb0 <prepare_ppg_ble_pack+0x1e4>)
 8002e2e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002e32:	440a      	add	r2, r1
 8002e34:	7812      	ldrb	r2, [r2, #0]
 8002e36:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002e3a:	440b      	add	r3, r1
 8002e3c:	f803 2c7c 	strb.w	r2, [r3, #-124]
					ppg_buffer[53 + i] = ble_buff_PPG[1][i];
 8002e40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e44:	3335      	adds	r3, #53	; 0x35
 8002e46:	495a      	ldr	r1, [pc, #360]	; (8002fb0 <prepare_ppg_ble_pack+0x1e4>)
 8002e48:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002e4c:	440a      	add	r2, r1
 8002e4e:	32c8      	adds	r2, #200	; 0xc8
 8002e50:	7812      	ldrb	r2, [r2, #0]
 8002e52:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002e56:	440b      	add	r3, r1
 8002e58:	f803 2c7c 	strb.w	r2, [r3, #-124]
				for(int i=0;i<50;i++){
 8002e5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e60:	3301      	adds	r3, #1
 8002e62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e6a:	2b31      	cmp	r3, #49	; 0x31
 8002e6c:	dddb      	ble.n	8002e26 <prepare_ppg_ble_pack+0x5a>
				}
				break;
 8002e6e:	e083      	b.n	8002f78 <prepare_ppg_ble_pack+0x1ac>
			case 0x02:
				ppg_buffer[0] = BLE_PACK_ID;
 8002e70:	2328      	movs	r3, #40	; 0x28
 8002e72:	733b      	strb	r3, [r7, #12]
				ppg_buffer[1] = BLE_PPG_PACK;
 8002e74:	2303      	movs	r3, #3
 8002e76:	737b      	strb	r3, [r7, #13]
				ppg_buffer[2] = ppg_pack_number;
 8002e78:	4b4c      	ldr	r3, [pc, #304]	; (8002fac <prepare_ppg_ble_pack+0x1e0>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	73bb      	strb	r3, [r7, #14]
				for(int i=50;i<100;i++){
 8002e7e:	2332      	movs	r3, #50	; 0x32
 8002e80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e84:	e01f      	b.n	8002ec6 <prepare_ppg_ble_pack+0xfa>
					ppg_buffer[3 + i - 50] = ble_buff_PPG[0][i];
 8002e86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e8a:	3b2f      	subs	r3, #47	; 0x2f
 8002e8c:	4948      	ldr	r1, [pc, #288]	; (8002fb0 <prepare_ppg_ble_pack+0x1e4>)
 8002e8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e92:	440a      	add	r2, r1
 8002e94:	7812      	ldrb	r2, [r2, #0]
 8002e96:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002e9a:	440b      	add	r3, r1
 8002e9c:	f803 2c7c 	strb.w	r2, [r3, #-124]
					ppg_buffer[53 + i - 50] = ble_buff_PPG[1][i];
 8002ea0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ea4:	3303      	adds	r3, #3
 8002ea6:	4942      	ldr	r1, [pc, #264]	; (8002fb0 <prepare_ppg_ble_pack+0x1e4>)
 8002ea8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002eac:	440a      	add	r2, r1
 8002eae:	32c8      	adds	r2, #200	; 0xc8
 8002eb0:	7812      	ldrb	r2, [r2, #0]
 8002eb2:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002eb6:	440b      	add	r3, r1
 8002eb8:	f803 2c7c 	strb.w	r2, [r3, #-124]
				for(int i=50;i<100;i++){
 8002ebc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ec6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002eca:	2b63      	cmp	r3, #99	; 0x63
 8002ecc:	dddb      	ble.n	8002e86 <prepare_ppg_ble_pack+0xba>
				}
				break;
 8002ece:	e053      	b.n	8002f78 <prepare_ppg_ble_pack+0x1ac>
			case 0x03:
				ppg_buffer[0] = BLE_PACK_ID;
 8002ed0:	2328      	movs	r3, #40	; 0x28
 8002ed2:	733b      	strb	r3, [r7, #12]
				ppg_buffer[1] = BLE_PPG_PACK;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	737b      	strb	r3, [r7, #13]
				ppg_buffer[2] = ppg_pack_number;
 8002ed8:	4b34      	ldr	r3, [pc, #208]	; (8002fac <prepare_ppg_ble_pack+0x1e0>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	73bb      	strb	r3, [r7, #14]
				for(int i=100;i<150;i++){
 8002ede:	2364      	movs	r3, #100	; 0x64
 8002ee0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ee2:	e019      	b.n	8002f18 <prepare_ppg_ble_pack+0x14c>
					ppg_buffer[3 + i - 100] = ble_buff_PPG[0][i];
 8002ee4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ee6:	3b61      	subs	r3, #97	; 0x61
 8002ee8:	4931      	ldr	r1, [pc, #196]	; (8002fb0 <prepare_ppg_ble_pack+0x1e4>)
 8002eea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002eec:	440a      	add	r2, r1
 8002eee:	7812      	ldrb	r2, [r2, #0]
 8002ef0:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002ef4:	440b      	add	r3, r1
 8002ef6:	f803 2c7c 	strb.w	r2, [r3, #-124]
					ppg_buffer[53 + i - 100] = ble_buff_PPG[1][i];
 8002efa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002efc:	3b2f      	subs	r3, #47	; 0x2f
 8002efe:	492c      	ldr	r1, [pc, #176]	; (8002fb0 <prepare_ppg_ble_pack+0x1e4>)
 8002f00:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002f02:	440a      	add	r2, r1
 8002f04:	32c8      	adds	r2, #200	; 0xc8
 8002f06:	7812      	ldrb	r2, [r2, #0]
 8002f08:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002f0c:	440b      	add	r3, r1
 8002f0e:	f803 2c7c 	strb.w	r2, [r3, #-124]
				for(int i=100;i<150;i++){
 8002f12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f14:	3301      	adds	r3, #1
 8002f16:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f1a:	2b95      	cmp	r3, #149	; 0x95
 8002f1c:	dde2      	ble.n	8002ee4 <prepare_ppg_ble_pack+0x118>
				}
				break;
 8002f1e:	e02b      	b.n	8002f78 <prepare_ppg_ble_pack+0x1ac>
			case 0x04:
				ppg_buffer[0] = BLE_PACK_ID;
 8002f20:	2328      	movs	r3, #40	; 0x28
 8002f22:	733b      	strb	r3, [r7, #12]
				ppg_buffer[1] = BLE_PPG_PACK;
 8002f24:	2303      	movs	r3, #3
 8002f26:	737b      	strb	r3, [r7, #13]
				ppg_buffer[2] = ppg_pack_number;
 8002f28:	4b20      	ldr	r3, [pc, #128]	; (8002fac <prepare_ppg_ble_pack+0x1e0>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	73bb      	strb	r3, [r7, #14]
				for(int i=150;i<200;i++){
 8002f2e:	2396      	movs	r3, #150	; 0x96
 8002f30:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f32:	e019      	b.n	8002f68 <prepare_ppg_ble_pack+0x19c>
					ppg_buffer[3 + i - 150] = ble_buff_PPG[0][i];
 8002f34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f36:	3b93      	subs	r3, #147	; 0x93
 8002f38:	491d      	ldr	r1, [pc, #116]	; (8002fb0 <prepare_ppg_ble_pack+0x1e4>)
 8002f3a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002f3c:	440a      	add	r2, r1
 8002f3e:	7812      	ldrb	r2, [r2, #0]
 8002f40:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002f44:	440b      	add	r3, r1
 8002f46:	f803 2c7c 	strb.w	r2, [r3, #-124]
					ppg_buffer[53 + i - 150] = ble_buff_PPG[1][i];
 8002f4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f4c:	3b61      	subs	r3, #97	; 0x61
 8002f4e:	4918      	ldr	r1, [pc, #96]	; (8002fb0 <prepare_ppg_ble_pack+0x1e4>)
 8002f50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002f52:	440a      	add	r2, r1
 8002f54:	32c8      	adds	r2, #200	; 0xc8
 8002f56:	7812      	ldrb	r2, [r2, #0]
 8002f58:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002f5c:	440b      	add	r3, r1
 8002f5e:	f803 2c7c 	strb.w	r2, [r3, #-124]
				for(int i=150;i<200;i++){
 8002f62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f64:	3301      	adds	r3, #1
 8002f66:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f6a:	2bc7      	cmp	r3, #199	; 0xc7
 8002f6c:	dde2      	ble.n	8002f34 <prepare_ppg_ble_pack+0x168>
				}
				break;
 8002f6e:	e003      	b.n	8002f78 <prepare_ppg_ble_pack+0x1ac>
			default:
				ppg_pack_number = 0x00;
 8002f70:	4b0e      	ldr	r3, [pc, #56]	; (8002fac <prepare_ppg_ble_pack+0x1e0>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	701a      	strb	r2, [r3, #0]
				break;
 8002f76:	bf00      	nop
		}
		ppg_pack_number = 0x00;
 8002f78:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <prepare_ppg_ble_pack+0x1e0>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<103;i++)
 8002f7e:	2300      	movs	r3, #0
 8002f80:	677b      	str	r3, [r7, #116]	; 0x74
 8002f82:	e00b      	b.n	8002f9c <prepare_ppg_ble_pack+0x1d0>
			buff[i] = ppg_buffer[i];
 8002f84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f107 010c 	add.w	r1, r7, #12
 8002f8e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002f90:	440a      	add	r2, r1
 8002f92:	7812      	ldrb	r2, [r2, #0]
 8002f94:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<103;i++)
 8002f96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f98:	3301      	adds	r3, #1
 8002f9a:	677b      	str	r3, [r7, #116]	; 0x74
 8002f9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f9e:	2b66      	cmp	r3, #102	; 0x66
 8002fa0:	ddf0      	ble.n	8002f84 <prepare_ppg_ble_pack+0x1b8>
	}
}
 8002fa2:	bf00      	nop
 8002fa4:	3788      	adds	r7, #136	; 0x88
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	200005f3 	.word	0x200005f3
 8002fb0:	20000268 	.word	0x20000268

08002fb4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  if(htim == &htim16){
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a1c      	ldr	r2, [pc, #112]	; (8003030 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d130      	bne.n	8003026 <HAL_TIM_PeriodElapsedCallback+0x72>
	  if(APP_BLE_Get_Server_Connection_Status() == APP_BLE_CONNECTED_SERVER){
 8002fc4:	f008 ff9c 	bl	800bf00 <APP_BLE_Get_Server_Connection_Status>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b05      	cmp	r3, #5
 8002fcc:	d12b      	bne.n	8003026 <HAL_TIM_PeriodElapsedCallback+0x72>
		  // Increment prescaler for fsr and acc
		  prescaler_fsr++;
 8002fce:	4b19      	ldr	r3, [pc, #100]	; (8003034 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	4b17      	ldr	r3, [pc, #92]	; (8003034 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002fd8:	701a      	strb	r2, [r3, #0]
		  prescaler_acc++;
 8002fda:	4b17      	ldr	r3, [pc, #92]	; (8003038 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	4b15      	ldr	r3, [pc, #84]	; (8003038 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002fe4:	701a      	strb	r2, [r3, #0]
		  prescaler_send_pack++;
 8002fe6:	4b15      	ldr	r3, [pc, #84]	; (800303c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	3301      	adds	r3, #1
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	4b13      	ldr	r3, [pc, #76]	; (800303c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002ff0:	701a      	strb	r2, [r3, #0]
		  // read ppg sensor - 100Hz
		  UTIL_SEQ_SetTask(1 << READ_PPG_TASK, CFG_SCH_PRIO_0);
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	2040      	movs	r0, #64	; 0x40
 8002ff6:	f009 fe05 	bl	800cc04 <UTIL_SEQ_SetTask>
		  // read fsr sensor - 10Hz
		  if(prescaler_fsr == 10){
 8002ffa:	4b0e      	ldr	r3, [pc, #56]	; (8003034 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b0a      	cmp	r3, #10
 8003000:	d106      	bne.n	8003010 <HAL_TIM_PeriodElapsedCallback+0x5c>
			  prescaler_fsr = 0;
 8003002:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003004:	2200      	movs	r2, #0
 8003006:	701a      	strb	r2, [r3, #0]
			  UTIL_SEQ_SetTask(1 << READ_FSR_TASK, CFG_SCH_PRIO_0);
 8003008:	2100      	movs	r1, #0
 800300a:	2020      	movs	r0, #32
 800300c:	f009 fdfa 	bl	800cc04 <UTIL_SEQ_SetTask>
		  }
		  // read acc sensor - 20Hz
		  if(prescaler_acc == 5){
 8003010:	4b09      	ldr	r3, [pc, #36]	; (8003038 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b05      	cmp	r3, #5
 8003016:	d106      	bne.n	8003026 <HAL_TIM_PeriodElapsedCallback+0x72>
			  prescaler_acc = 0;
 8003018:	4b07      	ldr	r3, [pc, #28]	; (8003038 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800301a:	2200      	movs	r2, #0
 800301c:	701a      	strb	r2, [r3, #0]
			  UTIL_SEQ_SetTask(1 << READ_ACC_TASK, CFG_SCH_PRIO_0);
 800301e:	2100      	movs	r1, #0
 8003020:	2010      	movs	r0, #16
 8003022:	f009 fdef 	bl	800cc04 <UTIL_SEQ_SetTask>
  }

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	20000934 	.word	0x20000934
 8003034:	200005ed 	.word	0x200005ed
 8003038:	200005ec 	.word	0x200005ec
 800303c:	200005ee 	.word	0x200005ee

08003040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003044:	bf00      	nop
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 800304e:	b480      	push	{r7}
 8003050:	af00      	add	r7, sp, #0

}
 8003052:	bf00      	nop
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8003060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003068:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800306c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003074:	bf00      	nop
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <LL_APB1_GRP1_EnableClock>:
{
 800307e:	b480      	push	{r7}
 8003080:	b085      	sub	sp, #20
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800308a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800308c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4313      	orrs	r3, r2
 8003094:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800309a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4013      	ands	r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030a2:	68fb      	ldr	r3, [r7, #12]
}
 80030a4:	bf00      	nop
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80030b4:	4b16      	ldr	r3, [pc, #88]	; (8003110 <MX_RTC_Init+0x60>)
 80030b6:	4a17      	ldr	r2, [pc, #92]	; (8003114 <MX_RTC_Init+0x64>)
 80030b8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80030ba:	4b15      	ldr	r3, [pc, #84]	; (8003110 <MX_RTC_Init+0x60>)
 80030bc:	2200      	movs	r2, #0
 80030be:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80030c0:	4b13      	ldr	r3, [pc, #76]	; (8003110 <MX_RTC_Init+0x60>)
 80030c2:	220f      	movs	r2, #15
 80030c4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80030c6:	4b12      	ldr	r3, [pc, #72]	; (8003110 <MX_RTC_Init+0x60>)
 80030c8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80030cc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80030ce:	4b10      	ldr	r3, [pc, #64]	; (8003110 <MX_RTC_Init+0x60>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80030d4:	4b0e      	ldr	r3, [pc, #56]	; (8003110 <MX_RTC_Init+0x60>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80030da:	4b0d      	ldr	r3, [pc, #52]	; (8003110 <MX_RTC_Init+0x60>)
 80030dc:	2200      	movs	r2, #0
 80030de:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80030e0:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <MX_RTC_Init+0x60>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80030e6:	480a      	ldr	r0, [pc, #40]	; (8003110 <MX_RTC_Init+0x60>)
 80030e8:	f004 fd5e 	bl	8007ba8 <HAL_RTC_Init>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80030f2:	f7ff ffa5 	bl	8003040 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80030f6:	2200      	movs	r2, #0
 80030f8:	2100      	movs	r1, #0
 80030fa:	4805      	ldr	r0, [pc, #20]	; (8003110 <MX_RTC_Init+0x60>)
 80030fc:	f004 fe42 	bl	8007d84 <HAL_RTCEx_SetWakeUpTimer>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003106:	f7ff ff9b 	bl	8003040 <Error_Handler>
  }

}
 800310a:	bf00      	nop
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	20000848 	.word	0x20000848
 8003114:	40002800 	.word	0x40002800

08003118 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a06      	ldr	r2, [pc, #24]	; (8003140 <HAL_RTC_MspInit+0x28>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d105      	bne.n	8003136 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800312a:	f7ff ff97 	bl	800305c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800312e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003132:	f7ff ffa4 	bl	800307e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40002800 	.word	0x40002800

08003144 <LL_AHB2_GRP1_EnableClock>:
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800314c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003150:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003152:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4313      	orrs	r3, r2
 800315a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800315c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003160:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4013      	ands	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003168:	68fb      	ldr	r3, [r7, #12]
}
 800316a:	bf00      	nop
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <LL_APB1_GRP1_EnableClock>:
{
 8003176:	b480      	push	{r7}
 8003178:	b085      	sub	sp, #20
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800317e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003182:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003184:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4313      	orrs	r3, r2
 800318c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800318e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003192:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4013      	ands	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800319a:	68fb      	ldr	r3, [r7, #12]
}
 800319c:	bf00      	nop
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80031b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4313      	orrs	r3, r2
 80031be:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80031c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4013      	ands	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031cc:	68fb      	ldr	r3, [r7, #12]
}
 80031ce:	bf00      	nop
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
	...

080031dc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80031e0:	4b1b      	ldr	r3, [pc, #108]	; (8003250 <MX_SPI1_Init+0x74>)
 80031e2:	4a1c      	ldr	r2, [pc, #112]	; (8003254 <MX_SPI1_Init+0x78>)
 80031e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80031e6:	4b1a      	ldr	r3, [pc, #104]	; (8003250 <MX_SPI1_Init+0x74>)
 80031e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80031ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80031ee:	4b18      	ldr	r3, [pc, #96]	; (8003250 <MX_SPI1_Init+0x74>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80031f4:	4b16      	ldr	r3, [pc, #88]	; (8003250 <MX_SPI1_Init+0x74>)
 80031f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80031fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80031fc:	4b14      	ldr	r3, [pc, #80]	; (8003250 <MX_SPI1_Init+0x74>)
 80031fe:	2202      	movs	r2, #2
 8003200:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003202:	4b13      	ldr	r3, [pc, #76]	; (8003250 <MX_SPI1_Init+0x74>)
 8003204:	2201      	movs	r2, #1
 8003206:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003208:	4b11      	ldr	r3, [pc, #68]	; (8003250 <MX_SPI1_Init+0x74>)
 800320a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800320e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003210:	4b0f      	ldr	r3, [pc, #60]	; (8003250 <MX_SPI1_Init+0x74>)
 8003212:	2228      	movs	r2, #40	; 0x28
 8003214:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003216:	4b0e      	ldr	r3, [pc, #56]	; (8003250 <MX_SPI1_Init+0x74>)
 8003218:	2200      	movs	r2, #0
 800321a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800321c:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <MX_SPI1_Init+0x74>)
 800321e:	2200      	movs	r2, #0
 8003220:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003222:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <MX_SPI1_Init+0x74>)
 8003224:	2200      	movs	r2, #0
 8003226:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003228:	4b09      	ldr	r3, [pc, #36]	; (8003250 <MX_SPI1_Init+0x74>)
 800322a:	2207      	movs	r2, #7
 800322c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800322e:	4b08      	ldr	r3, [pc, #32]	; (8003250 <MX_SPI1_Init+0x74>)
 8003230:	2200      	movs	r2, #0
 8003232:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003234:	4b06      	ldr	r3, [pc, #24]	; (8003250 <MX_SPI1_Init+0x74>)
 8003236:	2200      	movs	r2, #0
 8003238:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800323a:	4805      	ldr	r0, [pc, #20]	; (8003250 <MX_SPI1_Init+0x74>)
 800323c:	f004 fe3d 	bl	8007eba <HAL_SPI_Init>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003246:	f7ff fefb 	bl	8003040 <Error_Handler>
  }

}
 800324a:	bf00      	nop
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	200008d0 	.word	0x200008d0
 8003254:	40013000 	.word	0x40013000

08003258 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800325c:	4b1b      	ldr	r3, [pc, #108]	; (80032cc <MX_SPI2_Init+0x74>)
 800325e:	4a1c      	ldr	r2, [pc, #112]	; (80032d0 <MX_SPI2_Init+0x78>)
 8003260:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003262:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <MX_SPI2_Init+0x74>)
 8003264:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003268:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800326a:	4b18      	ldr	r3, [pc, #96]	; (80032cc <MX_SPI2_Init+0x74>)
 800326c:	2200      	movs	r2, #0
 800326e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003270:	4b16      	ldr	r3, [pc, #88]	; (80032cc <MX_SPI2_Init+0x74>)
 8003272:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003276:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003278:	4b14      	ldr	r3, [pc, #80]	; (80032cc <MX_SPI2_Init+0x74>)
 800327a:	2202      	movs	r2, #2
 800327c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800327e:	4b13      	ldr	r3, [pc, #76]	; (80032cc <MX_SPI2_Init+0x74>)
 8003280:	2201      	movs	r2, #1
 8003282:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003284:	4b11      	ldr	r3, [pc, #68]	; (80032cc <MX_SPI2_Init+0x74>)
 8003286:	f44f 7200 	mov.w	r2, #512	; 0x200
 800328a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800328c:	4b0f      	ldr	r3, [pc, #60]	; (80032cc <MX_SPI2_Init+0x74>)
 800328e:	2228      	movs	r2, #40	; 0x28
 8003290:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003292:	4b0e      	ldr	r3, [pc, #56]	; (80032cc <MX_SPI2_Init+0x74>)
 8003294:	2200      	movs	r2, #0
 8003296:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003298:	4b0c      	ldr	r3, [pc, #48]	; (80032cc <MX_SPI2_Init+0x74>)
 800329a:	2200      	movs	r2, #0
 800329c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800329e:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <MX_SPI2_Init+0x74>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80032a4:	4b09      	ldr	r3, [pc, #36]	; (80032cc <MX_SPI2_Init+0x74>)
 80032a6:	2207      	movs	r2, #7
 80032a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80032aa:	4b08      	ldr	r3, [pc, #32]	; (80032cc <MX_SPI2_Init+0x74>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80032b0:	4b06      	ldr	r3, [pc, #24]	; (80032cc <MX_SPI2_Init+0x74>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80032b6:	4805      	ldr	r0, [pc, #20]	; (80032cc <MX_SPI2_Init+0x74>)
 80032b8:	f004 fdff 	bl	8007eba <HAL_SPI_Init>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80032c2:	f7ff febd 	bl	8003040 <Error_Handler>
  }

}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	2000086c 	.word	0x2000086c
 80032d0:	40003800 	.word	0x40003800

080032d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032dc:	f107 030c 	add.w	r3, r7, #12
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	605a      	str	r2, [r3, #4]
 80032e6:	609a      	str	r2, [r3, #8]
 80032e8:	60da      	str	r2, [r3, #12]
 80032ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a28      	ldr	r2, [pc, #160]	; (8003394 <HAL_SPI_MspInit+0xc0>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d118      	bne.n	8003328 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032f6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80032fa:	f7ff ff55 	bl	80031a8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032fe:	2001      	movs	r0, #1
 8003300:	f7ff ff20 	bl	8003144 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003304:	23e0      	movs	r3, #224	; 0xe0
 8003306:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003308:	2302      	movs	r3, #2
 800330a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800330c:	2301      	movs	r3, #1
 800330e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003310:	2302      	movs	r3, #2
 8003312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003314:	2305      	movs	r3, #5
 8003316:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003318:	f107 030c 	add.w	r3, r7, #12
 800331c:	4619      	mov	r1, r3
 800331e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003322:	f001 fe89 	bl	8005038 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003326:	e030      	b.n	800338a <HAL_SPI_MspInit+0xb6>
  else if(spiHandle->Instance==SPI2)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a1a      	ldr	r2, [pc, #104]	; (8003398 <HAL_SPI_MspInit+0xc4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d12b      	bne.n	800338a <HAL_SPI_MspInit+0xb6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003332:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003336:	f7ff ff1e 	bl	8003176 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800333a:	2004      	movs	r0, #4
 800333c:	f7ff ff02 	bl	8003144 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003340:	2001      	movs	r0, #1
 8003342:	f7ff feff 	bl	8003144 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003346:	230c      	movs	r3, #12
 8003348:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334a:	2302      	movs	r3, #2
 800334c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334e:	2300      	movs	r3, #0
 8003350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003352:	2300      	movs	r3, #0
 8003354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003356:	2305      	movs	r3, #5
 8003358:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800335a:	f107 030c 	add.w	r3, r7, #12
 800335e:	4619      	mov	r1, r3
 8003360:	480e      	ldr	r0, [pc, #56]	; (800339c <HAL_SPI_MspInit+0xc8>)
 8003362:	f001 fe69 	bl	8005038 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003366:	f44f 7300 	mov.w	r3, #512	; 0x200
 800336a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336c:	2302      	movs	r3, #2
 800336e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003374:	2300      	movs	r3, #0
 8003376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003378:	2305      	movs	r3, #5
 800337a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800337c:	f107 030c 	add.w	r3, r7, #12
 8003380:	4619      	mov	r1, r3
 8003382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003386:	f001 fe57 	bl	8005038 <HAL_GPIO_Init>
}
 800338a:	bf00      	nop
 800338c:	3720      	adds	r7, #32
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40013000 	.word	0x40013000
 8003398:	40003800 	.word	0x40003800
 800339c:	48000800 	.word	0x48000800

080033a0 <LL_RCC_HSE_SetCapacitorTuning>:
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80033a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ac:	4a0a      	ldr	r2, [pc, #40]	; (80033d8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80033ae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80033b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033ba:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	021b      	lsls	r3, r3, #8
 80033c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033c6:	4313      	orrs	r3, r2
 80033c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	cafecafe 	.word	0xcafecafe

080033dc <LL_AHB3_GRP1_EnableClock>:
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80033e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80033f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4013      	ands	r3, r2
 80033fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003400:	68fb      	ldr	r3, [r7, #12]
}
 8003402:	bf00      	nop
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0

	OTP_ID0_t * p_otp;
	/**
	* Read HSE_Tuning from OTP
	*/
	p_otp = (OTP_ID0_t *) OTP_Read(0);
 8003414:	2000      	movs	r0, #0
 8003416:	f007 fda9 	bl	800af6c <OTP_Read>
 800341a:	6078      	str	r0, [r7, #4]
	if (p_otp)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d004      	beq.n	800342c <HAL_MspInit+0x1e>
	{
		LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	799b      	ldrb	r3, [r3, #6]
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff ffba 	bl	80033a0 <LL_RCC_HSE_SetCapacitorTuning>
	}
  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800342c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003430:	f7ff ffd4 	bl	80033dc <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8003434:	2200      	movs	r2, #0
 8003436:	2100      	movs	r1, #0
 8003438:	202e      	movs	r0, #46	; 0x2e
 800343a:	f001 fd9e 	bl	8004f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800343e:	202e      	movs	r0, #46	; 0x2e
 8003440:	f001 fdb5 	bl	8004fae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003444:	bf00      	nop
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003450:	bf00      	nop
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
	...

0800345c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8003460:	2102      	movs	r1, #2
 8003462:	4802      	ldr	r0, [pc, #8]	; (800346c <HardFault_Handler+0x10>)
 8003464:	f001 ff70 	bl	8005348 <HAL_GPIO_TogglePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003468:	e7fe      	b.n	8003468 <HardFault_Handler+0xc>
 800346a:	bf00      	nop
 800346c:	48000400 	.word	0x48000400

08003470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003474:	e7fe      	b.n	8003474 <MemManage_Handler+0x4>

08003476 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003476:	b480      	push	{r7}
 8003478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800347a:	e7fe      	b.n	800347a <BusFault_Handler+0x4>

0800347c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003480:	e7fe      	b.n	8003480 <UsageFault_Handler+0x4>

08003482 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003482:	b480      	push	{r7}
 8003484:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003486:	bf00      	nop
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003494:	bf00      	nop
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800349e:	b480      	push	{r7}
 80034a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034a2:	bf00      	nop
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034b0:	f000 fb44 	bl	8003b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034b4:	bf00      	nop
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80034bc:	4802      	ldr	r0, [pc, #8]	; (80034c8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80034be:	f005 fcab 	bl	8008e18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80034c2:	bf00      	nop
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20000934 	.word	0x20000934

080034cc <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80034d0:	f001 ff54 	bl	800537c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80034d4:	bf00      	nop
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <RTC_WKUP_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
* @brief This function handles RTC wake-up interrupt through EXTI line 19.
*/
void RTC_WKUP_IRQHandler(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
	HW_TS_RTC_Wakeup_Handler();
 80034dc:	f7fe fb72 	bl	8001bc4 <HW_TS_RTC_Wakeup_Handler>
}
 80034e0:	bf00      	nop
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <IPCC_C1_RX_IRQHandler>:
/**
* @brief This function handles IPCC RX occupied interrupt.
*/
void IPCC_C1_RX_IRQHandler(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
	HW_IPCC_Rx_Handler();
 80034e8:	f009 f8fc 	bl	800c6e4 <HW_IPCC_Rx_Handler>
}
 80034ec:	bf00      	nop
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <IPCC_C1_TX_IRQHandler>:
/**
* @brief This function handles IPCC TX free interrupt.
*/
void IPCC_C1_TX_IRQHandler(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
	HW_IPCC_Tx_Handler();
 80034f4:	f009 f92e 	bl	800c754 <HW_IPCC_Tx_Handler>
}
 80034f8:	bf00      	nop
 80034fa:	bd80      	pop	{r7, pc}

080034fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003500:	4b26      	ldr	r3, [pc, #152]	; (800359c <SystemInit+0xa0>)
 8003502:	2200      	movs	r2, #0
 8003504:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003506:	4b25      	ldr	r3, [pc, #148]	; (800359c <SystemInit+0xa0>)
 8003508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350c:	4a23      	ldr	r2, [pc, #140]	; (800359c <SystemInit+0xa0>)
 800350e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003512:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003520:	f043 0301 	orr.w	r3, r3, #1
 8003524:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800352a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800352e:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800353a:	4b19      	ldr	r3, [pc, #100]	; (80035a0 <SystemInit+0xa4>)
 800353c:	4013      	ands	r3, r2
 800353e:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003544:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003548:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800354c:	f023 0305 	bic.w	r3, r3, #5
 8003550:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003558:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800355c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003560:	f023 0301 	bic.w	r3, r3, #1
 8003564:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800356c:	4a0d      	ldr	r2, [pc, #52]	; (80035a4 <SystemInit+0xa8>)
 800356e:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003574:	4a0b      	ldr	r2, [pc, #44]	; (80035a4 <SystemInit+0xa8>)
 8003576:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003586:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800358c:	2200      	movs	r2, #0
 800358e:	619a      	str	r2, [r3, #24]
}
 8003590:	bf00      	nop
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	e000ed00 	.word	0xe000ed00
 80035a0:	faf6fefb 	.word	0xfaf6fefb
 80035a4:	22041000 	.word	0x22041000

080035a8 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 80035ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	091b      	lsrs	r3, r3, #4
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	4a47      	ldr	r2, [pc, #284]	; (80036d8 <SystemCoreClockUpdate+0x130>)
 80035bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c0:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 030c 	and.w	r3, r3, #12
 80035cc:	2b0c      	cmp	r3, #12
 80035ce:	d867      	bhi.n	80036a0 <SystemCoreClockUpdate+0xf8>
 80035d0:	a201      	add	r2, pc, #4	; (adr r2, 80035d8 <SystemCoreClockUpdate+0x30>)
 80035d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d6:	bf00      	nop
 80035d8:	0800360d 	.word	0x0800360d
 80035dc:	080036a1 	.word	0x080036a1
 80035e0:	080036a1 	.word	0x080036a1
 80035e4:	080036a1 	.word	0x080036a1
 80035e8:	08003615 	.word	0x08003615
 80035ec:	080036a1 	.word	0x080036a1
 80035f0:	080036a1 	.word	0x080036a1
 80035f4:	080036a1 	.word	0x080036a1
 80035f8:	0800361d 	.word	0x0800361d
 80035fc:	080036a1 	.word	0x080036a1
 8003600:	080036a1 	.word	0x080036a1
 8003604:	080036a1 	.word	0x080036a1
 8003608:	08003625 	.word	0x08003625
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800360c:	4a33      	ldr	r2, [pc, #204]	; (80036dc <SystemCoreClockUpdate+0x134>)
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	6013      	str	r3, [r2, #0]
      break;
 8003612:	e049      	b.n	80036a8 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8003614:	4b31      	ldr	r3, [pc, #196]	; (80036dc <SystemCoreClockUpdate+0x134>)
 8003616:	4a32      	ldr	r2, [pc, #200]	; (80036e0 <SystemCoreClockUpdate+0x138>)
 8003618:	601a      	str	r2, [r3, #0]
      break;
 800361a:	e045      	b.n	80036a8 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800361c:	4b2f      	ldr	r3, [pc, #188]	; (80036dc <SystemCoreClockUpdate+0x134>)
 800361e:	4a31      	ldr	r2, [pc, #196]	; (80036e4 <SystemCoreClockUpdate+0x13c>)
 8003620:	601a      	str	r2, [r3, #0]
      break;
 8003622:	e041      	b.n	80036a8 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8003630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	091b      	lsrs	r3, r3, #4
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	3301      	adds	r3, #1
 800363e:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2b02      	cmp	r3, #2
 8003644:	d105      	bne.n	8003652 <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8003646:	4a26      	ldr	r2, [pc, #152]	; (80036e0 <SystemCoreClockUpdate+0x138>)
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	fbb2 f3f3 	udiv	r3, r2, r3
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	e00d      	b.n	800366e <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2b03      	cmp	r3, #3
 8003656:	d105      	bne.n	8003664 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8003658:	4a22      	ldr	r2, [pc, #136]	; (80036e4 <SystemCoreClockUpdate+0x13c>)
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003660:	617b      	str	r3, [r7, #20]
 8003662:	e004      	b.n	800366e <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	fbb2 f3f3 	udiv	r3, r2, r3
 800366c:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800366e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	0a1b      	lsrs	r3, r3, #8
 8003676:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	fb02 f303 	mul.w	r3, r2, r3
 8003680:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8003682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	0f5b      	lsrs	r3, r3, #29
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	3301      	adds	r3, #1
 8003690:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	fbb2 f3f3 	udiv	r3, r2, r3
 800369a:	4a10      	ldr	r2, [pc, #64]	; (80036dc <SystemCoreClockUpdate+0x134>)
 800369c:	6013      	str	r3, [r2, #0]
      break;
 800369e:	e003      	b.n	80036a8 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 80036a0:	4a0e      	ldr	r2, [pc, #56]	; (80036dc <SystemCoreClockUpdate+0x134>)
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	6013      	str	r3, [r2, #0]
      break;
 80036a6:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80036a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	091b      	lsrs	r3, r3, #4
 80036b0:	f003 030f 	and.w	r3, r3, #15
 80036b4:	4a0c      	ldr	r2, [pc, #48]	; (80036e8 <SystemCoreClockUpdate+0x140>)
 80036b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ba:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 80036bc:	4b07      	ldr	r3, [pc, #28]	; (80036dc <SystemCoreClockUpdate+0x134>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c6:	4a05      	ldr	r2, [pc, #20]	; (80036dc <SystemCoreClockUpdate+0x134>)
 80036c8:	6013      	str	r3, [r2, #0]

}
 80036ca:	bf00      	nop
 80036cc:	371c      	adds	r7, #28
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	0800d0a8 	.word	0x0800d0a8
 80036dc:	20000038 	.word	0x20000038
 80036e0:	00f42400 	.word	0x00f42400
 80036e4:	01e84800 	.word	0x01e84800
 80036e8:	0800d048 	.word	0x0800d048

080036ec <LL_APB2_GRP1_EnableClock>:
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80036f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4313      	orrs	r3, r2
 8003702:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003708:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4013      	ands	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003710:	68fb      	ldr	r3, [r7, #12]
}
 8003712:	bf00      	nop
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
	...

08003720 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8003724:	4b10      	ldr	r3, [pc, #64]	; (8003768 <MX_TIM16_Init+0x48>)
 8003726:	4a11      	ldr	r2, [pc, #68]	; (800376c <MX_TIM16_Init+0x4c>)
 8003728:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1000;
 800372a:	4b0f      	ldr	r3, [pc, #60]	; (8003768 <MX_TIM16_Init+0x48>)
 800372c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003730:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003732:	4b0d      	ldr	r3, [pc, #52]	; (8003768 <MX_TIM16_Init+0x48>)
 8003734:	2200      	movs	r2, #0
 8003736:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 320;
 8003738:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <MX_TIM16_Init+0x48>)
 800373a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800373e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003740:	4b09      	ldr	r3, [pc, #36]	; (8003768 <MX_TIM16_Init+0x48>)
 8003742:	2200      	movs	r2, #0
 8003744:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003746:	4b08      	ldr	r3, [pc, #32]	; (8003768 <MX_TIM16_Init+0x48>)
 8003748:	2200      	movs	r2, #0
 800374a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800374c:	4b06      	ldr	r3, [pc, #24]	; (8003768 <MX_TIM16_Init+0x48>)
 800374e:	2200      	movs	r2, #0
 8003750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003752:	4805      	ldr	r0, [pc, #20]	; (8003768 <MX_TIM16_Init+0x48>)
 8003754:	f005 faba 	bl	8008ccc <HAL_TIM_Base_Init>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800375e:	f7ff fc6f 	bl	8003040 <Error_Handler>
  }

}
 8003762:	bf00      	nop
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	20000934 	.word	0x20000934
 800376c:	40014400 	.word	0x40014400

08003770 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a09      	ldr	r2, [pc, #36]	; (80037a4 <HAL_TIM_Base_MspInit+0x34>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d10b      	bne.n	800379a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003782:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003786:	f7ff ffb1 	bl	80036ec <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800378a:	2200      	movs	r2, #0
 800378c:	2100      	movs	r1, #0
 800378e:	2019      	movs	r0, #25
 8003790:	f001 fbf3 	bl	8004f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003794:	2019      	movs	r0, #25
 8003796:	f001 fc0a 	bl	8004fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800379a:	bf00      	nop
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40014400 	.word	0x40014400

080037a8 <LL_AHB2_GRP1_EnableClock>:
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80037b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4313      	orrs	r3, r2
 80037be:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80037c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4013      	ands	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80037cc:	68fb      	ldr	r3, [r7, #12]
}
 80037ce:	bf00      	nop
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <LL_APB2_GRP1_EnableClock>:
{
 80037da:	b480      	push	{r7}
 80037dc:	b085      	sub	sp, #20
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80037e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80037f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4013      	ands	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80037fe:	68fb      	ldr	r3, [r7, #12]
}
 8003800:	bf00      	nop
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003810:	4b22      	ldr	r3, [pc, #136]	; (800389c <MX_USART1_UART_Init+0x90>)
 8003812:	4a23      	ldr	r2, [pc, #140]	; (80038a0 <MX_USART1_UART_Init+0x94>)
 8003814:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003816:	4b21      	ldr	r3, [pc, #132]	; (800389c <MX_USART1_UART_Init+0x90>)
 8003818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800381c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800381e:	4b1f      	ldr	r3, [pc, #124]	; (800389c <MX_USART1_UART_Init+0x90>)
 8003820:	2200      	movs	r2, #0
 8003822:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003824:	4b1d      	ldr	r3, [pc, #116]	; (800389c <MX_USART1_UART_Init+0x90>)
 8003826:	2200      	movs	r2, #0
 8003828:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800382a:	4b1c      	ldr	r3, [pc, #112]	; (800389c <MX_USART1_UART_Init+0x90>)
 800382c:	2200      	movs	r2, #0
 800382e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003830:	4b1a      	ldr	r3, [pc, #104]	; (800389c <MX_USART1_UART_Init+0x90>)
 8003832:	220c      	movs	r2, #12
 8003834:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003836:	4b19      	ldr	r3, [pc, #100]	; (800389c <MX_USART1_UART_Init+0x90>)
 8003838:	2200      	movs	r2, #0
 800383a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800383c:	4b17      	ldr	r3, [pc, #92]	; (800389c <MX_USART1_UART_Init+0x90>)
 800383e:	2200      	movs	r2, #0
 8003840:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003842:	4b16      	ldr	r3, [pc, #88]	; (800389c <MX_USART1_UART_Init+0x90>)
 8003844:	2200      	movs	r2, #0
 8003846:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003848:	4b14      	ldr	r3, [pc, #80]	; (800389c <MX_USART1_UART_Init+0x90>)
 800384a:	2200      	movs	r2, #0
 800384c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800384e:	4b13      	ldr	r3, [pc, #76]	; (800389c <MX_USART1_UART_Init+0x90>)
 8003850:	2200      	movs	r2, #0
 8003852:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003854:	4811      	ldr	r0, [pc, #68]	; (800389c <MX_USART1_UART_Init+0x90>)
 8003856:	f005 fcc9 	bl	80091ec <HAL_UART_Init>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003860:	f7ff fbee 	bl	8003040 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003864:	2100      	movs	r1, #0
 8003866:	480d      	ldr	r0, [pc, #52]	; (800389c <MX_USART1_UART_Init+0x90>)
 8003868:	f006 f8c1 	bl	80099ee <HAL_UARTEx_SetTxFifoThreshold>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003872:	f7ff fbe5 	bl	8003040 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003876:	2100      	movs	r1, #0
 8003878:	4808      	ldr	r0, [pc, #32]	; (800389c <MX_USART1_UART_Init+0x90>)
 800387a:	f006 f8f6 	bl	8009a6a <HAL_UARTEx_SetRxFifoThreshold>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003884:	f7ff fbdc 	bl	8003040 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003888:	4804      	ldr	r0, [pc, #16]	; (800389c <MX_USART1_UART_Init+0x90>)
 800388a:	f006 f877 	bl	800997c <HAL_UARTEx_DisableFifoMode>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003894:	f7ff fbd4 	bl	8003040 <Error_Handler>
  }

}
 8003898:	bf00      	nop
 800389a:	bd80      	pop	{r7, pc}
 800389c:	20000980 	.word	0x20000980
 80038a0:	40013800 	.word	0x40013800

080038a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b088      	sub	sp, #32
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ac:	f107 030c 	add.w	r3, r7, #12
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	605a      	str	r2, [r3, #4]
 80038b6:	609a      	str	r2, [r3, #8]
 80038b8:	60da      	str	r2, [r3, #12]
 80038ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a0e      	ldr	r2, [pc, #56]	; (80038fc <HAL_UART_MspInit+0x58>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d116      	bne.n	80038f4 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80038c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80038ca:	f7ff ff86 	bl	80037da <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ce:	2002      	movs	r0, #2
 80038d0:	f7ff ff6a 	bl	80037a8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80038d4:	23c0      	movs	r3, #192	; 0xc0
 80038d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d8:	2302      	movs	r3, #2
 80038da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80038e4:	2307      	movs	r3, #7
 80038e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038e8:	f107 030c 	add.w	r3, r7, #12
 80038ec:	4619      	mov	r1, r3
 80038ee:	4804      	ldr	r0, [pc, #16]	; (8003900 <HAL_UART_MspInit+0x5c>)
 80038f0:	f001 fba2 	bl	8005038 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80038f4:	bf00      	nop
 80038f6:	3720      	adds	r7, #32
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40013800 	.word	0x40013800
 8003900:	48000400 	.word	0x48000400

08003904 <LL_AHB2_GRP1_EnableClock>:
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800390c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003910:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003912:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4313      	orrs	r3, r2
 800391a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800391c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003920:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4013      	ands	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003928:	68fb      	ldr	r3, [r7, #12]
}
 800392a:	bf00      	nop
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <LL_APB1_GRP1_EnableClock>:
{
 8003936:	b480      	push	{r7}
 8003938:	b085      	sub	sp, #20
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800393e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003942:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003944:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4313      	orrs	r3, r2
 800394c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800394e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003952:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4013      	ands	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800395a:	68fb      	ldr	r3, [r7, #12]
}
 800395c:	bf00      	nop
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0

  hpcd_USB_FS.Instance = USB;
 800396c:	4b10      	ldr	r3, [pc, #64]	; (80039b0 <MX_USB_PCD_Init+0x48>)
 800396e:	4a11      	ldr	r2, [pc, #68]	; (80039b4 <MX_USB_PCD_Init+0x4c>)
 8003970:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003972:	4b0f      	ldr	r3, [pc, #60]	; (80039b0 <MX_USB_PCD_Init+0x48>)
 8003974:	2208      	movs	r2, #8
 8003976:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003978:	4b0d      	ldr	r3, [pc, #52]	; (80039b0 <MX_USB_PCD_Init+0x48>)
 800397a:	2202      	movs	r2, #2
 800397c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800397e:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <MX_USB_PCD_Init+0x48>)
 8003980:	2202      	movs	r2, #2
 8003982:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8003984:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <MX_USB_PCD_Init+0x48>)
 8003986:	2200      	movs	r2, #0
 8003988:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800398a:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <MX_USB_PCD_Init+0x48>)
 800398c:	2200      	movs	r2, #0
 800398e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003990:	4b07      	ldr	r3, [pc, #28]	; (80039b0 <MX_USB_PCD_Init+0x48>)
 8003992:	2200      	movs	r2, #0
 8003994:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003996:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <MX_USB_PCD_Init+0x48>)
 8003998:	2200      	movs	r2, #0
 800399a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800399c:	4804      	ldr	r0, [pc, #16]	; (80039b0 <MX_USB_PCD_Init+0x48>)
 800399e:	f002 fa02 	bl	8005da6 <HAL_PCD_Init>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80039a8:	f7ff fb4a 	bl	8003040 <Error_Handler>
  }

}
 80039ac:	bf00      	nop
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	20000a0c 	.word	0x20000a0c
 80039b4:	40006800 	.word	0x40006800

080039b8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c0:	f107 030c 	add.w	r3, r7, #12
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	605a      	str	r2, [r3, #4]
 80039ca:	609a      	str	r2, [r3, #8]
 80039cc:	60da      	str	r2, [r3, #12]
 80039ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a0f      	ldr	r2, [pc, #60]	; (8003a14 <HAL_PCD_MspInit+0x5c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d118      	bne.n	8003a0c <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039da:	2001      	movs	r0, #1
 80039dc:	f7ff ff92 	bl	8003904 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80039e0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80039e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e6:	2302      	movs	r3, #2
 80039e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ee:	2300      	movs	r3, #0
 80039f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80039f2:	230a      	movs	r3, #10
 80039f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039f6:	f107 030c 	add.w	r3, r7, #12
 80039fa:	4619      	mov	r1, r3
 80039fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a00:	f001 fb1a 	bl	8005038 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003a04:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003a08:	f7ff ff95 	bl	8003936 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8003a0c:	bf00      	nop
 8003a0e:	3720      	adds	r7, #32
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40006800 	.word	0x40006800

08003a18 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003a18:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a1a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a1c:	3304      	adds	r3, #4

08003a1e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a1e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a20:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003a22:	d3f9      	bcc.n	8003a18 <CopyDataInit>
  bx lr
 8003a24:	4770      	bx	lr

08003a26 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003a26:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003a28:	3004      	adds	r0, #4

08003a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003a2a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003a2c:	d3fb      	bcc.n	8003a26 <FillZerobss>
  bx lr
 8003a2e:	4770      	bx	lr

08003a30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a30:	480c      	ldr	r0, [pc, #48]	; (8003a64 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8003a32:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003a34:	480c      	ldr	r0, [pc, #48]	; (8003a68 <LoopForever+0x8>)
 8003a36:	490d      	ldr	r1, [pc, #52]	; (8003a6c <LoopForever+0xc>)
 8003a38:	4a0d      	ldr	r2, [pc, #52]	; (8003a70 <LoopForever+0x10>)
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	f7ff ffef 	bl	8003a1e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003a40:	480c      	ldr	r0, [pc, #48]	; (8003a74 <LoopForever+0x14>)
 8003a42:	490d      	ldr	r1, [pc, #52]	; (8003a78 <LoopForever+0x18>)
 8003a44:	2300      	movs	r3, #0
 8003a46:	f7ff fff0 	bl	8003a2a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003a4a:	480c      	ldr	r0, [pc, #48]	; (8003a7c <LoopForever+0x1c>)
 8003a4c:	490c      	ldr	r1, [pc, #48]	; (8003a80 <LoopForever+0x20>)
 8003a4e:	2300      	movs	r3, #0
 8003a50:	f7ff ffeb 	bl	8003a2a <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003a54:	f7ff fd52 	bl	80034fc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003a58:	f009 f9e2 	bl	800ce20 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8003a5c:	f7fe fd0e 	bl	800247c <main>

08003a60 <LoopForever>:

LoopForever:
  b LoopForever
 8003a60:	e7fe      	b.n	8003a60 <LoopForever>
 8003a62:	0000      	.short	0x0000
  ldr   r0, =_estack
 8003a64:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003a68:	20000004 	.word	0x20000004
 8003a6c:	2000005c 	.word	0x2000005c
 8003a70:	0800d150 	.word	0x0800d150
  INIT_BSS _sbss, _ebss
 8003a74:	200001f4 	.word	0x200001f4
 8003a78:	20000c88 	.word	0x20000c88
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003a7c:	200301e0 	.word	0x200301e0
 8003a80:	20030a57 	.word	0x20030a57

08003a84 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a84:	e7fe      	b.n	8003a84 <ADC1_IRQHandler>
	...

08003a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a92:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <HAL_Init+0x3c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a0b      	ldr	r2, [pc, #44]	; (8003ac4 <HAL_Init+0x3c>)
 8003a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a9c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a9e:	2003      	movs	r0, #3
 8003aa0:	f001 fa60 	bl	8004f64 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003aa4:	2000      	movs	r0, #0
 8003aa6:	f000 f80f 	bl	8003ac8 <HAL_InitTick>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	71fb      	strb	r3, [r7, #7]
 8003ab4:	e001      	b.n	8003aba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003ab6:	f7ff fcaa 	bl	800340e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003aba:	79fb      	ldrb	r3, [r7, #7]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	58004000 	.word	0x58004000

08003ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003ad4:	4b17      	ldr	r3, [pc, #92]	; (8003b34 <HAL_InitTick+0x6c>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d024      	beq.n	8003b26 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003adc:	f003 fb34 	bl	8007148 <HAL_RCC_GetHCLKFreq>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	4b14      	ldr	r3, [pc, #80]	; (8003b34 <HAL_InitTick+0x6c>)
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003aec:	fbb3 f3f1 	udiv	r3, r3, r1
 8003af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af4:	4618      	mov	r0, r3
 8003af6:	f001 fa76 	bl	8004fe6 <HAL_SYSTICK_Config>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10f      	bne.n	8003b20 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b0f      	cmp	r3, #15
 8003b04:	d809      	bhi.n	8003b1a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b06:	2200      	movs	r2, #0
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b0e:	f001 fa34 	bl	8004f7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b12:	4a09      	ldr	r2, [pc, #36]	; (8003b38 <HAL_InitTick+0x70>)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	e007      	b.n	8003b2a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	73fb      	strb	r3, [r7, #15]
 8003b1e:	e004      	b.n	8003b2a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
 8003b24:	e001      	b.n	8003b2a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	20000040 	.word	0x20000040
 8003b38:	2000003c 	.word	0x2000003c

08003b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b40:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <HAL_IncTick+0x20>)
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	461a      	mov	r2, r3
 8003b46:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <HAL_IncTick+0x24>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	4a04      	ldr	r2, [pc, #16]	; (8003b60 <HAL_IncTick+0x24>)
 8003b4e:	6013      	str	r3, [r2, #0]
}
 8003b50:	bf00      	nop
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	20000040 	.word	0x20000040
 8003b60:	20000c80 	.word	0x20000c80

08003b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  return uwTick;
 8003b68:	4b03      	ldr	r3, [pc, #12]	; (8003b78 <HAL_GetTick+0x14>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	20000c80 	.word	0x20000c80

08003b7c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003b80:	4b03      	ldr	r3, [pc, #12]	; (8003b90 <HAL_GetTickPrio+0x14>)
 8003b82:	681b      	ldr	r3, [r3, #0]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	2000003c 	.word	0x2000003c

08003b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8003b9c:	f7ff ffe2 	bl	8003b64 <HAL_GetTick>
 8003ba0:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bac:	d005      	beq.n	8003bba <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8003bae:	4b09      	ldr	r3, [pc, #36]	; (8003bd4 <HAL_Delay+0x40>)
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8003bba:	bf00      	nop
 8003bbc:	f7ff ffd2 	bl	8003b64 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d8f7      	bhi.n	8003bbc <HAL_Delay+0x28>
    {
    }
  }
 8003bcc:	bf00      	nop
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	20000040 	.word	0x20000040

08003bd8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	609a      	str	r2, [r3, #8]
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	609a      	str	r2, [r3, #8]
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
 8003c4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	3360      	adds	r3, #96	; 0x60
 8003c52:	461a      	mov	r2, r3
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	4b08      	ldr	r3, [pc, #32]	; (8003c84 <LL_ADC_SetOffset+0x44>)
 8003c62:	4013      	ands	r3, r2
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003c78:	bf00      	nop
 8003c7a:	371c      	adds	r7, #28
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	03fff000 	.word	0x03fff000

08003c88 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	3360      	adds	r3, #96	; 0x60
 8003c96:	461a      	mov	r2, r3
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	3360      	adds	r3, #96	; 0x60
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003cde:	bf00      	nop
 8003ce0:	371c      	adds	r7, #28
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	3330      	adds	r3, #48	; 0x30
 8003d20:	461a      	mov	r2, r3
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	0a1b      	lsrs	r3, r3, #8
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	f003 030c 	and.w	r3, r3, #12
 8003d2c:	4413      	add	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f003 031f 	and.w	r3, r3, #31
 8003d3a:	211f      	movs	r1, #31
 8003d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d40:	43db      	mvns	r3, r3
 8003d42:	401a      	ands	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	0e9b      	lsrs	r3, r3, #26
 8003d48:	f003 011f 	and.w	r1, r3, #31
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	f003 031f 	and.w	r3, r3, #31
 8003d52:	fa01 f303 	lsl.w	r3, r1, r3
 8003d56:	431a      	orrs	r2, r3
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003d5c:	bf00      	nop
 8003d5e:	371c      	adds	r7, #28
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	3314      	adds	r3, #20
 8003d78:	461a      	mov	r2, r3
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	0e5b      	lsrs	r3, r3, #25
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	4413      	add	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	0d1b      	lsrs	r3, r3, #20
 8003d90:	f003 031f 	and.w	r3, r3, #31
 8003d94:	2107      	movs	r1, #7
 8003d96:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9a:	43db      	mvns	r3, r3
 8003d9c:	401a      	ands	r2, r3
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	0d1b      	lsrs	r3, r3, #20
 8003da2:	f003 031f 	and.w	r3, r3, #31
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dac:	431a      	orrs	r2, r3
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003db2:	bf00      	nop
 8003db4:	371c      	adds	r7, #28
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
	...

08003dc0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	401a      	ands	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f003 0318 	and.w	r3, r3, #24
 8003de2:	4908      	ldr	r1, [pc, #32]	; (8003e04 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003de4:	40d9      	lsrs	r1, r3
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	400b      	ands	r3, r1
 8003dea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dee:	431a      	orrs	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003df6:	bf00      	nop
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	0007ffff 	.word	0x0007ffff

08003e08 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003e18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6093      	str	r3, [r2, #8]
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e40:	d101      	bne.n	8003e46 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003e42:	2301      	movs	r3, #1
 8003e44:	e000      	b.n	8003e48 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003e64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e90:	d101      	bne.n	8003e96 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003e92:	2301      	movs	r3, #1
 8003e94:	e000      	b.n	8003e98 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003eb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003eb8:	f043 0201 	orr.w	r2, r3, #1
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003edc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ee0:	f043 0202 	orr.w	r2, r3, #2
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d101      	bne.n	8003f0c <LL_ADC_IsEnabled+0x18>
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e000      	b.n	8003f0e <LL_ADC_IsEnabled+0x1a>
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d101      	bne.n	8003f32 <LL_ADC_IsDisableOngoing+0x18>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <LL_ADC_IsDisableOngoing+0x1a>
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f54:	f043 0204 	orr.w	r2, r3, #4
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d101      	bne.n	8003f80 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e000      	b.n	8003f82 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	2b08      	cmp	r3, #8
 8003fa0:	d101      	bne.n	8003fa6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e000      	b.n	8003fa8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b088      	sub	sp, #32
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e12a      	b.n	8004224 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d109      	bne.n	8003ff0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f7fd f8e5 	bl	80011ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff ff19 	bl	8003e2c <LL_ADC_IsDeepPowerDownEnabled>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d004      	beq.n	800400a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff feff 	bl	8003e08 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff ff34 	bl	8003e7c <LL_ADC_IsInternalRegulatorEnabled>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d113      	bne.n	8004042 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff ff18 	bl	8003e54 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004024:	4b81      	ldr	r3, [pc, #516]	; (800422c <HAL_ADC_Init+0x278>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	099b      	lsrs	r3, r3, #6
 800402a:	4a81      	ldr	r2, [pc, #516]	; (8004230 <HAL_ADC_Init+0x27c>)
 800402c:	fba2 2303 	umull	r2, r3, r2, r3
 8004030:	099b      	lsrs	r3, r3, #6
 8004032:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004034:	e002      	b.n	800403c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	3b01      	subs	r3, #1
 800403a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1f9      	bne.n	8004036 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f7ff ff18 	bl	8003e7c <LL_ADC_IsInternalRegulatorEnabled>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10d      	bne.n	800406e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004056:	f043 0210 	orr.w	r2, r3, #16
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004062:	f043 0201 	orr.w	r2, r3, #1
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f7ff ff78 	bl	8003f68 <LL_ADC_REG_IsConversionOngoing>
 8004078:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407e:	f003 0310 	and.w	r3, r3, #16
 8004082:	2b00      	cmp	r3, #0
 8004084:	f040 80c5 	bne.w	8004212 <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	2b00      	cmp	r3, #0
 800408c:	f040 80c1 	bne.w	8004212 <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004094:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004098:	f043 0202 	orr.w	r2, r3, #2
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff ff25 	bl	8003ef4 <LL_ADC_IsEnabled>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10b      	bne.n	80040c8 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040b0:	4860      	ldr	r0, [pc, #384]	; (8004234 <HAL_ADC_Init+0x280>)
 80040b2:	f7ff ff1f 	bl	8003ef4 <LL_ADC_IsEnabled>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d105      	bne.n	80040c8 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	4619      	mov	r1, r3
 80040c2:	485d      	ldr	r0, [pc, #372]	; (8004238 <HAL_ADC_Init+0x284>)
 80040c4:	f7ff fd88 	bl	8003bd8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	7e5b      	ldrb	r3, [r3, #25]
 80040cc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80040d2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80040d8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80040de:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040e6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80040e8:	4313      	orrs	r3, r2
 80040ea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d106      	bne.n	8004104 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	3b01      	subs	r3, #1
 80040fc:	045b      	lsls	r3, r3, #17
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	4313      	orrs	r3, r2
 8004102:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004108:	2b00      	cmp	r3, #0
 800410a:	d009      	beq.n	8004120 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004110:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004118:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	4313      	orrs	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	4b45      	ldr	r3, [pc, #276]	; (800423c <HAL_ADC_Init+0x288>)
 8004128:	4013      	ands	r3, r2
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6812      	ldr	r2, [r2, #0]
 800412e:	69b9      	ldr	r1, [r7, #24]
 8004130:	430b      	orrs	r3, r1
 8004132:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff ff15 	bl	8003f68 <LL_ADC_REG_IsConversionOngoing>
 800413e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff ff22 	bl	8003f8e <LL_ADC_INJ_IsConversionOngoing>
 800414a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d13d      	bne.n	80041ce <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d13a      	bne.n	80041ce <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800415c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004164:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004166:	4313      	orrs	r3, r2
 8004168:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004174:	f023 0302 	bic.w	r3, r3, #2
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6812      	ldr	r2, [r2, #0]
 800417c:	69b9      	ldr	r1, [r7, #24]
 800417e:	430b      	orrs	r3, r1
 8004180:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004188:	2b01      	cmp	r3, #1
 800418a:	d118      	bne.n	80041be <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004196:	f023 0304 	bic.w	r3, r3, #4
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80041a2:	4311      	orrs	r1, r2
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80041a8:	4311      	orrs	r1, r2
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80041ae:	430a      	orrs	r2, r1
 80041b0:	431a      	orrs	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0201 	orr.w	r2, r2, #1
 80041ba:	611a      	str	r2, [r3, #16]
 80041bc:	e007      	b.n	80041ce <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	691a      	ldr	r2, [r3, #16]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0201 	bic.w	r2, r2, #1
 80041cc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d10c      	bne.n	80041f0 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041dc:	f023 010f 	bic.w	r1, r3, #15
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	1e5a      	subs	r2, r3, #1
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	631a      	str	r2, [r3, #48]	; 0x30
 80041ee:	e007      	b.n	8004200 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 020f 	bic.w	r2, r2, #15
 80041fe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004204:	f023 0303 	bic.w	r3, r3, #3
 8004208:	f043 0201 	orr.w	r2, r3, #1
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	655a      	str	r2, [r3, #84]	; 0x54
 8004210:	e007      	b.n	8004222 <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004216:	f043 0210 	orr.w	r2, r3, #16
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004222:	7ffb      	ldrb	r3, [r7, #31]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3720      	adds	r7, #32
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	20000038 	.word	0x20000038
 8004230:	053e2d63 	.word	0x053e2d63
 8004234:	50040000 	.word	0x50040000
 8004238:	50040300 	.word	0x50040300
 800423c:	fff0c007 	.word	0xfff0c007

08004240 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff fe8b 	bl	8003f68 <LL_ADC_REG_IsConversionOngoing>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d140      	bne.n	80042da <HAL_ADC_Start+0x9a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800425e:	2b01      	cmp	r3, #1
 8004260:	d101      	bne.n	8004266 <HAL_ADC_Start+0x26>
 8004262:	2302      	movs	r3, #2
 8004264:	e03c      	b.n	80042e0 <HAL_ADC_Start+0xa0>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 fc08 	bl	8004a84 <ADC_Enable>
 8004274:	4603      	mov	r3, r0
 8004276:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004278:	7bfb      	ldrb	r3, [r7, #15]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d128      	bne.n	80042d0 <HAL_ADC_Start+0x90>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004282:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004286:	f023 0301 	bic.w	r3, r3, #1
 800428a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004296:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800429a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800429e:	d106      	bne.n	80042ae <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a4:	f023 0206 	bic.w	r2, r3, #6
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	659a      	str	r2, [r3, #88]	; 0x58
 80042ac:	e002      	b.n	80042b4 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	221c      	movs	r2, #28
 80042ba:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff fe39 	bl	8003f40 <LL_ADC_REG_StartConversion>
 80042ce:	e006      	b.n	80042de <HAL_ADC_Start+0x9e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80042d8:	e001      	b.n	80042de <HAL_ADC_Start+0x9e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80042da:	2302      	movs	r3, #2
 80042dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80042de:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d102      	bne.n	8004300 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80042fa:	2308      	movs	r3, #8
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	e010      	b.n	8004322 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d007      	beq.n	800431e <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004312:	f043 0220 	orr.w	r2, r3, #32
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	655a      	str	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e066      	b.n	80043ec <HAL_ADC_PollForConversion+0x104>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800431e:	2304      	movs	r3, #4
 8004320:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004322:	f7ff fc1f 	bl	8003b64 <HAL_GetTick>
 8004326:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004328:	e01a      	b.n	8004360 <HAL_ADC_PollForConversion+0x78>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004330:	d016      	beq.n	8004360 <HAL_ADC_PollForConversion+0x78>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004332:	f7ff fc17 	bl	8003b64 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d302      	bcc.n	8004348 <HAL_ADC_PollForConversion+0x60>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10b      	bne.n	8004360 <HAL_ADC_PollForConversion+0x78>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434c:	f043 0204 	orr.w	r2, r3, #4
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e045      	b.n	80043ec <HAL_ADC_PollForConversion+0x104>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4013      	ands	r3, r2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0dd      	beq.n	800432a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004372:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f7ff fcb3 	bl	8003cea <LL_ADC_REG_IsTriggerSourceSWStart>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d01c      	beq.n	80043c4 <HAL_ADC_PollForConversion+0xdc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	7e5b      	ldrb	r3, [r3, #25]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d118      	bne.n	80043c4 <HAL_ADC_PollForConversion+0xdc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0308 	and.w	r3, r3, #8
 800439c:	2b08      	cmp	r3, #8
 800439e:	d111      	bne.n	80043c4 <HAL_ADC_PollForConversion+0xdc>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d105      	bne.n	80043c4 <HAL_ADC_PollForConversion+0xdc>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043bc:	f043 0201 	orr.w	r2, r3, #1
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	d104      	bne.n	80043d4 <HAL_ADC_PollForConversion+0xec>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2208      	movs	r2, #8
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	e00a      	b.n	80043ea <HAL_ADC_PollForConversion+0x102>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d103      	bne.n	80043ea <HAL_ADC_PollForConversion+0x102>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	220c      	movs	r2, #12
 80043e8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004402:	4618      	mov	r0, r3
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
	...

08004410 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b0a6      	sub	sp, #152	; 0x98
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800441a:	2300      	movs	r3, #0
 800441c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004420:	2300      	movs	r3, #0
 8004422:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800442a:	2b01      	cmp	r3, #1
 800442c:	d101      	bne.n	8004432 <HAL_ADC_ConfigChannel+0x22>
 800442e:	2302      	movs	r3, #2
 8004430:	e31e      	b.n	8004a70 <HAL_ADC_ConfigChannel+0x660>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff fd92 	bl	8003f68 <LL_ADC_REG_IsConversionOngoing>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	f040 8303 	bne.w	8004a52 <HAL_ADC_ConfigChannel+0x642>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6818      	ldr	r0, [r3, #0]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	6859      	ldr	r1, [r3, #4]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	461a      	mov	r2, r3
 800445a:	f7ff fc59 	bl	8003d10 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	f7ff fd80 	bl	8003f68 <LL_ADC_REG_IsConversionOngoing>
 8004468:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4618      	mov	r0, r3
 8004472:	f7ff fd8c 	bl	8003f8e <LL_ADC_INJ_IsConversionOngoing>
 8004476:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800447a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800447e:	2b00      	cmp	r3, #0
 8004480:	f040 8148 	bne.w	8004714 <HAL_ADC_ConfigChannel+0x304>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004484:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004488:	2b00      	cmp	r3, #0
 800448a:	f040 8143 	bne.w	8004714 <HAL_ADC_ConfigChannel+0x304>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6818      	ldr	r0, [r3, #0]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	6819      	ldr	r1, [r3, #0]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	461a      	mov	r2, r3
 800449c:	f7ff fc64 	bl	8003d68 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	695a      	ldr	r2, [r3, #20]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	08db      	lsrs	r3, r3, #3
 80044ac:	f003 0303 	and.w	r3, r3, #3
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	fa02 f303 	lsl.w	r3, r2, r3
 80044b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d00a      	beq.n	80044d8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6818      	ldr	r0, [r3, #0]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	6919      	ldr	r1, [r3, #16]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044d2:	f7ff fbb5 	bl	8003c40 <LL_ADC_SetOffset>
 80044d6:	e11d      	b.n	8004714 <HAL_ADC_ConfigChannel+0x304>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2100      	movs	r1, #0
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff fbd2 	bl	8003c88 <LL_ADC_GetOffsetChannel>
 80044e4:	4603      	mov	r3, r0
 80044e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10a      	bne.n	8004504 <HAL_ADC_ConfigChannel+0xf4>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2100      	movs	r1, #0
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff fbc7 	bl	8003c88 <LL_ADC_GetOffsetChannel>
 80044fa:	4603      	mov	r3, r0
 80044fc:	0e9b      	lsrs	r3, r3, #26
 80044fe:	f003 021f 	and.w	r2, r3, #31
 8004502:	e012      	b.n	800452a <HAL_ADC_ConfigChannel+0x11a>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2100      	movs	r1, #0
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff fbbc 	bl	8003c88 <LL_ADC_GetOffsetChannel>
 8004510:	4603      	mov	r3, r0
 8004512:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004516:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800451a:	fa93 f3a3 	rbit	r3, r3
 800451e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004520:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004522:	fab3 f383 	clz	r3, r3
 8004526:	b2db      	uxtb	r3, r3
 8004528:	461a      	mov	r2, r3
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004532:	2b00      	cmp	r3, #0
 8004534:	d105      	bne.n	8004542 <HAL_ADC_ConfigChannel+0x132>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	0e9b      	lsrs	r3, r3, #26
 800453c:	f003 031f 	and.w	r3, r3, #31
 8004540:	e00a      	b.n	8004558 <HAL_ADC_ConfigChannel+0x148>
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004548:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800454a:	fa93 f3a3 	rbit	r3, r3
 800454e:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8004550:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004552:	fab3 f383 	clz	r3, r3
 8004556:	b2db      	uxtb	r3, r3
 8004558:	429a      	cmp	r2, r3
 800455a:	d106      	bne.n	800456a <HAL_ADC_ConfigChannel+0x15a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2200      	movs	r2, #0
 8004562:	2100      	movs	r1, #0
 8004564:	4618      	mov	r0, r3
 8004566:	f7ff fba5 	bl	8003cb4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2101      	movs	r1, #1
 8004570:	4618      	mov	r0, r3
 8004572:	f7ff fb89 	bl	8003c88 <LL_ADC_GetOffsetChannel>
 8004576:	4603      	mov	r3, r0
 8004578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10a      	bne.n	8004596 <HAL_ADC_ConfigChannel+0x186>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2101      	movs	r1, #1
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff fb7e 	bl	8003c88 <LL_ADC_GetOffsetChannel>
 800458c:	4603      	mov	r3, r0
 800458e:	0e9b      	lsrs	r3, r3, #26
 8004590:	f003 021f 	and.w	r2, r3, #31
 8004594:	e010      	b.n	80045b8 <HAL_ADC_ConfigChannel+0x1a8>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2101      	movs	r1, #1
 800459c:	4618      	mov	r0, r3
 800459e:	f7ff fb73 	bl	8003c88 <LL_ADC_GetOffsetChannel>
 80045a2:	4603      	mov	r3, r0
 80045a4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045a8:	fa93 f3a3 	rbit	r3, r3
 80045ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80045ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045b0:	fab3 f383 	clz	r3, r3
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	461a      	mov	r2, r3
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d105      	bne.n	80045d0 <HAL_ADC_ConfigChannel+0x1c0>
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	0e9b      	lsrs	r3, r3, #26
 80045ca:	f003 031f 	and.w	r3, r3, #31
 80045ce:	e00a      	b.n	80045e6 <HAL_ADC_ConfigChannel+0x1d6>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045d8:	fa93 f3a3 	rbit	r3, r3
 80045dc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80045de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045e0:	fab3 f383 	clz	r3, r3
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d106      	bne.n	80045f8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2200      	movs	r2, #0
 80045f0:	2101      	movs	r1, #1
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fb5e 	bl	8003cb4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2102      	movs	r1, #2
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff fb42 	bl	8003c88 <LL_ADC_GetOffsetChannel>
 8004604:	4603      	mov	r3, r0
 8004606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10a      	bne.n	8004624 <HAL_ADC_ConfigChannel+0x214>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2102      	movs	r1, #2
 8004614:	4618      	mov	r0, r3
 8004616:	f7ff fb37 	bl	8003c88 <LL_ADC_GetOffsetChannel>
 800461a:	4603      	mov	r3, r0
 800461c:	0e9b      	lsrs	r3, r3, #26
 800461e:	f003 021f 	and.w	r2, r3, #31
 8004622:	e010      	b.n	8004646 <HAL_ADC_ConfigChannel+0x236>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2102      	movs	r1, #2
 800462a:	4618      	mov	r0, r3
 800462c:	f7ff fb2c 	bl	8003c88 <LL_ADC_GetOffsetChannel>
 8004630:	4603      	mov	r3, r0
 8004632:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004634:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004636:	fa93 f3a3 	rbit	r3, r3
 800463a:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800463c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800463e:	fab3 f383 	clz	r3, r3
 8004642:	b2db      	uxtb	r3, r3
 8004644:	461a      	mov	r2, r3
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800464e:	2b00      	cmp	r3, #0
 8004650:	d105      	bne.n	800465e <HAL_ADC_ConfigChannel+0x24e>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	0e9b      	lsrs	r3, r3, #26
 8004658:	f003 031f 	and.w	r3, r3, #31
 800465c:	e00a      	b.n	8004674 <HAL_ADC_ConfigChannel+0x264>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004664:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004666:	fa93 f3a3 	rbit	r3, r3
 800466a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800466c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800466e:	fab3 f383 	clz	r3, r3
 8004672:	b2db      	uxtb	r3, r3
 8004674:	429a      	cmp	r2, r3
 8004676:	d106      	bne.n	8004686 <HAL_ADC_ConfigChannel+0x276>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2200      	movs	r2, #0
 800467e:	2102      	movs	r1, #2
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff fb17 	bl	8003cb4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2103      	movs	r1, #3
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff fafb 	bl	8003c88 <LL_ADC_GetOffsetChannel>
 8004692:	4603      	mov	r3, r0
 8004694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10a      	bne.n	80046b2 <HAL_ADC_ConfigChannel+0x2a2>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2103      	movs	r1, #3
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff faf0 	bl	8003c88 <LL_ADC_GetOffsetChannel>
 80046a8:	4603      	mov	r3, r0
 80046aa:	0e9b      	lsrs	r3, r3, #26
 80046ac:	f003 021f 	and.w	r2, r3, #31
 80046b0:	e010      	b.n	80046d4 <HAL_ADC_ConfigChannel+0x2c4>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2103      	movs	r1, #3
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff fae5 	bl	8003c88 <LL_ADC_GetOffsetChannel>
 80046be:	4603      	mov	r3, r0
 80046c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046c4:	fa93 f3a3 	rbit	r3, r3
 80046c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80046ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046cc:	fab3 f383 	clz	r3, r3
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	461a      	mov	r2, r3
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d105      	bne.n	80046ec <HAL_ADC_ConfigChannel+0x2dc>
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	0e9b      	lsrs	r3, r3, #26
 80046e6:	f003 031f 	and.w	r3, r3, #31
 80046ea:	e00a      	b.n	8004702 <HAL_ADC_ConfigChannel+0x2f2>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046f4:	fa93 f3a3 	rbit	r3, r3
 80046f8:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80046fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046fc:	fab3 f383 	clz	r3, r3
 8004700:	b2db      	uxtb	r3, r3
 8004702:	429a      	cmp	r2, r3
 8004704:	d106      	bne.n	8004714 <HAL_ADC_ConfigChannel+0x304>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2200      	movs	r2, #0
 800470c:	2103      	movs	r1, #3
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff fad0 	bl	8003cb4 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4618      	mov	r0, r3
 800471a:	f7ff fbeb 	bl	8003ef4 <LL_ADC_IsEnabled>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	f040 819f 	bne.w	8004a64 <HAL_ADC_ConfigChannel+0x654>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6818      	ldr	r0, [r3, #0]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	6819      	ldr	r1, [r3, #0]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	461a      	mov	r2, r3
 8004734:	f7ff fb44 	bl	8003dc0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	4aab      	ldr	r2, [pc, #684]	; (80049ec <HAL_ADC_ConfigChannel+0x5dc>)
 800473e:	4293      	cmp	r3, r2
 8004740:	f040 80fd 	bne.w	800493e <HAL_ADC_ConfigChannel+0x52e>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10b      	bne.n	800476c <HAL_ADC_ConfigChannel+0x35c>
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	0e9b      	lsrs	r3, r3, #26
 800475a:	3301      	adds	r3, #1
 800475c:	f003 031f 	and.w	r3, r3, #31
 8004760:	2b09      	cmp	r3, #9
 8004762:	bf94      	ite	ls
 8004764:	2301      	movls	r3, #1
 8004766:	2300      	movhi	r3, #0
 8004768:	b2db      	uxtb	r3, r3
 800476a:	e012      	b.n	8004792 <HAL_ADC_ConfigChannel+0x382>
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004774:	fa93 f3a3 	rbit	r3, r3
 8004778:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800477a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800477c:	fab3 f383 	clz	r3, r3
 8004780:	b2db      	uxtb	r3, r3
 8004782:	3301      	adds	r3, #1
 8004784:	f003 031f 	and.w	r3, r3, #31
 8004788:	2b09      	cmp	r3, #9
 800478a:	bf94      	ite	ls
 800478c:	2301      	movls	r3, #1
 800478e:	2300      	movhi	r3, #0
 8004790:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004792:	2b00      	cmp	r3, #0
 8004794:	d064      	beq.n	8004860 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d107      	bne.n	80047b2 <HAL_ADC_ConfigChannel+0x3a2>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	0e9b      	lsrs	r3, r3, #26
 80047a8:	3301      	adds	r3, #1
 80047aa:	069b      	lsls	r3, r3, #26
 80047ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047b0:	e00e      	b.n	80047d0 <HAL_ADC_ConfigChannel+0x3c0>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ba:	fa93 f3a3 	rbit	r3, r3
 80047be:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80047c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c2:	fab3 f383 	clz	r3, r3
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	3301      	adds	r3, #1
 80047ca:	069b      	lsls	r3, r3, #26
 80047cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d109      	bne.n	80047f0 <HAL_ADC_ConfigChannel+0x3e0>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	0e9b      	lsrs	r3, r3, #26
 80047e2:	3301      	adds	r3, #1
 80047e4:	f003 031f 	and.w	r3, r3, #31
 80047e8:	2101      	movs	r1, #1
 80047ea:	fa01 f303 	lsl.w	r3, r1, r3
 80047ee:	e010      	b.n	8004812 <HAL_ADC_ConfigChannel+0x402>
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f8:	fa93 f3a3 	rbit	r3, r3
 80047fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80047fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004800:	fab3 f383 	clz	r3, r3
 8004804:	b2db      	uxtb	r3, r3
 8004806:	3301      	adds	r3, #1
 8004808:	f003 031f 	and.w	r3, r3, #31
 800480c:	2101      	movs	r1, #1
 800480e:	fa01 f303 	lsl.w	r3, r1, r3
 8004812:	ea42 0103 	orr.w	r1, r2, r3
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10a      	bne.n	8004838 <HAL_ADC_ConfigChannel+0x428>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	0e9b      	lsrs	r3, r3, #26
 8004828:	3301      	adds	r3, #1
 800482a:	f003 021f 	and.w	r2, r3, #31
 800482e:	4613      	mov	r3, r2
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	4413      	add	r3, r2
 8004834:	051b      	lsls	r3, r3, #20
 8004836:	e011      	b.n	800485c <HAL_ADC_ConfigChannel+0x44c>
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004840:	fa93 f3a3 	rbit	r3, r3
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	fab3 f383 	clz	r3, r3
 800484c:	b2db      	uxtb	r3, r3
 800484e:	3301      	adds	r3, #1
 8004850:	f003 021f 	and.w	r2, r3, #31
 8004854:	4613      	mov	r3, r2
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	4413      	add	r3, r2
 800485a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800485c:	430b      	orrs	r3, r1
 800485e:	e069      	b.n	8004934 <HAL_ADC_ConfigChannel+0x524>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004868:	2b00      	cmp	r3, #0
 800486a:	d107      	bne.n	800487c <HAL_ADC_ConfigChannel+0x46c>
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	0e9b      	lsrs	r3, r3, #26
 8004872:	3301      	adds	r3, #1
 8004874:	069b      	lsls	r3, r3, #26
 8004876:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800487a:	e00e      	b.n	800489a <HAL_ADC_ConfigChannel+0x48a>
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	fa93 f3a3 	rbit	r3, r3
 8004888:	61fb      	str	r3, [r7, #28]
  return result;
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	fab3 f383 	clz	r3, r3
 8004890:	b2db      	uxtb	r3, r3
 8004892:	3301      	adds	r3, #1
 8004894:	069b      	lsls	r3, r3, #26
 8004896:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d109      	bne.n	80048ba <HAL_ADC_ConfigChannel+0x4aa>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	0e9b      	lsrs	r3, r3, #26
 80048ac:	3301      	adds	r3, #1
 80048ae:	f003 031f 	and.w	r3, r3, #31
 80048b2:	2101      	movs	r1, #1
 80048b4:	fa01 f303 	lsl.w	r3, r1, r3
 80048b8:	e010      	b.n	80048dc <HAL_ADC_ConfigChannel+0x4cc>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	fa93 f3a3 	rbit	r3, r3
 80048c6:	617b      	str	r3, [r7, #20]
  return result;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	fab3 f383 	clz	r3, r3
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	3301      	adds	r3, #1
 80048d2:	f003 031f 	and.w	r3, r3, #31
 80048d6:	2101      	movs	r1, #1
 80048d8:	fa01 f303 	lsl.w	r3, r1, r3
 80048dc:	ea42 0103 	orr.w	r1, r2, r3
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10d      	bne.n	8004908 <HAL_ADC_ConfigChannel+0x4f8>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	0e9b      	lsrs	r3, r3, #26
 80048f2:	3301      	adds	r3, #1
 80048f4:	f003 021f 	and.w	r2, r3, #31
 80048f8:	4613      	mov	r3, r2
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	4413      	add	r3, r2
 80048fe:	3b1e      	subs	r3, #30
 8004900:	051b      	lsls	r3, r3, #20
 8004902:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004906:	e014      	b.n	8004932 <HAL_ADC_ConfigChannel+0x522>
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	fa93 f3a3 	rbit	r3, r3
 8004914:	60fb      	str	r3, [r7, #12]
  return result;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	fab3 f383 	clz	r3, r3
 800491c:	b2db      	uxtb	r3, r3
 800491e:	3301      	adds	r3, #1
 8004920:	f003 021f 	and.w	r2, r3, #31
 8004924:	4613      	mov	r3, r2
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	4413      	add	r3, r2
 800492a:	3b1e      	subs	r3, #30
 800492c:	051b      	lsls	r3, r3, #20
 800492e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004932:	430b      	orrs	r3, r1
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	6892      	ldr	r2, [r2, #8]
 8004938:	4619      	mov	r1, r3
 800493a:	f7ff fa15 	bl	8003d68 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	4b2b      	ldr	r3, [pc, #172]	; (80049f0 <HAL_ADC_ConfigChannel+0x5e0>)
 8004944:	4013      	ands	r3, r2
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 808c 	beq.w	8004a64 <HAL_ADC_ConfigChannel+0x654>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800494c:	4829      	ldr	r0, [pc, #164]	; (80049f4 <HAL_ADC_ConfigChannel+0x5e4>)
 800494e:	f7ff f969 	bl	8003c24 <LL_ADC_GetCommonPathInternalCh>
 8004952:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004956:	4828      	ldr	r0, [pc, #160]	; (80049f8 <HAL_ADC_ConfigChannel+0x5e8>)
 8004958:	f7ff facc 	bl	8003ef4 <LL_ADC_IsEnabled>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d16d      	bne.n	8004a3e <HAL_ADC_ConfigChannel+0x62e>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a25      	ldr	r2, [pc, #148]	; (80049fc <HAL_ADC_ConfigChannel+0x5ec>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d126      	bne.n	80049ba <HAL_ADC_ConfigChannel+0x5aa>
 800496c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004970:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d120      	bne.n	80049ba <HAL_ADC_ConfigChannel+0x5aa>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a1e      	ldr	r2, [pc, #120]	; (80049f8 <HAL_ADC_ConfigChannel+0x5e8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d170      	bne.n	8004a64 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004982:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004986:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800498a:	4619      	mov	r1, r3
 800498c:	4819      	ldr	r0, [pc, #100]	; (80049f4 <HAL_ADC_ConfigChannel+0x5e4>)
 800498e:	f7ff f936 	bl	8003bfe <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004992:	4b1b      	ldr	r3, [pc, #108]	; (8004a00 <HAL_ADC_ConfigChannel+0x5f0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	099b      	lsrs	r3, r3, #6
 8004998:	4a1a      	ldr	r2, [pc, #104]	; (8004a04 <HAL_ADC_ConfigChannel+0x5f4>)
 800499a:	fba2 2303 	umull	r2, r3, r2, r3
 800499e:	099a      	lsrs	r2, r3, #6
 80049a0:	4613      	mov	r3, r2
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	4413      	add	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80049aa:	e002      	b.n	80049b2 <HAL_ADC_ConfigChannel+0x5a2>
              {
                wait_loop_index--;
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1f9      	bne.n	80049ac <HAL_ADC_ConfigChannel+0x59c>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049b8:	e054      	b.n	8004a64 <HAL_ADC_ConfigChannel+0x654>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a12      	ldr	r2, [pc, #72]	; (8004a08 <HAL_ADC_ConfigChannel+0x5f8>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d123      	bne.n	8004a0c <HAL_ADC_ConfigChannel+0x5fc>
 80049c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d11d      	bne.n	8004a0c <HAL_ADC_ConfigChannel+0x5fc>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a08      	ldr	r2, [pc, #32]	; (80049f8 <HAL_ADC_ConfigChannel+0x5e8>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d144      	bne.n	8004a64 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80049da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049e2:	4619      	mov	r1, r3
 80049e4:	4803      	ldr	r0, [pc, #12]	; (80049f4 <HAL_ADC_ConfigChannel+0x5e4>)
 80049e6:	f7ff f90a 	bl	8003bfe <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049ea:	e03b      	b.n	8004a64 <HAL_ADC_ConfigChannel+0x654>
 80049ec:	407f0000 	.word	0x407f0000
 80049f0:	80080000 	.word	0x80080000
 80049f4:	50040300 	.word	0x50040300
 80049f8:	50040000 	.word	0x50040000
 80049fc:	c7520000 	.word	0xc7520000
 8004a00:	20000038 	.word	0x20000038
 8004a04:	053e2d63 	.word	0x053e2d63
 8004a08:	cb840000 	.word	0xcb840000
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a19      	ldr	r2, [pc, #100]	; (8004a78 <HAL_ADC_ConfigChannel+0x668>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d126      	bne.n	8004a64 <HAL_ADC_ConfigChannel+0x654>
 8004a16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d120      	bne.n	8004a64 <HAL_ADC_ConfigChannel+0x654>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a15      	ldr	r2, [pc, #84]	; (8004a7c <HAL_ADC_ConfigChannel+0x66c>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d11b      	bne.n	8004a64 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004a2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a34:	4619      	mov	r1, r3
 8004a36:	4812      	ldr	r0, [pc, #72]	; (8004a80 <HAL_ADC_ConfigChannel+0x670>)
 8004a38:	f7ff f8e1 	bl	8003bfe <LL_ADC_SetCommonPathInternalCh>
 8004a3c:	e012      	b.n	8004a64 <HAL_ADC_ConfigChannel+0x654>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a42:	f043 0220 	orr.w	r2, r3, #32
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8004a50:	e008      	b.n	8004a64 <HAL_ADC_ConfigChannel+0x654>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a56:	f043 0220 	orr.w	r2, r3, #32
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004a6c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3798      	adds	r7, #152	; 0x98
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	80000001 	.word	0x80000001
 8004a7c:	50040000 	.word	0x50040000
 8004a80:	50040300 	.word	0x50040300

08004a84 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7ff fa2f 	bl	8003ef4 <LL_ADC_IsEnabled>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d146      	bne.n	8004b2a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	4b24      	ldr	r3, [pc, #144]	; (8004b34 <ADC_Enable+0xb0>)
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00d      	beq.n	8004ac6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aae:	f043 0210 	orr.w	r2, r3, #16
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aba:	f043 0201 	orr.w	r2, r3, #1
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e032      	b.n	8004b2c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7ff f9ea 	bl	8003ea4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004ad0:	f7ff f848 	bl	8003b64 <HAL_GetTick>
 8004ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ad6:	e021      	b.n	8004b1c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7ff fa09 	bl	8003ef4 <LL_ADC_IsEnabled>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d104      	bne.n	8004af2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7ff f9d9 	bl	8003ea4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004af2:	f7ff f837 	bl	8003b64 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d90d      	bls.n	8004b1c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b04:	f043 0210 	orr.w	r2, r3, #16
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b10:	f043 0201 	orr.w	r2, r3, #1
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e007      	b.n	8004b2c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d1d6      	bne.n	8004ad8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	8000003f 	.word	0x8000003f

08004b38 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff f9e8 	bl	8003f1a <LL_ADC_IsDisableOngoing>
 8004b4a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7ff f9cf 	bl	8003ef4 <LL_ADC_IsEnabled>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d040      	beq.n	8004bde <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d13d      	bne.n	8004bde <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f003 030d 	and.w	r3, r3, #13
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d10c      	bne.n	8004b8a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7ff f9a9 	bl	8003ecc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2203      	movs	r2, #3
 8004b80:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b82:	f7fe ffef 	bl	8003b64 <HAL_GetTick>
 8004b86:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b88:	e022      	b.n	8004bd0 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8e:	f043 0210 	orr.w	r2, r3, #16
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b9a:	f043 0201 	orr.w	r2, r3, #1
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e01c      	b.n	8004be0 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004ba6:	f7fe ffdd 	bl	8003b64 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d90d      	bls.n	8004bd0 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb8:	f043 0210 	orr.w	r2, r3, #16
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc4:	f043 0201 	orr.w	r2, r3, #1
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e007      	b.n	8004be0 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1e3      	bne.n	8004ba6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <LL_ADC_StartCalibration>:
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004bfa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004c04:	4313      	orrs	r3, r2
 8004c06:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	609a      	str	r2, [r3, #8]
}
 8004c0e:	bf00      	nop
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <LL_ADC_IsCalibrationOnGoing>:
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b083      	sub	sp, #12
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c2e:	d101      	bne.n	8004c34 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004c30:	2301      	movs	r3, #1
 8004c32:	e000      	b.n	8004c36 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
	...

08004c44 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d101      	bne.n	8004c60 <HAL_ADCEx_Calibration_Start+0x1c>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	e04d      	b.n	8004cfc <HAL_ADCEx_Calibration_Start+0xb8>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7ff ff65 	bl	8004b38 <ADC_Disable>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004c72:	7bfb      	ldrb	r3, [r7, #15]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d136      	bne.n	8004ce6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004c80:	f023 0302 	bic.w	r3, r3, #2
 8004c84:	f043 0202 	orr.w	r2, r3, #2
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6839      	ldr	r1, [r7, #0]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff ffa8 	bl	8004be8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004c98:	e014      	b.n	8004cc4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4a18      	ldr	r2, [pc, #96]	; (8004d04 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d90d      	bls.n	8004cc4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cac:	f023 0312 	bic.w	r3, r3, #18
 8004cb0:	f043 0210 	orr.w	r2, r3, #16
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e01b      	b.n	8004cfc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7ff ffa6 	bl	8004c1a <LL_ADC_IsCalibrationOnGoing>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1e2      	bne.n	8004c9a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd8:	f023 0303 	bic.w	r3, r3, #3
 8004cdc:	f043 0201 	orr.w	r2, r3, #1
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	655a      	str	r2, [r3, #84]	; 0x54
 8004ce4:	e005      	b.n	8004cf2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cea:	f043 0210 	orr.w	r2, r3, #16
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	00026aaa 	.word	0x00026aaa

08004d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d18:	4b0c      	ldr	r3, [pc, #48]	; (8004d4c <__NVIC_SetPriorityGrouping+0x44>)
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d24:	4013      	ands	r3, r2
 8004d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d3a:	4a04      	ldr	r2, [pc, #16]	; (8004d4c <__NVIC_SetPriorityGrouping+0x44>)
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	60d3      	str	r3, [r2, #12]
}
 8004d40:	bf00      	nop
 8004d42:	3714      	adds	r7, #20
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	e000ed00 	.word	0xe000ed00

08004d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d54:	4b04      	ldr	r3, [pc, #16]	; (8004d68 <__NVIC_GetPriorityGrouping+0x18>)
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	0a1b      	lsrs	r3, r3, #8
 8004d5a:	f003 0307 	and.w	r3, r3, #7
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	e000ed00 	.word	0xe000ed00

08004d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	4603      	mov	r3, r0
 8004d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	db0b      	blt.n	8004d96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d7e:	79fb      	ldrb	r3, [r7, #7]
 8004d80:	f003 021f 	and.w	r2, r3, #31
 8004d84:	4907      	ldr	r1, [pc, #28]	; (8004da4 <__NVIC_EnableIRQ+0x38>)
 8004d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d8a:	095b      	lsrs	r3, r3, #5
 8004d8c:	2001      	movs	r0, #1
 8004d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8004d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d96:	bf00      	nop
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	e000e100 	.word	0xe000e100

08004da8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	4603      	mov	r3, r0
 8004db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	db10      	blt.n	8004ddc <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dba:	79fb      	ldrb	r3, [r7, #7]
 8004dbc:	f003 021f 	and.w	r2, r3, #31
 8004dc0:	4909      	ldr	r1, [pc, #36]	; (8004de8 <__NVIC_DisableIRQ+0x40>)
 8004dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc6:	095b      	lsrs	r3, r3, #5
 8004dc8:	2001      	movs	r0, #1
 8004dca:	fa00 f202 	lsl.w	r2, r0, r2
 8004dce:	3320      	adds	r3, #32
 8004dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004dd4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004dd8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	e000e100 	.word	0xe000e100

08004dec <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	4603      	mov	r3, r0
 8004df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	db0c      	blt.n	8004e18 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dfe:	79fb      	ldrb	r3, [r7, #7]
 8004e00:	f003 021f 	and.w	r2, r3, #31
 8004e04:	4907      	ldr	r1, [pc, #28]	; (8004e24 <__NVIC_SetPendingIRQ+0x38>)
 8004e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e0a:	095b      	lsrs	r3, r3, #5
 8004e0c:	2001      	movs	r0, #1
 8004e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e12:	3340      	adds	r3, #64	; 0x40
 8004e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	e000e100 	.word	0xe000e100

08004e28 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	db0c      	blt.n	8004e54 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e3a:	79fb      	ldrb	r3, [r7, #7]
 8004e3c:	f003 021f 	and.w	r2, r3, #31
 8004e40:	4907      	ldr	r1, [pc, #28]	; (8004e60 <__NVIC_ClearPendingIRQ+0x38>)
 8004e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e46:	095b      	lsrs	r3, r3, #5
 8004e48:	2001      	movs	r0, #1
 8004e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8004e4e:	3360      	adds	r3, #96	; 0x60
 8004e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	e000e100 	.word	0xe000e100

08004e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	6039      	str	r1, [r7, #0]
 8004e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	db0a      	blt.n	8004e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	b2da      	uxtb	r2, r3
 8004e7c:	490c      	ldr	r1, [pc, #48]	; (8004eb0 <__NVIC_SetPriority+0x4c>)
 8004e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e82:	0112      	lsls	r2, r2, #4
 8004e84:	b2d2      	uxtb	r2, r2
 8004e86:	440b      	add	r3, r1
 8004e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e8c:	e00a      	b.n	8004ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	4908      	ldr	r1, [pc, #32]	; (8004eb4 <__NVIC_SetPriority+0x50>)
 8004e94:	79fb      	ldrb	r3, [r7, #7]
 8004e96:	f003 030f 	and.w	r3, r3, #15
 8004e9a:	3b04      	subs	r3, #4
 8004e9c:	0112      	lsls	r2, r2, #4
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	440b      	add	r3, r1
 8004ea2:	761a      	strb	r2, [r3, #24]
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	e000e100 	.word	0xe000e100
 8004eb4:	e000ed00 	.word	0xe000ed00

08004eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b089      	sub	sp, #36	; 0x24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f003 0307 	and.w	r3, r3, #7
 8004eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	f1c3 0307 	rsb	r3, r3, #7
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	bf28      	it	cs
 8004ed6:	2304      	movcs	r3, #4
 8004ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	3304      	adds	r3, #4
 8004ede:	2b06      	cmp	r3, #6
 8004ee0:	d902      	bls.n	8004ee8 <NVIC_EncodePriority+0x30>
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	3b03      	subs	r3, #3
 8004ee6:	e000      	b.n	8004eea <NVIC_EncodePriority+0x32>
 8004ee8:	2300      	movs	r3, #0
 8004eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef6:	43da      	mvns	r2, r3
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	401a      	ands	r2, r3
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	fa01 f303 	lsl.w	r3, r1, r3
 8004f0a:	43d9      	mvns	r1, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f10:	4313      	orrs	r3, r2
         );
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3724      	adds	r7, #36	; 0x24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
	...

08004f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f30:	d301      	bcc.n	8004f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f32:	2301      	movs	r3, #1
 8004f34:	e00f      	b.n	8004f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f36:	4a0a      	ldr	r2, [pc, #40]	; (8004f60 <SysTick_Config+0x40>)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f3e:	210f      	movs	r1, #15
 8004f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f44:	f7ff ff8e 	bl	8004e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f48:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <SysTick_Config+0x40>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f4e:	4b04      	ldr	r3, [pc, #16]	; (8004f60 <SysTick_Config+0x40>)
 8004f50:	2207      	movs	r2, #7
 8004f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	e000e010 	.word	0xe000e010

08004f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f7ff fecb 	bl	8004d08 <__NVIC_SetPriorityGrouping>
}
 8004f72:	bf00      	nop
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b086      	sub	sp, #24
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	4603      	mov	r3, r0
 8004f82:	60b9      	str	r1, [r7, #8]
 8004f84:	607a      	str	r2, [r7, #4]
 8004f86:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f88:	f7ff fee2 	bl	8004d50 <__NVIC_GetPriorityGrouping>
 8004f8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	68b9      	ldr	r1, [r7, #8]
 8004f92:	6978      	ldr	r0, [r7, #20]
 8004f94:	f7ff ff90 	bl	8004eb8 <NVIC_EncodePriority>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f9e:	4611      	mov	r1, r2
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7ff ff5f 	bl	8004e64 <__NVIC_SetPriority>
}
 8004fa6:	bf00      	nop
 8004fa8:	3718      	adds	r7, #24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b082      	sub	sp, #8
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7ff fed5 	bl	8004d6c <__NVIC_EnableIRQ>
}
 8004fc2:	bf00      	nop
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b082      	sub	sp, #8
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7ff fee5 	bl	8004da8 <__NVIC_DisableIRQ>
}
 8004fde:	bf00      	nop
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b082      	sub	sp, #8
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7ff ff96 	bl	8004f20 <SysTick_Config>
 8004ff4:	4603      	mov	r3, r0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b082      	sub	sp, #8
 8005002:	af00      	add	r7, sp, #0
 8005004:	4603      	mov	r3, r0
 8005006:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8005008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800500c:	4618      	mov	r0, r3
 800500e:	f7ff feed 	bl	8004dec <__NVIC_SetPendingIRQ>
}
 8005012:	bf00      	nop
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b082      	sub	sp, #8
 800501e:	af00      	add	r7, sp, #0
 8005020:	4603      	mov	r3, r0
 8005022:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8005024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff fefd 	bl	8004e28 <__NVIC_ClearPendingIRQ>
}
 800502e:	bf00      	nop
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
	...

08005038 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005038:	b480      	push	{r7}
 800503a:	b087      	sub	sp, #28
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005042:	2300      	movs	r3, #0
 8005044:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005046:	e14c      	b.n	80052e2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	2101      	movs	r1, #1
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	fa01 f303 	lsl.w	r3, r1, r3
 8005054:	4013      	ands	r3, r2
 8005056:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2b00      	cmp	r3, #0
 800505c:	f000 813e 	beq.w	80052dc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d00b      	beq.n	8005080 <HAL_GPIO_Init+0x48>
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	2b02      	cmp	r3, #2
 800506e:	d007      	beq.n	8005080 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005074:	2b11      	cmp	r3, #17
 8005076:	d003      	beq.n	8005080 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	2b12      	cmp	r3, #18
 800507e:	d130      	bne.n	80050e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	2203      	movs	r2, #3
 800508c:	fa02 f303 	lsl.w	r3, r2, r3
 8005090:	43db      	mvns	r3, r3
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	4013      	ands	r3, r2
 8005096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	68da      	ldr	r2, [r3, #12]
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	fa02 f303 	lsl.w	r3, r2, r3
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050b6:	2201      	movs	r2, #1
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	fa02 f303 	lsl.w	r3, r2, r3
 80050be:	43db      	mvns	r3, r3
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	4013      	ands	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	091b      	lsrs	r3, r3, #4
 80050cc:	f003 0201 	and.w	r2, r3, #1
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	fa02 f303 	lsl.w	r3, r2, r3
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	4313      	orrs	r3, r2
 80050da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	2203      	movs	r2, #3
 80050ee:	fa02 f303 	lsl.w	r3, r2, r3
 80050f2:	43db      	mvns	r3, r3
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	4013      	ands	r3, r2
 80050f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	689a      	ldr	r2, [r3, #8]
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	fa02 f303 	lsl.w	r3, r2, r3
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	4313      	orrs	r3, r2
 800510a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2b02      	cmp	r3, #2
 8005118:	d003      	beq.n	8005122 <HAL_GPIO_Init+0xea>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	2b12      	cmp	r3, #18
 8005120:	d123      	bne.n	800516a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	08da      	lsrs	r2, r3, #3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	3208      	adds	r2, #8
 800512a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800512e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f003 0307 	and.w	r3, r3, #7
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	220f      	movs	r2, #15
 800513a:	fa02 f303 	lsl.w	r3, r2, r3
 800513e:	43db      	mvns	r3, r3
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	4013      	ands	r3, r2
 8005144:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	691a      	ldr	r2, [r3, #16]
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f003 0307 	and.w	r3, r3, #7
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	fa02 f303 	lsl.w	r3, r2, r3
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	4313      	orrs	r3, r2
 800515a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	08da      	lsrs	r2, r3, #3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	3208      	adds	r2, #8
 8005164:	6939      	ldr	r1, [r7, #16]
 8005166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	2203      	movs	r2, #3
 8005176:	fa02 f303 	lsl.w	r3, r2, r3
 800517a:	43db      	mvns	r3, r3
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	4013      	ands	r3, r2
 8005180:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f003 0203 	and.w	r2, r3, #3
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	fa02 f303 	lsl.w	r3, r2, r3
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	4313      	orrs	r3, r2
 8005196:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 8098 	beq.w	80052dc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80051ac:	4a54      	ldr	r2, [pc, #336]	; (8005300 <HAL_GPIO_Init+0x2c8>)
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	089b      	lsrs	r3, r3, #2
 80051b2:	3302      	adds	r3, #2
 80051b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f003 0303 	and.w	r3, r3, #3
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	220f      	movs	r2, #15
 80051c4:	fa02 f303 	lsl.w	r3, r2, r3
 80051c8:	43db      	mvns	r3, r3
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4013      	ands	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80051d6:	d019      	beq.n	800520c <HAL_GPIO_Init+0x1d4>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a4a      	ldr	r2, [pc, #296]	; (8005304 <HAL_GPIO_Init+0x2cc>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d013      	beq.n	8005208 <HAL_GPIO_Init+0x1d0>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a49      	ldr	r2, [pc, #292]	; (8005308 <HAL_GPIO_Init+0x2d0>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d00d      	beq.n	8005204 <HAL_GPIO_Init+0x1cc>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a48      	ldr	r2, [pc, #288]	; (800530c <HAL_GPIO_Init+0x2d4>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d007      	beq.n	8005200 <HAL_GPIO_Init+0x1c8>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a47      	ldr	r2, [pc, #284]	; (8005310 <HAL_GPIO_Init+0x2d8>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d101      	bne.n	80051fc <HAL_GPIO_Init+0x1c4>
 80051f8:	2304      	movs	r3, #4
 80051fa:	e008      	b.n	800520e <HAL_GPIO_Init+0x1d6>
 80051fc:	2307      	movs	r3, #7
 80051fe:	e006      	b.n	800520e <HAL_GPIO_Init+0x1d6>
 8005200:	2303      	movs	r3, #3
 8005202:	e004      	b.n	800520e <HAL_GPIO_Init+0x1d6>
 8005204:	2302      	movs	r3, #2
 8005206:	e002      	b.n	800520e <HAL_GPIO_Init+0x1d6>
 8005208:	2301      	movs	r3, #1
 800520a:	e000      	b.n	800520e <HAL_GPIO_Init+0x1d6>
 800520c:	2300      	movs	r3, #0
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	f002 0203 	and.w	r2, r2, #3
 8005214:	0092      	lsls	r2, r2, #2
 8005216:	4093      	lsls	r3, r2
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	4313      	orrs	r3, r2
 800521c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800521e:	4938      	ldr	r1, [pc, #224]	; (8005300 <HAL_GPIO_Init+0x2c8>)
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	089b      	lsrs	r3, r3, #2
 8005224:	3302      	adds	r3, #2
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800522c:	4b39      	ldr	r3, [pc, #228]	; (8005314 <HAL_GPIO_Init+0x2dc>)
 800522e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005232:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	43db      	mvns	r3, r3
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	4013      	ands	r3, r2
 800523c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4313      	orrs	r3, r2
 8005250:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005252:	4a30      	ldr	r2, [pc, #192]	; (8005314 <HAL_GPIO_Init+0x2dc>)
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800525a:	4b2e      	ldr	r3, [pc, #184]	; (8005314 <HAL_GPIO_Init+0x2dc>)
 800525c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	43db      	mvns	r3, r3
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	4013      	ands	r3, r2
 800526a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d003      	beq.n	8005280 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4313      	orrs	r3, r2
 800527e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005280:	4a24      	ldr	r2, [pc, #144]	; (8005314 <HAL_GPIO_Init+0x2dc>)
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005288:	4b22      	ldr	r3, [pc, #136]	; (8005314 <HAL_GPIO_Init+0x2dc>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	43db      	mvns	r3, r3
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4013      	ands	r3, r2
 8005296:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d003      	beq.n	80052ac <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80052ac:	4a19      	ldr	r2, [pc, #100]	; (8005314 <HAL_GPIO_Init+0x2dc>)
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80052b2:	4b18      	ldr	r3, [pc, #96]	; (8005314 <HAL_GPIO_Init+0x2dc>)
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	43db      	mvns	r3, r3
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	4013      	ands	r3, r2
 80052c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80052d6:	4a0f      	ldr	r2, [pc, #60]	; (8005314 <HAL_GPIO_Init+0x2dc>)
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	3301      	adds	r3, #1
 80052e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	fa22 f303 	lsr.w	r3, r2, r3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f47f aeab 	bne.w	8005048 <HAL_GPIO_Init+0x10>
  }
}
 80052f2:	bf00      	nop
 80052f4:	371c      	adds	r7, #28
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	40010000 	.word	0x40010000
 8005304:	48000400 	.word	0x48000400
 8005308:	48000800 	.word	0x48000800
 800530c:	48000c00 	.word	0x48000c00
 8005310:	48001000 	.word	0x48001000
 8005314:	58000800 	.word	0x58000800

08005318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	460b      	mov	r3, r1
 8005322:	807b      	strh	r3, [r7, #2]
 8005324:	4613      	mov	r3, r2
 8005326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005328:	787b      	ldrb	r3, [r7, #1]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800532e:	887a      	ldrh	r2, [r7, #2]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005334:	e002      	b.n	800533c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005336:	887a      	ldrh	r2, [r7, #2]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	460b      	mov	r3, r1
 8005352:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800535a:	887a      	ldrh	r2, [r7, #2]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4013      	ands	r3, r2
 8005360:	041a      	lsls	r2, r3, #16
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	43d9      	mvns	r1, r3
 8005366:	887b      	ldrh	r3, [r7, #2]
 8005368:	400b      	ands	r3, r1
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	619a      	str	r2, [r3, #24]
}
 8005370:	bf00      	nop
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8005382:	4b0a      	ldr	r3, [pc, #40]	; (80053ac <HAL_HSEM_IRQHandler+0x30>)
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005388:	4b08      	ldr	r3, [pc, #32]	; (80053ac <HAL_HSEM_IRQHandler+0x30>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	43db      	mvns	r3, r3
 8005390:	4906      	ldr	r1, [pc, #24]	; (80053ac <HAL_HSEM_IRQHandler+0x30>)
 8005392:	4013      	ands	r3, r2
 8005394:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8005396:	4a05      	ldr	r2, [pc, #20]	; (80053ac <HAL_HSEM_IRQHandler+0x30>)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f807 	bl	80053b0 <HAL_HSEM_FreeCallback>
}
 80053a2:	bf00      	nop
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	58001500 	.word	0x58001500

080053b0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e081      	b.n	80054da <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d106      	bne.n	80053f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7fc ffde 	bl	80023ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2224      	movs	r2, #36	; 0x24
 80053f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 0201 	bic.w	r2, r2, #1
 8005406:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005414:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	689a      	ldr	r2, [r3, #8]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005424:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d107      	bne.n	800543e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689a      	ldr	r2, [r3, #8]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800543a:	609a      	str	r2, [r3, #8]
 800543c:	e006      	b.n	800544c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689a      	ldr	r2, [r3, #8]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800544a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	2b02      	cmp	r3, #2
 8005452:	d104      	bne.n	800545e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800545c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	6812      	ldr	r2, [r2, #0]
 8005468:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800546c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005470:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68da      	ldr	r2, [r3, #12]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005480:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	691a      	ldr	r2, [r3, #16]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	ea42 0103 	orr.w	r1, r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	021a      	lsls	r2, r3, #8
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	69d9      	ldr	r1, [r3, #28]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a1a      	ldr	r2, [r3, #32]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0201 	orr.w	r2, r2, #1
 80054ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3708      	adds	r7, #8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
	...

080054e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b088      	sub	sp, #32
 80054e8:	af02      	add	r7, sp, #8
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	607a      	str	r2, [r7, #4]
 80054ee:	461a      	mov	r2, r3
 80054f0:	460b      	mov	r3, r1
 80054f2:	817b      	strh	r3, [r7, #10]
 80054f4:	4613      	mov	r3, r2
 80054f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b20      	cmp	r3, #32
 8005502:	f040 80da 	bne.w	80056ba <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800550c:	2b01      	cmp	r3, #1
 800550e:	d101      	bne.n	8005514 <HAL_I2C_Master_Transmit+0x30>
 8005510:	2302      	movs	r3, #2
 8005512:	e0d3      	b.n	80056bc <HAL_I2C_Master_Transmit+0x1d8>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800551c:	f7fe fb22 	bl	8003b64 <HAL_GetTick>
 8005520:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	2319      	movs	r3, #25
 8005528:	2201      	movs	r2, #1
 800552a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 f9e6 	bl	8005900 <I2C_WaitOnFlagUntilTimeout>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e0be      	b.n	80056bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2221      	movs	r2, #33	; 0x21
 8005542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2210      	movs	r2, #16
 800554a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	893a      	ldrh	r2, [r7, #8]
 800555e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800556a:	b29b      	uxth	r3, r3
 800556c:	2bff      	cmp	r3, #255	; 0xff
 800556e:	d90e      	bls.n	800558e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	22ff      	movs	r2, #255	; 0xff
 8005574:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800557a:	b2da      	uxtb	r2, r3
 800557c:	8979      	ldrh	r1, [r7, #10]
 800557e:	4b51      	ldr	r3, [pc, #324]	; (80056c4 <HAL_I2C_Master_Transmit+0x1e0>)
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 fb48 	bl	8005c1c <I2C_TransferConfig>
 800558c:	e06c      	b.n	8005668 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005592:	b29a      	uxth	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800559c:	b2da      	uxtb	r2, r3
 800559e:	8979      	ldrh	r1, [r7, #10]
 80055a0:	4b48      	ldr	r3, [pc, #288]	; (80056c4 <HAL_I2C_Master_Transmit+0x1e0>)
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f000 fb37 	bl	8005c1c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80055ae:	e05b      	b.n	8005668 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	6a39      	ldr	r1, [r7, #32]
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f000 f9e3 	bl	8005980 <I2C_WaitOnTXISFlagUntilTimeout>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e07b      	b.n	80056bc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	781a      	ldrb	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d4:	1c5a      	adds	r2, r3, #1
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055de:	b29b      	uxth	r3, r3
 80055e0:	3b01      	subs	r3, #1
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ec:	3b01      	subs	r3, #1
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d034      	beq.n	8005668 <HAL_I2C_Master_Transmit+0x184>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005602:	2b00      	cmp	r3, #0
 8005604:	d130      	bne.n	8005668 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	6a3b      	ldr	r3, [r7, #32]
 800560c:	2200      	movs	r2, #0
 800560e:	2180      	movs	r1, #128	; 0x80
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 f975 	bl	8005900 <I2C_WaitOnFlagUntilTimeout>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e04d      	b.n	80056bc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005624:	b29b      	uxth	r3, r3
 8005626:	2bff      	cmp	r3, #255	; 0xff
 8005628:	d90e      	bls.n	8005648 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	22ff      	movs	r2, #255	; 0xff
 800562e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005634:	b2da      	uxtb	r2, r3
 8005636:	8979      	ldrh	r1, [r7, #10]
 8005638:	2300      	movs	r3, #0
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 faeb 	bl	8005c1c <I2C_TransferConfig>
 8005646:	e00f      	b.n	8005668 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800564c:	b29a      	uxth	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005656:	b2da      	uxtb	r2, r3
 8005658:	8979      	ldrh	r1, [r7, #10]
 800565a:	2300      	movs	r3, #0
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f000 fada 	bl	8005c1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566c:	b29b      	uxth	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d19e      	bne.n	80055b0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	6a39      	ldr	r1, [r7, #32]
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f000 f9c2 	bl	8005a00 <I2C_WaitOnSTOPFlagUntilTimeout>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e01a      	b.n	80056bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2220      	movs	r2, #32
 800568c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	6859      	ldr	r1, [r3, #4]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	4b0b      	ldr	r3, [pc, #44]	; (80056c8 <HAL_I2C_Master_Transmit+0x1e4>)
 800569a:	400b      	ands	r3, r1
 800569c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2220      	movs	r2, #32
 80056a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056b6:	2300      	movs	r3, #0
 80056b8:	e000      	b.n	80056bc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80056ba:	2302      	movs	r3, #2
  }
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3718      	adds	r7, #24
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	80002000 	.word	0x80002000
 80056c8:	fe00e800 	.word	0xfe00e800

080056cc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b088      	sub	sp, #32
 80056d0:	af02      	add	r7, sp, #8
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	607a      	str	r2, [r7, #4]
 80056d6:	461a      	mov	r2, r3
 80056d8:	460b      	mov	r3, r1
 80056da:	817b      	strh	r3, [r7, #10]
 80056dc:	4613      	mov	r3, r2
 80056de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b20      	cmp	r3, #32
 80056ea:	f040 80db 	bne.w	80058a4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d101      	bne.n	80056fc <HAL_I2C_Master_Receive+0x30>
 80056f8:	2302      	movs	r3, #2
 80056fa:	e0d4      	b.n	80058a6 <HAL_I2C_Master_Receive+0x1da>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005704:	f7fe fa2e 	bl	8003b64 <HAL_GetTick>
 8005708:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	2319      	movs	r3, #25
 8005710:	2201      	movs	r2, #1
 8005712:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f000 f8f2 	bl	8005900 <I2C_WaitOnFlagUntilTimeout>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e0bf      	b.n	80058a6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2222      	movs	r2, #34	; 0x22
 800572a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2210      	movs	r2, #16
 8005732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	893a      	ldrh	r2, [r7, #8]
 8005746:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005752:	b29b      	uxth	r3, r3
 8005754:	2bff      	cmp	r3, #255	; 0xff
 8005756:	d90e      	bls.n	8005776 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	22ff      	movs	r2, #255	; 0xff
 800575c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005762:	b2da      	uxtb	r2, r3
 8005764:	8979      	ldrh	r1, [r7, #10]
 8005766:	4b52      	ldr	r3, [pc, #328]	; (80058b0 <HAL_I2C_Master_Receive+0x1e4>)
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f000 fa54 	bl	8005c1c <I2C_TransferConfig>
 8005774:	e06d      	b.n	8005852 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577a:	b29a      	uxth	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005784:	b2da      	uxtb	r2, r3
 8005786:	8979      	ldrh	r1, [r7, #10]
 8005788:	4b49      	ldr	r3, [pc, #292]	; (80058b0 <HAL_I2C_Master_Receive+0x1e4>)
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f000 fa43 	bl	8005c1c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005796:	e05c      	b.n	8005852 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	6a39      	ldr	r1, [r7, #32]
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 f96b 	bl	8005a78 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d001      	beq.n	80057ac <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e07c      	b.n	80058a6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	b2d2      	uxtb	r2, r2
 80057b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c8:	3b01      	subs	r3, #1
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	3b01      	subs	r3, #1
 80057d8:	b29a      	uxth	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d034      	beq.n	8005852 <HAL_I2C_Master_Receive+0x186>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d130      	bne.n	8005852 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	2200      	movs	r2, #0
 80057f8:	2180      	movs	r1, #128	; 0x80
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 f880 	bl	8005900 <I2C_WaitOnFlagUntilTimeout>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e04d      	b.n	80058a6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800580e:	b29b      	uxth	r3, r3
 8005810:	2bff      	cmp	r3, #255	; 0xff
 8005812:	d90e      	bls.n	8005832 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	22ff      	movs	r2, #255	; 0xff
 8005818:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800581e:	b2da      	uxtb	r2, r3
 8005820:	8979      	ldrh	r1, [r7, #10]
 8005822:	2300      	movs	r3, #0
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 f9f6 	bl	8005c1c <I2C_TransferConfig>
 8005830:	e00f      	b.n	8005852 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005836:	b29a      	uxth	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005840:	b2da      	uxtb	r2, r3
 8005842:	8979      	ldrh	r1, [r7, #10]
 8005844:	2300      	movs	r3, #0
 8005846:	9300      	str	r3, [sp, #0]
 8005848:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f000 f9e5 	bl	8005c1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005856:	b29b      	uxth	r3, r3
 8005858:	2b00      	cmp	r3, #0
 800585a:	d19d      	bne.n	8005798 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	6a39      	ldr	r1, [r7, #32]
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 f8cd 	bl	8005a00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e01a      	b.n	80058a6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2220      	movs	r2, #32
 8005876:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6859      	ldr	r1, [r3, #4]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	4b0c      	ldr	r3, [pc, #48]	; (80058b4 <HAL_I2C_Master_Receive+0x1e8>)
 8005884:	400b      	ands	r3, r1
 8005886:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058a0:	2300      	movs	r3, #0
 80058a2:	e000      	b.n	80058a6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80058a4:	2302      	movs	r3, #2
  }
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	80002400 	.word	0x80002400
 80058b4:	fe00e800 	.word	0xfe00e800

080058b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d103      	bne.n	80058d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2200      	movs	r2, #0
 80058d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d007      	beq.n	80058f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	699a      	ldr	r2, [r3, #24]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f042 0201 	orr.w	r2, r2, #1
 80058f2:	619a      	str	r2, [r3, #24]
  }
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	4613      	mov	r3, r2
 800590e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005910:	e022      	b.n	8005958 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005918:	d01e      	beq.n	8005958 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800591a:	f7fe f923 	bl	8003b64 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	429a      	cmp	r2, r3
 8005928:	d302      	bcc.n	8005930 <I2C_WaitOnFlagUntilTimeout+0x30>
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d113      	bne.n	8005958 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005934:	f043 0220 	orr.w	r2, r3, #32
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2220      	movs	r2, #32
 8005940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e00f      	b.n	8005978 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	699a      	ldr	r2, [r3, #24]
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	4013      	ands	r3, r2
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	429a      	cmp	r2, r3
 8005966:	bf0c      	ite	eq
 8005968:	2301      	moveq	r3, #1
 800596a:	2300      	movne	r3, #0
 800596c:	b2db      	uxtb	r3, r3
 800596e:	461a      	mov	r2, r3
 8005970:	79fb      	ldrb	r3, [r7, #7]
 8005972:	429a      	cmp	r2, r3
 8005974:	d0cd      	beq.n	8005912 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800598c:	e02c      	b.n	80059e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	68b9      	ldr	r1, [r7, #8]
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f000 f8dc 	bl	8005b50 <I2C_IsAcknowledgeFailed>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e02a      	b.n	80059f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059a8:	d01e      	beq.n	80059e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059aa:	f7fe f8db 	bl	8003b64 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d302      	bcc.n	80059c0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d113      	bne.n	80059e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c4:	f043 0220 	orr.w	r2, r3, #32
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2220      	movs	r2, #32
 80059d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e007      	b.n	80059f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d1cb      	bne.n	800598e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3710      	adds	r7, #16
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a0c:	e028      	b.n	8005a60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	68b9      	ldr	r1, [r7, #8]
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f000 f89c 	bl	8005b50 <I2C_IsAcknowledgeFailed>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e026      	b.n	8005a70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a22:	f7fe f89f 	bl	8003b64 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d302      	bcc.n	8005a38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d113      	bne.n	8005a60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a3c:	f043 0220 	orr.w	r2, r3, #32
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2220      	movs	r2, #32
 8005a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e007      	b.n	8005a70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	f003 0320 	and.w	r3, r3, #32
 8005a6a:	2b20      	cmp	r3, #32
 8005a6c:	d1cf      	bne.n	8005a0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a84:	e055      	b.n	8005b32 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	68b9      	ldr	r1, [r7, #8]
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f000 f860 	bl	8005b50 <I2C_IsAcknowledgeFailed>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d001      	beq.n	8005a9a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e053      	b.n	8005b42 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	f003 0320 	and.w	r3, r3, #32
 8005aa4:	2b20      	cmp	r3, #32
 8005aa6:	d129      	bne.n	8005afc <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	f003 0304 	and.w	r3, r3, #4
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	d105      	bne.n	8005ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	e03f      	b.n	8005b42 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6859      	ldr	r1, [r3, #4]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	4b1d      	ldr	r3, [pc, #116]	; (8005b4c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8005ad6:	400b      	ands	r3, r1
 8005ad8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e022      	b.n	8005b42 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005afc:	f7fe f832 	bl	8003b64 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d302      	bcc.n	8005b12 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10f      	bne.n	8005b32 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b16:	f043 0220 	orr.w	r2, r3, #32
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2220      	movs	r2, #32
 8005b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e007      	b.n	8005b42 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	f003 0304 	and.w	r3, r3, #4
 8005b3c:	2b04      	cmp	r3, #4
 8005b3e:	d1a2      	bne.n	8005a86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	fe00e800 	.word	0xfe00e800

08005b50 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	f003 0310 	and.w	r3, r3, #16
 8005b66:	2b10      	cmp	r3, #16
 8005b68:	d151      	bne.n	8005c0e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b6a:	e022      	b.n	8005bb2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b72:	d01e      	beq.n	8005bb2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b74:	f7fd fff6 	bl	8003b64 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d302      	bcc.n	8005b8a <I2C_IsAcknowledgeFailed+0x3a>
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d113      	bne.n	8005bb2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8e:	f043 0220 	orr.w	r2, r3, #32
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e02e      	b.n	8005c10 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	f003 0320 	and.w	r3, r3, #32
 8005bbc:	2b20      	cmp	r3, #32
 8005bbe:	d1d5      	bne.n	8005b6c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2210      	movs	r2, #16
 8005bc6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f7ff fe71 	bl	80058b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	6859      	ldr	r1, [r3, #4]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	4b0d      	ldr	r3, [pc, #52]	; (8005c18 <I2C_IsAcknowledgeFailed+0xc8>)
 8005be2:	400b      	ands	r3, r1
 8005be4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bea:	f043 0204 	orr.w	r2, r3, #4
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e000      	b.n	8005c10 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	fe00e800 	.word	0xfe00e800

08005c1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	607b      	str	r3, [r7, #4]
 8005c26:	460b      	mov	r3, r1
 8005c28:	817b      	strh	r3, [r7, #10]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	0d5b      	lsrs	r3, r3, #21
 8005c38:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005c3c:	4b0d      	ldr	r3, [pc, #52]	; (8005c74 <I2C_TransferConfig+0x58>)
 8005c3e:	430b      	orrs	r3, r1
 8005c40:	43db      	mvns	r3, r3
 8005c42:	ea02 0103 	and.w	r1, r2, r3
 8005c46:	897b      	ldrh	r3, [r7, #10]
 8005c48:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005c4c:	7a7b      	ldrb	r3, [r7, #9]
 8005c4e:	041b      	lsls	r3, r3, #16
 8005c50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c54:	431a      	orrs	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	430a      	orrs	r2, r1
 8005c64:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005c66:	bf00      	nop
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	03ff63ff 	.word	0x03ff63ff

08005c78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b20      	cmp	r3, #32
 8005c8c:	d138      	bne.n	8005d00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d101      	bne.n	8005c9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005c98:	2302      	movs	r3, #2
 8005c9a:	e032      	b.n	8005d02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2224      	movs	r2, #36	; 0x24
 8005ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 0201 	bic.w	r2, r2, #1
 8005cba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005cca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6819      	ldr	r1, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f042 0201 	orr.w	r2, r2, #1
 8005cea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	e000      	b.n	8005d02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d00:	2302      	movs	r3, #2
  }
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b085      	sub	sp, #20
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
 8005d16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b20      	cmp	r3, #32
 8005d22:	d139      	bne.n	8005d98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d101      	bne.n	8005d32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005d2e:	2302      	movs	r3, #2
 8005d30:	e033      	b.n	8005d9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2224      	movs	r2, #36	; 0x24
 8005d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 0201 	bic.w	r2, r2, #1
 8005d50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005d60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	021b      	lsls	r3, r3, #8
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f042 0201 	orr.w	r2, r2, #1
 8005d82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d94:	2300      	movs	r3, #0
 8005d96:	e000      	b.n	8005d9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005d98:	2302      	movs	r3, #2
  }
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3714      	adds	r7, #20
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005da6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005da8:	b08b      	sub	sp, #44	; 0x2c
 8005daa:	af06      	add	r7, sp, #24
 8005dac:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d101      	bne.n	8005db8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e0ad      	b.n	8005f14 <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d106      	bne.n	8005dd2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7fd fdf3 	bl	80039b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2203      	movs	r2, #3
 8005dd6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f003 ff03 	bl	8009bea <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005de4:	2300      	movs	r3, #0
 8005de6:	73fb      	strb	r3, [r7, #15]
 8005de8:	e035      	b.n	8005e56 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	015b      	lsls	r3, r3, #5
 8005df0:	4413      	add	r3, r2
 8005df2:	3329      	adds	r3, #41	; 0x29
 8005df4:	2201      	movs	r2, #1
 8005df6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005df8:	7bfb      	ldrb	r3, [r7, #15]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	015b      	lsls	r3, r3, #5
 8005dfe:	4413      	add	r3, r2
 8005e00:	3328      	adds	r3, #40	; 0x28
 8005e02:	7bfa      	ldrb	r2, [r7, #15]
 8005e04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005e06:	7bfb      	ldrb	r3, [r7, #15]
 8005e08:	7bfa      	ldrb	r2, [r7, #15]
 8005e0a:	b291      	uxth	r1, r2
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	015b      	lsls	r3, r3, #5
 8005e10:	4413      	add	r3, r2
 8005e12:	3336      	adds	r3, #54	; 0x36
 8005e14:	460a      	mov	r2, r1
 8005e16:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	015b      	lsls	r3, r3, #5
 8005e1e:	4413      	add	r3, r2
 8005e20:	332b      	adds	r3, #43	; 0x2b
 8005e22:	2200      	movs	r2, #0
 8005e24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005e26:	7bfb      	ldrb	r3, [r7, #15]
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	015b      	lsls	r3, r3, #5
 8005e2c:	4413      	add	r3, r2
 8005e2e:	3338      	adds	r3, #56	; 0x38
 8005e30:	2200      	movs	r2, #0
 8005e32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005e34:	7bfb      	ldrb	r3, [r7, #15]
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	015b      	lsls	r3, r3, #5
 8005e3a:	4413      	add	r3, r2
 8005e3c:	333c      	adds	r3, #60	; 0x3c
 8005e3e:	2200      	movs	r2, #0
 8005e40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005e42:	7bfb      	ldrb	r3, [r7, #15]
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	3302      	adds	r3, #2
 8005e48:	015b      	lsls	r3, r3, #5
 8005e4a:	4413      	add	r3, r2
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e50:	7bfb      	ldrb	r3, [r7, #15]
 8005e52:	3301      	adds	r3, #1
 8005e54:	73fb      	strb	r3, [r7, #15]
 8005e56:	7bfa      	ldrb	r2, [r7, #15]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d3c4      	bcc.n	8005dea <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e60:	2300      	movs	r3, #0
 8005e62:	73fb      	strb	r3, [r7, #15]
 8005e64:	e031      	b.n	8005eca <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005e66:	7bfb      	ldrb	r3, [r7, #15]
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	015b      	lsls	r3, r3, #5
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f203 1329 	addw	r3, r3, #297	; 0x129
 8005e72:	2200      	movs	r2, #0
 8005e74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005e76:	7bfb      	ldrb	r3, [r7, #15]
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	015b      	lsls	r3, r3, #5
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005e82:	7bfa      	ldrb	r2, [r7, #15]
 8005e84:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	015b      	lsls	r3, r3, #5
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8005e92:	2200      	movs	r2, #0
 8005e94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	015b      	lsls	r3, r3, #5
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	015b      	lsls	r3, r3, #5
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005eb6:	7bfb      	ldrb	r3, [r7, #15]
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	330a      	adds	r3, #10
 8005ebc:	015b      	lsls	r3, r3, #5
 8005ebe:	4413      	add	r3, r2
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	73fb      	strb	r3, [r7, #15]
 8005eca:	7bfa      	ldrb	r2, [r7, #15]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d3c8      	bcc.n	8005e66 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	603b      	str	r3, [r7, #0]
 8005eda:	687e      	ldr	r6, [r7, #4]
 8005edc:	466d      	mov	r5, sp
 8005ede:	f106 0410 	add.w	r4, r6, #16
 8005ee2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ee4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	602b      	str	r3, [r5, #0]
 8005eea:	1d33      	adds	r3, r6, #4
 8005eec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005eee:	6838      	ldr	r0, [r7, #0]
 8005ef0:	f003 fe96 	bl	8009c20 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d102      	bne.n	8005f12 <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 f805 	bl	8005f1c <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f1c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	f043 0301 	orr.w	r3, r3, #1
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	f043 0302 	orr.w	r3, r3, #2
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005f70:	b480      	push	{r7}
 8005f72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f74:	4b05      	ldr	r3, [pc, #20]	; (8005f8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a04      	ldr	r2, [pc, #16]	; (8005f8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f7e:	6013      	str	r3, [r2, #0]
}
 8005f80:	bf00      	nop
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	58000400 	.word	0x58000400

08005f90 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005f90:	b480      	push	{r7}
 8005f92:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005f94:	4b04      	ldr	r3, [pc, #16]	; (8005fa8 <HAL_PWREx_GetVoltageRange+0x18>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	58000400 	.word	0x58000400

08005fac <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005fac:	b480      	push	{r7}
 8005fae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fbe:	d101      	bne.n	8005fc4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e000      	b.n	8005fc6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <LL_RCC_HSE_EnableBypass>:
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8005fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fe2:	6013      	str	r3, [r2, #0]
}
 8005fe4:	bf00      	nop
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <LL_RCC_HSE_DisableBypass>:
{
 8005fee:	b480      	push	{r7}
 8005ff0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8005ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ffc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006000:	6013      	str	r3, [r2, #0]
}
 8006002:	bf00      	nop
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <LL_RCC_HSE_Enable>:
{
 800600c:	b480      	push	{r7}
 800600e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800601a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800601e:	6013      	str	r3, [r2, #0]
}
 8006020:	bf00      	nop
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <LL_RCC_HSE_Disable>:
{
 800602a:	b480      	push	{r7}
 800602c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800602e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006038:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800603c:	6013      	str	r3, [r2, #0]
}
 800603e:	bf00      	nop
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <LL_RCC_HSE_IsReady>:
{
 8006048:	b480      	push	{r7}
 800604a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800604c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006056:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800605a:	d101      	bne.n	8006060 <LL_RCC_HSE_IsReady+0x18>
 800605c:	2301      	movs	r3, #1
 800605e:	e000      	b.n	8006062 <LL_RCC_HSE_IsReady+0x1a>
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <LL_RCC_HSI_Enable>:
{
 800606c:	b480      	push	{r7}
 800606e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800607a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800607e:	6013      	str	r3, [r2, #0]
}
 8006080:	bf00      	nop
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <LL_RCC_HSI_Disable>:
{
 800608a:	b480      	push	{r7}
 800608c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800608e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800609c:	6013      	str	r3, [r2, #0]
}
 800609e:	bf00      	nop
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <LL_RCC_HSI_IsReady>:
{
 80060a8:	b480      	push	{r7}
 80060aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80060ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ba:	d101      	bne.n	80060c0 <LL_RCC_HSI_IsReady+0x18>
 80060bc:	2301      	movs	r3, #1
 80060be:	e000      	b.n	80060c2 <LL_RCC_HSI_IsReady+0x1a>
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <LL_RCC_HSI_SetCalibTrimming>:
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80060d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	061b      	lsls	r3, r3, #24
 80060e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060e6:	4313      	orrs	r3, r2
 80060e8:	604b      	str	r3, [r1, #4]
}
 80060ea:	bf00      	nop
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <LL_RCC_HSI48_Enable>:
{
 80060f6:	b480      	push	{r7}
 80060f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80060fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006102:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006106:	f043 0301 	orr.w	r3, r3, #1
 800610a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800610e:	bf00      	nop
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <LL_RCC_HSI48_Disable>:
{
 8006118:	b480      	push	{r7}
 800611a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800611c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006120:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006124:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006128:	f023 0301 	bic.w	r3, r3, #1
 800612c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8006130:	bf00      	nop
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <LL_RCC_HSI48_IsReady>:
{
 800613a:	b480      	push	{r7}
 800613c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800613e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006142:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006146:	f003 0302 	and.w	r3, r3, #2
 800614a:	2b02      	cmp	r3, #2
 800614c:	d101      	bne.n	8006152 <LL_RCC_HSI48_IsReady+0x18>
 800614e:	2301      	movs	r3, #1
 8006150:	e000      	b.n	8006154 <LL_RCC_HSI48_IsReady+0x1a>
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <LL_RCC_LSE_Enable>:
{
 800615e:	b480      	push	{r7}
 8006160:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800616a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800616e:	f043 0301 	orr.w	r3, r3, #1
 8006172:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006176:	bf00      	nop
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <LL_RCC_LSE_Disable>:
{
 8006180:	b480      	push	{r7}
 8006182:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800618c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006190:	f023 0301 	bic.w	r3, r3, #1
 8006194:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006198:	bf00      	nop
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <LL_RCC_LSE_EnableBypass>:
{
 80061a2:	b480      	push	{r7}
 80061a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80061a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061b2:	f043 0304 	orr.w	r3, r3, #4
 80061b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80061ba:	bf00      	nop
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <LL_RCC_LSE_DisableBypass>:
{
 80061c4:	b480      	push	{r7}
 80061c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80061c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061d4:	f023 0304 	bic.w	r3, r3, #4
 80061d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80061dc:	bf00      	nop
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <LL_RCC_LSE_IsReady>:
{
 80061e6:	b480      	push	{r7}
 80061e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80061ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f2:	f003 0302 	and.w	r3, r3, #2
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d101      	bne.n	80061fe <LL_RCC_LSE_IsReady+0x18>
 80061fa:	2301      	movs	r3, #1
 80061fc:	e000      	b.n	8006200 <LL_RCC_LSE_IsReady+0x1a>
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <LL_RCC_LSI1_Enable>:
{
 800620a:	b480      	push	{r7}
 800620c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800620e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006216:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800621a:	f043 0301 	orr.w	r3, r3, #1
 800621e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006222:	bf00      	nop
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <LL_RCC_LSI1_Disable>:
{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006238:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800623c:	f023 0301 	bic.w	r3, r3, #1
 8006240:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006244:	bf00      	nop
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <LL_RCC_LSI1_IsReady>:
{
 800624e:	b480      	push	{r7}
 8006250:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8006252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b02      	cmp	r3, #2
 8006260:	d101      	bne.n	8006266 <LL_RCC_LSI1_IsReady+0x18>
 8006262:	2301      	movs	r3, #1
 8006264:	e000      	b.n	8006268 <LL_RCC_LSI1_IsReady+0x1a>
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <LL_RCC_LSI2_Enable>:
{
 8006272:	b480      	push	{r7}
 8006274:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800627a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800627e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006282:	f043 0304 	orr.w	r3, r3, #4
 8006286:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800628a:	bf00      	nop
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <LL_RCC_LSI2_Disable>:
{
 8006294:	b480      	push	{r7}
 8006296:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800629c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062a4:	f023 0304 	bic.w	r3, r3, #4
 80062a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80062ac:	bf00      	nop
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <LL_RCC_LSI2_IsReady>:
{
 80062b6:	b480      	push	{r7}
 80062b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80062ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062c2:	f003 0308 	and.w	r3, r3, #8
 80062c6:	2b08      	cmp	r3, #8
 80062c8:	d101      	bne.n	80062ce <LL_RCC_LSI2_IsReady+0x18>
 80062ca:	2301      	movs	r3, #1
 80062cc:	e000      	b.n	80062d0 <LL_RCC_LSI2_IsReady+0x1a>
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <LL_RCC_LSI2_SetTrimming>:
{
 80062da:	b480      	push	{r7}
 80062dc:	b083      	sub	sp, #12
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80062e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062ea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	021b      	lsls	r3, r3, #8
 80062f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062f6:	4313      	orrs	r3, r2
 80062f8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <LL_RCC_MSI_Enable>:
{
 8006308:	b480      	push	{r7}
 800630a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800630c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006316:	f043 0301 	orr.w	r3, r3, #1
 800631a:	6013      	str	r3, [r2, #0]
}
 800631c:	bf00      	nop
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <LL_RCC_MSI_Disable>:
{
 8006326:	b480      	push	{r7}
 8006328:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800632a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006334:	f023 0301 	bic.w	r3, r3, #1
 8006338:	6013      	str	r3, [r2, #0]
}
 800633a:	bf00      	nop
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <LL_RCC_MSI_IsReady>:
{
 8006344:	b480      	push	{r7}
 8006346:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	2b02      	cmp	r3, #2
 8006354:	d101      	bne.n	800635a <LL_RCC_MSI_IsReady+0x16>
 8006356:	2301      	movs	r3, #1
 8006358:	e000      	b.n	800635c <LL_RCC_MSI_IsReady+0x18>
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <LL_RCC_MSI_SetRange>:
{
 8006366:	b480      	push	{r7}
 8006368:	b083      	sub	sp, #12
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800636e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006378:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4313      	orrs	r3, r2
 8006380:	600b      	str	r3, [r1, #0]
}
 8006382:	bf00      	nop
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <LL_RCC_MSI_GetRange>:
{
 800638e:	b480      	push	{r7}
 8006390:	b083      	sub	sp, #12
 8006392:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800639e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2bb0      	cmp	r3, #176	; 0xb0
 80063a4:	d901      	bls.n	80063aa <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80063a6:	23b0      	movs	r3, #176	; 0xb0
 80063a8:	607b      	str	r3, [r7, #4]
  return msiRange;
 80063aa:	687b      	ldr	r3, [r7, #4]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <LL_RCC_MSI_SetCalibTrimming>:
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80063c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	021b      	lsls	r3, r3, #8
 80063ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063d2:	4313      	orrs	r3, r2
 80063d4:	604b      	str	r3, [r1, #4]
}
 80063d6:	bf00      	nop
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <LL_RCC_SetSysClkSource>:
{
 80063e2:	b480      	push	{r7}
 80063e4:	b083      	sub	sp, #12
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80063ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f023 0203 	bic.w	r2, r3, #3
 80063f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	608b      	str	r3, [r1, #8]
}
 80063fe:	bf00      	nop
 8006400:	370c      	adds	r7, #12
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <LL_RCC_GetSysClkSource>:
{
 800640a:	b480      	push	{r7}
 800640c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800640e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f003 030c 	and.w	r3, r3, #12
}
 8006418:	4618      	mov	r0, r3
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <LL_RCC_SetAHBPrescaler>:
{
 8006422:	b480      	push	{r7}
 8006424:	b083      	sub	sp, #12
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800642a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006434:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4313      	orrs	r3, r2
 800643c:	608b      	str	r3, [r1, #8]
}
 800643e:	bf00      	nop
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <LL_C2_RCC_SetAHBPrescaler>:
{
 800644a:	b480      	push	{r7}
 800644c:	b083      	sub	sp, #12
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006456:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800645a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800645e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4313      	orrs	r3, r2
 8006466:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800646a:	bf00      	nop
 800646c:	370c      	adds	r7, #12
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <LL_RCC_SetAHB4Prescaler>:
{
 8006476:	b480      	push	{r7}
 8006478:	b083      	sub	sp, #12
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800647e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006482:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006486:	f023 020f 	bic.w	r2, r3, #15
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	091b      	lsrs	r3, r3, #4
 800648e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006492:	4313      	orrs	r3, r2
 8006494:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <LL_RCC_SetAPB1Prescaler>:
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80064ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80064b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4313      	orrs	r3, r2
 80064be:	608b      	str	r3, [r1, #8]
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <LL_RCC_SetAPB2Prescaler>:
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80064d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80064de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	608b      	str	r3, [r1, #8]
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <LL_RCC_GetAHBPrescaler>:
{
 80064f4:	b480      	push	{r7}
 80064f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80064f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006502:	4618      	mov	r0, r3
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <LL_RCC_GetAHB4Prescaler>:
{
 800650c:	b480      	push	{r7}
 800650e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006514:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006518:	011b      	lsls	r3, r3, #4
 800651a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800651e:	4618      	mov	r0, r3
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <LL_RCC_GetAPB1Prescaler>:
{
 8006528:	b480      	push	{r7}
 800652a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800652c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006536:	4618      	mov	r0, r3
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <LL_RCC_GetAPB2Prescaler>:
{
 8006540:	b480      	push	{r7}
 8006542:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800654e:	4618      	mov	r0, r3
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006558:	b480      	push	{r7}
 800655a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800655c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006566:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800656a:	6013      	str	r3, [r2, #0]
}
 800656c:	bf00      	nop
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006576:	b480      	push	{r7}
 8006578:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800657a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006584:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006588:	6013      	str	r3, [r2, #0]
}
 800658a:	bf00      	nop
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006594:	b480      	push	{r7}
 8006596:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065a6:	d101      	bne.n	80065ac <LL_RCC_PLL_IsReady+0x18>
 80065a8:	2301      	movs	r3, #1
 80065aa:	e000      	b.n	80065ae <LL_RCC_PLL_IsReady+0x1a>
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80065b8:	b480      	push	{r7}
 80065ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80065bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	0a1b      	lsrs	r3, r3, #8
 80065c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80065d2:	b480      	push	{r7}
 80065d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80065d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80065ea:	b480      	push	{r7}
 80065ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80065ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006602:	b480      	push	{r7}
 8006604:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	f003 0303 	and.w	r3, r3, #3
}
 8006610:	4618      	mov	r0, r3
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800661a:	b480      	push	{r7}
 800661c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800661e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800662c:	d101      	bne.n	8006632 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800662e:	2301      	movs	r3, #1
 8006630:	e000      	b.n	8006634 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800663e:	b480      	push	{r7}
 8006640:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006646:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800664a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800664e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006652:	d101      	bne.n	8006658 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006654:	2301      	movs	r3, #1
 8006656:	e000      	b.n	800665a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800666c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006678:	d101      	bne.n	800667e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800667a:	2301      	movs	r3, #1
 800667c:	e000      	b.n	8006680 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800668a:	b480      	push	{r7}
 800668c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800668e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006698:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800669c:	d101      	bne.n	80066a2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800669e:	2301      	movs	r3, #1
 80066a0:	e000      	b.n	80066a4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80066ae:	b480      	push	{r7}
 80066b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80066b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066c0:	d101      	bne.n	80066c6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80066c2:	2301      	movs	r3, #1
 80066c4:	e000      	b.n	80066c8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
	...

080066d4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066d4:	b590      	push	{r4, r7, lr}
 80066d6:	b08d      	sub	sp, #52	; 0x34
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e386      	b.n	8006df4 <HAL_RCC_OscConfig+0x720>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0320 	and.w	r3, r3, #32
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f000 808f 	beq.w	8006812 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066f4:	f7ff fe89 	bl	800640a <LL_RCC_GetSysClkSource>
 80066f8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80066fa:	f7ff ff82 	bl	8006602 <LL_RCC_PLL_GetMainSource>
 80066fe:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006702:	2b00      	cmp	r3, #0
 8006704:	d005      	beq.n	8006712 <HAL_RCC_OscConfig+0x3e>
 8006706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006708:	2b0c      	cmp	r3, #12
 800670a:	d149      	bne.n	80067a0 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670e:	2b01      	cmp	r3, #1
 8006710:	d146      	bne.n	80067a0 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006712:	f7ff fe17 	bl	8006344 <LL_RCC_MSI_IsReady>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d005      	beq.n	8006728 <HAL_RCC_OscConfig+0x54>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e365      	b.n	8006df4 <HAL_RCC_OscConfig+0x720>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800672c:	f7ff fe2f 	bl	800638e <LL_RCC_MSI_GetRange>
 8006730:	4603      	mov	r3, r0
 8006732:	429c      	cmp	r4, r3
 8006734:	d914      	bls.n	8006760 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673a:	4618      	mov	r0, r3
 800673c:	f000 fd44 	bl	80071c8 <RCC_SetFlashLatencyFromMSIRange>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d001      	beq.n	800674a <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e354      	b.n	8006df4 <HAL_RCC_OscConfig+0x720>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674e:	4618      	mov	r0, r3
 8006750:	f7ff fe09 	bl	8006366 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	4618      	mov	r0, r3
 800675a:	f7ff fe2d 	bl	80063b8 <LL_RCC_MSI_SetCalibTrimming>
 800675e:	e013      	b.n	8006788 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	4618      	mov	r0, r3
 8006766:	f7ff fdfe 	bl	8006366 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	4618      	mov	r0, r3
 8006770:	f7ff fe22 	bl	80063b8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006778:	4618      	mov	r0, r3
 800677a:	f000 fd25 	bl	80071c8 <RCC_SetFlashLatencyFromMSIRange>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d001      	beq.n	8006788 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e335      	b.n	8006df4 <HAL_RCC_OscConfig+0x720>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8006788:	f7fc ff0e 	bl	80035a8 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800678c:	4bb4      	ldr	r3, [pc, #720]	; (8006a60 <HAL_RCC_OscConfig+0x38c>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4618      	mov	r0, r3
 8006792:	f7fd f999 	bl	8003ac8 <HAL_InitTick>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d039      	beq.n	8006810 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e329      	b.n	8006df4 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	69db      	ldr	r3, [r3, #28]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d01e      	beq.n	80067e6 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80067a8:	f7ff fdae 	bl	8006308 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80067ac:	f7fd f9da 	bl	8003b64 <HAL_GetTick>
 80067b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80067b2:	e008      	b.n	80067c6 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80067b4:	f7fd f9d6 	bl	8003b64 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d901      	bls.n	80067c6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e316      	b.n	8006df4 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() == 0U)
 80067c6:	f7ff fdbd 	bl	8006344 <LL_RCC_MSI_IsReady>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d0f1      	beq.n	80067b4 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7ff fdc6 	bl	8006366 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	4618      	mov	r0, r3
 80067e0:	f7ff fdea 	bl	80063b8 <LL_RCC_MSI_SetCalibTrimming>
 80067e4:	e015      	b.n	8006812 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80067e6:	f7ff fd9e 	bl	8006326 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80067ea:	f7fd f9bb 	bl	8003b64 <HAL_GetTick>
 80067ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80067f0:	e008      	b.n	8006804 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80067f2:	f7fd f9b7 	bl	8003b64 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d901      	bls.n	8006804 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e2f7      	b.n	8006df4 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006804:	f7ff fd9e 	bl	8006344 <LL_RCC_MSI_IsReady>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1f1      	bne.n	80067f2 <HAL_RCC_OscConfig+0x11e>
 800680e:	e000      	b.n	8006812 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006810:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	d05a      	beq.n	80068d4 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800681e:	f7ff fdf4 	bl	800640a <LL_RCC_GetSysClkSource>
 8006822:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006824:	f7ff feed 	bl	8006602 <LL_RCC_PLL_GetMainSource>
 8006828:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800682a:	6a3b      	ldr	r3, [r7, #32]
 800682c:	2b08      	cmp	r3, #8
 800682e:	d005      	beq.n	800683c <HAL_RCC_OscConfig+0x168>
 8006830:	6a3b      	ldr	r3, [r7, #32]
 8006832:	2b0c      	cmp	r3, #12
 8006834:	d10d      	bne.n	8006852 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	2b03      	cmp	r3, #3
 800683a:	d10a      	bne.n	8006852 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800683c:	f7ff fc04 	bl	8006048 <LL_RCC_HSE_IsReady>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d045      	beq.n	80068d2 <HAL_RCC_OscConfig+0x1fe>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d141      	bne.n	80068d2 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e2d0      	b.n	8006df4 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800685a:	d102      	bne.n	8006862 <HAL_RCC_OscConfig+0x18e>
 800685c:	f7ff fbd6 	bl	800600c <LL_RCC_HSE_Enable>
 8006860:	e00d      	b.n	800687e <HAL_RCC_OscConfig+0x1aa>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800686a:	d104      	bne.n	8006876 <HAL_RCC_OscConfig+0x1a2>
 800686c:	f7ff fbb0 	bl	8005fd0 <LL_RCC_HSE_EnableBypass>
 8006870:	f7ff fbcc 	bl	800600c <LL_RCC_HSE_Enable>
 8006874:	e003      	b.n	800687e <HAL_RCC_OscConfig+0x1aa>
 8006876:	f7ff fbd8 	bl	800602a <LL_RCC_HSE_Disable>
 800687a:	f7ff fbb8 	bl	8005fee <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d012      	beq.n	80068ac <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006886:	f7fd f96d 	bl	8003b64 <HAL_GetTick>
 800688a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800688c:	e008      	b.n	80068a0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800688e:	f7fd f969 	bl	8003b64 <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	2b64      	cmp	r3, #100	; 0x64
 800689a:	d901      	bls.n	80068a0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e2a9      	b.n	8006df4 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() == 0U)
 80068a0:	f7ff fbd2 	bl	8006048 <LL_RCC_HSE_IsReady>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d0f1      	beq.n	800688e <HAL_RCC_OscConfig+0x1ba>
 80068aa:	e013      	b.n	80068d4 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ac:	f7fd f95a 	bl	8003b64 <HAL_GetTick>
 80068b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80068b2:	e008      	b.n	80068c6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068b4:	f7fd f956 	bl	8003b64 <HAL_GetTick>
 80068b8:	4602      	mov	r2, r0
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	2b64      	cmp	r3, #100	; 0x64
 80068c0:	d901      	bls.n	80068c6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e296      	b.n	8006df4 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() != 0U)
 80068c6:	f7ff fbbf 	bl	8006048 <LL_RCC_HSE_IsReady>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1f1      	bne.n	80068b4 <HAL_RCC_OscConfig+0x1e0>
 80068d0:	e000      	b.n	80068d4 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068d2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0302 	and.w	r3, r3, #2
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d051      	beq.n	8006984 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068e0:	f7ff fd93 	bl	800640a <LL_RCC_GetSysClkSource>
 80068e4:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068e6:	f7ff fe8c 	bl	8006602 <LL_RCC_PLL_GetMainSource>
 80068ea:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	2b04      	cmp	r3, #4
 80068f0:	d005      	beq.n	80068fe <HAL_RCC_OscConfig+0x22a>
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	2b0c      	cmp	r3, #12
 80068f6:	d113      	bne.n	8006920 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d110      	bne.n	8006920 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068fe:	f7ff fbd3 	bl	80060a8 <LL_RCC_HSI_IsReady>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d005      	beq.n	8006914 <HAL_RCC_OscConfig+0x240>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e26f      	b.n	8006df4 <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	4618      	mov	r0, r3
 800691a:	f7ff fbd7 	bl	80060cc <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800691e:	e031      	b.n	8006984 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d019      	beq.n	800695c <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006928:	f7ff fba0 	bl	800606c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800692c:	f7fd f91a 	bl	8003b64 <HAL_GetTick>
 8006930:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006932:	e008      	b.n	8006946 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006934:	f7fd f916 	bl	8003b64 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	2b02      	cmp	r3, #2
 8006940:	d901      	bls.n	8006946 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e256      	b.n	8006df4 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006946:	f7ff fbaf 	bl	80060a8 <LL_RCC_HSI_IsReady>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d0f1      	beq.n	8006934 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	4618      	mov	r0, r3
 8006956:	f7ff fbb9 	bl	80060cc <LL_RCC_HSI_SetCalibTrimming>
 800695a:	e013      	b.n	8006984 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800695c:	f7ff fb95 	bl	800608a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006960:	f7fd f900 	bl	8003b64 <HAL_GetTick>
 8006964:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006966:	e008      	b.n	800697a <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006968:	f7fd f8fc 	bl	8003b64 <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	2b02      	cmp	r3, #2
 8006974:	d901      	bls.n	800697a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e23c      	b.n	8006df4 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() != 0U)
 800697a:	f7ff fb95 	bl	80060a8 <LL_RCC_HSI_IsReady>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1f1      	bne.n	8006968 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0308 	and.w	r3, r3, #8
 800698c:	2b00      	cmp	r3, #0
 800698e:	d106      	bne.n	800699e <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 80a2 	beq.w	8006ae2 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d075      	beq.n	8006a92 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0310 	and.w	r3, r3, #16
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d046      	beq.n	8006a40 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80069b2:	f7ff fc4c 	bl	800624e <LL_RCC_LSI1_IsReady>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d113      	bne.n	80069e4 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80069bc:	f7ff fc25 	bl	800620a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80069c0:	f7fd f8d0 	bl	8003b64 <HAL_GetTick>
 80069c4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80069c6:	e008      	b.n	80069da <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80069c8:	f7fd f8cc 	bl	8003b64 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d901      	bls.n	80069da <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e20c      	b.n	8006df4 <HAL_RCC_OscConfig+0x720>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80069da:	f7ff fc38 	bl	800624e <LL_RCC_LSI1_IsReady>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d0f1      	beq.n	80069c8 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80069e4:	f7ff fc45 	bl	8006272 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e8:	f7fd f8bc 	bl	8003b64 <HAL_GetTick>
 80069ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80069ee:	e008      	b.n	8006a02 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80069f0:	f7fd f8b8 	bl	8003b64 <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	2b03      	cmp	r3, #3
 80069fc:	d901      	bls.n	8006a02 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e1f8      	b.n	8006df4 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006a02:	f7ff fc58 	bl	80062b6 <LL_RCC_LSI2_IsReady>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d0f1      	beq.n	80069f0 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7ff fc62 	bl	80062da <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8006a16:	f7ff fc09 	bl	800622c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a1a:	f7fd f8a3 	bl	8003b64 <HAL_GetTick>
 8006a1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006a20:	e008      	b.n	8006a34 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006a22:	f7fd f89f 	bl	8003b64 <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d901      	bls.n	8006a34 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e1df      	b.n	8006df4 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006a34:	f7ff fc0b 	bl	800624e <LL_RCC_LSI1_IsReady>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1f1      	bne.n	8006a22 <HAL_RCC_OscConfig+0x34e>
 8006a3e:	e050      	b.n	8006ae2 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006a40:	f7ff fbe3 	bl	800620a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a44:	f7fd f88e 	bl	8003b64 <HAL_GetTick>
 8006a48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006a4a:	e00b      	b.n	8006a64 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006a4c:	f7fd f88a 	bl	8003b64 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d904      	bls.n	8006a64 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e1ca      	b.n	8006df4 <HAL_RCC_OscConfig+0x720>
 8006a5e:	bf00      	nop
 8006a60:	2000003c 	.word	0x2000003c
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006a64:	f7ff fbf3 	bl	800624e <LL_RCC_LSI1_IsReady>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d0ee      	beq.n	8006a4c <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006a6e:	f7ff fc11 	bl	8006294 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006a72:	e008      	b.n	8006a86 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006a74:	f7fd f876 	bl	8003b64 <HAL_GetTick>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	2b03      	cmp	r3, #3
 8006a80:	d901      	bls.n	8006a86 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e1b6      	b.n	8006df4 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006a86:	f7ff fc16 	bl	80062b6 <LL_RCC_LSI2_IsReady>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1f1      	bne.n	8006a74 <HAL_RCC_OscConfig+0x3a0>
 8006a90:	e027      	b.n	8006ae2 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006a92:	f7ff fbff 	bl	8006294 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a96:	f7fd f865 	bl	8003b64 <HAL_GetTick>
 8006a9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006a9c:	e008      	b.n	8006ab0 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006a9e:	f7fd f861 	bl	8003b64 <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	2b03      	cmp	r3, #3
 8006aaa:	d901      	bls.n	8006ab0 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e1a1      	b.n	8006df4 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006ab0:	f7ff fc01 	bl	80062b6 <LL_RCC_LSI2_IsReady>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1f1      	bne.n	8006a9e <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006aba:	f7ff fbb7 	bl	800622c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006abe:	f7fd f851 	bl	8003b64 <HAL_GetTick>
 8006ac2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006ac4:	e008      	b.n	8006ad8 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006ac6:	f7fd f84d 	bl	8003b64 <HAL_GetTick>
 8006aca:	4602      	mov	r2, r0
 8006acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d901      	bls.n	8006ad8 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e18d      	b.n	8006df4 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006ad8:	f7ff fbb9 	bl	800624e <LL_RCC_LSI1_IsReady>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1f1      	bne.n	8006ac6 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0304 	and.w	r3, r3, #4
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d05b      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006aee:	4bb5      	ldr	r3, [pc, #724]	; (8006dc4 <HAL_RCC_OscConfig+0x6f0>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d114      	bne.n	8006b24 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006afa:	f7ff fa39 	bl	8005f70 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006afe:	f7fd f831 	bl	8003b64 <HAL_GetTick>
 8006b02:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b04:	e008      	b.n	8006b18 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b06:	f7fd f82d 	bl	8003b64 <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d901      	bls.n	8006b18 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e16d      	b.n	8006df4 <HAL_RCC_OscConfig+0x720>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b18:	4baa      	ldr	r3, [pc, #680]	; (8006dc4 <HAL_RCC_OscConfig+0x6f0>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d0f0      	beq.n	8006b06 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d102      	bne.n	8006b32 <HAL_RCC_OscConfig+0x45e>
 8006b2c:	f7ff fb17 	bl	800615e <LL_RCC_LSE_Enable>
 8006b30:	e00c      	b.n	8006b4c <HAL_RCC_OscConfig+0x478>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	2b05      	cmp	r3, #5
 8006b38:	d104      	bne.n	8006b44 <HAL_RCC_OscConfig+0x470>
 8006b3a:	f7ff fb32 	bl	80061a2 <LL_RCC_LSE_EnableBypass>
 8006b3e:	f7ff fb0e 	bl	800615e <LL_RCC_LSE_Enable>
 8006b42:	e003      	b.n	8006b4c <HAL_RCC_OscConfig+0x478>
 8006b44:	f7ff fb1c 	bl	8006180 <LL_RCC_LSE_Disable>
 8006b48:	f7ff fb3c 	bl	80061c4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d014      	beq.n	8006b7e <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b54:	f7fd f806 	bl	8003b64 <HAL_GetTick>
 8006b58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006b5a:	e00a      	b.n	8006b72 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b5c:	f7fd f802 	bl	8003b64 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d901      	bls.n	8006b72 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e140      	b.n	8006df4 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006b72:	f7ff fb38 	bl	80061e6 <LL_RCC_LSE_IsReady>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d0ef      	beq.n	8006b5c <HAL_RCC_OscConfig+0x488>
 8006b7c:	e013      	b.n	8006ba6 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b7e:	f7fc fff1 	bl	8003b64 <HAL_GetTick>
 8006b82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006b84:	e00a      	b.n	8006b9c <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b86:	f7fc ffed 	bl	8003b64 <HAL_GetTick>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d901      	bls.n	8006b9c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e12b      	b.n	8006df4 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006b9c:	f7ff fb23 	bl	80061e6 <LL_RCC_LSE_IsReady>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1ef      	bne.n	8006b86 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d02c      	beq.n	8006c0c <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d014      	beq.n	8006be4 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006bba:	f7ff fa9c 	bl	80060f6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bbe:	f7fc ffd1 	bl	8003b64 <HAL_GetTick>
 8006bc2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006bc4:	e008      	b.n	8006bd8 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bc6:	f7fc ffcd 	bl	8003b64 <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d901      	bls.n	8006bd8 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e10d      	b.n	8006df4 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006bd8:	f7ff faaf 	bl	800613a <LL_RCC_HSI48_IsReady>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d0f1      	beq.n	8006bc6 <HAL_RCC_OscConfig+0x4f2>
 8006be2:	e013      	b.n	8006c0c <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006be4:	f7ff fa98 	bl	8006118 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006be8:	f7fc ffbc 	bl	8003b64 <HAL_GetTick>
 8006bec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006bee:	e008      	b.n	8006c02 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bf0:	f7fc ffb8 	bl	8003b64 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d901      	bls.n	8006c02 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e0f8      	b.n	8006df4 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006c02:	f7ff fa9a 	bl	800613a <LL_RCC_HSI48_IsReady>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1f1      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 80ee 	beq.w	8006df2 <HAL_RCC_OscConfig+0x71e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c16:	f7ff fbf8 	bl	800640a <LL_RCC_GetSysClkSource>
 8006c1a:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8006c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	f040 80af 	bne.w	8006d8c <HAL_RCC_OscConfig+0x6b8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f003 0203 	and.w	r2, r3, #3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d123      	bne.n	8006c84 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d11c      	bne.n	8006c84 <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	0a1b      	lsrs	r3, r3, #8
 8006c4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d114      	bne.n	8006c84 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d10d      	bne.n	8006c84 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d106      	bne.n	8006c84 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d05d      	beq.n	8006d40 <HAL_RCC_OscConfig+0x66c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	2b0c      	cmp	r3, #12
 8006c88:	d058      	beq.n	8006d3c <HAL_RCC_OscConfig+0x668>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d001      	beq.n	8006c9c <HAL_RCC_OscConfig+0x5c8>

          {
            return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e0ab      	b.n	8006df4 <HAL_RCC_OscConfig+0x720>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006c9c:	f7ff fc6b 	bl	8006576 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006ca0:	f7fc ff60 	bl	8003b64 <HAL_GetTick>
 8006ca4:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ca6:	e008      	b.n	8006cba <HAL_RCC_OscConfig+0x5e6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ca8:	f7fc ff5c 	bl	8003b64 <HAL_GetTick>
 8006cac:	4602      	mov	r2, r0
 8006cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d901      	bls.n	8006cba <HAL_RCC_OscConfig+0x5e6>
              {
                return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e09c      	b.n	8006df4 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1ef      	bne.n	8006ca8 <HAL_RCC_OscConfig+0x5d4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ccc:	68da      	ldr	r2, [r3, #12]
 8006cce:	4b3e      	ldr	r3, [pc, #248]	; (8006dc8 <HAL_RCC_OscConfig+0x6f4>)
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006cda:	4311      	orrs	r1, r2
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ce0:	0212      	lsls	r2, r2, #8
 8006ce2:	4311      	orrs	r1, r2
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006ce8:	4311      	orrs	r1, r2
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006cee:	4311      	orrs	r1, r2
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006cfe:	f7ff fc2b 	bl	8006558 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d10:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006d12:	f7fc ff27 	bl	8003b64 <HAL_GetTick>
 8006d16:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d18:	e008      	b.n	8006d2c <HAL_RCC_OscConfig+0x658>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d1a:	f7fc ff23 	bl	8003b64 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d901      	bls.n	8006d2c <HAL_RCC_OscConfig+0x658>
              {
                return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e063      	b.n	8006df4 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d0ef      	beq.n	8006d1a <HAL_RCC_OscConfig+0x646>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d3a:	e05a      	b.n	8006df2 <HAL_RCC_OscConfig+0x71e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e059      	b.n	8006df4 <HAL_RCC_OscConfig+0x720>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d151      	bne.n	8006df2 <HAL_RCC_OscConfig+0x71e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006d4e:	f7ff fc03 	bl	8006558 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d60:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006d62:	f7fc feff 	bl	8003b64 <HAL_GetTick>
 8006d66:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d68:	e008      	b.n	8006d7c <HAL_RCC_OscConfig+0x6a8>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d6a:	f7fc fefb 	bl	8003b64 <HAL_GetTick>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d901      	bls.n	8006d7c <HAL_RCC_OscConfig+0x6a8>
            {
              return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e03b      	b.n	8006df4 <HAL_RCC_OscConfig+0x720>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d0ef      	beq.n	8006d6a <HAL_RCC_OscConfig+0x696>
 8006d8a:	e032      	b.n	8006df2 <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	2b0c      	cmp	r3, #12
 8006d90:	d02d      	beq.n	8006dee <HAL_RCC_OscConfig+0x71a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d92:	f7ff fbf0 	bl	8006576 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8006d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006da0:	f023 0303 	bic.w	r3, r3, #3
 8006da4:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8006da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006db0:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8006db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006db8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dba:	f7fc fed3 	bl	8003b64 <HAL_GetTick>
 8006dbe:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006dc0:	e00d      	b.n	8006dde <HAL_RCC_OscConfig+0x70a>
 8006dc2:	bf00      	nop
 8006dc4:	58000400 	.word	0x58000400
 8006dc8:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dcc:	f7fc feca 	bl	8003b64 <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d901      	bls.n	8006dde <HAL_RCC_OscConfig+0x70a>
          {
            return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e00a      	b.n	8006df4 <HAL_RCC_OscConfig+0x720>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1ef      	bne.n	8006dcc <HAL_RCC_OscConfig+0x6f8>
 8006dec:	e001      	b.n	8006df2 <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e000      	b.n	8006df4 <HAL_RCC_OscConfig+0x720>
      }
    }
  }
  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3734      	adds	r7, #52	; 0x34
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd90      	pop	{r4, r7, pc}

08006dfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d101      	bne.n	8006e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e12a      	b.n	8007066 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e10:	4b97      	ldr	r3, [pc, #604]	; (8007070 <HAL_RCC_ClockConfig+0x274>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 0307 	and.w	r3, r3, #7
 8006e18:	683a      	ldr	r2, [r7, #0]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d91b      	bls.n	8006e56 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e1e:	4b94      	ldr	r3, [pc, #592]	; (8007070 <HAL_RCC_ClockConfig+0x274>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f023 0207 	bic.w	r2, r3, #7
 8006e26:	4992      	ldr	r1, [pc, #584]	; (8007070 <HAL_RCC_ClockConfig+0x274>)
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e2e:	f7fc fe99 	bl	8003b64 <HAL_GetTick>
 8006e32:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e34:	e008      	b.n	8006e48 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006e36:	f7fc fe95 	bl	8003b64 <HAL_GetTick>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d901      	bls.n	8006e48 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e10e      	b.n	8007066 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e48:	4b89      	ldr	r3, [pc, #548]	; (8007070 <HAL_RCC_ClockConfig+0x274>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0307 	and.w	r3, r3, #7
 8006e50:	683a      	ldr	r2, [r7, #0]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d1ef      	bne.n	8006e36 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 0302 	and.w	r3, r3, #2
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d016      	beq.n	8006e90 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7ff fadb 	bl	8006422 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006e6c:	f7fc fe7a 	bl	8003b64 <HAL_GetTick>
 8006e70:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006e72:	e008      	b.n	8006e86 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006e74:	f7fc fe76 	bl	8003b64 <HAL_GetTick>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d901      	bls.n	8006e86 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e0ef      	b.n	8007066 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006e86:	f7ff fbc8 	bl	800661a <LL_RCC_IsActiveFlag_HPRE>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d0f1      	beq.n	8006e74 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0320 	and.w	r3, r3, #32
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d016      	beq.n	8006eca <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7ff fad2 	bl	800644a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006ea6:	f7fc fe5d 	bl	8003b64 <HAL_GetTick>
 8006eaa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006eac:	e008      	b.n	8006ec0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006eae:	f7fc fe59 	bl	8003b64 <HAL_GetTick>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d901      	bls.n	8006ec0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e0d2      	b.n	8007066 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006ec0:	f7ff fbbd 	bl	800663e <LL_RCC_IsActiveFlag_C2HPRE>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d0f1      	beq.n	8006eae <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d016      	beq.n	8006f04 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7ff facb 	bl	8006476 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006ee0:	f7fc fe40 	bl	8003b64 <HAL_GetTick>
 8006ee4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006ee6:	e008      	b.n	8006efa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006ee8:	f7fc fe3c 	bl	8003b64 <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d901      	bls.n	8006efa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e0b5      	b.n	8007066 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006efa:	f7ff fbb3 	bl	8006664 <LL_RCC_IsActiveFlag_SHDHPRE>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d0f1      	beq.n	8006ee8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0304 	and.w	r3, r3, #4
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d016      	beq.n	8006f3e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7ff fac5 	bl	80064a4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006f1a:	f7fc fe23 	bl	8003b64 <HAL_GetTick>
 8006f1e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006f20:	e008      	b.n	8006f34 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006f22:	f7fc fe1f 	bl	8003b64 <HAL_GetTick>
 8006f26:	4602      	mov	r2, r0
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d901      	bls.n	8006f34 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e098      	b.n	8007066 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006f34:	f7ff fba9 	bl	800668a <LL_RCC_IsActiveFlag_PPRE1>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d0f1      	beq.n	8006f22 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 0308 	and.w	r3, r3, #8
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d017      	beq.n	8006f7a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	00db      	lsls	r3, r3, #3
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7ff fabb 	bl	80064cc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006f56:	f7fc fe05 	bl	8003b64 <HAL_GetTick>
 8006f5a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006f5c:	e008      	b.n	8006f70 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006f5e:	f7fc fe01 	bl	8003b64 <HAL_GetTick>
 8006f62:	4602      	mov	r2, r0
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d901      	bls.n	8006f70 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	e07a      	b.n	8007066 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006f70:	f7ff fb9d 	bl	80066ae <LL_RCC_IsActiveFlag_PPRE2>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d0f1      	beq.n	8006f5e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d043      	beq.n	800700e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d106      	bne.n	8006f9c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006f8e:	f7ff f85b 	bl	8006048 <LL_RCC_HSE_IsReady>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d11e      	bne.n	8006fd6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e064      	b.n	8007066 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	2b03      	cmp	r3, #3
 8006fa2:	d106      	bne.n	8006fb2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006fa4:	f7ff faf6 	bl	8006594 <LL_RCC_PLL_IsReady>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d113      	bne.n	8006fd6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e059      	b.n	8007066 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d106      	bne.n	8006fc8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006fba:	f7ff f9c3 	bl	8006344 <LL_RCC_MSI_IsReady>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d108      	bne.n	8006fd6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e04e      	b.n	8007066 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006fc8:	f7ff f86e 	bl	80060a8 <LL_RCC_HSI_IsReady>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d101      	bne.n	8006fd6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e047      	b.n	8007066 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7ff fa01 	bl	80063e2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fe0:	f7fc fdc0 	bl	8003b64 <HAL_GetTick>
 8006fe4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fe6:	e00a      	b.n	8006ffe <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fe8:	f7fc fdbc 	bl	8003b64 <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d901      	bls.n	8006ffe <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e033      	b.n	8007066 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ffe:	f7ff fa04 	bl	800640a <LL_RCC_GetSysClkSource>
 8007002:	4602      	mov	r2, r0
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	429a      	cmp	r2, r3
 800700c:	d1ec      	bne.n	8006fe8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800700e:	4b18      	ldr	r3, [pc, #96]	; (8007070 <HAL_RCC_ClockConfig+0x274>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0307 	and.w	r3, r3, #7
 8007016:	683a      	ldr	r2, [r7, #0]
 8007018:	429a      	cmp	r2, r3
 800701a:	d21b      	bcs.n	8007054 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800701c:	4b14      	ldr	r3, [pc, #80]	; (8007070 <HAL_RCC_ClockConfig+0x274>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f023 0207 	bic.w	r2, r3, #7
 8007024:	4912      	ldr	r1, [pc, #72]	; (8007070 <HAL_RCC_ClockConfig+0x274>)
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	4313      	orrs	r3, r2
 800702a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800702c:	f7fc fd9a 	bl	8003b64 <HAL_GetTick>
 8007030:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007032:	e008      	b.n	8007046 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007034:	f7fc fd96 	bl	8003b64 <HAL_GetTick>
 8007038:	4602      	mov	r2, r0
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	2b02      	cmp	r3, #2
 8007040:	d901      	bls.n	8007046 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e00f      	b.n	8007066 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007046:	4b0a      	ldr	r3, [pc, #40]	; (8007070 <HAL_RCC_ClockConfig+0x274>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0307 	and.w	r3, r3, #7
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	429a      	cmp	r2, r3
 8007052:	d1ef      	bne.n	8007034 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8007054:	f7fc faa8 	bl	80035a8 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8007058:	f7fc fd90 	bl	8003b7c <HAL_GetTickPrio>
 800705c:	4603      	mov	r3, r0
 800705e:	4618      	mov	r0, r3
 8007060:	f7fc fd32 	bl	8003ac8 <HAL_InitTick>
 8007064:	4603      	mov	r3, r0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	58004000 	.word	0x58004000

08007074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007074:	b590      	push	{r4, r7, lr}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800707a:	f7ff f9c6 	bl	800640a <LL_RCC_GetSysClkSource>
 800707e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10a      	bne.n	800709c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007086:	f7ff f982 	bl	800638e <LL_RCC_MSI_GetRange>
 800708a:	4603      	mov	r3, r0
 800708c:	091b      	lsrs	r3, r3, #4
 800708e:	f003 030f 	and.w	r3, r3, #15
 8007092:	4a2a      	ldr	r2, [pc, #168]	; (800713c <HAL_RCC_GetSysClockFreq+0xc8>)
 8007094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007098:	60fb      	str	r3, [r7, #12]
 800709a:	e04a      	b.n	8007132 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b04      	cmp	r3, #4
 80070a0:	d102      	bne.n	80070a8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80070a2:	4b27      	ldr	r3, [pc, #156]	; (8007140 <HAL_RCC_GetSysClockFreq+0xcc>)
 80070a4:	60fb      	str	r3, [r7, #12]
 80070a6:	e044      	b.n	8007132 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2b08      	cmp	r3, #8
 80070ac:	d10a      	bne.n	80070c4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80070ae:	f7fe ff7d 	bl	8005fac <LL_RCC_HSE_IsEnabledDiv2>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d102      	bne.n	80070be <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80070b8:	4b21      	ldr	r3, [pc, #132]	; (8007140 <HAL_RCC_GetSysClockFreq+0xcc>)
 80070ba:	60fb      	str	r3, [r7, #12]
 80070bc:	e039      	b.n	8007132 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80070be:	4b21      	ldr	r3, [pc, #132]	; (8007144 <HAL_RCC_GetSysClockFreq+0xd0>)
 80070c0:	60fb      	str	r3, [r7, #12]
 80070c2:	e036      	b.n	8007132 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80070c4:	f7ff fa9d 	bl	8006602 <LL_RCC_PLL_GetMainSource>
 80070c8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d002      	beq.n	80070d6 <HAL_RCC_GetSysClockFreq+0x62>
 80070d0:	2b03      	cmp	r3, #3
 80070d2:	d003      	beq.n	80070dc <HAL_RCC_GetSysClockFreq+0x68>
 80070d4:	e00d      	b.n	80070f2 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80070d6:	4b1a      	ldr	r3, [pc, #104]	; (8007140 <HAL_RCC_GetSysClockFreq+0xcc>)
 80070d8:	60bb      	str	r3, [r7, #8]
        break;
 80070da:	e015      	b.n	8007108 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80070dc:	f7fe ff66 	bl	8005fac <LL_RCC_HSE_IsEnabledDiv2>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d102      	bne.n	80070ec <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80070e6:	4b16      	ldr	r3, [pc, #88]	; (8007140 <HAL_RCC_GetSysClockFreq+0xcc>)
 80070e8:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80070ea:	e00d      	b.n	8007108 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 80070ec:	4b15      	ldr	r3, [pc, #84]	; (8007144 <HAL_RCC_GetSysClockFreq+0xd0>)
 80070ee:	60bb      	str	r3, [r7, #8]
        break;
 80070f0:	e00a      	b.n	8007108 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80070f2:	f7ff f94c 	bl	800638e <LL_RCC_MSI_GetRange>
 80070f6:	4603      	mov	r3, r0
 80070f8:	091b      	lsrs	r3, r3, #4
 80070fa:	f003 030f 	and.w	r3, r3, #15
 80070fe:	4a0f      	ldr	r2, [pc, #60]	; (800713c <HAL_RCC_GetSysClockFreq+0xc8>)
 8007100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007104:	60bb      	str	r3, [r7, #8]
        break;
 8007106:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8007108:	f7ff fa56 	bl	80065b8 <LL_RCC_PLL_GetN>
 800710c:	4602      	mov	r2, r0
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	fb03 f402 	mul.w	r4, r3, r2
 8007114:	f7ff fa69 	bl	80065ea <LL_RCC_PLL_GetDivider>
 8007118:	4603      	mov	r3, r0
 800711a:	091b      	lsrs	r3, r3, #4
 800711c:	3301      	adds	r3, #1
 800711e:	fbb4 f4f3 	udiv	r4, r4, r3
 8007122:	f7ff fa56 	bl	80065d2 <LL_RCC_PLL_GetR>
 8007126:	4603      	mov	r3, r0
 8007128:	0f5b      	lsrs	r3, r3, #29
 800712a:	3301      	adds	r3, #1
 800712c:	fbb4 f3f3 	udiv	r3, r4, r3
 8007130:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8007132:	68fb      	ldr	r3, [r7, #12]
}
 8007134:	4618      	mov	r0, r3
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	bd90      	pop	{r4, r7, pc}
 800713c:	0800d0a8 	.word	0x0800d0a8
 8007140:	00f42400 	.word	0x00f42400
 8007144:	01e84800 	.word	0x01e84800

08007148 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007148:	b598      	push	{r3, r4, r7, lr}
 800714a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800714c:	f7ff ff92 	bl	8007074 <HAL_RCC_GetSysClockFreq>
 8007150:	4604      	mov	r4, r0
 8007152:	f7ff f9cf 	bl	80064f4 <LL_RCC_GetAHBPrescaler>
 8007156:	4603      	mov	r3, r0
 8007158:	091b      	lsrs	r3, r3, #4
 800715a:	f003 030f 	and.w	r3, r3, #15
 800715e:	4a03      	ldr	r2, [pc, #12]	; (800716c <HAL_RCC_GetHCLKFreq+0x24>)
 8007160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007164:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007168:	4618      	mov	r0, r3
 800716a:	bd98      	pop	{r3, r4, r7, pc}
 800716c:	0800d048 	.word	0x0800d048

08007170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007170:	b598      	push	{r3, r4, r7, lr}
 8007172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007174:	f7ff ffe8 	bl	8007148 <HAL_RCC_GetHCLKFreq>
 8007178:	4604      	mov	r4, r0
 800717a:	f7ff f9d5 	bl	8006528 <LL_RCC_GetAPB1Prescaler>
 800717e:	4603      	mov	r3, r0
 8007180:	0a1b      	lsrs	r3, r3, #8
 8007182:	f003 0307 	and.w	r3, r3, #7
 8007186:	4a04      	ldr	r2, [pc, #16]	; (8007198 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800718c:	f003 031f 	and.w	r3, r3, #31
 8007190:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007194:	4618      	mov	r0, r3
 8007196:	bd98      	pop	{r3, r4, r7, pc}
 8007198:	0800d088 	.word	0x0800d088

0800719c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800719c:	b598      	push	{r3, r4, r7, lr}
 800719e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80071a0:	f7ff ffd2 	bl	8007148 <HAL_RCC_GetHCLKFreq>
 80071a4:	4604      	mov	r4, r0
 80071a6:	f7ff f9cb 	bl	8006540 <LL_RCC_GetAPB2Prescaler>
 80071aa:	4603      	mov	r3, r0
 80071ac:	0adb      	lsrs	r3, r3, #11
 80071ae:	f003 0307 	and.w	r3, r3, #7
 80071b2:	4a04      	ldr	r2, [pc, #16]	; (80071c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80071b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071b8:	f003 031f 	and.w	r3, r3, #31
 80071bc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	bd98      	pop	{r3, r4, r7, pc}
 80071c4:	0800d088 	.word	0x0800d088

080071c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80071c8:	b590      	push	{r4, r7, lr}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2bb0      	cmp	r3, #176	; 0xb0
 80071d4:	d903      	bls.n	80071de <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80071d6:	4b15      	ldr	r3, [pc, #84]	; (800722c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80071d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	e007      	b.n	80071ee <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	091b      	lsrs	r3, r3, #4
 80071e2:	f003 030f 	and.w	r3, r3, #15
 80071e6:	4a11      	ldr	r2, [pc, #68]	; (800722c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80071e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071ec:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80071ee:	f7ff f98d 	bl	800650c <LL_RCC_GetAHB4Prescaler>
 80071f2:	4603      	mov	r3, r0
 80071f4:	091b      	lsrs	r3, r3, #4
 80071f6:	f003 030f 	and.w	r3, r3, #15
 80071fa:	4a0d      	ldr	r2, [pc, #52]	; (8007230 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80071fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	fbb2 f3f3 	udiv	r3, r2, r3
 8007206:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	4a0a      	ldr	r2, [pc, #40]	; (8007234 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800720c:	fba2 2303 	umull	r2, r3, r2, r3
 8007210:	0c9c      	lsrs	r4, r3, #18
 8007212:	f7fe febd 	bl	8005f90 <HAL_PWREx_GetVoltageRange>
 8007216:	4603      	mov	r3, r0
 8007218:	4619      	mov	r1, r3
 800721a:	4620      	mov	r0, r4
 800721c:	f000 f80c 	bl	8007238 <RCC_SetFlashLatency>
 8007220:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8007222:	4618      	mov	r0, r3
 8007224:	3714      	adds	r7, #20
 8007226:	46bd      	mov	sp, r7
 8007228:	bd90      	pop	{r4, r7, pc}
 800722a:	bf00      	nop
 800722c:	0800d0a8 	.word	0x0800d0a8
 8007230:	0800d048 	.word	0x0800d048
 8007234:	431bde83 	.word	0x431bde83

08007238 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007238:	b590      	push	{r4, r7, lr}
 800723a:	b093      	sub	sp, #76	; 0x4c
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007242:	4b39      	ldr	r3, [pc, #228]	; (8007328 <RCC_SetFlashLatency+0xf0>)
 8007244:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8007248:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800724a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800724e:	4a37      	ldr	r2, [pc, #220]	; (800732c <RCC_SetFlashLatency+0xf4>)
 8007250:	f107 031c 	add.w	r3, r7, #28
 8007254:	ca07      	ldmia	r2, {r0, r1, r2}
 8007256:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800725a:	4b35      	ldr	r3, [pc, #212]	; (8007330 <RCC_SetFlashLatency+0xf8>)
 800725c:	f107 040c 	add.w	r4, r7, #12
 8007260:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007262:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007266:	2300      	movs	r3, #0
 8007268:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007270:	d11c      	bne.n	80072ac <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007272:	2300      	movs	r3, #0
 8007274:	643b      	str	r3, [r7, #64]	; 0x40
 8007276:	e015      	b.n	80072a4 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007280:	4413      	add	r3, r2
 8007282:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	429a      	cmp	r2, r3
 800728a:	d808      	bhi.n	800729e <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800728c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007294:	4413      	add	r3, r2
 8007296:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800729a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800729c:	e022      	b.n	80072e4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800729e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072a0:	3301      	adds	r3, #1
 80072a2:	643b      	str	r3, [r7, #64]	; 0x40
 80072a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072a6:	2b03      	cmp	r3, #3
 80072a8:	d9e6      	bls.n	8007278 <RCC_SetFlashLatency+0x40>
 80072aa:	e01b      	b.n	80072e4 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80072ac:	2300      	movs	r3, #0
 80072ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072b0:	e015      	b.n	80072de <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80072b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80072ba:	4413      	add	r3, r2
 80072bc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d808      	bhi.n	80072d8 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80072c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80072ce:	4413      	add	r3, r2
 80072d0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80072d4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80072d6:	e005      	b.n	80072e4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80072d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072da:	3301      	adds	r3, #1
 80072dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d9e6      	bls.n	80072b2 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80072e4:	4b13      	ldr	r3, [pc, #76]	; (8007334 <RCC_SetFlashLatency+0xfc>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f023 0207 	bic.w	r2, r3, #7
 80072ec:	4911      	ldr	r1, [pc, #68]	; (8007334 <RCC_SetFlashLatency+0xfc>)
 80072ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072f0:	4313      	orrs	r3, r2
 80072f2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80072f4:	f7fc fc36 	bl	8003b64 <HAL_GetTick>
 80072f8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80072fa:	e008      	b.n	800730e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80072fc:	f7fc fc32 	bl	8003b64 <HAL_GetTick>
 8007300:	4602      	mov	r2, r0
 8007302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	2b02      	cmp	r3, #2
 8007308:	d901      	bls.n	800730e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e007      	b.n	800731e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800730e:	4b09      	ldr	r3, [pc, #36]	; (8007334 <RCC_SetFlashLatency+0xfc>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 0307 	and.w	r3, r3, #7
 8007316:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007318:	429a      	cmp	r2, r3
 800731a:	d1ef      	bne.n	80072fc <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	374c      	adds	r7, #76	; 0x4c
 8007322:	46bd      	mov	sp, r7
 8007324:	bd90      	pop	{r4, r7, pc}
 8007326:	bf00      	nop
 8007328:	0800cec4 	.word	0x0800cec4
 800732c:	0800ced4 	.word	0x0800ced4
 8007330:	0800cee0 	.word	0x0800cee0
 8007334:	58004000 	.word	0x58004000

08007338 <LL_RCC_LSE_IsEnabled>:
{
 8007338:	b480      	push	{r7}
 800733a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800733c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007344:	f003 0301 	and.w	r3, r3, #1
 8007348:	2b01      	cmp	r3, #1
 800734a:	d101      	bne.n	8007350 <LL_RCC_LSE_IsEnabled+0x18>
 800734c:	2301      	movs	r3, #1
 800734e:	e000      	b.n	8007352 <LL_RCC_LSE_IsEnabled+0x1a>
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <LL_RCC_LSE_IsReady>:
{
 800735c:	b480      	push	{r7}
 800735e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007368:	f003 0302 	and.w	r3, r3, #2
 800736c:	2b02      	cmp	r3, #2
 800736e:	d101      	bne.n	8007374 <LL_RCC_LSE_IsReady+0x18>
 8007370:	2301      	movs	r3, #1
 8007372:	e000      	b.n	8007376 <LL_RCC_LSE_IsReady+0x1a>
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <LL_RCC_MSI_EnablePLLMode>:
{
 8007380:	b480      	push	{r7}
 8007382:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8007384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800738e:	f043 0304 	orr.w	r3, r3, #4
 8007392:	6013      	str	r3, [r2, #0]
}
 8007394:	bf00      	nop
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <LL_RCC_SetRFWKPClockSource>:
{
 800739e:	b480      	push	{r7}
 80073a0:	b083      	sub	sp, #12
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80073a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80073b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80073be:	bf00      	nop
 80073c0:	370c      	adds	r7, #12
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <LL_RCC_SetSMPSClockSource>:
{
 80073ca:	b480      	push	{r7}
 80073cc:	b083      	sub	sp, #12
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80073d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d8:	f023 0203 	bic.w	r2, r3, #3
 80073dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80073e6:	bf00      	nop
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <LL_RCC_SetSMPSPrescaler>:
{
 80073f2:	b480      	push	{r7}
 80073f4:	b083      	sub	sp, #12
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80073fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007400:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007404:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4313      	orrs	r3, r2
 800740c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800740e:	bf00      	nop
 8007410:	370c      	adds	r7, #12
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr

0800741a <LL_RCC_SetUSARTClockSource>:
{
 800741a:	b480      	push	{r7}
 800741c:	b083      	sub	sp, #12
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8007422:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800742a:	f023 0203 	bic.w	r2, r3, #3
 800742e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4313      	orrs	r3, r2
 8007436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800743a:	bf00      	nop
 800743c:	370c      	adds	r7, #12
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr

08007446 <LL_RCC_SetLPUARTClockSource>:
{
 8007446:	b480      	push	{r7}
 8007448:	b083      	sub	sp, #12
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800744e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007456:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800745a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4313      	orrs	r3, r2
 8007462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007466:	bf00      	nop
 8007468:	370c      	adds	r7, #12
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <LL_RCC_SetI2CClockSource>:
{
 8007472:	b480      	push	{r7}
 8007474:	b083      	sub	sp, #12
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800747a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800747e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	091b      	lsrs	r3, r3, #4
 8007486:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800748a:	43db      	mvns	r3, r3
 800748c:	401a      	ands	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	011b      	lsls	r3, r3, #4
 8007492:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007496:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800749a:	4313      	orrs	r3, r2
 800749c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <LL_RCC_SetLPTIMClockSource>:
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80074b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	0c1b      	lsrs	r3, r3, #16
 80074c0:	041b      	lsls	r3, r3, #16
 80074c2:	43db      	mvns	r3, r3
 80074c4:	401a      	ands	r2, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	041b      	lsls	r3, r3, #16
 80074ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80074ce:	4313      	orrs	r3, r2
 80074d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80074d4:	bf00      	nop
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <LL_RCC_SetSAIClockSource>:
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80074e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80074f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007500:	bf00      	nop
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <LL_RCC_SetRNGClockSource>:
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800751c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007520:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4313      	orrs	r3, r2
 8007528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <LL_RCC_SetCLK48ClockSource>:
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8007540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007548:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800754c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4313      	orrs	r3, r2
 8007554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <LL_RCC_SetUSBClockSource>:
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f7ff ffe3 	bl	8007538 <LL_RCC_SetCLK48ClockSource>
}
 8007572:	bf00      	nop
 8007574:	3708      	adds	r7, #8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <LL_RCC_SetADCClockSource>:
{
 800757a:	b480      	push	{r7}
 800757c:	b083      	sub	sp, #12
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800758a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800758e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4313      	orrs	r3, r2
 8007596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800759a:	bf00      	nop
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <LL_RCC_SetRTCClockSource>:
{
 80075a6:	b480      	push	{r7}
 80075a8:	b083      	sub	sp, #12
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80075ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80075c6:	bf00      	nop
 80075c8:	370c      	adds	r7, #12
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <LL_RCC_GetRTCClockSource>:
{
 80075d2:	b480      	push	{r7}
 80075d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80075d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075de:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <LL_RCC_ForceBackupDomainReset>:
{
 80075ec:	b480      	push	{r7}
 80075ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80075f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80075fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007604:	bf00      	nop
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <LL_RCC_ReleaseBackupDomainReset>:
{
 800760e:	b480      	push	{r7}
 8007610:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800761a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800761e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007622:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007626:	bf00      	nop
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <LL_RCC_PLLSAI1_Enable>:
{
 8007630:	b480      	push	{r7}
 8007632:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800763e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007642:	6013      	str	r3, [r2, #0]
}
 8007644:	bf00      	nop
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr

0800764e <LL_RCC_PLLSAI1_Disable>:
{
 800764e:	b480      	push	{r7}
 8007650:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800765c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007660:	6013      	str	r3, [r2, #0]
}
 8007662:	bf00      	nop
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <LL_RCC_PLLSAI1_IsReady>:
{
 800766c:	b480      	push	{r7}
 800766e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800767a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800767e:	d101      	bne.n	8007684 <LL_RCC_PLLSAI1_IsReady+0x18>
 8007680:	2301      	movs	r3, #1
 8007682:	e000      	b.n	8007686 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b088      	sub	sp, #32
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007698:	2300      	movs	r3, #0
 800769a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800769c:	2300      	movs	r3, #0
 800769e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d033      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076b4:	d00c      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80076b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076ba:	d802      	bhi.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d010      	beq.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80076c0:	e017      	b.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80076c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076c6:	d017      	beq.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80076c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80076cc:	d016      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80076ce:	e010      	b.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80076d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076de:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80076e0:	e00d      	b.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	3304      	adds	r3, #4
 80076e6:	4618      	mov	r0, r3
 80076e8:	f000 f94d 	bl	8007986 <RCCEx_PLLSAI1_ConfigNP>
 80076ec:	4603      	mov	r3, r0
 80076ee:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80076f0:	e005      	b.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	77fb      	strb	r3, [r7, #31]
        break;
 80076f6:	e002      	b.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80076f8:	bf00      	nop
 80076fa:	e000      	b.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80076fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076fe:	7ffb      	ldrb	r3, [r7, #31]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d105      	bne.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007708:	4618      	mov	r0, r3
 800770a:	f7ff fee9 	bl	80074e0 <LL_RCC_SetSAIClockSource>
 800770e:	e001      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007710:	7ffb      	ldrb	r3, [r7, #31]
 8007712:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800771c:	2b00      	cmp	r3, #0
 800771e:	d046      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8007720:	f7ff ff57 	bl	80075d2 <LL_RCC_GetRTCClockSource>
 8007724:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772a:	69ba      	ldr	r2, [r7, #24]
 800772c:	429a      	cmp	r2, r3
 800772e:	d03c      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007730:	f7fe fc1e 	bl	8005f70 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d105      	bne.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773e:	4618      	mov	r0, r3
 8007740:	f7ff ff31 	bl	80075a6 <LL_RCC_SetRTCClockSource>
 8007744:	e02e      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800774a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800774e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007750:	f7ff ff4c 	bl	80075ec <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007754:	f7ff ff5b 	bl	800760e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007762:	4313      	orrs	r3, r2
 8007764:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007766:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007770:	f7ff fde2 	bl	8007338 <LL_RCC_LSE_IsEnabled>
 8007774:	4603      	mov	r3, r0
 8007776:	2b01      	cmp	r3, #1
 8007778:	d114      	bne.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800777a:	f7fc f9f3 	bl	8003b64 <HAL_GetTick>
 800777e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007780:	e00b      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007782:	f7fc f9ef 	bl	8003b64 <HAL_GetTick>
 8007786:	4602      	mov	r2, r0
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007790:	4293      	cmp	r3, r2
 8007792:	d902      	bls.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	77fb      	strb	r3, [r7, #31]
              break;
 8007798:	e004      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 800779a:	f7ff fddf 	bl	800735c <LL_RCC_LSE_IsReady>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d1ee      	bne.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80077a4:	7ffb      	ldrb	r3, [r7, #31]
 80077a6:	77bb      	strb	r3, [r7, #30]
 80077a8:	e001      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077aa:	7ffb      	ldrb	r3, [r7, #31]
 80077ac:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0301 	and.w	r3, r3, #1
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d004      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	4618      	mov	r0, r3
 80077c0:	f7ff fe2b 	bl	800741a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 0302 	and.w	r3, r3, #2
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d004      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	69db      	ldr	r3, [r3, #28]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7ff fe36 	bl	8007446 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 0310 	and.w	r3, r3, #16
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d004      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7ff fe5e 	bl	80074ac <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 0320 	and.w	r3, r3, #32
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d004      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007800:	4618      	mov	r0, r3
 8007802:	f7ff fe53 	bl	80074ac <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 0304 	and.w	r3, r3, #4
 800780e:	2b00      	cmp	r3, #0
 8007810:	d004      	beq.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a1b      	ldr	r3, [r3, #32]
 8007816:	4618      	mov	r0, r3
 8007818:	f7ff fe2b 	bl	8007472 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0308 	and.w	r3, r3, #8
 8007824:	2b00      	cmp	r3, #0
 8007826:	d004      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782c:	4618      	mov	r0, r3
 800782e:	f7ff fe20 	bl	8007472 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800783a:	2b00      	cmp	r3, #0
 800783c:	d022      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007842:	4618      	mov	r0, r3
 8007844:	f7ff fe8e 	bl	8007564 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800784c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007850:	d107      	bne.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8007852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800785c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007860:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007866:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800786a:	d10b      	bne.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	3304      	adds	r3, #4
 8007870:	4618      	mov	r0, r3
 8007872:	f000 f8e3 	bl	8007a3c <RCCEx_PLLSAI1_ConfigNQ>
 8007876:	4603      	mov	r3, r0
 8007878:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800787a:	7ffb      	ldrb	r3, [r7, #31]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d001      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8007880:	7ffb      	ldrb	r3, [r7, #31]
 8007882:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800788c:	2b00      	cmp	r3, #0
 800788e:	d02b      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007898:	d008      	beq.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078a2:	d003      	beq.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d105      	bne.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7ff fe2b 	bl	800750c <LL_RCC_SetRNGClockSource>
 80078b6:	e00a      	b.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x23e>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078c0:	60fb      	str	r3, [r7, #12]
 80078c2:	2000      	movs	r0, #0
 80078c4:	f7ff fe22 	bl	800750c <LL_RCC_SetRNGClockSource>
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f7ff fe35 	bl	8007538 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80078d6:	d107      	bne.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80078d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d022      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7ff fe3e 	bl	800757a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007902:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007906:	d107      	bne.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007912:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007916:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800791c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007920:	d10b      	bne.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	3304      	adds	r3, #4
 8007926:	4618      	mov	r0, r3
 8007928:	f000 f8e3 	bl	8007af2 <RCCEx_PLLSAI1_ConfigNR>
 800792c:	4603      	mov	r3, r0
 800792e:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8007930:	7ffb      	ldrb	r3, [r7, #31]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d001      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8007936:	7ffb      	ldrb	r3, [r7, #31]
 8007938:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007942:	2b00      	cmp	r3, #0
 8007944:	d004      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800794a:	4618      	mov	r0, r3
 800794c:	f7ff fd27 	bl	800739e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007958:	2b00      	cmp	r3, #0
 800795a:	d009      	beq.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007960:	4618      	mov	r0, r3
 8007962:	f7ff fd46 	bl	80073f2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800796a:	4618      	mov	r0, r3
 800796c:	f7ff fd2d 	bl	80073ca <LL_RCC_SetSMPSClockSource>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2SCLK);
    }
  }
#endif

  return status;
 8007970:	7fbb      	ldrb	r3, [r7, #30]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3720      	adds	r7, #32
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800797e:	f7ff fcff 	bl	8007380 <LL_RCC_MSI_EnablePLLMode>
}
 8007982:	bf00      	nop
 8007984:	bd80      	pop	{r7, pc}

08007986 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b084      	sub	sp, #16
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800798e:	2300      	movs	r3, #0
 8007990:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007992:	f7ff fe5c 	bl	800764e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007996:	f7fc f8e5 	bl	8003b64 <HAL_GetTick>
 800799a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800799c:	e009      	b.n	80079b2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800799e:	f7fc f8e1 	bl	8003b64 <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d902      	bls.n	80079b2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	73fb      	strb	r3, [r7, #15]
      break;
 80079b0:	e004      	b.n	80079bc <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80079b2:	f7ff fe5b 	bl	800766c <LL_RCC_PLLSAI1_IsReady>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1f0      	bne.n	800799e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80079bc:	7bfb      	ldrb	r3, [r7, #15]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d137      	bne.n	8007a32 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80079c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	021b      	lsls	r3, r3, #8
 80079d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80079d6:	4313      	orrs	r3, r2
 80079d8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80079da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80079ec:	4313      	orrs	r3, r2
 80079ee:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80079f0:	f7ff fe1e 	bl	8007630 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079f4:	f7fc f8b6 	bl	8003b64 <HAL_GetTick>
 80079f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80079fa:	e009      	b.n	8007a10 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80079fc:	f7fc f8b2 	bl	8003b64 <HAL_GetTick>
 8007a00:	4602      	mov	r2, r0
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d902      	bls.n	8007a10 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	73fb      	strb	r3, [r7, #15]
        break;
 8007a0e:	e004      	b.n	8007a1a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007a10:	f7ff fe2c 	bl	800766c <LL_RCC_PLLSAI1_IsReady>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d1f0      	bne.n	80079fc <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8007a1a:	7bfb      	ldrb	r3, [r7, #15]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d108      	bne.n	8007a32 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a24:	691a      	ldr	r2, [r3, #16]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3710      	adds	r7, #16
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a44:	2300      	movs	r3, #0
 8007a46:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007a48:	f7ff fe01 	bl	800764e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007a4c:	f7fc f88a 	bl	8003b64 <HAL_GetTick>
 8007a50:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007a52:	e009      	b.n	8007a68 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007a54:	f7fc f886 	bl	8003b64 <HAL_GetTick>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d902      	bls.n	8007a68 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	73fb      	strb	r3, [r7, #15]
      break;
 8007a66:	e004      	b.n	8007a72 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007a68:	f7ff fe00 	bl	800766c <LL_RCC_PLLSAI1_IsReady>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1f0      	bne.n	8007a54 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007a72:	7bfb      	ldrb	r3, [r7, #15]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d137      	bne.n	8007ae8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	021b      	lsls	r3, r3, #8
 8007a88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007aa6:	f7ff fdc3 	bl	8007630 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007aaa:	f7fc f85b 	bl	8003b64 <HAL_GetTick>
 8007aae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007ab0:	e009      	b.n	8007ac6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007ab2:	f7fc f857 	bl	8003b64 <HAL_GetTick>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	1ad3      	subs	r3, r2, r3
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d902      	bls.n	8007ac6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	73fb      	strb	r3, [r7, #15]
        break;
 8007ac4:	e004      	b.n	8007ad0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007ac6:	f7ff fdd1 	bl	800766c <LL_RCC_PLLSAI1_IsReady>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d1f0      	bne.n	8007ab2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007ad0:	7bfb      	ldrb	r3, [r7, #15]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d108      	bne.n	8007ae8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ada:	691a      	ldr	r2, [r3, #16]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b084      	sub	sp, #16
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007afa:	2300      	movs	r3, #0
 8007afc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007afe:	f7ff fda6 	bl	800764e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007b02:	f7fc f82f 	bl	8003b64 <HAL_GetTick>
 8007b06:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007b08:	e009      	b.n	8007b1e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b0a:	f7fc f82b 	bl	8003b64 <HAL_GetTick>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d902      	bls.n	8007b1e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b1c:	e004      	b.n	8007b28 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007b1e:	f7ff fda5 	bl	800766c <LL_RCC_PLLSAI1_IsReady>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1f0      	bne.n	8007b0a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d137      	bne.n	8007b9e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	021b      	lsls	r3, r3, #8
 8007b3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b42:	4313      	orrs	r3, r2
 8007b44:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007b5c:	f7ff fd68 	bl	8007630 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b60:	f7fc f800 	bl	8003b64 <HAL_GetTick>
 8007b64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007b66:	e009      	b.n	8007b7c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b68:	f7fb fffc 	bl	8003b64 <HAL_GetTick>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	d902      	bls.n	8007b7c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007b76:	2303      	movs	r3, #3
 8007b78:	73fb      	strb	r3, [r7, #15]
        break;
 8007b7a:	e004      	b.n	8007b86 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007b7c:	f7ff fd76 	bl	800766c <LL_RCC_PLLSAI1_IsReady>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d1f0      	bne.n	8007b68 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007b86:	7bfb      	ldrb	r3, [r7, #15]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d108      	bne.n	8007b9e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b90:	691a      	ldr	r2, [r3, #16]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d101      	bne.n	8007bba <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e090      	b.n	8007cdc <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d106      	bne.n	8007bd4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f7fb faa2 	bl	8003118 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2202      	movs	r2, #2
 8007bd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	22ca      	movs	r2, #202	; 0xca
 8007be2:	625a      	str	r2, [r3, #36]	; 0x24
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2253      	movs	r2, #83	; 0x53
 8007bea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 f89f 	bl	8007d30 <RTC_EnterInitMode>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d009      	beq.n	8007c0c <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	22ff      	movs	r2, #255	; 0xff
 8007bfe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2204      	movs	r2, #4
 8007c04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e067      	b.n	8007cdc <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	6812      	ldr	r2, [r2, #0]
 8007c16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007c1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c1e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6899      	ldr	r1, [r3, #8]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	431a      	orrs	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	699b      	ldr	r3, [r3, #24]
 8007c34:	431a      	orrs	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	430a      	orrs	r2, r1
 8007c3c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	68d2      	ldr	r2, [r2, #12]
 8007c46:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	6919      	ldr	r1, [r3, #16]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	041a      	lsls	r2, r3, #16
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	430a      	orrs	r2, r1
 8007c5a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	68da      	ldr	r2, [r3, #12]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c6a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f022 0203 	bic.w	r2, r2, #3
 8007c7a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	69da      	ldr	r2, [r3, #28]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	431a      	orrs	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	430a      	orrs	r2, r1
 8007c92:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	f003 0320 	and.w	r3, r3, #32
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d113      	bne.n	8007cca <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f81e 	bl	8007ce4 <HAL_RTC_WaitForSynchro>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00d      	beq.n	8007cca <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	22ff      	movs	r2, #255	; 0xff
 8007cb4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2204      	movs	r2, #4
 8007cba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e008      	b.n	8007cdc <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	22ff      	movs	r2, #255	; 0xff
 8007cd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8007cda:	2300      	movs	r3, #0
  }
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3708      	adds	r7, #8
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68da      	ldr	r2, [r3, #12]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007cfa:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007cfc:	f7fb ff32 	bl	8003b64 <HAL_GetTick>
 8007d00:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007d02:	e009      	b.n	8007d18 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007d04:	f7fb ff2e 	bl	8003b64 <HAL_GetTick>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d12:	d901      	bls.n	8007d18 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007d14:	2303      	movs	r3, #3
 8007d16:	e007      	b.n	8007d28 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	f003 0320 	and.w	r3, r3, #32
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d0ee      	beq.n	8007d04 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d119      	bne.n	8007d7a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d4e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007d50:	f7fb ff08 	bl	8003b64 <HAL_GetTick>
 8007d54:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007d56:	e009      	b.n	8007d6c <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8007d58:	f7fb ff04 	bl	8003b64 <HAL_GetTick>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	1ad3      	subs	r3, r2, r3
 8007d62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d66:	d901      	bls.n	8007d6c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e007      	b.n	8007d7c <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d0ee      	beq.n	8007d58 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b086      	sub	sp, #24
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d101      	bne.n	8007d9e <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8007d9a:	2302      	movs	r3, #2
 8007d9c:	e089      	b.n	8007eb2 <HAL_RTCEx_SetWakeUpTimer+0x12e>
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2202      	movs	r2, #2
 8007daa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	22ca      	movs	r2, #202	; 0xca
 8007db4:	625a      	str	r2, [r3, #36]	; 0x24
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2253      	movs	r2, #83	; 0x53
 8007dbc:	625a      	str	r2, [r3, #36]	; 0x24
 
  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != 0U){
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d020      	beq.n	8007e0e <HAL_RTCEx_SetWakeUpTimer+0x8a>
    tickstart = HAL_GetTick();
 8007dcc:	f7fb feca 	bl	8003b64 <HAL_GetTick>
 8007dd0:	6178      	str	r0, [r7, #20]

   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007dd2:	e015      	b.n	8007e00 <HAL_RTCEx_SetWakeUpTimer+0x7c>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007dd4:	f7fb fec6 	bl	8003b64 <HAL_GetTick>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007de2:	d90d      	bls.n	8007e00 <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	22ff      	movs	r2, #255	; 0xff
 8007dea:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2203      	movs	r2, #3
 8007df0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f883 2020 	strb.w	r2, [r3, #32]

       return HAL_TIMEOUT;
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	e058      	b.n	8007eb2 <HAL_RTCEx_SetWakeUpTimer+0x12e>
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	f003 0304 	and.w	r3, r3, #4
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1e2      	bne.n	8007dd4 <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	689a      	ldr	r2, [r3, #8]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e1c:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8007e1e:	f7fb fea1 	bl	8003b64 <HAL_GetTick>
 8007e22:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007e24:	e015      	b.n	8007e52 <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007e26:	f7fb fe9d 	bl	8003b64 <HAL_GetTick>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	1ad3      	subs	r3, r2, r3
 8007e30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e34:	d90d      	bls.n	8007e52 <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	22ff      	movs	r2, #255	; 0xff
 8007e3c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2203      	movs	r2, #3
 8007e42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	e02f      	b.n	8007eb2 <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	f003 0304 	and.w	r3, r3, #4
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d0e2      	beq.n	8007e26 <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	689a      	ldr	r2, [r3, #8]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f022 0207 	bic.w	r2, r2, #7
 8007e6e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6899      	ldr	r1, [r3, #8]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	430a      	orrs	r2, r1
 8007e7e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68ba      	ldr	r2, [r7, #8]
 8007e86:	615a      	str	r2, [r3, #20]

   /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	689a      	ldr	r2, [r3, #8]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e96:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	22ff      	movs	r2, #255	; 0xff
 8007e9e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3718      	adds	r7, #24
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b084      	sub	sp, #16
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d101      	bne.n	8007ecc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e095      	b.n	8007ff8 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d108      	bne.n	8007ee6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007edc:	d009      	beq.n	8007ef2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	61da      	str	r2, [r3, #28]
 8007ee4:	e005      	b.n	8007ef2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d106      	bne.n	8007f12 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f7fb f9e1 	bl	80032d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2202      	movs	r2, #2
 8007f16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f28:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f32:	d902      	bls.n	8007f3a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007f34:	2300      	movs	r3, #0
 8007f36:	60fb      	str	r3, [r7, #12]
 8007f38:	e002      	b.n	8007f40 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f3e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007f48:	d007      	beq.n	8007f5a <HAL_SPI_Init+0xa0>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f52:	d002      	beq.n	8007f5a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007f6a:	431a      	orrs	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	f003 0302 	and.w	r3, r3, #2
 8007f74:	431a      	orrs	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	695b      	ldr	r3, [r3, #20]
 8007f7a:	f003 0301 	and.w	r3, r3, #1
 8007f7e:	431a      	orrs	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	699b      	ldr	r3, [r3, #24]
 8007f84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	69db      	ldr	r3, [r3, #28]
 8007f8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f92:	431a      	orrs	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a1b      	ldr	r3, [r3, #32]
 8007f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f9c:	ea42 0103 	orr.w	r1, r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	430a      	orrs	r2, r1
 8007fae:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	0c1b      	lsrs	r3, r3, #16
 8007fb6:	f003 0204 	and.w	r2, r3, #4
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbe:	f003 0310 	and.w	r3, r3, #16
 8007fc2:	431a      	orrs	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc8:	f003 0308 	and.w	r3, r3, #8
 8007fcc:	431a      	orrs	r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007fd6:	ea42 0103 	orr.w	r1, r2, r3
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	430a      	orrs	r2, r1
 8007fe6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b088      	sub	sp, #32
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	603b      	str	r3, [r7, #0]
 800800c:	4613      	mov	r3, r2
 800800e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008010:	2300      	movs	r3, #0
 8008012:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800801a:	2b01      	cmp	r3, #1
 800801c:	d101      	bne.n	8008022 <HAL_SPI_Transmit+0x22>
 800801e:	2302      	movs	r3, #2
 8008020:	e158      	b.n	80082d4 <HAL_SPI_Transmit+0x2d4>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2201      	movs	r2, #1
 8008026:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800802a:	f7fb fd9b 	bl	8003b64 <HAL_GetTick>
 800802e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008030:	88fb      	ldrh	r3, [r7, #6]
 8008032:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800803a:	b2db      	uxtb	r3, r3
 800803c:	2b01      	cmp	r3, #1
 800803e:	d002      	beq.n	8008046 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008040:	2302      	movs	r3, #2
 8008042:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008044:	e13d      	b.n	80082c2 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d002      	beq.n	8008052 <HAL_SPI_Transmit+0x52>
 800804c:	88fb      	ldrh	r3, [r7, #6]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d102      	bne.n	8008058 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008056:	e134      	b.n	80082c2 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2203      	movs	r2, #3
 800805c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2200      	movs	r2, #0
 8008064:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	68ba      	ldr	r2, [r7, #8]
 800806a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	88fa      	ldrh	r2, [r7, #6]
 8008070:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	88fa      	ldrh	r2, [r7, #6]
 8008076:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2200      	movs	r2, #0
 800807c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2200      	movs	r2, #0
 8008092:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2200      	movs	r2, #0
 8008098:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080a2:	d10f      	bne.n	80080c4 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80080c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ce:	2b40      	cmp	r3, #64	; 0x40
 80080d0:	d007      	beq.n	80080e2 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80080ea:	d94b      	bls.n	8008184 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d002      	beq.n	80080fa <HAL_SPI_Transmit+0xfa>
 80080f4:	8afb      	ldrh	r3, [r7, #22]
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d13e      	bne.n	8008178 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fe:	881a      	ldrh	r2, [r3, #0]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810a:	1c9a      	adds	r2, r3, #2
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008114:	b29b      	uxth	r3, r3
 8008116:	3b01      	subs	r3, #1
 8008118:	b29a      	uxth	r2, r3
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800811e:	e02b      	b.n	8008178 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f003 0302 	and.w	r3, r3, #2
 800812a:	2b02      	cmp	r3, #2
 800812c:	d112      	bne.n	8008154 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008132:	881a      	ldrh	r2, [r3, #0]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813e:	1c9a      	adds	r2, r3, #2
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008148:	b29b      	uxth	r3, r3
 800814a:	3b01      	subs	r3, #1
 800814c:	b29a      	uxth	r2, r3
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008152:	e011      	b.n	8008178 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008154:	f7fb fd06 	bl	8003b64 <HAL_GetTick>
 8008158:	4602      	mov	r2, r0
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	1ad3      	subs	r3, r2, r3
 800815e:	683a      	ldr	r2, [r7, #0]
 8008160:	429a      	cmp	r2, r3
 8008162:	d803      	bhi.n	800816c <HAL_SPI_Transmit+0x16c>
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800816a:	d102      	bne.n	8008172 <HAL_SPI_Transmit+0x172>
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d102      	bne.n	8008178 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008176:	e0a4      	b.n	80082c2 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800817c:	b29b      	uxth	r3, r3
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1ce      	bne.n	8008120 <HAL_SPI_Transmit+0x120>
 8008182:	e07c      	b.n	800827e <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d002      	beq.n	8008192 <HAL_SPI_Transmit+0x192>
 800818c:	8afb      	ldrh	r3, [r7, #22]
 800818e:	2b01      	cmp	r3, #1
 8008190:	d170      	bne.n	8008274 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008196:	b29b      	uxth	r3, r3
 8008198:	2b01      	cmp	r3, #1
 800819a:	d912      	bls.n	80081c2 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a0:	881a      	ldrh	r2, [r3, #0]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ac:	1c9a      	adds	r2, r3, #2
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	3b02      	subs	r3, #2
 80081ba:	b29a      	uxth	r2, r3
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80081c0:	e058      	b.n	8008274 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	330c      	adds	r3, #12
 80081cc:	7812      	ldrb	r2, [r2, #0]
 80081ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d4:	1c5a      	adds	r2, r3, #1
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081de:	b29b      	uxth	r3, r3
 80081e0:	3b01      	subs	r3, #1
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80081e8:	e044      	b.n	8008274 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	f003 0302 	and.w	r3, r3, #2
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d12b      	bne.n	8008250 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d912      	bls.n	8008228 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008206:	881a      	ldrh	r2, [r3, #0]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008212:	1c9a      	adds	r2, r3, #2
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800821c:	b29b      	uxth	r3, r3
 800821e:	3b02      	subs	r3, #2
 8008220:	b29a      	uxth	r2, r3
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008226:	e025      	b.n	8008274 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	330c      	adds	r3, #12
 8008232:	7812      	ldrb	r2, [r2, #0]
 8008234:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823a:	1c5a      	adds	r2, r3, #1
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008244:	b29b      	uxth	r3, r3
 8008246:	3b01      	subs	r3, #1
 8008248:	b29a      	uxth	r2, r3
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800824e:	e011      	b.n	8008274 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008250:	f7fb fc88 	bl	8003b64 <HAL_GetTick>
 8008254:	4602      	mov	r2, r0
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	683a      	ldr	r2, [r7, #0]
 800825c:	429a      	cmp	r2, r3
 800825e:	d803      	bhi.n	8008268 <HAL_SPI_Transmit+0x268>
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008266:	d102      	bne.n	800826e <HAL_SPI_Transmit+0x26e>
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d102      	bne.n	8008274 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800826e:	2303      	movs	r3, #3
 8008270:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008272:	e026      	b.n	80082c2 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008278:	b29b      	uxth	r3, r3
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1b5      	bne.n	80081ea <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800827e:	69ba      	ldr	r2, [r7, #24]
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f000 fcdc 	bl	8008c40 <SPI_EndRxTxTransaction>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d002      	beq.n	8008294 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2220      	movs	r2, #32
 8008292:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d10a      	bne.n	80082b2 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800829c:	2300      	movs	r3, #0
 800829e:	613b      	str	r3, [r7, #16]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	613b      	str	r3, [r7, #16]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	613b      	str	r3, [r7, #16]
 80082b0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d002      	beq.n	80082c0 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	77fb      	strb	r3, [r7, #31]
 80082be:	e000      	b.n	80082c2 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80082c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2201      	movs	r2, #1
 80082c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80082d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3720      	adds	r7, #32
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b088      	sub	sp, #32
 80082e0:	af02      	add	r7, sp, #8
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	603b      	str	r3, [r7, #0]
 80082e8:	4613      	mov	r3, r2
 80082ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80082ec:	2300      	movs	r3, #0
 80082ee:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082f8:	d112      	bne.n	8008320 <HAL_SPI_Receive+0x44>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d10e      	bne.n	8008320 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2204      	movs	r2, #4
 8008306:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800830a:	88fa      	ldrh	r2, [r7, #6]
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	9300      	str	r3, [sp, #0]
 8008310:	4613      	mov	r3, r2
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	68b9      	ldr	r1, [r7, #8]
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f000 f910 	bl	800853c <HAL_SPI_TransmitReceive>
 800831c:	4603      	mov	r3, r0
 800831e:	e109      	b.n	8008534 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008326:	2b01      	cmp	r3, #1
 8008328:	d101      	bne.n	800832e <HAL_SPI_Receive+0x52>
 800832a:	2302      	movs	r3, #2
 800832c:	e102      	b.n	8008534 <HAL_SPI_Receive+0x258>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2201      	movs	r2, #1
 8008332:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008336:	f7fb fc15 	bl	8003b64 <HAL_GetTick>
 800833a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008342:	b2db      	uxtb	r3, r3
 8008344:	2b01      	cmp	r3, #1
 8008346:	d002      	beq.n	800834e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008348:	2302      	movs	r3, #2
 800834a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800834c:	e0e9      	b.n	8008522 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d002      	beq.n	800835a <HAL_SPI_Receive+0x7e>
 8008354:	88fb      	ldrh	r3, [r7, #6]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d102      	bne.n	8008360 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800835e:	e0e0      	b.n	8008522 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2204      	movs	r2, #4
 8008364:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2200      	movs	r2, #0
 800836c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	68ba      	ldr	r2, [r7, #8]
 8008372:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	88fa      	ldrh	r2, [r7, #6]
 8008378:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	88fa      	ldrh	r2, [r7, #6]
 8008380:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2200      	movs	r2, #0
 8008388:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2200      	movs	r2, #0
 800838e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2200      	movs	r2, #0
 8008394:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2200      	movs	r2, #0
 800839a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2200      	movs	r2, #0
 80083a0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80083aa:	d908      	bls.n	80083be <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	685a      	ldr	r2, [r3, #4]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80083ba:	605a      	str	r2, [r3, #4]
 80083bc:	e007      	b.n	80083ce <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	685a      	ldr	r2, [r3, #4]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80083cc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083d6:	d10f      	bne.n	80083f8 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80083f6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008402:	2b40      	cmp	r3, #64	; 0x40
 8008404:	d007      	beq.n	8008416 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008414:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800841e:	d867      	bhi.n	80084f0 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008420:	e030      	b.n	8008484 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	f003 0301 	and.w	r3, r3, #1
 800842c:	2b01      	cmp	r3, #1
 800842e:	d117      	bne.n	8008460 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f103 020c 	add.w	r2, r3, #12
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843c:	7812      	ldrb	r2, [r2, #0]
 800843e:	b2d2      	uxtb	r2, r2
 8008440:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008446:	1c5a      	adds	r2, r3, #1
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008452:	b29b      	uxth	r3, r3
 8008454:	3b01      	subs	r3, #1
 8008456:	b29a      	uxth	r2, r3
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800845e:	e011      	b.n	8008484 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008460:	f7fb fb80 	bl	8003b64 <HAL_GetTick>
 8008464:	4602      	mov	r2, r0
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	683a      	ldr	r2, [r7, #0]
 800846c:	429a      	cmp	r2, r3
 800846e:	d803      	bhi.n	8008478 <HAL_SPI_Receive+0x19c>
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008476:	d102      	bne.n	800847e <HAL_SPI_Receive+0x1a2>
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d102      	bne.n	8008484 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800847e:	2303      	movs	r3, #3
 8008480:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008482:	e04e      	b.n	8008522 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800848a:	b29b      	uxth	r3, r3
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1c8      	bne.n	8008422 <HAL_SPI_Receive+0x146>
 8008490:	e034      	b.n	80084fc <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	f003 0301 	and.w	r3, r3, #1
 800849c:	2b01      	cmp	r3, #1
 800849e:	d115      	bne.n	80084cc <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68da      	ldr	r2, [r3, #12]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084aa:	b292      	uxth	r2, r2
 80084ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b2:	1c9a      	adds	r2, r3, #2
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80084be:	b29b      	uxth	r3, r3
 80084c0:	3b01      	subs	r3, #1
 80084c2:	b29a      	uxth	r2, r3
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80084ca:	e011      	b.n	80084f0 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084cc:	f7fb fb4a 	bl	8003b64 <HAL_GetTick>
 80084d0:	4602      	mov	r2, r0
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	683a      	ldr	r2, [r7, #0]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d803      	bhi.n	80084e4 <HAL_SPI_Receive+0x208>
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084e2:	d102      	bne.n	80084ea <HAL_SPI_Receive+0x20e>
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d102      	bne.n	80084f0 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80084ea:	2303      	movs	r3, #3
 80084ec:	75fb      	strb	r3, [r7, #23]
          goto error;
 80084ee:	e018      	b.n	8008522 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1ca      	bne.n	8008492 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f000 fb45 	bl	8008b90 <SPI_EndRxTransaction>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d002      	beq.n	8008512 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2220      	movs	r2, #32
 8008510:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008516:	2b00      	cmp	r3, #0
 8008518:	d002      	beq.n	8008520 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	75fb      	strb	r3, [r7, #23]
 800851e:	e000      	b.n	8008522 <HAL_SPI_Receive+0x246>
  }

error :
 8008520:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2201      	movs	r2, #1
 8008526:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008532:	7dfb      	ldrb	r3, [r7, #23]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3718      	adds	r7, #24
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b08a      	sub	sp, #40	; 0x28
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	607a      	str	r2, [r7, #4]
 8008548:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800854a:	2301      	movs	r3, #1
 800854c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800854e:	2300      	movs	r3, #0
 8008550:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800855a:	2b01      	cmp	r3, #1
 800855c:	d101      	bne.n	8008562 <HAL_SPI_TransmitReceive+0x26>
 800855e:	2302      	movs	r3, #2
 8008560:	e1fb      	b.n	800895a <HAL_SPI_TransmitReceive+0x41e>
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2201      	movs	r2, #1
 8008566:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800856a:	f7fb fafb 	bl	8003b64 <HAL_GetTick>
 800856e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008576:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800857e:	887b      	ldrh	r3, [r7, #2]
 8008580:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008582:	887b      	ldrh	r3, [r7, #2]
 8008584:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008586:	7efb      	ldrb	r3, [r7, #27]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d00e      	beq.n	80085aa <HAL_SPI_TransmitReceive+0x6e>
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008592:	d106      	bne.n	80085a2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d102      	bne.n	80085a2 <HAL_SPI_TransmitReceive+0x66>
 800859c:	7efb      	ldrb	r3, [r7, #27]
 800859e:	2b04      	cmp	r3, #4
 80085a0:	d003      	beq.n	80085aa <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80085a2:	2302      	movs	r3, #2
 80085a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80085a8:	e1cd      	b.n	8008946 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d005      	beq.n	80085bc <HAL_SPI_TransmitReceive+0x80>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d002      	beq.n	80085bc <HAL_SPI_TransmitReceive+0x80>
 80085b6:	887b      	ldrh	r3, [r7, #2]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d103      	bne.n	80085c4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80085c2:	e1c0      	b.n	8008946 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	2b04      	cmp	r3, #4
 80085ce:	d003      	beq.n	80085d8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2205      	movs	r2, #5
 80085d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	887a      	ldrh	r2, [r7, #2]
 80085e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	887a      	ldrh	r2, [r7, #2]
 80085f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	68ba      	ldr	r2, [r7, #8]
 80085f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	887a      	ldrh	r2, [r7, #2]
 80085fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	887a      	ldrh	r2, [r7, #2]
 8008604:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2200      	movs	r2, #0
 8008610:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800861a:	d802      	bhi.n	8008622 <HAL_SPI_TransmitReceive+0xe6>
 800861c:	8a3b      	ldrh	r3, [r7, #16]
 800861e:	2b01      	cmp	r3, #1
 8008620:	d908      	bls.n	8008634 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	685a      	ldr	r2, [r3, #4]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008630:	605a      	str	r2, [r3, #4]
 8008632:	e007      	b.n	8008644 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	685a      	ldr	r2, [r3, #4]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008642:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800864e:	2b40      	cmp	r3, #64	; 0x40
 8008650:	d007      	beq.n	8008662 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008660:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800866a:	d97c      	bls.n	8008766 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d002      	beq.n	800867a <HAL_SPI_TransmitReceive+0x13e>
 8008674:	8a7b      	ldrh	r3, [r7, #18]
 8008676:	2b01      	cmp	r3, #1
 8008678:	d169      	bne.n	800874e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800867e:	881a      	ldrh	r2, [r3, #0]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800868a:	1c9a      	adds	r2, r3, #2
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008694:	b29b      	uxth	r3, r3
 8008696:	3b01      	subs	r3, #1
 8008698:	b29a      	uxth	r2, r3
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800869e:	e056      	b.n	800874e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	f003 0302 	and.w	r3, r3, #2
 80086aa:	2b02      	cmp	r3, #2
 80086ac:	d11b      	bne.n	80086e6 <HAL_SPI_TransmitReceive+0x1aa>
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d016      	beq.n	80086e6 <HAL_SPI_TransmitReceive+0x1aa>
 80086b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d113      	bne.n	80086e6 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c2:	881a      	ldrh	r2, [r3, #0]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ce:	1c9a      	adds	r2, r3, #2
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086d8:	b29b      	uxth	r3, r3
 80086da:	3b01      	subs	r3, #1
 80086dc:	b29a      	uxth	r2, r3
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80086e2:	2300      	movs	r3, #0
 80086e4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	f003 0301 	and.w	r3, r3, #1
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d11c      	bne.n	800872e <HAL_SPI_TransmitReceive+0x1f2>
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d016      	beq.n	800872e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	68da      	ldr	r2, [r3, #12]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870a:	b292      	uxth	r2, r2
 800870c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008712:	1c9a      	adds	r2, r3, #2
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800871e:	b29b      	uxth	r3, r3
 8008720:	3b01      	subs	r3, #1
 8008722:	b29a      	uxth	r2, r3
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800872a:	2301      	movs	r3, #1
 800872c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800872e:	f7fb fa19 	bl	8003b64 <HAL_GetTick>
 8008732:	4602      	mov	r2, r0
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	1ad3      	subs	r3, r2, r3
 8008738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800873a:	429a      	cmp	r2, r3
 800873c:	d807      	bhi.n	800874e <HAL_SPI_TransmitReceive+0x212>
 800873e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008744:	d003      	beq.n	800874e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008746:	2303      	movs	r3, #3
 8008748:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800874c:	e0fb      	b.n	8008946 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008752:	b29b      	uxth	r3, r3
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1a3      	bne.n	80086a0 <HAL_SPI_TransmitReceive+0x164>
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800875e:	b29b      	uxth	r3, r3
 8008760:	2b00      	cmp	r3, #0
 8008762:	d19d      	bne.n	80086a0 <HAL_SPI_TransmitReceive+0x164>
 8008764:	e0df      	b.n	8008926 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d003      	beq.n	8008776 <HAL_SPI_TransmitReceive+0x23a>
 800876e:	8a7b      	ldrh	r3, [r7, #18]
 8008770:	2b01      	cmp	r3, #1
 8008772:	f040 80cb 	bne.w	800890c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800877a:	b29b      	uxth	r3, r3
 800877c:	2b01      	cmp	r3, #1
 800877e:	d912      	bls.n	80087a6 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008784:	881a      	ldrh	r2, [r3, #0]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008790:	1c9a      	adds	r2, r3, #2
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800879a:	b29b      	uxth	r3, r3
 800879c:	3b02      	subs	r3, #2
 800879e:	b29a      	uxth	r2, r3
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80087a4:	e0b2      	b.n	800890c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	330c      	adds	r3, #12
 80087b0:	7812      	ldrb	r2, [r2, #0]
 80087b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b8:	1c5a      	adds	r2, r3, #1
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	3b01      	subs	r3, #1
 80087c6:	b29a      	uxth	r2, r3
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087cc:	e09e      	b.n	800890c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	f003 0302 	and.w	r3, r3, #2
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d134      	bne.n	8008846 <HAL_SPI_TransmitReceive+0x30a>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d02f      	beq.n	8008846 <HAL_SPI_TransmitReceive+0x30a>
 80087e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d12c      	bne.n	8008846 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d912      	bls.n	800881c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fa:	881a      	ldrh	r2, [r3, #0]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008806:	1c9a      	adds	r2, r3, #2
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008810:	b29b      	uxth	r3, r3
 8008812:	3b02      	subs	r3, #2
 8008814:	b29a      	uxth	r2, r3
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	87da      	strh	r2, [r3, #62]	; 0x3e
 800881a:	e012      	b.n	8008842 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	330c      	adds	r3, #12
 8008826:	7812      	ldrb	r2, [r2, #0]
 8008828:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882e:	1c5a      	adds	r2, r3, #1
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008838:	b29b      	uxth	r3, r3
 800883a:	3b01      	subs	r3, #1
 800883c:	b29a      	uxth	r2, r3
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008842:	2300      	movs	r3, #0
 8008844:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	f003 0301 	and.w	r3, r3, #1
 8008850:	2b01      	cmp	r3, #1
 8008852:	d148      	bne.n	80088e6 <HAL_SPI_TransmitReceive+0x3aa>
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800885a:	b29b      	uxth	r3, r3
 800885c:	2b00      	cmp	r3, #0
 800885e:	d042      	beq.n	80088e6 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008866:	b29b      	uxth	r3, r3
 8008868:	2b01      	cmp	r3, #1
 800886a:	d923      	bls.n	80088b4 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	68da      	ldr	r2, [r3, #12]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008876:	b292      	uxth	r2, r2
 8008878:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887e:	1c9a      	adds	r2, r3, #2
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800888a:	b29b      	uxth	r3, r3
 800888c:	3b02      	subs	r3, #2
 800888e:	b29a      	uxth	r2, r3
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800889c:	b29b      	uxth	r3, r3
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d81f      	bhi.n	80088e2 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	685a      	ldr	r2, [r3, #4]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80088b0:	605a      	str	r2, [r3, #4]
 80088b2:	e016      	b.n	80088e2 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f103 020c 	add.w	r2, r3, #12
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c0:	7812      	ldrb	r2, [r2, #0]
 80088c2:	b2d2      	uxtb	r2, r2
 80088c4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ca:	1c5a      	adds	r2, r3, #1
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	3b01      	subs	r3, #1
 80088da:	b29a      	uxth	r2, r3
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80088e2:	2301      	movs	r3, #1
 80088e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80088e6:	f7fb f93d 	bl	8003b64 <HAL_GetTick>
 80088ea:	4602      	mov	r2, r0
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	1ad3      	subs	r3, r2, r3
 80088f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d803      	bhi.n	80088fe <HAL_SPI_TransmitReceive+0x3c2>
 80088f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088fc:	d102      	bne.n	8008904 <HAL_SPI_TransmitReceive+0x3c8>
 80088fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008900:	2b00      	cmp	r3, #0
 8008902:	d103      	bne.n	800890c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008904:	2303      	movs	r3, #3
 8008906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800890a:	e01c      	b.n	8008946 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008910:	b29b      	uxth	r3, r3
 8008912:	2b00      	cmp	r3, #0
 8008914:	f47f af5b 	bne.w	80087ce <HAL_SPI_TransmitReceive+0x292>
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800891e:	b29b      	uxth	r3, r3
 8008920:	2b00      	cmp	r3, #0
 8008922:	f47f af54 	bne.w	80087ce <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008926:	69fa      	ldr	r2, [r7, #28]
 8008928:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f000 f988 	bl	8008c40 <SPI_EndRxTxTransaction>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d006      	beq.n	8008944 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2220      	movs	r2, #32
 8008940:	661a      	str	r2, [r3, #96]	; 0x60
 8008942:	e000      	b.n	8008946 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008944:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008956:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800895a:	4618      	mov	r0, r3
 800895c:	3728      	adds	r7, #40	; 0x28
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
	...

08008964 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b088      	sub	sp, #32
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	603b      	str	r3, [r7, #0]
 8008970:	4613      	mov	r3, r2
 8008972:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008974:	f7fb f8f6 	bl	8003b64 <HAL_GetTick>
 8008978:	4602      	mov	r2, r0
 800897a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897c:	1a9b      	subs	r3, r3, r2
 800897e:	683a      	ldr	r2, [r7, #0]
 8008980:	4413      	add	r3, r2
 8008982:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008984:	f7fb f8ee 	bl	8003b64 <HAL_GetTick>
 8008988:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800898a:	4b39      	ldr	r3, [pc, #228]	; (8008a70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	015b      	lsls	r3, r3, #5
 8008990:	0d1b      	lsrs	r3, r3, #20
 8008992:	69fa      	ldr	r2, [r7, #28]
 8008994:	fb02 f303 	mul.w	r3, r2, r3
 8008998:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800899a:	e054      	b.n	8008a46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089a2:	d050      	beq.n	8008a46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80089a4:	f7fb f8de 	bl	8003b64 <HAL_GetTick>
 80089a8:	4602      	mov	r2, r0
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	69fa      	ldr	r2, [r7, #28]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d902      	bls.n	80089ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d13d      	bne.n	8008a36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	685a      	ldr	r2, [r3, #4]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80089c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089d2:	d111      	bne.n	80089f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089dc:	d004      	beq.n	80089e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089e6:	d107      	bne.n	80089f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a00:	d10f      	bne.n	8008a22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a10:	601a      	str	r2, [r3, #0]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2201      	movs	r2, #1
 8008a26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008a32:	2303      	movs	r3, #3
 8008a34:	e017      	b.n	8008a66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d101      	bne.n	8008a40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	3b01      	subs	r3, #1
 8008a44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	689a      	ldr	r2, [r3, #8]
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	4013      	ands	r3, r2
 8008a50:	68ba      	ldr	r2, [r7, #8]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	bf0c      	ite	eq
 8008a56:	2301      	moveq	r3, #1
 8008a58:	2300      	movne	r3, #0
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	79fb      	ldrb	r3, [r7, #7]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d19b      	bne.n	800899c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3720      	adds	r7, #32
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	20000038 	.word	0x20000038

08008a74 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b088      	sub	sp, #32
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
 8008a80:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008a82:	f7fb f86f 	bl	8003b64 <HAL_GetTick>
 8008a86:	4602      	mov	r2, r0
 8008a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8a:	1a9b      	subs	r3, r3, r2
 8008a8c:	683a      	ldr	r2, [r7, #0]
 8008a8e:	4413      	add	r3, r2
 8008a90:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008a92:	f7fb f867 	bl	8003b64 <HAL_GetTick>
 8008a96:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008a98:	4b3c      	ldr	r3, [pc, #240]	; (8008b8c <SPI_WaitFifoStateUntilTimeout+0x118>)
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	4413      	add	r3, r2
 8008aa2:	00da      	lsls	r2, r3, #3
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	0d1b      	lsrs	r3, r3, #20
 8008aa8:	69fa      	ldr	r2, [r7, #28]
 8008aaa:	fb02 f303 	mul.w	r3, r2, r3
 8008aae:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8008ab0:	e05f      	b.n	8008b72 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008ab8:	d106      	bne.n	8008ac8 <SPI_WaitFifoStateUntilTimeout+0x54>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d103      	bne.n	8008ac8 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	330c      	adds	r3, #12
 8008ac6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ace:	d050      	beq.n	8008b72 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008ad0:	f7fb f848 	bl	8003b64 <HAL_GetTick>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	1ad3      	subs	r3, r2, r3
 8008ada:	69fa      	ldr	r2, [r7, #28]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d902      	bls.n	8008ae6 <SPI_WaitFifoStateUntilTimeout+0x72>
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d13d      	bne.n	8008b62 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	685a      	ldr	r2, [r3, #4]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008af4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008afe:	d111      	bne.n	8008b24 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b08:	d004      	beq.n	8008b14 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b12:	d107      	bne.n	8008b24 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b2c:	d10f      	bne.n	8008b4e <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b3c:	601a      	str	r2, [r3, #0]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2201      	movs	r2, #1
 8008b52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008b5e:	2303      	movs	r3, #3
 8008b60:	e010      	b.n	8008b84 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d101      	bne.n	8008b6c <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	689a      	ldr	r2, [r3, #8]
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	4013      	ands	r3, r2
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d197      	bne.n	8008ab2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3720      	adds	r7, #32
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	20000038 	.word	0x20000038

08008b90 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b086      	sub	sp, #24
 8008b94:	af02      	add	r7, sp, #8
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ba4:	d111      	bne.n	8008bca <SPI_EndRxTransaction+0x3a>
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bae:	d004      	beq.n	8008bba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bb8:	d107      	bne.n	8008bca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bc8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	9300      	str	r3, [sp, #0]
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	2180      	movs	r1, #128	; 0x80
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f7ff fec5 	bl	8008964 <SPI_WaitFlagStateUntilTimeout>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d007      	beq.n	8008bf0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008be4:	f043 0220 	orr.w	r2, r3, #32
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008bec:	2303      	movs	r3, #3
 8008bee:	e023      	b.n	8008c38 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008bf8:	d11d      	bne.n	8008c36 <SPI_EndRxTransaction+0xa6>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c02:	d004      	beq.n	8008c0e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c0c:	d113      	bne.n	8008c36 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	9300      	str	r3, [sp, #0]
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	f7ff ff2a 	bl	8008a74 <SPI_WaitFifoStateUntilTimeout>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d007      	beq.n	8008c36 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c2a:	f043 0220 	orr.w	r2, r3, #32
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008c32:	2303      	movs	r3, #3
 8008c34:	e000      	b.n	8008c38 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008c36:	2300      	movs	r3, #0
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3710      	adds	r7, #16
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b086      	sub	sp, #24
 8008c44:	af02      	add	r7, sp, #8
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	9300      	str	r3, [sp, #0]
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008c58:	68f8      	ldr	r0, [r7, #12]
 8008c5a:	f7ff ff0b 	bl	8008a74 <SPI_WaitFifoStateUntilTimeout>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d007      	beq.n	8008c74 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c68:	f043 0220 	orr.w	r2, r3, #32
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008c70:	2303      	movs	r3, #3
 8008c72:	e027      	b.n	8008cc4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	9300      	str	r3, [sp, #0]
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	2180      	movs	r1, #128	; 0x80
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	f7ff fe70 	bl	8008964 <SPI_WaitFlagStateUntilTimeout>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d007      	beq.n	8008c9a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c8e:	f043 0220 	orr.w	r2, r3, #32
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008c96:	2303      	movs	r3, #3
 8008c98:	e014      	b.n	8008cc4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	f7ff fee4 	bl	8008a74 <SPI_WaitFifoStateUntilTimeout>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d007      	beq.n	8008cc2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cb6:	f043 0220 	orr.w	r2, r3, #32
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e000      	b.n	8008cc4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d101      	bne.n	8008cde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e049      	b.n	8008d72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d106      	bne.n	8008cf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f7fa fd3c 	bl	8003770 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2202      	movs	r2, #2
 8008cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	3304      	adds	r3, #4
 8008d08:	4619      	mov	r1, r3
 8008d0a:	4610      	mov	r0, r2
 8008d0c:	f000 f9cc 	bl	80090a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3708      	adds	r7, #8
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
	...

08008d7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b085      	sub	sp, #20
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d001      	beq.n	8008d94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	e036      	b.n	8008e02 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2202      	movs	r2, #2
 8008d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	68da      	ldr	r2, [r3, #12]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f042 0201 	orr.w	r2, r2, #1
 8008daa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a17      	ldr	r2, [pc, #92]	; (8008e10 <HAL_TIM_Base_Start_IT+0x94>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d004      	beq.n	8008dc0 <HAL_TIM_Base_Start_IT+0x44>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dbe:	d115      	bne.n	8008dec <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	689a      	ldr	r2, [r3, #8]
 8008dc6:	4b13      	ldr	r3, [pc, #76]	; (8008e14 <HAL_TIM_Base_Start_IT+0x98>)
 8008dc8:	4013      	ands	r3, r2
 8008dca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2b06      	cmp	r3, #6
 8008dd0:	d015      	beq.n	8008dfe <HAL_TIM_Base_Start_IT+0x82>
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dd8:	d011      	beq.n	8008dfe <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f042 0201 	orr.w	r2, r2, #1
 8008de8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dea:	e008      	b.n	8008dfe <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f042 0201 	orr.w	r2, r2, #1
 8008dfa:	601a      	str	r2, [r3, #0]
 8008dfc:	e000      	b.n	8008e00 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dfe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3714      	adds	r7, #20
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	40012c00 	.word	0x40012c00
 8008e14:	00010007 	.word	0x00010007

08008e18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	f003 0302 	and.w	r3, r3, #2
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	d122      	bne.n	8008e74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	f003 0302 	and.w	r3, r3, #2
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d11b      	bne.n	8008e74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f06f 0202 	mvn.w	r2, #2
 8008e44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	699b      	ldr	r3, [r3, #24]
 8008e52:	f003 0303 	and.w	r3, r3, #3
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d003      	beq.n	8008e62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f905 	bl	800906a <HAL_TIM_IC_CaptureCallback>
 8008e60:	e005      	b.n	8008e6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 f8f7 	bl	8009056 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 f908 	bl	800907e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	691b      	ldr	r3, [r3, #16]
 8008e7a:	f003 0304 	and.w	r3, r3, #4
 8008e7e:	2b04      	cmp	r3, #4
 8008e80:	d122      	bne.n	8008ec8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	f003 0304 	and.w	r3, r3, #4
 8008e8c:	2b04      	cmp	r3, #4
 8008e8e:	d11b      	bne.n	8008ec8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f06f 0204 	mvn.w	r2, #4
 8008e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2202      	movs	r2, #2
 8008e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	699b      	ldr	r3, [r3, #24]
 8008ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d003      	beq.n	8008eb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f8db 	bl	800906a <HAL_TIM_IC_CaptureCallback>
 8008eb4:	e005      	b.n	8008ec2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 f8cd 	bl	8009056 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 f8de 	bl	800907e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	f003 0308 	and.w	r3, r3, #8
 8008ed2:	2b08      	cmp	r3, #8
 8008ed4:	d122      	bne.n	8008f1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	f003 0308 	and.w	r3, r3, #8
 8008ee0:	2b08      	cmp	r3, #8
 8008ee2:	d11b      	bne.n	8008f1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f06f 0208 	mvn.w	r2, #8
 8008eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2204      	movs	r2, #4
 8008ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	69db      	ldr	r3, [r3, #28]
 8008efa:	f003 0303 	and.w	r3, r3, #3
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d003      	beq.n	8008f0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f8b1 	bl	800906a <HAL_TIM_IC_CaptureCallback>
 8008f08:	e005      	b.n	8008f16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 f8a3 	bl	8009056 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 f8b4 	bl	800907e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	691b      	ldr	r3, [r3, #16]
 8008f22:	f003 0310 	and.w	r3, r3, #16
 8008f26:	2b10      	cmp	r3, #16
 8008f28:	d122      	bne.n	8008f70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	f003 0310 	and.w	r3, r3, #16
 8008f34:	2b10      	cmp	r3, #16
 8008f36:	d11b      	bne.n	8008f70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f06f 0210 	mvn.w	r2, #16
 8008f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2208      	movs	r2, #8
 8008f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	69db      	ldr	r3, [r3, #28]
 8008f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d003      	beq.n	8008f5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 f887 	bl	800906a <HAL_TIM_IC_CaptureCallback>
 8008f5c:	e005      	b.n	8008f6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 f879 	bl	8009056 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 f88a 	bl	800907e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	691b      	ldr	r3, [r3, #16]
 8008f76:	f003 0301 	and.w	r3, r3, #1
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d10e      	bne.n	8008f9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	f003 0301 	and.w	r3, r3, #1
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d107      	bne.n	8008f9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f06f 0201 	mvn.w	r2, #1
 8008f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f7fa f80c 	bl	8002fb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fa6:	2b80      	cmp	r3, #128	; 0x80
 8008fa8:	d10e      	bne.n	8008fc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fb4:	2b80      	cmp	r3, #128	; 0x80
 8008fb6:	d107      	bne.n	8008fc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 f8de 	bl	8009184 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fd6:	d10e      	bne.n	8008ff6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fe2:	2b80      	cmp	r3, #128	; 0x80
 8008fe4:	d107      	bne.n	8008ff6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 f8d1 	bl	8009198 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009000:	2b40      	cmp	r3, #64	; 0x40
 8009002:	d10e      	bne.n	8009022 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800900e:	2b40      	cmp	r3, #64	; 0x40
 8009010:	d107      	bne.n	8009022 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800901a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 f838 	bl	8009092 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	691b      	ldr	r3, [r3, #16]
 8009028:	f003 0320 	and.w	r3, r3, #32
 800902c:	2b20      	cmp	r3, #32
 800902e:	d10e      	bne.n	800904e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	f003 0320 	and.w	r3, r3, #32
 800903a:	2b20      	cmp	r3, #32
 800903c:	d107      	bne.n	800904e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f06f 0220 	mvn.w	r2, #32
 8009046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 f891 	bl	8009170 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800904e:	bf00      	nop
 8009050:	3708      	adds	r7, #8
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009056:	b480      	push	{r7}
 8009058:	b083      	sub	sp, #12
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800905e:	bf00      	nop
 8009060:	370c      	adds	r7, #12
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr

0800906a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800906a:	b480      	push	{r7}
 800906c:	b083      	sub	sp, #12
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009072:	bf00      	nop
 8009074:	370c      	adds	r7, #12
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr

0800907e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800907e:	b480      	push	{r7}
 8009080:	b083      	sub	sp, #12
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009086:	bf00      	nop
 8009088:	370c      	adds	r7, #12
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr

08009092 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009092:	b480      	push	{r7}
 8009094:	b083      	sub	sp, #12
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800909a:	bf00      	nop
 800909c:	370c      	adds	r7, #12
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
	...

080090a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a2a      	ldr	r2, [pc, #168]	; (8009164 <TIM_Base_SetConfig+0xbc>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d003      	beq.n	80090c8 <TIM_Base_SetConfig+0x20>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090c6:	d108      	bne.n	80090da <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	68fa      	ldr	r2, [r7, #12]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	4a21      	ldr	r2, [pc, #132]	; (8009164 <TIM_Base_SetConfig+0xbc>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d00b      	beq.n	80090fa <TIM_Base_SetConfig+0x52>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090e8:	d007      	beq.n	80090fa <TIM_Base_SetConfig+0x52>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4a1e      	ldr	r2, [pc, #120]	; (8009168 <TIM_Base_SetConfig+0xc0>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d003      	beq.n	80090fa <TIM_Base_SetConfig+0x52>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4a1d      	ldr	r2, [pc, #116]	; (800916c <TIM_Base_SetConfig+0xc4>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d108      	bne.n	800910c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009100:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	68fa      	ldr	r2, [r7, #12]
 8009108:	4313      	orrs	r3, r2
 800910a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	695b      	ldr	r3, [r3, #20]
 8009116:	4313      	orrs	r3, r2
 8009118:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	68fa      	ldr	r2, [r7, #12]
 800911e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	689a      	ldr	r2, [r3, #8]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4a0c      	ldr	r2, [pc, #48]	; (8009164 <TIM_Base_SetConfig+0xbc>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d007      	beq.n	8009148 <TIM_Base_SetConfig+0xa0>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4a0b      	ldr	r2, [pc, #44]	; (8009168 <TIM_Base_SetConfig+0xc0>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d003      	beq.n	8009148 <TIM_Base_SetConfig+0xa0>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4a0a      	ldr	r2, [pc, #40]	; (800916c <TIM_Base_SetConfig+0xc4>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d103      	bne.n	8009150 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	691a      	ldr	r2, [r3, #16]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	615a      	str	r2, [r3, #20]
}
 8009156:	bf00      	nop
 8009158:	3714      	adds	r7, #20
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop
 8009164:	40012c00 	.word	0x40012c00
 8009168:	40014400 	.word	0x40014400
 800916c:	40014800 	.word	0x40014800

08009170 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009178:	bf00      	nop
 800917a:	370c      	adds	r7, #12
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800918c:	bf00      	nop
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80091a0:	bf00      	nop
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <LL_RCC_GetUSARTClockSource>:
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80091b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4013      	ands	r3, r2
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <LL_RCC_GetLPUARTClockSource>:
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80091d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4013      	ands	r3, r2
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d101      	bne.n	80091fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	e042      	b.n	8009284 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009204:	2b00      	cmp	r3, #0
 8009206:	d106      	bne.n	8009216 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f7fa fb47 	bl	80038a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2224      	movs	r2, #36	; 0x24
 800921a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f022 0201 	bic.w	r2, r2, #1
 800922c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f82c 	bl	800928c <UART_SetConfig>
 8009234:	4603      	mov	r3, r0
 8009236:	2b01      	cmp	r3, #1
 8009238:	d101      	bne.n	800923e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	e022      	b.n	8009284 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009242:	2b00      	cmp	r3, #0
 8009244:	d002      	beq.n	800924c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 fa2e 	bl	80096a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	685a      	ldr	r2, [r3, #4]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800925a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	689a      	ldr	r2, [r3, #8]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800926a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f042 0201 	orr.w	r2, r2, #1
 800927a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 fab5 	bl	80097ec <UART_CheckIdleState>
 8009282:	4603      	mov	r3, r0
}
 8009284:	4618      	mov	r0, r3
 8009286:	3708      	adds	r7, #8
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800928c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009290:	b088      	sub	sp, #32
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009296:	2300      	movs	r3, #0
 8009298:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	689a      	ldr	r2, [r3, #8]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	691b      	ldr	r3, [r3, #16]
 80092a2:	431a      	orrs	r2, r3
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	695b      	ldr	r3, [r3, #20]
 80092a8:	431a      	orrs	r2, r3
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	69db      	ldr	r3, [r3, #28]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092b6:	69fa      	ldr	r2, [r7, #28]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	4ba4      	ldr	r3, [pc, #656]	; (8009554 <UART_SetConfig+0x2c8>)
 80092c4:	4013      	ands	r3, r2
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	6812      	ldr	r2, [r2, #0]
 80092ca:	69f9      	ldr	r1, [r7, #28]
 80092cc:	430b      	orrs	r3, r1
 80092ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	68da      	ldr	r2, [r3, #12]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	430a      	orrs	r2, r1
 80092e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	699b      	ldr	r3, [r3, #24]
 80092ea:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a99      	ldr	r2, [pc, #612]	; (8009558 <UART_SetConfig+0x2cc>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d004      	beq.n	8009300 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6a1b      	ldr	r3, [r3, #32]
 80092fa:	69fa      	ldr	r2, [r7, #28]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800930a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	6812      	ldr	r2, [r2, #0]
 8009312:	69f9      	ldr	r1, [r7, #28]
 8009314:	430b      	orrs	r3, r1
 8009316:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800931e:	f023 010f 	bic.w	r1, r3, #15
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	430a      	orrs	r2, r1
 800932c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a8a      	ldr	r2, [pc, #552]	; (800955c <UART_SetConfig+0x2d0>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d121      	bne.n	800937c <UART_SetConfig+0xf0>
 8009338:	2003      	movs	r0, #3
 800933a:	f7ff ff37 	bl	80091ac <LL_RCC_GetUSARTClockSource>
 800933e:	4603      	mov	r3, r0
 8009340:	2b03      	cmp	r3, #3
 8009342:	d817      	bhi.n	8009374 <UART_SetConfig+0xe8>
 8009344:	a201      	add	r2, pc, #4	; (adr r2, 800934c <UART_SetConfig+0xc0>)
 8009346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800934a:	bf00      	nop
 800934c:	0800935d 	.word	0x0800935d
 8009350:	08009369 	.word	0x08009369
 8009354:	08009363 	.word	0x08009363
 8009358:	0800936f 	.word	0x0800936f
 800935c:	2301      	movs	r3, #1
 800935e:	76fb      	strb	r3, [r7, #27]
 8009360:	e038      	b.n	80093d4 <UART_SetConfig+0x148>
 8009362:	2302      	movs	r3, #2
 8009364:	76fb      	strb	r3, [r7, #27]
 8009366:	e035      	b.n	80093d4 <UART_SetConfig+0x148>
 8009368:	2304      	movs	r3, #4
 800936a:	76fb      	strb	r3, [r7, #27]
 800936c:	e032      	b.n	80093d4 <UART_SetConfig+0x148>
 800936e:	2308      	movs	r3, #8
 8009370:	76fb      	strb	r3, [r7, #27]
 8009372:	e02f      	b.n	80093d4 <UART_SetConfig+0x148>
 8009374:	2310      	movs	r3, #16
 8009376:	76fb      	strb	r3, [r7, #27]
 8009378:	bf00      	nop
 800937a:	e02b      	b.n	80093d4 <UART_SetConfig+0x148>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a75      	ldr	r2, [pc, #468]	; (8009558 <UART_SetConfig+0x2cc>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d124      	bne.n	80093d0 <UART_SetConfig+0x144>
 8009386:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800938a:	f7ff ff1f 	bl	80091cc <LL_RCC_GetLPUARTClockSource>
 800938e:	4603      	mov	r3, r0
 8009390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009394:	d012      	beq.n	80093bc <UART_SetConfig+0x130>
 8009396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800939a:	d802      	bhi.n	80093a2 <UART_SetConfig+0x116>
 800939c:	2b00      	cmp	r3, #0
 800939e:	d007      	beq.n	80093b0 <UART_SetConfig+0x124>
 80093a0:	e012      	b.n	80093c8 <UART_SetConfig+0x13c>
 80093a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093a6:	d006      	beq.n	80093b6 <UART_SetConfig+0x12a>
 80093a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80093ac:	d009      	beq.n	80093c2 <UART_SetConfig+0x136>
 80093ae:	e00b      	b.n	80093c8 <UART_SetConfig+0x13c>
 80093b0:	2300      	movs	r3, #0
 80093b2:	76fb      	strb	r3, [r7, #27]
 80093b4:	e00e      	b.n	80093d4 <UART_SetConfig+0x148>
 80093b6:	2302      	movs	r3, #2
 80093b8:	76fb      	strb	r3, [r7, #27]
 80093ba:	e00b      	b.n	80093d4 <UART_SetConfig+0x148>
 80093bc:	2304      	movs	r3, #4
 80093be:	76fb      	strb	r3, [r7, #27]
 80093c0:	e008      	b.n	80093d4 <UART_SetConfig+0x148>
 80093c2:	2308      	movs	r3, #8
 80093c4:	76fb      	strb	r3, [r7, #27]
 80093c6:	e005      	b.n	80093d4 <UART_SetConfig+0x148>
 80093c8:	2310      	movs	r3, #16
 80093ca:	76fb      	strb	r3, [r7, #27]
 80093cc:	bf00      	nop
 80093ce:	e001      	b.n	80093d4 <UART_SetConfig+0x148>
 80093d0:	2310      	movs	r3, #16
 80093d2:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a5f      	ldr	r2, [pc, #380]	; (8009558 <UART_SetConfig+0x2cc>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	f040 808e 	bne.w	80094fc <UART_SetConfig+0x270>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80093e0:	7efb      	ldrb	r3, [r7, #27]
 80093e2:	2b08      	cmp	r3, #8
 80093e4:	d823      	bhi.n	800942e <UART_SetConfig+0x1a2>
 80093e6:	a201      	add	r2, pc, #4	; (adr r2, 80093ec <UART_SetConfig+0x160>)
 80093e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ec:	08009411 	.word	0x08009411
 80093f0:	0800942f 	.word	0x0800942f
 80093f4:	08009419 	.word	0x08009419
 80093f8:	0800942f 	.word	0x0800942f
 80093fc:	0800941f 	.word	0x0800941f
 8009400:	0800942f 	.word	0x0800942f
 8009404:	0800942f 	.word	0x0800942f
 8009408:	0800942f 	.word	0x0800942f
 800940c:	08009427 	.word	0x08009427
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009410:	f7fd feae 	bl	8007170 <HAL_RCC_GetPCLK1Freq>
 8009414:	6178      	str	r0, [r7, #20]
        break;
 8009416:	e00f      	b.n	8009438 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009418:	4b51      	ldr	r3, [pc, #324]	; (8009560 <UART_SetConfig+0x2d4>)
 800941a:	617b      	str	r3, [r7, #20]
        break;
 800941c:	e00c      	b.n	8009438 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800941e:	f7fd fe29 	bl	8007074 <HAL_RCC_GetSysClockFreq>
 8009422:	6178      	str	r0, [r7, #20]
        break;
 8009424:	e008      	b.n	8009438 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800942a:	617b      	str	r3, [r7, #20]
        break;
 800942c:	e004      	b.n	8009438 <UART_SetConfig+0x1ac>
      default:
        pclk = 0U;
 800942e:	2300      	movs	r3, #0
 8009430:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009432:	2301      	movs	r3, #1
 8009434:	76bb      	strb	r3, [r7, #26]
        break;
 8009436:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	2b00      	cmp	r3, #0
 800943c:	f000 811c 	beq.w	8009678 <UART_SetConfig+0x3ec>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009444:	4a47      	ldr	r2, [pc, #284]	; (8009564 <UART_SetConfig+0x2d8>)
 8009446:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800944a:	461a      	mov	r2, r3
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009452:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	685a      	ldr	r2, [r3, #4]
 8009458:	4613      	mov	r3, r2
 800945a:	005b      	lsls	r3, r3, #1
 800945c:	4413      	add	r3, r2
 800945e:	68ba      	ldr	r2, [r7, #8]
 8009460:	429a      	cmp	r2, r3
 8009462:	d305      	bcc.n	8009470 <UART_SetConfig+0x1e4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800946a:	68ba      	ldr	r2, [r7, #8]
 800946c:	429a      	cmp	r2, r3
 800946e:	d902      	bls.n	8009476 <UART_SetConfig+0x1ea>
      {
        ret = HAL_ERROR;
 8009470:	2301      	movs	r3, #1
 8009472:	76bb      	strb	r3, [r7, #26]
 8009474:	e100      	b.n	8009678 <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	4618      	mov	r0, r3
 800947a:	f04f 0100 	mov.w	r1, #0
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009482:	4a38      	ldr	r2, [pc, #224]	; (8009564 <UART_SetConfig+0x2d8>)
 8009484:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009488:	b29b      	uxth	r3, r3
 800948a:	f04f 0400 	mov.w	r4, #0
 800948e:	461a      	mov	r2, r3
 8009490:	4623      	mov	r3, r4
 8009492:	f7f6 fe7b 	bl	800018c <__aeabi_uldivmod>
 8009496:	4603      	mov	r3, r0
 8009498:	460c      	mov	r4, r1
 800949a:	4619      	mov	r1, r3
 800949c:	4622      	mov	r2, r4
 800949e:	f04f 0300 	mov.w	r3, #0
 80094a2:	f04f 0400 	mov.w	r4, #0
 80094a6:	0214      	lsls	r4, r2, #8
 80094a8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80094ac:	020b      	lsls	r3, r1, #8
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	6852      	ldr	r2, [r2, #4]
 80094b2:	0852      	lsrs	r2, r2, #1
 80094b4:	4611      	mov	r1, r2
 80094b6:	f04f 0200 	mov.w	r2, #0
 80094ba:	eb13 0b01 	adds.w	fp, r3, r1
 80094be:	eb44 0c02 	adc.w	ip, r4, r2
 80094c2:	4658      	mov	r0, fp
 80094c4:	4661      	mov	r1, ip
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	f04f 0400 	mov.w	r4, #0
 80094ce:	461a      	mov	r2, r3
 80094d0:	4623      	mov	r3, r4
 80094d2:	f7f6 fe5b 	bl	800018c <__aeabi_uldivmod>
 80094d6:	4603      	mov	r3, r0
 80094d8:	460c      	mov	r4, r1
 80094da:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094e2:	d308      	bcc.n	80094f6 <UART_SetConfig+0x26a>
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094ea:	d204      	bcs.n	80094f6 <UART_SetConfig+0x26a>
        {
          huart->Instance->BRR = usartdiv;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	693a      	ldr	r2, [r7, #16]
 80094f2:	60da      	str	r2, [r3, #12]
 80094f4:	e0c0      	b.n	8009678 <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	76bb      	strb	r3, [r7, #26]
 80094fa:	e0bd      	b.n	8009678 <UART_SetConfig+0x3ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	69db      	ldr	r3, [r3, #28]
 8009500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009504:	d169      	bne.n	80095da <UART_SetConfig+0x34e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8009506:	7efb      	ldrb	r3, [r7, #27]
 8009508:	3b01      	subs	r3, #1
 800950a:	2b07      	cmp	r3, #7
 800950c:	d82c      	bhi.n	8009568 <UART_SetConfig+0x2dc>
 800950e:	a201      	add	r2, pc, #4	; (adr r2, 8009514 <UART_SetConfig+0x288>)
 8009510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009514:	08009535 	.word	0x08009535
 8009518:	0800953d 	.word	0x0800953d
 800951c:	08009569 	.word	0x08009569
 8009520:	08009543 	.word	0x08009543
 8009524:	08009569 	.word	0x08009569
 8009528:	08009569 	.word	0x08009569
 800952c:	08009569 	.word	0x08009569
 8009530:	0800954b 	.word	0x0800954b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009534:	f7fd fe32 	bl	800719c <HAL_RCC_GetPCLK2Freq>
 8009538:	6178      	str	r0, [r7, #20]
        break;
 800953a:	e01a      	b.n	8009572 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800953c:	4b08      	ldr	r3, [pc, #32]	; (8009560 <UART_SetConfig+0x2d4>)
 800953e:	617b      	str	r3, [r7, #20]
        break;
 8009540:	e017      	b.n	8009572 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009542:	f7fd fd97 	bl	8007074 <HAL_RCC_GetSysClockFreq>
 8009546:	6178      	str	r0, [r7, #20]
        break;
 8009548:	e013      	b.n	8009572 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800954a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800954e:	617b      	str	r3, [r7, #20]
        break;
 8009550:	e00f      	b.n	8009572 <UART_SetConfig+0x2e6>
 8009552:	bf00      	nop
 8009554:	cfff69f3 	.word	0xcfff69f3
 8009558:	40008000 	.word	0x40008000
 800955c:	40013800 	.word	0x40013800
 8009560:	00f42400 	.word	0x00f42400
 8009564:	0800d0e8 	.word	0x0800d0e8
      default:
        pclk = 0U;
 8009568:	2300      	movs	r3, #0
 800956a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	76bb      	strb	r3, [r7, #26]
        break;
 8009570:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d07f      	beq.n	8009678 <UART_SetConfig+0x3ec>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957c:	4a48      	ldr	r2, [pc, #288]	; (80096a0 <UART_SetConfig+0x414>)
 800957e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009582:	461a      	mov	r2, r3
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	fbb3 f3f2 	udiv	r3, r3, r2
 800958a:	005a      	lsls	r2, r3, #1
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	085b      	lsrs	r3, r3, #1
 8009592:	441a      	add	r2, r3
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	fbb2 f3f3 	udiv	r3, r2, r3
 800959c:	b29b      	uxth	r3, r3
 800959e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	2b0f      	cmp	r3, #15
 80095a4:	d916      	bls.n	80095d4 <UART_SetConfig+0x348>
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095ac:	d212      	bcs.n	80095d4 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	f023 030f 	bic.w	r3, r3, #15
 80095b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	085b      	lsrs	r3, r3, #1
 80095bc:	b29b      	uxth	r3, r3
 80095be:	f003 0307 	and.w	r3, r3, #7
 80095c2:	b29a      	uxth	r2, r3
 80095c4:	89fb      	ldrh	r3, [r7, #14]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	89fa      	ldrh	r2, [r7, #14]
 80095d0:	60da      	str	r2, [r3, #12]
 80095d2:	e051      	b.n	8009678 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	76bb      	strb	r3, [r7, #26]
 80095d8:	e04e      	b.n	8009678 <UART_SetConfig+0x3ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80095da:	7efb      	ldrb	r3, [r7, #27]
 80095dc:	3b01      	subs	r3, #1
 80095de:	2b07      	cmp	r3, #7
 80095e0:	d821      	bhi.n	8009626 <UART_SetConfig+0x39a>
 80095e2:	a201      	add	r2, pc, #4	; (adr r2, 80095e8 <UART_SetConfig+0x35c>)
 80095e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e8:	08009609 	.word	0x08009609
 80095ec:	08009611 	.word	0x08009611
 80095f0:	08009627 	.word	0x08009627
 80095f4:	08009617 	.word	0x08009617
 80095f8:	08009627 	.word	0x08009627
 80095fc:	08009627 	.word	0x08009627
 8009600:	08009627 	.word	0x08009627
 8009604:	0800961f 	.word	0x0800961f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009608:	f7fd fdc8 	bl	800719c <HAL_RCC_GetPCLK2Freq>
 800960c:	6178      	str	r0, [r7, #20]
        break;
 800960e:	e00f      	b.n	8009630 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009610:	4b24      	ldr	r3, [pc, #144]	; (80096a4 <UART_SetConfig+0x418>)
 8009612:	617b      	str	r3, [r7, #20]
        break;
 8009614:	e00c      	b.n	8009630 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009616:	f7fd fd2d 	bl	8007074 <HAL_RCC_GetSysClockFreq>
 800961a:	6178      	str	r0, [r7, #20]
        break;
 800961c:	e008      	b.n	8009630 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800961e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009622:	617b      	str	r3, [r7, #20]
        break;
 8009624:	e004      	b.n	8009630 <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 8009626:	2300      	movs	r3, #0
 8009628:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	76bb      	strb	r3, [r7, #26]
        break;
 800962e:	bf00      	nop
    }

    if (pclk != 0U)
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d020      	beq.n	8009678 <UART_SetConfig+0x3ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800963a:	4a19      	ldr	r2, [pc, #100]	; (80096a0 <UART_SetConfig+0x414>)
 800963c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009640:	461a      	mov	r2, r3
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	fbb3 f2f2 	udiv	r2, r3, r2
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	085b      	lsrs	r3, r3, #1
 800964e:	441a      	add	r2, r3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	fbb2 f3f3 	udiv	r3, r2, r3
 8009658:	b29b      	uxth	r3, r3
 800965a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	2b0f      	cmp	r3, #15
 8009660:	d908      	bls.n	8009674 <UART_SetConfig+0x3e8>
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009668:	d204      	bcs.n	8009674 <UART_SetConfig+0x3e8>
      {
        huart->Instance->BRR = usartdiv;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	693a      	ldr	r2, [r7, #16]
 8009670:	60da      	str	r2, [r3, #12]
 8009672:	e001      	b.n	8009678 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8009674:	2301      	movs	r3, #1
 8009676:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2201      	movs	r2, #1
 800967c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009694:	7ebb      	ldrb	r3, [r7, #26]
}
 8009696:	4618      	mov	r0, r3
 8009698:	3720      	adds	r7, #32
 800969a:	46bd      	mov	sp, r7
 800969c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80096a0:	0800d0e8 	.word	0x0800d0e8
 80096a4:	00f42400 	.word	0x00f42400

080096a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096b4:	f003 0301 	and.w	r3, r3, #1
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00a      	beq.n	80096d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	430a      	orrs	r2, r1
 80096d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d6:	f003 0302 	and.w	r3, r3, #2
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d00a      	beq.n	80096f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	430a      	orrs	r2, r1
 80096f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f8:	f003 0304 	and.w	r3, r3, #4
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d00a      	beq.n	8009716 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	430a      	orrs	r2, r1
 8009714:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800971a:	f003 0308 	and.w	r3, r3, #8
 800971e:	2b00      	cmp	r3, #0
 8009720:	d00a      	beq.n	8009738 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	430a      	orrs	r2, r1
 8009736:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800973c:	f003 0310 	and.w	r3, r3, #16
 8009740:	2b00      	cmp	r3, #0
 8009742:	d00a      	beq.n	800975a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	689b      	ldr	r3, [r3, #8]
 800974a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	430a      	orrs	r2, r1
 8009758:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800975e:	f003 0320 	and.w	r3, r3, #32
 8009762:	2b00      	cmp	r3, #0
 8009764:	d00a      	beq.n	800977c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	430a      	orrs	r2, r1
 800977a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009784:	2b00      	cmp	r3, #0
 8009786:	d01a      	beq.n	80097be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	430a      	orrs	r2, r1
 800979c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097a6:	d10a      	bne.n	80097be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	430a      	orrs	r2, r1
 80097bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00a      	beq.n	80097e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	430a      	orrs	r2, r1
 80097de:	605a      	str	r2, [r3, #4]
  }
}
 80097e0:	bf00      	nop
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b086      	sub	sp, #24
 80097f0:	af02      	add	r7, sp, #8
 80097f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80097fc:	f7fa f9b2 	bl	8003b64 <HAL_GetTick>
 8009800:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f003 0308 	and.w	r3, r3, #8
 800980c:	2b08      	cmp	r3, #8
 800980e:	d10e      	bne.n	800982e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009810:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009814:	9300      	str	r3, [sp, #0]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2200      	movs	r2, #0
 800981a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 f82c 	bl	800987c <UART_WaitOnFlagUntilTimeout>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d001      	beq.n	800982e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800982a:	2303      	movs	r3, #3
 800982c:	e022      	b.n	8009874 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f003 0304 	and.w	r3, r3, #4
 8009838:	2b04      	cmp	r3, #4
 800983a:	d10e      	bne.n	800985a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800983c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009840:	9300      	str	r3, [sp, #0]
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2200      	movs	r2, #0
 8009846:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 f816 	bl	800987c <UART_WaitOnFlagUntilTimeout>
 8009850:	4603      	mov	r3, r0
 8009852:	2b00      	cmp	r3, #0
 8009854:	d001      	beq.n	800985a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009856:	2303      	movs	r3, #3
 8009858:	e00c      	b.n	8009874 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2220      	movs	r2, #32
 800985e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2220      	movs	r2, #32
 8009866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009872:	2300      	movs	r3, #0
}
 8009874:	4618      	mov	r0, r3
 8009876:	3710      	adds	r7, #16
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	603b      	str	r3, [r7, #0]
 8009888:	4613      	mov	r3, r2
 800988a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800988c:	e062      	b.n	8009954 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009894:	d05e      	beq.n	8009954 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009896:	f7fa f965 	bl	8003b64 <HAL_GetTick>
 800989a:	4602      	mov	r2, r0
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	1ad3      	subs	r3, r2, r3
 80098a0:	69ba      	ldr	r2, [r7, #24]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d302      	bcc.n	80098ac <UART_WaitOnFlagUntilTimeout+0x30>
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d11d      	bne.n	80098e8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80098ba:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	689a      	ldr	r2, [r3, #8]
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f022 0201 	bic.w	r2, r2, #1
 80098ca:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2220      	movs	r2, #32
 80098d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2220      	movs	r2, #32
 80098d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2200      	movs	r2, #0
 80098e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80098e4:	2303      	movs	r3, #3
 80098e6:	e045      	b.n	8009974 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f003 0304 	and.w	r3, r3, #4
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d02e      	beq.n	8009954 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	69db      	ldr	r3, [r3, #28]
 80098fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009904:	d126      	bne.n	8009954 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800990e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800991e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	689a      	ldr	r2, [r3, #8]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f022 0201 	bic.w	r2, r2, #1
 800992e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2220      	movs	r2, #32
 8009934:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2220      	movs	r2, #32
 800993c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2220      	movs	r2, #32
 8009944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2200      	movs	r2, #0
 800994c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8009950:	2303      	movs	r3, #3
 8009952:	e00f      	b.n	8009974 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	69da      	ldr	r2, [r3, #28]
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	4013      	ands	r3, r2
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	429a      	cmp	r2, r3
 8009962:	bf0c      	ite	eq
 8009964:	2301      	moveq	r3, #1
 8009966:	2300      	movne	r3, #0
 8009968:	b2db      	uxtb	r3, r3
 800996a:	461a      	mov	r2, r3
 800996c:	79fb      	ldrb	r3, [r7, #7]
 800996e:	429a      	cmp	r2, r3
 8009970:	d08d      	beq.n	800988e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009972:	2300      	movs	r3, #0
}
 8009974:	4618      	mov	r0, r3
 8009976:	3710      	adds	r7, #16
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800998a:	2b01      	cmp	r3, #1
 800998c:	d101      	bne.n	8009992 <HAL_UARTEx_DisableFifoMode+0x16>
 800998e:	2302      	movs	r3, #2
 8009990:	e027      	b.n	80099e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2201      	movs	r2, #1
 8009996:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2224      	movs	r2, #36	; 0x24
 800999e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f022 0201 	bic.w	r2, r2, #1
 80099b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80099c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	68fa      	ldr	r2, [r7, #12]
 80099ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2220      	movs	r2, #32
 80099d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3714      	adds	r7, #20
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr

080099ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b084      	sub	sp, #16
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
 80099f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d101      	bne.n	8009a06 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009a02:	2302      	movs	r3, #2
 8009a04:	e02d      	b.n	8009a62 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2201      	movs	r2, #1
 8009a0a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2224      	movs	r2, #36	; 0x24
 8009a12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f022 0201 	bic.w	r2, r2, #1
 8009a2c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	683a      	ldr	r2, [r7, #0]
 8009a3e:	430a      	orrs	r2, r1
 8009a40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 f850 	bl	8009ae8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2220      	movs	r2, #32
 8009a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009a60:	2300      	movs	r3, #0
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3710      	adds	r7, #16
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b084      	sub	sp, #16
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
 8009a72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	d101      	bne.n	8009a82 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009a7e:	2302      	movs	r3, #2
 8009a80:	e02d      	b.n	8009ade <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2201      	movs	r2, #1
 8009a86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2224      	movs	r2, #36	; 0x24
 8009a8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f022 0201 	bic.w	r2, r2, #1
 8009aa8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	683a      	ldr	r2, [r7, #0]
 8009aba:	430a      	orrs	r2, r1
 8009abc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 f812 	bl	8009ae8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2220      	movs	r2, #32
 8009ad0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3710      	adds	r7, #16
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
	...

08009ae8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b089      	sub	sp, #36	; 0x24
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009af0:	4a2f      	ldr	r2, [pc, #188]	; (8009bb0 <UARTEx_SetNbDataToProcess+0xc8>)
 8009af2:	f107 0314 	add.w	r3, r7, #20
 8009af6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009afa:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009afe:	4a2d      	ldr	r2, [pc, #180]	; (8009bb4 <UARTEx_SetNbDataToProcess+0xcc>)
 8009b00:	f107 030c 	add.w	r3, r7, #12
 8009b04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009b08:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d108      	bne.n	8009b26 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009b24:	e03d      	b.n	8009ba2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009b26:	2308      	movs	r3, #8
 8009b28:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009b2a:	2308      	movs	r3, #8
 8009b2c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	0e5b      	lsrs	r3, r3, #25
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	f003 0307 	and.w	r3, r3, #7
 8009b3c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	0f5b      	lsrs	r3, r3, #29
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	f003 0307 	and.w	r3, r3, #7
 8009b4c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009b4e:	7fbb      	ldrb	r3, [r7, #30]
 8009b50:	7f3a      	ldrb	r2, [r7, #28]
 8009b52:	f107 0120 	add.w	r1, r7, #32
 8009b56:	440a      	add	r2, r1
 8009b58:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009b5c:	fb02 f303 	mul.w	r3, r2, r3
 8009b60:	7f3a      	ldrb	r2, [r7, #28]
 8009b62:	f107 0120 	add.w	r1, r7, #32
 8009b66:	440a      	add	r2, r1
 8009b68:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009b6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b70:	b29a      	uxth	r2, r3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009b78:	7ffb      	ldrb	r3, [r7, #31]
 8009b7a:	7f7a      	ldrb	r2, [r7, #29]
 8009b7c:	f107 0120 	add.w	r1, r7, #32
 8009b80:	440a      	add	r2, r1
 8009b82:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009b86:	fb02 f303 	mul.w	r3, r2, r3
 8009b8a:	7f7a      	ldrb	r2, [r7, #29]
 8009b8c:	f107 0120 	add.w	r1, r7, #32
 8009b90:	440a      	add	r2, r1
 8009b92:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009b96:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b9a:	b29a      	uxth	r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009ba2:	bf00      	nop
 8009ba4:	3724      	adds	r7, #36	; 0x24
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr
 8009bae:	bf00      	nop
 8009bb0:	0800cef0 	.word	0x0800cef0
 8009bb4:	0800cef8 	.word	0x0800cef8

08009bb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b085      	sub	sp, #20
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009bc0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009bc4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009bcc:	b29a      	uxth	r2, r3
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	b29a      	uxth	r2, r3
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009bdc:	2300      	movs	r3, #0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3714      	adds	r7, #20
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr

08009bea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009bea:	b480      	push	{r7}
 8009bec:	b085      	sub	sp, #20
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009bf2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009bf6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009bfe:	b29a      	uxth	r2, r3
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	43db      	mvns	r3, r3
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	4013      	ands	r3, r2
 8009c0a:	b29a      	uxth	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009c12:	2300      	movs	r3, #0
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3714      	adds	r7, #20
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009c20:	b084      	sub	sp, #16
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b082      	sub	sp, #8
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
 8009c2a:	f107 0014 	add.w	r0, r7, #20
 8009c2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2201      	movs	r2, #1
 8009c36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f7ff ffb0 	bl	8009bb8 <USB_EnableGlobalInt>

  return HAL_OK;
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3708      	adds	r7, #8
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c64:	b004      	add	sp, #16
 8009c66:	4770      	bx	lr

08009c68 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b088      	sub	sp, #32
 8009c6c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009c72:	f107 0308 	add.w	r3, r7, #8
 8009c76:	2218      	movs	r2, #24
 8009c78:	2100      	movs	r1, #0
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f001 f966 	bl	800af4c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009c80:	233f      	movs	r3, #63	; 0x3f
 8009c82:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8009c84:	2381      	movs	r3, #129	; 0x81
 8009c86:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009c88:	1dfb      	adds	r3, r7, #7
 8009c8a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009c90:	f107 0308 	add.w	r3, r7, #8
 8009c94:	2100      	movs	r1, #0
 8009c96:	4618      	mov	r0, r3
 8009c98:	f000 ffe4 	bl	800ac64 <hci_send_req>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	da01      	bge.n	8009ca6 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009ca2:	23ff      	movs	r3, #255	; 0xff
 8009ca4:	e000      	b.n	8009ca8 <aci_gap_set_non_discoverable+0x40>
  return status;
 8009ca6:	79fb      	ldrb	r3, [r7, #7]
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3720      	adds	r7, #32
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8009cb0:	b5b0      	push	{r4, r5, r7, lr}
 8009cb2:	b0ce      	sub	sp, #312	; 0x138
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	4605      	mov	r5, r0
 8009cb8:	460c      	mov	r4, r1
 8009cba:	4610      	mov	r0, r2
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	1dfb      	adds	r3, r7, #7
 8009cc0:	462a      	mov	r2, r5
 8009cc2:	701a      	strb	r2, [r3, #0]
 8009cc4:	1d3b      	adds	r3, r7, #4
 8009cc6:	4622      	mov	r2, r4
 8009cc8:	801a      	strh	r2, [r3, #0]
 8009cca:	1cbb      	adds	r3, r7, #2
 8009ccc:	4602      	mov	r2, r0
 8009cce:	801a      	strh	r2, [r3, #0]
 8009cd0:	1dbb      	adds	r3, r7, #6
 8009cd2:	460a      	mov	r2, r1
 8009cd4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8009cd6:	f107 0310 	add.w	r3, r7, #16
 8009cda:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8009cde:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8009ce2:	3308      	adds	r3, #8
 8009ce4:	f107 0210 	add.w	r2, r7, #16
 8009ce8:	4413      	add	r3, r2
 8009cea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8009cee:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8009cf2:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8009cf6:	4413      	add	r3, r2
 8009cf8:	3309      	adds	r3, #9
 8009cfa:	f107 0210 	add.w	r2, r7, #16
 8009cfe:	4413      	add	r3, r2
 8009d00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009d04:	f107 030f 	add.w	r3, r7, #15
 8009d08:	2200      	movs	r2, #0
 8009d0a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8009d12:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009d16:	1dfa      	adds	r2, r7, #7
 8009d18:	7812      	ldrb	r2, [r2, #0]
 8009d1a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009d1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d20:	3301      	adds	r3, #1
 8009d22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8009d26:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009d2a:	1d3a      	adds	r2, r7, #4
 8009d2c:	8812      	ldrh	r2, [r2, #0]
 8009d2e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8009d32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d36:	3302      	adds	r3, #2
 8009d38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8009d3c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009d40:	1cba      	adds	r2, r7, #2
 8009d42:	8812      	ldrh	r2, [r2, #0]
 8009d44:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8009d48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d4c:	3302      	adds	r3, #2
 8009d4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8009d52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009d56:	1dba      	adds	r2, r7, #6
 8009d58:	7812      	ldrb	r2, [r2, #0]
 8009d5a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009d5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d60:	3301      	adds	r3, #1
 8009d62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8009d66:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009d6a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8009d6e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009d70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d74:	3301      	adds	r3, #1
 8009d76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8009d7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009d7e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8009d82:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8009d84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d88:	3301      	adds	r3, #1
 8009d8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8009d8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009d92:	3308      	adds	r3, #8
 8009d94:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8009d98:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f001 f8c5 	bl	800af2c <Osal_MemCpy>
    index_input += Local_Name_Length;
 8009da2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8009da6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009daa:	4413      	add	r3, r2
 8009dac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8009db0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009db4:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009db8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009dba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8009dc4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009dc8:	3301      	adds	r3, #1
 8009dca:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009dce:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f001 f8aa 	bl	800af2c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8009dd8:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8009ddc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009de0:	4413      	add	r3, r2
 8009de2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8009de6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009dea:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8009dee:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009df0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009df4:	3302      	adds	r3, #2
 8009df6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8009dfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009dfe:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8009e02:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8009e04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009e08:	3302      	adds	r3, #2
 8009e0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009e0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009e12:	2218      	movs	r2, #24
 8009e14:	2100      	movs	r1, #0
 8009e16:	4618      	mov	r0, r3
 8009e18:	f001 f898 	bl	800af4c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009e1c:	233f      	movs	r3, #63	; 0x3f
 8009e1e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8009e22:	2383      	movs	r3, #131	; 0x83
 8009e24:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009e28:	f107 0310 	add.w	r3, r7, #16
 8009e2c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009e30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009e34:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009e38:	f107 030f 	add.w	r3, r7, #15
 8009e3c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009e40:	2301      	movs	r3, #1
 8009e42:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009e46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009e4a:	2100      	movs	r1, #0
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f000 ff09 	bl	800ac64 <hci_send_req>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	da01      	bge.n	8009e5c <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8009e58:	23ff      	movs	r3, #255	; 0xff
 8009e5a:	e002      	b.n	8009e62 <aci_gap_set_discoverable+0x1b2>
  return status;
 8009e5c:	f107 030f 	add.w	r3, r7, #15
 8009e60:	781b      	ldrb	r3, [r3, #0]
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bdb0      	pop	{r4, r5, r7, pc}

08009e6c <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b0cc      	sub	sp, #304	; 0x130
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	4602      	mov	r2, r0
 8009e74:	1dfb      	adds	r3, r7, #7
 8009e76:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8009e78:	f107 0310 	add.w	r3, r7, #16
 8009e7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009e80:	f107 030f 	add.w	r3, r7, #15
 8009e84:	2200      	movs	r2, #0
 8009e86:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8009e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e92:	1dfa      	adds	r2, r7, #7
 8009e94:	7812      	ldrb	r2, [r2, #0]
 8009e96:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009e98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009ea2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009ea6:	2218      	movs	r2, #24
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f001 f84e 	bl	800af4c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009eb0:	233f      	movs	r3, #63	; 0x3f
 8009eb2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8009eb6:	2385      	movs	r3, #133	; 0x85
 8009eb8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009ebc:	f107 0310 	add.w	r3, r7, #16
 8009ec0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009ec4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ec8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009ecc:	f107 030f 	add.w	r3, r7, #15
 8009ed0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009eda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009ede:	2100      	movs	r1, #0
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f000 febf 	bl	800ac64 <hci_send_req>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	da01      	bge.n	8009ef0 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8009eec:	23ff      	movs	r3, #255	; 0xff
 8009eee:	e002      	b.n	8009ef6 <aci_gap_set_io_capability+0x8a>
  return status;
 8009ef0:	f107 030f 	add.w	r3, r7, #15
 8009ef4:	781b      	ldrb	r3, [r3, #0]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8009f00:	b5b0      	push	{r4, r5, r7, lr}
 8009f02:	b0cc      	sub	sp, #304	; 0x130
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	4605      	mov	r5, r0
 8009f08:	460c      	mov	r4, r1
 8009f0a:	4610      	mov	r0, r2
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	1dfb      	adds	r3, r7, #7
 8009f10:	462a      	mov	r2, r5
 8009f12:	701a      	strb	r2, [r3, #0]
 8009f14:	1dbb      	adds	r3, r7, #6
 8009f16:	4622      	mov	r2, r4
 8009f18:	701a      	strb	r2, [r3, #0]
 8009f1a:	1d7b      	adds	r3, r7, #5
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	701a      	strb	r2, [r3, #0]
 8009f20:	1d3b      	adds	r3, r7, #4
 8009f22:	460a      	mov	r2, r1
 8009f24:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8009f26:	f107 0310 	add.w	r3, r7, #16
 8009f2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009f2e:	f107 030f 	add.w	r3, r7, #15
 8009f32:	2200      	movs	r2, #0
 8009f34:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009f36:	2300      	movs	r3, #0
 8009f38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8009f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f40:	1dfa      	adds	r2, r7, #7
 8009f42:	7812      	ldrb	r2, [r2, #0]
 8009f44:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009f46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8009f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f54:	1dba      	adds	r2, r7, #6
 8009f56:	7812      	ldrb	r2, [r2, #0]
 8009f58:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009f5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f5e:	3301      	adds	r3, #1
 8009f60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8009f64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f68:	1d7a      	adds	r2, r7, #5
 8009f6a:	7812      	ldrb	r2, [r2, #0]
 8009f6c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009f6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f72:	3301      	adds	r3, #1
 8009f74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8009f78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f7c:	1d3a      	adds	r2, r7, #4
 8009f7e:	7812      	ldrb	r2, [r2, #0]
 8009f80:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8009f82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f86:	3301      	adds	r3, #1
 8009f88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8009f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f90:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8009f94:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009f96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8009fa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fa4:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8009fa8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009faa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009fae:	3301      	adds	r3, #1
 8009fb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8009fb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fb8:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8009fbc:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009fbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8009fc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fcc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8009fd0:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8009fd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009fd8:	3304      	adds	r3, #4
 8009fda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8009fde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fe2:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8009fe6:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8009fe8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009fec:	3301      	adds	r3, #1
 8009fee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009ff2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009ff6:	2218      	movs	r2, #24
 8009ff8:	2100      	movs	r1, #0
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f000 ffa6 	bl	800af4c <Osal_MemSet>
  rq.ogf = 0x3f;
 800a000:	233f      	movs	r3, #63	; 0x3f
 800a002:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800a006:	2386      	movs	r3, #134	; 0x86
 800a008:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a00c:	f107 0310 	add.w	r3, r7, #16
 800a010:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a014:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a018:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a01c:	f107 030f 	add.w	r3, r7, #15
 800a020:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a024:	2301      	movs	r3, #1
 800a026:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a02a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a02e:	2100      	movs	r1, #0
 800a030:	4618      	mov	r0, r3
 800a032:	f000 fe17 	bl	800ac64 <hci_send_req>
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	da01      	bge.n	800a040 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800a03c:	23ff      	movs	r3, #255	; 0xff
 800a03e:	e002      	b.n	800a046 <aci_gap_set_authentication_requirement+0x146>
  return status;
 800a040:	f107 030f 	add.w	r3, r7, #15
 800a044:	781b      	ldrb	r3, [r3, #0]
}
 800a046:	4618      	mov	r0, r3
 800a048:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bdb0      	pop	{r4, r5, r7, pc}

0800a050 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800a050:	b590      	push	{r4, r7, lr}
 800a052:	b0cd      	sub	sp, #308	; 0x134
 800a054:	af00      	add	r7, sp, #0
 800a056:	4604      	mov	r4, r0
 800a058:	4608      	mov	r0, r1
 800a05a:	4611      	mov	r1, r2
 800a05c:	463a      	mov	r2, r7
 800a05e:	6013      	str	r3, [r2, #0]
 800a060:	1dfb      	adds	r3, r7, #7
 800a062:	4622      	mov	r2, r4
 800a064:	701a      	strb	r2, [r3, #0]
 800a066:	1dbb      	adds	r3, r7, #6
 800a068:	4602      	mov	r2, r0
 800a06a:	701a      	strb	r2, [r3, #0]
 800a06c:	1d7b      	adds	r3, r7, #5
 800a06e:	460a      	mov	r2, r1
 800a070:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800a072:	f107 0310 	add.w	r3, r7, #16
 800a076:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a07a:	f107 0308 	add.w	r3, r7, #8
 800a07e:	2207      	movs	r2, #7
 800a080:	2100      	movs	r1, #0
 800a082:	4618      	mov	r0, r3
 800a084:	f000 ff62 	bl	800af4c <Osal_MemSet>
  int index_input = 0;
 800a088:	2300      	movs	r3, #0
 800a08a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800a08e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a092:	1dfa      	adds	r2, r7, #7
 800a094:	7812      	ldrb	r2, [r2, #0]
 800a096:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a098:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a09c:	3301      	adds	r3, #1
 800a09e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800a0a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0a6:	1dba      	adds	r2, r7, #6
 800a0a8:	7812      	ldrb	r2, [r2, #0]
 800a0aa:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a0ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800a0b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0ba:	1d7a      	adds	r2, r7, #5
 800a0bc:	7812      	ldrb	r2, [r2, #0]
 800a0be:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a0c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a0ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a0ce:	2218      	movs	r2, #24
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f000 ff3a 	bl	800af4c <Osal_MemSet>
  rq.ogf = 0x3f;
 800a0d8:	233f      	movs	r3, #63	; 0x3f
 800a0da:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800a0de:	238a      	movs	r3, #138	; 0x8a
 800a0e0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a0e4:	f107 0310 	add.w	r3, r7, #16
 800a0e8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a0ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a0f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800a0f4:	f107 0308 	add.w	r3, r7, #8
 800a0f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800a0fc:	2307      	movs	r3, #7
 800a0fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a102:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a106:	2100      	movs	r1, #0
 800a108:	4618      	mov	r0, r3
 800a10a:	f000 fdab 	bl	800ac64 <hci_send_req>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	da01      	bge.n	800a118 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 800a114:	23ff      	movs	r3, #255	; 0xff
 800a116:	e021      	b.n	800a15c <aci_gap_init+0x10c>
  if ( resp.Status )
 800a118:	f107 0308 	add.w	r3, r7, #8
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d003      	beq.n	800a12a <aci_gap_init+0xda>
    return resp.Status;
 800a122:	f107 0308 	add.w	r3, r7, #8
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	e018      	b.n	800a15c <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 800a12a:	f107 0308 	add.w	r3, r7, #8
 800a12e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a132:	b29a      	uxth	r2, r3
 800a134:	463b      	mov	r3, r7
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800a13a:	f107 0308 	add.w	r3, r7, #8
 800a13e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800a142:	b29a      	uxth	r2, r3
 800a144:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800a148:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800a14a:	f107 0308 	add.w	r3, r7, #8
 800a14e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800a152:	b29a      	uxth	r2, r3
 800a154:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800a158:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a15a:	2300      	movs	r3, #0
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800a162:	46bd      	mov	sp, r7
 800a164:	bd90      	pop	{r4, r7, pc}

0800a166 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800a166:	b580      	push	{r7, lr}
 800a168:	b0cc      	sub	sp, #304	; 0x130
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	4602      	mov	r2, r0
 800a16e:	463b      	mov	r3, r7
 800a170:	6019      	str	r1, [r3, #0]
 800a172:	1dfb      	adds	r3, r7, #7
 800a174:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800a176:	f107 0310 	add.w	r3, r7, #16
 800a17a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a17e:	f107 030f 	add.w	r3, r7, #15
 800a182:	2200      	movs	r2, #0
 800a184:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a186:	2300      	movs	r3, #0
 800a188:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800a18c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a190:	1dfa      	adds	r2, r7, #7
 800a192:	7812      	ldrb	r2, [r2, #0]
 800a194:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a196:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a19a:	3301      	adds	r3, #1
 800a19c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800a1a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1a4:	1c58      	adds	r0, r3, #1
 800a1a6:	1dfb      	adds	r3, r7, #7
 800a1a8:	781a      	ldrb	r2, [r3, #0]
 800a1aa:	463b      	mov	r3, r7
 800a1ac:	6819      	ldr	r1, [r3, #0]
 800a1ae:	f000 febd 	bl	800af2c <Osal_MemCpy>
  index_input += AdvDataLen;
 800a1b2:	1dfb      	adds	r3, r7, #7
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a1ba:	4413      	add	r3, r2
 800a1bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a1c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a1c4:	2218      	movs	r2, #24
 800a1c6:	2100      	movs	r1, #0
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f000 febf 	bl	800af4c <Osal_MemSet>
  rq.ogf = 0x3f;
 800a1ce:	233f      	movs	r3, #63	; 0x3f
 800a1d0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800a1d4:	238e      	movs	r3, #142	; 0x8e
 800a1d6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a1da:	f107 0310 	add.w	r3, r7, #16
 800a1de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a1e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a1e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a1ea:	f107 030f 	add.w	r3, r7, #15
 800a1ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a1f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a1fc:	2100      	movs	r1, #0
 800a1fe:	4618      	mov	r0, r3
 800a200:	f000 fd30 	bl	800ac64 <hci_send_req>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	da01      	bge.n	800a20e <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 800a20a:	23ff      	movs	r3, #255	; 0xff
 800a20c:	e002      	b.n	800a214 <aci_gap_update_adv_data+0xae>
  return status;
 800a20e:	f107 030f 	add.w	r3, r7, #15
 800a212:	781b      	ldrb	r3, [r3, #0]
}
 800a214:	4618      	mov	r0, r3
 800a216:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}

0800a21e <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800a21e:	b580      	push	{r7, lr}
 800a220:	b088      	sub	sp, #32
 800a222:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a224:	2300      	movs	r3, #0
 800a226:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a228:	f107 0308 	add.w	r3, r7, #8
 800a22c:	2218      	movs	r2, #24
 800a22e:	2100      	movs	r1, #0
 800a230:	4618      	mov	r0, r3
 800a232:	f000 fe8b 	bl	800af4c <Osal_MemSet>
  rq.ogf = 0x3f;
 800a236:	233f      	movs	r3, #63	; 0x3f
 800a238:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800a23a:	2392      	movs	r3, #146	; 0x92
 800a23c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a23e:	1dfb      	adds	r3, r7, #7
 800a240:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a242:	2301      	movs	r3, #1
 800a244:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a246:	f107 0308 	add.w	r3, r7, #8
 800a24a:	2100      	movs	r1, #0
 800a24c:	4618      	mov	r0, r3
 800a24e:	f000 fd09 	bl	800ac64 <hci_send_req>
 800a252:	4603      	mov	r3, r0
 800a254:	2b00      	cmp	r3, #0
 800a256:	da01      	bge.n	800a25c <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a258:	23ff      	movs	r3, #255	; 0xff
 800a25a:	e000      	b.n	800a25e <aci_gap_configure_whitelist+0x40>
  return status;
 800a25c:	79fb      	ldrb	r3, [r7, #7]
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3720      	adds	r7, #32
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}

0800a266 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800a266:	b580      	push	{r7, lr}
 800a268:	b088      	sub	sp, #32
 800a26a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a26c:	2300      	movs	r3, #0
 800a26e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a270:	f107 0308 	add.w	r3, r7, #8
 800a274:	2218      	movs	r2, #24
 800a276:	2100      	movs	r1, #0
 800a278:	4618      	mov	r0, r3
 800a27a:	f000 fe67 	bl	800af4c <Osal_MemSet>
  rq.ogf = 0x3f;
 800a27e:	233f      	movs	r3, #63	; 0x3f
 800a280:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800a282:	f240 1301 	movw	r3, #257	; 0x101
 800a286:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a288:	1dfb      	adds	r3, r7, #7
 800a28a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a28c:	2301      	movs	r3, #1
 800a28e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a290:	f107 0308 	add.w	r3, r7, #8
 800a294:	2100      	movs	r1, #0
 800a296:	4618      	mov	r0, r3
 800a298:	f000 fce4 	bl	800ac64 <hci_send_req>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	da01      	bge.n	800a2a6 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800a2a2:	23ff      	movs	r3, #255	; 0xff
 800a2a4:	e000      	b.n	800a2a8 <aci_gatt_init+0x42>
  return status;
 800a2a6:	79fb      	ldrb	r3, [r7, #7]
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3720      	adds	r7, #32
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800a2b0:	b590      	push	{r4, r7, lr}
 800a2b2:	b0cf      	sub	sp, #316	; 0x13c
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	4604      	mov	r4, r0
 800a2b8:	4638      	mov	r0, r7
 800a2ba:	6001      	str	r1, [r0, #0]
 800a2bc:	4610      	mov	r0, r2
 800a2be:	4619      	mov	r1, r3
 800a2c0:	1dfb      	adds	r3, r7, #7
 800a2c2:	4622      	mov	r2, r4
 800a2c4:	701a      	strb	r2, [r3, #0]
 800a2c6:	1dbb      	adds	r3, r7, #6
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	701a      	strb	r2, [r3, #0]
 800a2cc:	1d7b      	adds	r3, r7, #5
 800a2ce:	460a      	mov	r2, r1
 800a2d0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800a2d2:	f107 0310 	add.w	r3, r7, #16
 800a2d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800a2da:	1dfb      	adds	r3, r7, #7
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d007      	beq.n	800a2f2 <aci_gatt_add_service+0x42>
 800a2e2:	1dfb      	adds	r3, r7, #7
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	2b02      	cmp	r3, #2
 800a2e8:	d101      	bne.n	800a2ee <aci_gatt_add_service+0x3e>
 800a2ea:	2311      	movs	r3, #17
 800a2ec:	e002      	b.n	800a2f4 <aci_gatt_add_service+0x44>
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	e000      	b.n	800a2f4 <aci_gatt_add_service+0x44>
 800a2f2:	2303      	movs	r3, #3
 800a2f4:	f107 0210 	add.w	r2, r7, #16
 800a2f8:	4413      	add	r3, r2
 800a2fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a2fe:	f107 030c 	add.w	r3, r7, #12
 800a302:	2203      	movs	r2, #3
 800a304:	2100      	movs	r1, #0
 800a306:	4618      	mov	r0, r3
 800a308:	f000 fe20 	bl	800af4c <Osal_MemSet>
  int index_input = 0;
 800a30c:	2300      	movs	r3, #0
 800a30e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800a312:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a316:	1dfa      	adds	r2, r7, #7
 800a318:	7812      	ldrb	r2, [r2, #0]
 800a31a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a31c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a320:	3301      	adds	r3, #1
 800a322:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800a326:	1dfb      	adds	r3, r7, #7
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d002      	beq.n	800a334 <aci_gatt_add_service+0x84>
 800a32e:	2b02      	cmp	r3, #2
 800a330:	d004      	beq.n	800a33c <aci_gatt_add_service+0x8c>
 800a332:	e007      	b.n	800a344 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 800a334:	2302      	movs	r3, #2
 800a336:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800a33a:	e005      	b.n	800a348 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800a33c:	2310      	movs	r3, #16
 800a33e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800a342:	e001      	b.n	800a348 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 800a344:	2347      	movs	r3, #71	; 0x47
 800a346:	e05d      	b.n	800a404 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800a348:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a34c:	1c58      	adds	r0, r3, #1
 800a34e:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800a352:	463b      	mov	r3, r7
 800a354:	6819      	ldr	r1, [r3, #0]
 800a356:	f000 fde9 	bl	800af2c <Osal_MemCpy>
    index_input += size;
 800a35a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800a35e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a362:	4413      	add	r3, r2
 800a364:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800a368:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a36c:	1dba      	adds	r2, r7, #6
 800a36e:	7812      	ldrb	r2, [r2, #0]
 800a370:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800a372:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a376:	3301      	adds	r3, #1
 800a378:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800a37c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a380:	1d7a      	adds	r2, r7, #5
 800a382:	7812      	ldrb	r2, [r2, #0]
 800a384:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800a386:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a38a:	3301      	adds	r3, #1
 800a38c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a390:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a394:	2218      	movs	r2, #24
 800a396:	2100      	movs	r1, #0
 800a398:	4618      	mov	r0, r3
 800a39a:	f000 fdd7 	bl	800af4c <Osal_MemSet>
  rq.ogf = 0x3f;
 800a39e:	233f      	movs	r3, #63	; 0x3f
 800a3a0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800a3a4:	f44f 7381 	mov.w	r3, #258	; 0x102
 800a3a8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a3ac:	f107 0310 	add.w	r3, r7, #16
 800a3b0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a3b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a3b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800a3bc:	f107 030c 	add.w	r3, r7, #12
 800a3c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800a3c4:	2303      	movs	r3, #3
 800a3c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a3ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a3ce:	2100      	movs	r1, #0
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f000 fc47 	bl	800ac64 <hci_send_req>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	da01      	bge.n	800a3e0 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 800a3dc:	23ff      	movs	r3, #255	; 0xff
 800a3de:	e011      	b.n	800a404 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 800a3e0:	f107 030c 	add.w	r3, r7, #12
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d003      	beq.n	800a3f2 <aci_gatt_add_service+0x142>
    return resp.Status;
 800a3ea:	f107 030c 	add.w	r3, r7, #12
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	e008      	b.n	800a404 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 800a3f2:	f107 030c 	add.w	r3, r7, #12
 800a3f6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a3fa:	b29a      	uxth	r2, r3
 800a3fc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a400:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a402:	2300      	movs	r3, #0
}
 800a404:	4618      	mov	r0, r3
 800a406:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd90      	pop	{r4, r7, pc}

0800a40e <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800a40e:	b590      	push	{r4, r7, lr}
 800a410:	b0d1      	sub	sp, #324	; 0x144
 800a412:	af00      	add	r7, sp, #0
 800a414:	4604      	mov	r4, r0
 800a416:	4608      	mov	r0, r1
 800a418:	f107 0108 	add.w	r1, r7, #8
 800a41c:	600a      	str	r2, [r1, #0]
 800a41e:	4619      	mov	r1, r3
 800a420:	f107 030e 	add.w	r3, r7, #14
 800a424:	4622      	mov	r2, r4
 800a426:	801a      	strh	r2, [r3, #0]
 800a428:	f107 030d 	add.w	r3, r7, #13
 800a42c:	4602      	mov	r2, r0
 800a42e:	701a      	strb	r2, [r3, #0]
 800a430:	1dbb      	adds	r3, r7, #6
 800a432:	460a      	mov	r2, r1
 800a434:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800a436:	f107 0318 	add.w	r3, r7, #24
 800a43a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800a43e:	f107 030d 	add.w	r3, r7, #13
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	2b01      	cmp	r3, #1
 800a446:	d008      	beq.n	800a45a <aci_gatt_add_char+0x4c>
 800a448:	f107 030d 	add.w	r3, r7, #13
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	2b02      	cmp	r3, #2
 800a450:	d101      	bne.n	800a456 <aci_gatt_add_char+0x48>
 800a452:	2313      	movs	r3, #19
 800a454:	e002      	b.n	800a45c <aci_gatt_add_char+0x4e>
 800a456:	2303      	movs	r3, #3
 800a458:	e000      	b.n	800a45c <aci_gatt_add_char+0x4e>
 800a45a:	2305      	movs	r3, #5
 800a45c:	f107 0218 	add.w	r2, r7, #24
 800a460:	4413      	add	r3, r2
 800a462:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a466:	f107 0314 	add.w	r3, r7, #20
 800a46a:	2203      	movs	r2, #3
 800a46c:	2100      	movs	r1, #0
 800a46e:	4618      	mov	r0, r3
 800a470:	f000 fd6c 	bl	800af4c <Osal_MemSet>
  int index_input = 0;
 800a474:	2300      	movs	r3, #0
 800a476:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800a47a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a47e:	f107 020e 	add.w	r2, r7, #14
 800a482:	8812      	ldrh	r2, [r2, #0]
 800a484:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a486:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a48a:	3302      	adds	r3, #2
 800a48c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800a490:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a494:	f107 020d 	add.w	r2, r7, #13
 800a498:	7812      	ldrb	r2, [r2, #0]
 800a49a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a49c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800a4a6:	f107 030d 	add.w	r3, r7, #13
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d002      	beq.n	800a4b6 <aci_gatt_add_char+0xa8>
 800a4b0:	2b02      	cmp	r3, #2
 800a4b2:	d004      	beq.n	800a4be <aci_gatt_add_char+0xb0>
 800a4b4:	e007      	b.n	800a4c6 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 800a4b6:	2302      	movs	r3, #2
 800a4b8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800a4bc:	e005      	b.n	800a4ca <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 800a4be:	2310      	movs	r3, #16
 800a4c0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800a4c4:	e001      	b.n	800a4ca <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 800a4c6:	2347      	movs	r3, #71	; 0x47
 800a4c8:	e086      	b.n	800a5d8 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800a4ca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a4ce:	1cd8      	adds	r0, r3, #3
 800a4d0:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800a4d4:	f107 0308 	add.w	r3, r7, #8
 800a4d8:	6819      	ldr	r1, [r3, #0]
 800a4da:	f000 fd27 	bl	800af2c <Osal_MemCpy>
    index_input += size;
 800a4de:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800a4e2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800a4e6:	4413      	add	r3, r2
 800a4e8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800a4ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a4f0:	1dba      	adds	r2, r7, #6
 800a4f2:	8812      	ldrh	r2, [r2, #0]
 800a4f4:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800a4f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a4fa:	3302      	adds	r3, #2
 800a4fc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800a500:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a504:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800a508:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800a50a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a50e:	3301      	adds	r3, #1
 800a510:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800a514:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a518:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800a51c:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800a51e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a522:	3301      	adds	r3, #1
 800a524:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800a528:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a52c:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800a530:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800a532:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a536:	3301      	adds	r3, #1
 800a538:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800a53c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a540:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800a544:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800a546:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a54a:	3301      	adds	r3, #1
 800a54c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800a550:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a554:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800a558:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800a55a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a55e:	3301      	adds	r3, #1
 800a560:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a564:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a568:	2218      	movs	r2, #24
 800a56a:	2100      	movs	r1, #0
 800a56c:	4618      	mov	r0, r3
 800a56e:	f000 fced 	bl	800af4c <Osal_MemSet>
  rq.ogf = 0x3f;
 800a572:	233f      	movs	r3, #63	; 0x3f
 800a574:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800a578:	f44f 7382 	mov.w	r3, #260	; 0x104
 800a57c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800a580:	f107 0318 	add.w	r3, r7, #24
 800a584:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800a588:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a58c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800a590:	f107 0314 	add.w	r3, r7, #20
 800a594:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800a598:	2303      	movs	r3, #3
 800a59a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a59e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a5a2:	2100      	movs	r1, #0
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f000 fb5d 	bl	800ac64 <hci_send_req>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	da01      	bge.n	800a5b4 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 800a5b0:	23ff      	movs	r3, #255	; 0xff
 800a5b2:	e011      	b.n	800a5d8 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 800a5b4:	f107 0314 	add.w	r3, r7, #20
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d003      	beq.n	800a5c6 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 800a5be:	f107 0314 	add.w	r3, r7, #20
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	e008      	b.n	800a5d8 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 800a5c6:	f107 0314 	add.w	r3, r7, #20
 800a5ca:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a5ce:	b29a      	uxth	r2, r3
 800a5d0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800a5d4:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a5d6:	2300      	movs	r3, #0
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd90      	pop	{r4, r7, pc}

0800a5e2 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800a5e2:	b5b0      	push	{r4, r5, r7, lr}
 800a5e4:	b0cc      	sub	sp, #304	; 0x130
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	4605      	mov	r5, r0
 800a5ea:	460c      	mov	r4, r1
 800a5ec:	4610      	mov	r0, r2
 800a5ee:	4619      	mov	r1, r3
 800a5f0:	1dbb      	adds	r3, r7, #6
 800a5f2:	462a      	mov	r2, r5
 800a5f4:	801a      	strh	r2, [r3, #0]
 800a5f6:	1d3b      	adds	r3, r7, #4
 800a5f8:	4622      	mov	r2, r4
 800a5fa:	801a      	strh	r2, [r3, #0]
 800a5fc:	1cfb      	adds	r3, r7, #3
 800a5fe:	4602      	mov	r2, r0
 800a600:	701a      	strb	r2, [r3, #0]
 800a602:	1cbb      	adds	r3, r7, #2
 800a604:	460a      	mov	r2, r1
 800a606:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800a608:	f107 0310 	add.w	r3, r7, #16
 800a60c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a610:	f107 030f 	add.w	r3, r7, #15
 800a614:	2200      	movs	r2, #0
 800a616:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a618:	2300      	movs	r3, #0
 800a61a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800a61e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a622:	1dba      	adds	r2, r7, #6
 800a624:	8812      	ldrh	r2, [r2, #0]
 800a626:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a628:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a62c:	3302      	adds	r3, #2
 800a62e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800a632:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a636:	1d3a      	adds	r2, r7, #4
 800a638:	8812      	ldrh	r2, [r2, #0]
 800a63a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a63c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a640:	3302      	adds	r3, #2
 800a642:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800a646:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a64a:	1cfa      	adds	r2, r7, #3
 800a64c:	7812      	ldrb	r2, [r2, #0]
 800a64e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a650:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a654:	3301      	adds	r3, #1
 800a656:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800a65a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a65e:	1cba      	adds	r2, r7, #2
 800a660:	7812      	ldrb	r2, [r2, #0]
 800a662:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a664:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a668:	3301      	adds	r3, #1
 800a66a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800a66e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a672:	1d98      	adds	r0, r3, #6
 800a674:	1cbb      	adds	r3, r7, #2
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	461a      	mov	r2, r3
 800a67a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800a67e:	f000 fc55 	bl	800af2c <Osal_MemCpy>
  index_input += Char_Value_Length;
 800a682:	1cbb      	adds	r3, r7, #2
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a68a:	4413      	add	r3, r2
 800a68c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a690:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a694:	2218      	movs	r2, #24
 800a696:	2100      	movs	r1, #0
 800a698:	4618      	mov	r0, r3
 800a69a:	f000 fc57 	bl	800af4c <Osal_MemSet>
  rq.ogf = 0x3f;
 800a69e:	233f      	movs	r3, #63	; 0x3f
 800a6a0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800a6a4:	f44f 7383 	mov.w	r3, #262	; 0x106
 800a6a8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a6ac:	f107 0310 	add.w	r3, r7, #16
 800a6b0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a6b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a6b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a6bc:	f107 030f 	add.w	r3, r7, #15
 800a6c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a6ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a6ce:	2100      	movs	r1, #0
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f000 fac7 	bl	800ac64 <hci_send_req>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	da01      	bge.n	800a6e0 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800a6dc:	23ff      	movs	r3, #255	; 0xff
 800a6de:	e002      	b.n	800a6e6 <aci_gatt_update_char_value+0x104>
  return status;
 800a6e0:	f107 030f 	add.w	r3, r7, #15
 800a6e4:	781b      	ldrb	r3, [r3, #0]
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bdb0      	pop	{r4, r5, r7, pc}

0800a6f0 <aci_gatt_exchange_config>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_exchange_config( uint16_t Connection_Handle )
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b0cc      	sub	sp, #304	; 0x130
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	1dbb      	adds	r3, r7, #6
 800a6fa:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_exchange_config_cp0 *cp0 = (aci_gatt_exchange_config_cp0*)(cmd_buffer);
 800a6fc:	f107 0310 	add.w	r3, r7, #16
 800a700:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a704:	f107 030f 	add.w	r3, r7, #15
 800a708:	2200      	movs	r2, #0
 800a70a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a70c:	2300      	movs	r3, #0
 800a70e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a712:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a716:	1dba      	adds	r2, r7, #6
 800a718:	8812      	ldrh	r2, [r2, #0]
 800a71a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a71c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a720:	3302      	adds	r3, #2
 800a722:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a726:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a72a:	2218      	movs	r2, #24
 800a72c:	2100      	movs	r1, #0
 800a72e:	4618      	mov	r0, r3
 800a730:	f000 fc0c 	bl	800af4c <Osal_MemSet>
  rq.ogf = 0x3f;
 800a734:	233f      	movs	r3, #63	; 0x3f
 800a736:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x10b;
 800a73a:	f240 130b 	movw	r3, #267	; 0x10b
 800a73e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800a742:	230f      	movs	r3, #15
 800a744:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800a748:	f107 0310 	add.w	r3, r7, #16
 800a74c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a750:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a754:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a758:	f107 030f 	add.w	r3, r7, #15
 800a75c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a760:	2301      	movs	r3, #1
 800a762:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a766:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a76a:	2100      	movs	r1, #0
 800a76c:	4618      	mov	r0, r3
 800a76e:	f000 fa79 	bl	800ac64 <hci_send_req>
 800a772:	4603      	mov	r3, r0
 800a774:	2b00      	cmp	r3, #0
 800a776:	da01      	bge.n	800a77c <aci_gatt_exchange_config+0x8c>
    return BLE_STATUS_TIMEOUT;
 800a778:	23ff      	movs	r3, #255	; 0xff
 800a77a:	e002      	b.n	800a782 <aci_gatt_exchange_config+0x92>
  return status;
 800a77c:	f107 030f 	add.w	r3, r7, #15
 800a780:	781b      	ldrb	r3, [r3, #0]
}
 800a782:	4618      	mov	r0, r3
 800a784:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b0cc      	sub	sp, #304	; 0x130
 800a790:	af00      	add	r7, sp, #0
 800a792:	463b      	mov	r3, r7
 800a794:	601a      	str	r2, [r3, #0]
 800a796:	1dfb      	adds	r3, r7, #7
 800a798:	4602      	mov	r2, r0
 800a79a:	701a      	strb	r2, [r3, #0]
 800a79c:	1dbb      	adds	r3, r7, #6
 800a79e:	460a      	mov	r2, r1
 800a7a0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800a7a2:	f107 0310 	add.w	r3, r7, #16
 800a7a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a7aa:	f107 030f 	add.w	r3, r7, #15
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800a7b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7bc:	1dfa      	adds	r2, r7, #7
 800a7be:	7812      	ldrb	r2, [r2, #0]
 800a7c0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a7c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800a7cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7d0:	1dba      	adds	r2, r7, #6
 800a7d2:	7812      	ldrb	r2, [r2, #0]
 800a7d4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a7d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a7da:	3301      	adds	r3, #1
 800a7dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800a7e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7e4:	1c98      	adds	r0, r3, #2
 800a7e6:	1dbb      	adds	r3, r7, #6
 800a7e8:	781a      	ldrb	r2, [r3, #0]
 800a7ea:	463b      	mov	r3, r7
 800a7ec:	6819      	ldr	r1, [r3, #0]
 800a7ee:	f000 fb9d 	bl	800af2c <Osal_MemCpy>
  index_input += Length;
 800a7f2:	1dbb      	adds	r3, r7, #6
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a7fa:	4413      	add	r3, r2
 800a7fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a800:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a804:	2218      	movs	r2, #24
 800a806:	2100      	movs	r1, #0
 800a808:	4618      	mov	r0, r3
 800a80a:	f000 fb9f 	bl	800af4c <Osal_MemSet>
  rq.ogf = 0x3f;
 800a80e:	233f      	movs	r3, #63	; 0x3f
 800a810:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800a814:	230c      	movs	r3, #12
 800a816:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a81a:	f107 0310 	add.w	r3, r7, #16
 800a81e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a822:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a826:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a82a:	f107 030f 	add.w	r3, r7, #15
 800a82e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a832:	2301      	movs	r3, #1
 800a834:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a838:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a83c:	2100      	movs	r1, #0
 800a83e:	4618      	mov	r0, r3
 800a840:	f000 fa10 	bl	800ac64 <hci_send_req>
 800a844:	4603      	mov	r3, r0
 800a846:	2b00      	cmp	r3, #0
 800a848:	da01      	bge.n	800a84e <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800a84a:	23ff      	movs	r3, #255	; 0xff
 800a84c:	e002      	b.n	800a854 <aci_hal_write_config_data+0xc8>
  return status;
 800a84e:	f107 030f 	add.w	r3, r7, #15
 800a852:	781b      	ldrb	r3, [r3, #0]
}
 800a854:	4618      	mov	r0, r3
 800a856:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}

0800a85e <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800a85e:	b580      	push	{r7, lr}
 800a860:	b0cc      	sub	sp, #304	; 0x130
 800a862:	af00      	add	r7, sp, #0
 800a864:	4602      	mov	r2, r0
 800a866:	1dfb      	adds	r3, r7, #7
 800a868:	701a      	strb	r2, [r3, #0]
 800a86a:	1dbb      	adds	r3, r7, #6
 800a86c:	460a      	mov	r2, r1
 800a86e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800a870:	f107 0310 	add.w	r3, r7, #16
 800a874:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a878:	f107 030f 	add.w	r3, r7, #15
 800a87c:	2200      	movs	r2, #0
 800a87e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a880:	2300      	movs	r3, #0
 800a882:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800a886:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a88a:	1dfa      	adds	r2, r7, #7
 800a88c:	7812      	ldrb	r2, [r2, #0]
 800a88e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a890:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a894:	3301      	adds	r3, #1
 800a896:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800a89a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a89e:	1dba      	adds	r2, r7, #6
 800a8a0:	7812      	ldrb	r2, [r2, #0]
 800a8a2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a8a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a8ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a8b2:	2218      	movs	r2, #24
 800a8b4:	2100      	movs	r1, #0
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f000 fb48 	bl	800af4c <Osal_MemSet>
  rq.ogf = 0x3f;
 800a8bc:	233f      	movs	r3, #63	; 0x3f
 800a8be:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800a8c2:	230f      	movs	r3, #15
 800a8c4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a8c8:	f107 0310 	add.w	r3, r7, #16
 800a8cc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a8d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a8d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a8d8:	f107 030f 	add.w	r3, r7, #15
 800a8dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a8e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a8ea:	2100      	movs	r1, #0
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f000 f9b9 	bl	800ac64 <hci_send_req>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	da01      	bge.n	800a8fc <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 800a8f8:	23ff      	movs	r3, #255	; 0xff
 800a8fa:	e002      	b.n	800a902 <aci_hal_set_tx_power_level+0xa4>
  return status;
 800a8fc:	f107 030f 	add.w	r3, r7, #15
 800a900:	781b      	ldrb	r3, [r3, #0]
}
 800a902:	4618      	mov	r0, r3
 800a904:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b0cc      	sub	sp, #304	; 0x130
 800a910:	af00      	add	r7, sp, #0
 800a912:	4602      	mov	r2, r0
 800a914:	1dbb      	adds	r3, r7, #6
 800a916:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800a918:	f107 0310 	add.w	r3, r7, #16
 800a91c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a920:	f107 030f 	add.w	r3, r7, #15
 800a924:	2200      	movs	r2, #0
 800a926:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a928:	2300      	movs	r3, #0
 800a92a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800a92e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a932:	1dba      	adds	r2, r7, #6
 800a934:	8812      	ldrh	r2, [r2, #0]
 800a936:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a938:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a93c:	3302      	adds	r3, #2
 800a93e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a942:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a946:	2218      	movs	r2, #24
 800a948:	2100      	movs	r1, #0
 800a94a:	4618      	mov	r0, r3
 800a94c:	f000 fafe 	bl	800af4c <Osal_MemSet>
  rq.ogf = 0x3f;
 800a950:	233f      	movs	r3, #63	; 0x3f
 800a952:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800a956:	2318      	movs	r3, #24
 800a958:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a95c:	f107 0310 	add.w	r3, r7, #16
 800a960:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a964:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a968:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a96c:	f107 030f 	add.w	r3, r7, #15
 800a970:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a974:	2301      	movs	r3, #1
 800a976:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a97a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a97e:	2100      	movs	r1, #0
 800a980:	4618      	mov	r0, r3
 800a982:	f000 f96f 	bl	800ac64 <hci_send_req>
 800a986:	4603      	mov	r3, r0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	da01      	bge.n	800a990 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 800a98c:	23ff      	movs	r3, #255	; 0xff
 800a98e:	e002      	b.n	800a996 <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 800a990:	f107 030f 	add.w	r3, r7, #15
 800a994:	781b      	ldrb	r3, [r3, #0]
}
 800a996:	4618      	mov	r0, r3
 800a998:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b088      	sub	sp, #32
 800a9a4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a9aa:	f107 0308 	add.w	r3, r7, #8
 800a9ae:	2218      	movs	r2, #24
 800a9b0:	2100      	movs	r1, #0
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f000 faca 	bl	800af4c <Osal_MemSet>
  rq.ogf = 0x03;
 800a9b8:	2303      	movs	r3, #3
 800a9ba:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800a9bc:	2303      	movs	r3, #3
 800a9be:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a9c0:	1dfb      	adds	r3, r7, #7
 800a9c2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a9c8:	f107 0308 	add.w	r3, r7, #8
 800a9cc:	2100      	movs	r1, #0
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f000 f948 	bl	800ac64 <hci_send_req>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	da01      	bge.n	800a9de <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a9da:	23ff      	movs	r3, #255	; 0xff
 800a9dc:	e000      	b.n	800a9e0 <hci_reset+0x40>
  return status;
 800a9de:	79fb      	ldrb	r3, [r7, #7]
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3720      	adds	r7, #32
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b0ce      	sub	sp, #312	; 0x138
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	f107 0308 	add.w	r3, r7, #8
 800a9f2:	6019      	str	r1, [r3, #0]
 800a9f4:	1d3b      	adds	r3, r7, #4
 800a9f6:	601a      	str	r2, [r3, #0]
 800a9f8:	f107 030e 	add.w	r3, r7, #14
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800aa00:	f107 0318 	add.w	r3, r7, #24
 800aa04:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800aa08:	f107 0310 	add.w	r3, r7, #16
 800aa0c:	2205      	movs	r2, #5
 800aa0e:	2100      	movs	r1, #0
 800aa10:	4618      	mov	r0, r3
 800aa12:	f000 fa9b 	bl	800af4c <Osal_MemSet>
  int index_input = 0;
 800aa16:	2300      	movs	r3, #0
 800aa18:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800aa1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aa20:	f107 020e 	add.w	r2, r7, #14
 800aa24:	8812      	ldrh	r2, [r2, #0]
 800aa26:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800aa28:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aa2c:	3302      	adds	r3, #2
 800aa2e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800aa32:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800aa36:	2218      	movs	r2, #24
 800aa38:	2100      	movs	r1, #0
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f000 fa86 	bl	800af4c <Osal_MemSet>
  rq.ogf = 0x08;
 800aa40:	2308      	movs	r3, #8
 800aa42:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800aa46:	2330      	movs	r3, #48	; 0x30
 800aa48:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800aa4c:	f107 0318 	add.w	r3, r7, #24
 800aa50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800aa54:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aa58:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800aa5c:	f107 0310 	add.w	r3, r7, #16
 800aa60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800aa64:	2305      	movs	r3, #5
 800aa66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800aa6a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800aa6e:	2100      	movs	r1, #0
 800aa70:	4618      	mov	r0, r3
 800aa72:	f000 f8f7 	bl	800ac64 <hci_send_req>
 800aa76:	4603      	mov	r3, r0
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	da01      	bge.n	800aa80 <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 800aa7c:	23ff      	movs	r3, #255	; 0xff
 800aa7e:	e016      	b.n	800aaae <hci_le_read_phy+0xc6>
  if ( resp.Status )
 800aa80:	f107 0310 	add.w	r3, r7, #16
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d003      	beq.n	800aa92 <hci_le_read_phy+0xaa>
    return resp.Status;
 800aa8a:	f107 0310 	add.w	r3, r7, #16
 800aa8e:	781b      	ldrb	r3, [r3, #0]
 800aa90:	e00d      	b.n	800aaae <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 800aa92:	f107 0310 	add.w	r3, r7, #16
 800aa96:	78da      	ldrb	r2, [r3, #3]
 800aa98:	f107 0308 	add.w	r3, r7, #8
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800aaa0:	f107 0310 	add.w	r3, r7, #16
 800aaa4:	791a      	ldrb	r2, [r3, #4]
 800aaa6:	1d3b      	adds	r3, r7, #4
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800aaac:	2300      	movs	r3, #0
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800aab8:	b590      	push	{r4, r7, lr}
 800aaba:	b0cd      	sub	sp, #308	; 0x134
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	4604      	mov	r4, r0
 800aac0:	4608      	mov	r0, r1
 800aac2:	4611      	mov	r1, r2
 800aac4:	1dfb      	adds	r3, r7, #7
 800aac6:	4622      	mov	r2, r4
 800aac8:	701a      	strb	r2, [r3, #0]
 800aaca:	1dbb      	adds	r3, r7, #6
 800aacc:	4602      	mov	r2, r0
 800aace:	701a      	strb	r2, [r3, #0]
 800aad0:	1d7b      	adds	r3, r7, #5
 800aad2:	460a      	mov	r2, r1
 800aad4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800aad6:	f107 0310 	add.w	r3, r7, #16
 800aada:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800aade:	f107 030f 	add.w	r3, r7, #15
 800aae2:	2200      	movs	r2, #0
 800aae4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800aae6:	2300      	movs	r3, #0
 800aae8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800aaec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aaf0:	1dfa      	adds	r2, r7, #7
 800aaf2:	7812      	ldrb	r2, [r2, #0]
 800aaf4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800aaf6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aafa:	3301      	adds	r3, #1
 800aafc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800ab00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab04:	1dba      	adds	r2, r7, #6
 800ab06:	7812      	ldrb	r2, [r2, #0]
 800ab08:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ab0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab0e:	3301      	adds	r3, #1
 800ab10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800ab14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab18:	1d7a      	adds	r2, r7, #5
 800ab1a:	7812      	ldrb	r2, [r2, #0]
 800ab1c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ab1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab22:	3301      	adds	r3, #1
 800ab24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ab28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ab2c:	2218      	movs	r2, #24
 800ab2e:	2100      	movs	r1, #0
 800ab30:	4618      	mov	r0, r3
 800ab32:	f000 fa0b 	bl	800af4c <Osal_MemSet>
  rq.ogf = 0x08;
 800ab36:	2308      	movs	r3, #8
 800ab38:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800ab3c:	2331      	movs	r3, #49	; 0x31
 800ab3e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ab42:	f107 0310 	add.w	r3, r7, #16
 800ab46:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ab4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab4e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ab52:	f107 030f 	add.w	r3, r7, #15
 800ab56:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ab60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ab64:	2100      	movs	r1, #0
 800ab66:	4618      	mov	r0, r3
 800ab68:	f000 f87c 	bl	800ac64 <hci_send_req>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	da01      	bge.n	800ab76 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 800ab72:	23ff      	movs	r3, #255	; 0xff
 800ab74:	e002      	b.n	800ab7c <hci_le_set_default_phy+0xc4>
  return status;
 800ab76:	f107 030f 	add.w	r3, r7, #15
 800ab7a:	781b      	ldrb	r3, [r3, #0]
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd90      	pop	{r4, r7, pc}
	...

0800ab88 <hci_init>:
static void OutputRspTrace(TL_EvtPacket_t *hcievt);
static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer);

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	4a08      	ldr	r2, [pc, #32]	; (800abb8 <hci_init+0x30>)
 800ab98:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800ab9a:	4a08      	ldr	r2, [pc, #32]	; (800abbc <hci_init+0x34>)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800aba0:	4806      	ldr	r0, [pc, #24]	; (800abbc <hci_init+0x34>)
 800aba2:	f000 f9af 	bl	800af04 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4618      	mov	r0, r3
 800abac:	f000 f8dc 	bl	800ad68 <TlInit>

  return;
 800abb0:	bf00      	nop
}
 800abb2:	3708      	adds	r7, #8
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}
 800abb8:	2000061c 	.word	0x2000061c
 800abbc:	200005f4 	.word	0x200005f4

0800abc0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b084      	sub	sp, #16
 800abc4:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800abc6:	4824      	ldr	r0, [pc, #144]	; (800ac58 <hci_user_evt_proc+0x98>)
 800abc8:	f000 fcc4 	bl	800b554 <LST_is_empty>
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d12f      	bne.n	800ac32 <hci_user_evt_proc+0x72>
 800abd2:	4b22      	ldr	r3, [pc, #136]	; (800ac5c <hci_user_evt_proc+0x9c>)
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d02b      	beq.n	800ac32 <hci_user_evt_proc+0x72>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800abda:	f107 030c 	add.w	r3, r7, #12
 800abde:	4619      	mov	r1, r3
 800abe0:	481d      	ldr	r0, [pc, #116]	; (800ac58 <hci_user_evt_proc+0x98>)
 800abe2:	f000 fd3e 	bl	800b662 <LST_remove_head>

    OutputEvtTrace(phcievtbuffer);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	4618      	mov	r0, r3
 800abea:	f000 f97b 	bl	800aee4 <OutputEvtTrace>

    if (hciContext.UserEvtRx != NULL)
 800abee:	4b1c      	ldr	r3, [pc, #112]	; (800ac60 <hci_user_evt_proc+0xa0>)
 800abf0:	69db      	ldr	r3, [r3, #28]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d00c      	beq.n	800ac10 <hci_user_evt_proc+0x50>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800abfa:	2301      	movs	r3, #1
 800abfc:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800abfe:	4b18      	ldr	r3, [pc, #96]	; (800ac60 <hci_user_evt_proc+0xa0>)
 800ac00:	69db      	ldr	r3, [r3, #28]
 800ac02:	1d3a      	adds	r2, r7, #4
 800ac04:	4610      	mov	r0, r2
 800ac06:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800ac08:	793a      	ldrb	r2, [r7, #4]
 800ac0a:	4b14      	ldr	r3, [pc, #80]	; (800ac5c <hci_user_evt_proc+0x9c>)
 800ac0c:	701a      	strb	r2, [r3, #0]
 800ac0e:	e002      	b.n	800ac16 <hci_user_evt_proc+0x56>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800ac10:	4b12      	ldr	r3, [pc, #72]	; (800ac5c <hci_user_evt_proc+0x9c>)
 800ac12:	2201      	movs	r2, #1
 800ac14:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800ac16:	4b11      	ldr	r3, [pc, #68]	; (800ac5c <hci_user_evt_proc+0x9c>)
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d004      	beq.n	800ac28 <hci_user_evt_proc+0x68>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	4618      	mov	r0, r3
 800ac22:	f000 ff99 	bl	800bb58 <TL_MM_EvtDone>
 800ac26:	e004      	b.n	800ac32 <hci_user_evt_proc+0x72>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	480a      	ldr	r0, [pc, #40]	; (800ac58 <hci_user_evt_proc+0x98>)
 800ac2e:	f000 fcb1 	bl	800b594 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800ac32:	4809      	ldr	r0, [pc, #36]	; (800ac58 <hci_user_evt_proc+0x98>)
 800ac34:	f000 fc8e 	bl	800b554 <LST_is_empty>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d107      	bne.n	800ac4e <hci_user_evt_proc+0x8e>
 800ac3e:	4b07      	ldr	r3, [pc, #28]	; (800ac5c <hci_user_evt_proc+0x9c>)
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d003      	beq.n	800ac4e <hci_user_evt_proc+0x8e>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800ac46:	4804      	ldr	r0, [pc, #16]	; (800ac58 <hci_user_evt_proc+0x98>)
 800ac48:	f001 fb35 	bl	800c2b6 <hci_notify_asynch_evt>
  }


  return;
 800ac4c:	bf00      	nop
 800ac4e:	bf00      	nop
}
 800ac50:	3710      	adds	r7, #16
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	200000fc 	.word	0x200000fc
 800ac5c:	20000108 	.word	0x20000108
 800ac60:	200005f4 	.word	0x200005f4

0800ac64 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b088      	sub	sp, #32
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800ac70:	2000      	movs	r0, #0
 800ac72:	f000 f8d5 	bl	800ae20 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800ac76:	2300      	movs	r3, #0
 800ac78:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	885b      	ldrh	r3, [r3, #2]
 800ac7e:	b21b      	sxth	r3, r3
 800ac80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac84:	b21a      	sxth	r2, r3
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	881b      	ldrh	r3, [r3, #0]
 800ac8a:	029b      	lsls	r3, r3, #10
 800ac8c:	b21b      	sxth	r3, r3
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	b21b      	sxth	r3, r3
 800ac92:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	68db      	ldr	r3, [r3, #12]
 800ac98:	b2d9      	uxtb	r1, r3
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	689a      	ldr	r2, [r3, #8]
 800ac9e:	8bbb      	ldrh	r3, [r7, #28]
 800aca0:	4618      	mov	r0, r3
 800aca2:	f000 f891 	bl	800adc8 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800aca6:	e052      	b.n	800ad4e <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800aca8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800acac:	f001 fb1a 	bl	800c2e4 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800acb0:	e047      	b.n	800ad42 <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800acb2:	f107 030c 	add.w	r3, r7, #12
 800acb6:	4619      	mov	r1, r3
 800acb8:	482a      	ldr	r0, [pc, #168]	; (800ad64 <hci_send_req+0x100>)
 800acba:	f000 fcd2 	bl	800b662 <LST_remove_head>

      OutputRspTrace(pevtpacket);
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	4618      	mov	r0, r3
 800acc2:	f000 f8fb 	bl	800aebc <OutputRspTrace>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	7a5b      	ldrb	r3, [r3, #9]
 800acca:	2b0f      	cmp	r3, #15
 800accc:	d114      	bne.n	800acf8 <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	330b      	adds	r3, #11
 800acd2:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	885b      	ldrh	r3, [r3, #2]
 800acd8:	b29b      	uxth	r3, r3
 800acda:	8bba      	ldrh	r2, [r7, #28]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d104      	bne.n	800acea <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	691b      	ldr	r3, [r3, #16]
 800ace4:	693a      	ldr	r2, [r7, #16]
 800ace6:	7812      	ldrb	r2, [r2, #0]
 800ace8:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	785b      	ldrb	r3, [r3, #1]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d027      	beq.n	800ad42 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800acf2:	2301      	movs	r3, #1
 800acf4:	77fb      	strb	r3, [r7, #31]
 800acf6:	e024      	b.n	800ad42 <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	330b      	adds	r3, #11
 800acfc:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ad04:	b29b      	uxth	r3, r3
 800ad06:	8bba      	ldrh	r2, [r7, #28]
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d114      	bne.n	800ad36 <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	7a9b      	ldrb	r3, [r3, #10]
 800ad10:	3b03      	subs	r3, #3
 800ad12:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	695a      	ldr	r2, [r3, #20]
 800ad18:	7dfb      	ldrb	r3, [r7, #23]
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	bfa8      	it	ge
 800ad1e:	461a      	movge	r2, r3
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6918      	ldr	r0, [r3, #16]
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	1cd9      	adds	r1, r3, #3
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	695b      	ldr	r3, [r3, #20]
 800ad30:	461a      	mov	r2, r3
 800ad32:	f002 f899 	bl	800ce68 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800ad36:	69bb      	ldr	r3, [r7, #24]
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d001      	beq.n	800ad42 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800ad42:	4808      	ldr	r0, [pc, #32]	; (800ad64 <hci_send_req+0x100>)
 800ad44:	f000 fc06 	bl	800b554 <LST_is_empty>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d0b1      	beq.n	800acb2 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800ad4e:	7ffb      	ldrb	r3, [r7, #31]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d0a9      	beq.n	800aca8 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800ad54:	2001      	movs	r0, #1
 800ad56:	f000 f863 	bl	800ae20 <NotifyCmdStatus>

  return 0;
 800ad5a:	2300      	movs	r3, #0
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3720      	adds	r7, #32
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	20000614 	.word	0x20000614

0800ad68 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b086      	sub	sp, #24
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800ad70:	480f      	ldr	r0, [pc, #60]	; (800adb0 <TlInit+0x48>)
 800ad72:	f000 fbdf 	bl	800b534 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800ad76:	4a0f      	ldr	r2, [pc, #60]	; (800adb4 <TlInit+0x4c>)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800ad7c:	480e      	ldr	r0, [pc, #56]	; (800adb8 <TlInit+0x50>)
 800ad7e:	f000 fbd9 	bl	800b534 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800ad82:	4b0e      	ldr	r3, [pc, #56]	; (800adbc <TlInit+0x54>)
 800ad84:	2201      	movs	r2, #1
 800ad86:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800ad88:	4b0d      	ldr	r3, [pc, #52]	; (800adc0 <TlInit+0x58>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d00a      	beq.n	800ada6 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800ad94:	4b0b      	ldr	r3, [pc, #44]	; (800adc4 <TlInit+0x5c>)
 800ad96:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800ad98:	4b09      	ldr	r3, [pc, #36]	; (800adc0 <TlInit+0x58>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f107 0208 	add.w	r2, r7, #8
 800ada0:	4610      	mov	r0, r2
 800ada2:	4798      	blx	r3
  }

  return;
 800ada4:	bf00      	nop
 800ada6:	bf00      	nop
}
 800ada8:	3718      	adds	r7, #24
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	20000614 	.word	0x20000614
 800adb4:	20000104 	.word	0x20000104
 800adb8:	200000fc 	.word	0x200000fc
 800adbc:	20000108 	.word	0x20000108
 800adc0:	200005f4 	.word	0x200005f4
 800adc4:	0800ae61 	.word	0x0800ae61

0800adc8 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
 800adce:	4603      	mov	r3, r0
 800add0:	603a      	str	r2, [r7, #0]
 800add2:	80fb      	strh	r3, [r7, #6]
 800add4:	460b      	mov	r3, r1
 800add6:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800add8:	4b0f      	ldr	r3, [pc, #60]	; (800ae18 <SendCmd+0x50>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	88fa      	ldrh	r2, [r7, #6]
 800adde:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800ade2:	4b0d      	ldr	r3, [pc, #52]	; (800ae18 <SendCmd+0x50>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	797a      	ldrb	r2, [r7, #5]
 800ade8:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800adea:	4b0b      	ldr	r3, [pc, #44]	; (800ae18 <SendCmd+0x50>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	330c      	adds	r3, #12
 800adf0:	797a      	ldrb	r2, [r7, #5]
 800adf2:	6839      	ldr	r1, [r7, #0]
 800adf4:	4618      	mov	r0, r3
 800adf6:	f002 f837 	bl	800ce68 <memcpy>

  OutputCmdTrace(pCmdBuffer);
 800adfa:	4b07      	ldr	r3, [pc, #28]	; (800ae18 <SendCmd+0x50>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4618      	mov	r0, r3
 800ae00:	f000 f852 	bl	800aea8 <OutputCmdTrace>

  hciContext.io.Send(0,0);
 800ae04:	4b05      	ldr	r3, [pc, #20]	; (800ae1c <SendCmd+0x54>)
 800ae06:	691b      	ldr	r3, [r3, #16]
 800ae08:	2100      	movs	r1, #0
 800ae0a:	2000      	movs	r0, #0
 800ae0c:	4798      	blx	r3

  return;
 800ae0e:	bf00      	nop
}
 800ae10:	3708      	adds	r7, #8
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	20000104 	.word	0x20000104
 800ae1c:	200005f4 	.word	0x200005f4

0800ae20 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	4603      	mov	r3, r0
 800ae28:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800ae2a:	79fb      	ldrb	r3, [r7, #7]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d108      	bne.n	800ae42 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800ae30:	4b0a      	ldr	r3, [pc, #40]	; (800ae5c <NotifyCmdStatus+0x3c>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d00d      	beq.n	800ae54 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800ae38:	4b08      	ldr	r3, [pc, #32]	; (800ae5c <NotifyCmdStatus+0x3c>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	2000      	movs	r0, #0
 800ae3e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800ae40:	e008      	b.n	800ae54 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800ae42:	4b06      	ldr	r3, [pc, #24]	; (800ae5c <NotifyCmdStatus+0x3c>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d004      	beq.n	800ae54 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800ae4a:	4b04      	ldr	r3, [pc, #16]	; (800ae5c <NotifyCmdStatus+0x3c>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	2001      	movs	r0, #1
 800ae50:	4798      	blx	r3
  return;
 800ae52:	bf00      	nop
 800ae54:	bf00      	nop
}
 800ae56:	3708      	adds	r7, #8
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}
 800ae5c:	2000061c 	.word	0x2000061c

0800ae60 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	7a5b      	ldrb	r3, [r3, #9]
 800ae6c:	2b0f      	cmp	r3, #15
 800ae6e:	d003      	beq.n	800ae78 <TlEvtReceived+0x18>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	7a5b      	ldrb	r3, [r3, #9]
 800ae74:	2b0e      	cmp	r3, #14
 800ae76:	d107      	bne.n	800ae88 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800ae78:	6879      	ldr	r1, [r7, #4]
 800ae7a:	4809      	ldr	r0, [pc, #36]	; (800aea0 <TlEvtReceived+0x40>)
 800ae7c:	f000 fbae 	bl	800b5dc <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800ae80:	2000      	movs	r0, #0
 800ae82:	f001 fa24 	bl	800c2ce <hci_cmd_resp_release>
 800ae86:	e006      	b.n	800ae96 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800ae88:	6879      	ldr	r1, [r7, #4]
 800ae8a:	4806      	ldr	r0, [pc, #24]	; (800aea4 <TlEvtReceived+0x44>)
 800ae8c:	f000 fba6 	bl	800b5dc <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800ae90:	4804      	ldr	r0, [pc, #16]	; (800aea4 <TlEvtReceived+0x44>)
 800ae92:	f001 fa10 	bl	800c2b6 <hci_notify_asynch_evt>
  }

  return;
 800ae96:	bf00      	nop
}
 800ae98:	3708      	adds	r7, #8
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	20000614 	.word	0x20000614
 800aea4:	200000fc 	.word	0x200000fc

0800aea8 <OutputCmdTrace>:

static void OutputCmdTrace(TL_CmdPacket_t *pCmdBuffer)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b083      	sub	sp, #12
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
    TL_HCI_CMD_DBG_MSG(" payload:");
    TL_HCI_CMD_DBG_BUF(pCmdBuffer->cmdserial.cmd.payload, pCmdBuffer->cmdserial.cmd.plen, "");
  }
  TL_HCI_CMD_DBG_MSG("\r\n");

  return;
 800aeb0:	bf00      	nop
}
 800aeb2:	370c      	adds	r7, #12
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeba:	4770      	bx	lr

0800aebc <OutputRspTrace>:

static void OutputRspTrace(TL_EvtPacket_t *hcievt)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b083      	sub	sp, #12
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  switch(hcievt->evtserial.evt.evtcode)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	7a5b      	ldrb	r3, [r3, #9]
 800aec8:	2b0e      	cmp	r3, #14
 800aeca:	d002      	beq.n	800aed2 <OutputRspTrace+0x16>
 800aecc:	2b0f      	cmp	r3, #15
 800aece:	d002      	beq.n	800aed6 <OutputRspTrace+0x1a>
      }
      break;

    default:
      TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", hcievt->evtserial.evt.evtcode);
      break;
 800aed0:	e002      	b.n	800aed8 <OutputRspTrace+0x1c>
      break;
 800aed2:	bf00      	nop
 800aed4:	e000      	b.n	800aed8 <OutputRspTrace+0x1c>
      break;
 800aed6:	bf00      	nop
  }

  TL_HCI_CMD_DBG_MSG("\r\n");

  return;
 800aed8:	bf00      	nop
}
 800aeda:	370c      	adds	r7, #12
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr

0800aee4 <OutputEvtTrace>:

static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b083      	sub	sp, #12
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  if(phcievtbuffer->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	7a5b      	ldrb	r3, [r3, #9]
 800aef0:	2bff      	cmp	r3, #255	; 0xff
 800aef2:	d100      	bne.n	800aef6 <OutputEvtTrace+0x12>
    }
  }

  TL_HCI_EVT_DBG_MSG("\r\n");

  return;
 800aef4:	bf00      	nop
 800aef6:	bf00      	nop
}
 800aef8:	370c      	adds	r7, #12
 800aefa:	46bd      	mov	sp, r7
 800aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af00:	4770      	bx	lr
	...

0800af04 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	4a05      	ldr	r2, [pc, #20]	; (800af24 <hci_register_io_bus+0x20>)
 800af10:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	4a04      	ldr	r2, [pc, #16]	; (800af28 <hci_register_io_bus+0x24>)
 800af16:	611a      	str	r2, [r3, #16]

  return;
 800af18:	bf00      	nop
}
 800af1a:	370c      	adds	r7, #12
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr
 800af24:	0800b931 	.word	0x0800b931
 800af28:	0800b999 	.word	0x0800b999

0800af2c <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	60b9      	str	r1, [r7, #8]
 800af36:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800af38:	687a      	ldr	r2, [r7, #4]
 800af3a:	68b9      	ldr	r1, [r7, #8]
 800af3c:	68f8      	ldr	r0, [r7, #12]
 800af3e:	f001 ff93 	bl	800ce68 <memcpy>
 800af42:	4603      	mov	r3, r0
}
 800af44:	4618      	mov	r0, r3
 800af46:	3710      	adds	r7, #16
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
 800af52:	60f8      	str	r0, [r7, #12]
 800af54:	60b9      	str	r1, [r7, #8]
 800af56:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800af58:	687a      	ldr	r2, [r7, #4]
 800af5a:	68b9      	ldr	r1, [r7, #8]
 800af5c:	68f8      	ldr	r0, [r7, #12]
 800af5e:	f001 ff8e 	bl	800ce7e <memset>
 800af62:	4603      	mov	r3, r0
}
 800af64:	4618      	mov	r0, r3
 800af66:	3710      	adds	r7, #16
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800af6c:	b480      	push	{r7}
 800af6e:	b085      	sub	sp, #20
 800af70:	af00      	add	r7, sp, #0
 800af72:	4603      	mov	r3, r0
 800af74:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800af76:	4b0f      	ldr	r3, [pc, #60]	; (800afb4 <OTP_Read+0x48>)
 800af78:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800af7a:	e002      	b.n	800af82 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	3b08      	subs	r3, #8
 800af80:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	3307      	adds	r3, #7
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	79fa      	ldrb	r2, [r7, #7]
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d003      	beq.n	800af96 <OTP_Read+0x2a>
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	4a09      	ldr	r2, [pc, #36]	; (800afb8 <OTP_Read+0x4c>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d1f2      	bne.n	800af7c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	3307      	adds	r3, #7
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	79fa      	ldrb	r2, [r7, #7]
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d001      	beq.n	800afa6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800afa2:	2300      	movs	r3, #0
 800afa4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800afa6:	68fb      	ldr	r3, [r7, #12]
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3714      	adds	r7, #20
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr
 800afb4:	1fff73f8 	.word	0x1fff73f8
 800afb8:	1fff7000 	.word	0x1fff7000

0800afbc <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b08a      	sub	sp, #40	; 0x28
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800afc4:	2300      	movs	r3, #0
 800afc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	3301      	adds	r3, #1
 800afce:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800afd0:	6a3b      	ldr	r3, [r7, #32]
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	2bff      	cmp	r3, #255	; 0xff
 800afd6:	d000      	beq.n	800afda <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800afd8:	e04a      	b.n	800b070 <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800afda:	6a3b      	ldr	r3, [r7, #32]
 800afdc:	3302      	adds	r3, #2
 800afde:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 800afe0:	69fb      	ldr	r3, [r7, #28]
 800afe2:	881b      	ldrh	r3, [r3, #0]
 800afe4:	b29b      	uxth	r3, r3
 800afe6:	461a      	mov	r2, r3
 800afe8:	f640 4301 	movw	r3, #3073	; 0xc01
 800afec:	429a      	cmp	r2, r3
 800afee:	d000      	beq.n	800aff2 <PeerToPeer_Event_Handler+0x36>
          break;
 800aff0:	e03d      	b.n	800b06e <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 800aff2:	69fb      	ldr	r3, [r7, #28]
 800aff4:	3302      	adds	r3, #2
 800aff6:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800aff8:	69bb      	ldr	r3, [r7, #24]
 800affa:	885b      	ldrh	r3, [r3, #2]
 800affc:	b29b      	uxth	r3, r3
 800affe:	461a      	mov	r2, r3
 800b000:	4b1e      	ldr	r3, [pc, #120]	; (800b07c <PeerToPeer_Event_Handler+0xc0>)
 800b002:	889b      	ldrh	r3, [r3, #4]
 800b004:	3302      	adds	r3, #2
 800b006:	429a      	cmp	r2, r3
 800b008:	d118      	bne.n	800b03c <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 800b00a:	2301      	movs	r3, #1
 800b00c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800b010:	69bb      	ldr	r3, [r7, #24]
 800b012:	7a1b      	ldrb	r3, [r3, #8]
 800b014:	f003 0301 	and.w	r3, r3, #1
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d007      	beq.n	800b02c <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800b01c:	2300      	movs	r3, #0
 800b01e:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800b020:	f107 0308 	add.w	r3, r7, #8
 800b024:	4618      	mov	r0, r3
 800b026:	f001 f9a1 	bl	800c36c <P2PS_STM_App_Notification>
        break;
 800b02a:	e01f      	b.n	800b06c <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800b02c:	2301      	movs	r3, #1
 800b02e:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800b030:	f107 0308 	add.w	r3, r7, #8
 800b034:	4618      	mov	r0, r3
 800b036:	f001 f999 	bl	800c36c <P2PS_STM_App_Notification>
        break;
 800b03a:	e017      	b.n	800b06c <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800b03c:	69bb      	ldr	r3, [r7, #24]
 800b03e:	885b      	ldrh	r3, [r3, #2]
 800b040:	b29b      	uxth	r3, r3
 800b042:	461a      	mov	r2, r3
 800b044:	4b0d      	ldr	r3, [pc, #52]	; (800b07c <PeerToPeer_Event_Handler+0xc0>)
 800b046:	885b      	ldrh	r3, [r3, #2]
 800b048:	3301      	adds	r3, #1
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d10e      	bne.n	800b06c <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800b04e:	2303      	movs	r3, #3
 800b050:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800b052:	69bb      	ldr	r3, [r7, #24]
 800b054:	88db      	ldrh	r3, [r3, #6]
 800b056:	b29b      	uxth	r3, r3
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800b05c:	69bb      	ldr	r3, [r7, #24]
 800b05e:	3308      	adds	r3, #8
 800b060:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 800b062:	f107 0308 	add.w	r3, r7, #8
 800b066:	4618      	mov	r0, r3
 800b068:	f001 f980 	bl	800c36c <P2PS_STM_App_Notification>
        break;
 800b06c:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800b06e:	bf00      	nop
  }

  return(return_value);
 800b070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800b074:	4618      	mov	r0, r3
 800b076:	3728      	adds	r7, #40	; 0x28
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}
 800b07c:	2000010c 	.word	0x2000010c

0800b080 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b08a      	sub	sp, #40	; 0x28
 800b084:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800b086:	484a      	ldr	r0, [pc, #296]	; (800b1b0 <P2PS_STM_Init+0x130>)
 800b088:	f000 fba6 	bl	800b7d8 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800b08c:	238f      	movs	r3, #143	; 0x8f
 800b08e:	703b      	strb	r3, [r7, #0]
 800b090:	23e5      	movs	r3, #229	; 0xe5
 800b092:	707b      	strb	r3, [r7, #1]
 800b094:	23b3      	movs	r3, #179	; 0xb3
 800b096:	70bb      	strb	r3, [r7, #2]
 800b098:	23d5      	movs	r3, #213	; 0xd5
 800b09a:	70fb      	strb	r3, [r7, #3]
 800b09c:	232e      	movs	r3, #46	; 0x2e
 800b09e:	713b      	strb	r3, [r7, #4]
 800b0a0:	237f      	movs	r3, #127	; 0x7f
 800b0a2:	717b      	strb	r3, [r7, #5]
 800b0a4:	234a      	movs	r3, #74	; 0x4a
 800b0a6:	71bb      	strb	r3, [r7, #6]
 800b0a8:	2398      	movs	r3, #152	; 0x98
 800b0aa:	71fb      	strb	r3, [r7, #7]
 800b0ac:	232a      	movs	r3, #42	; 0x2a
 800b0ae:	723b      	strb	r3, [r7, #8]
 800b0b0:	2348      	movs	r3, #72	; 0x48
 800b0b2:	727b      	strb	r3, [r7, #9]
 800b0b4:	237a      	movs	r3, #122	; 0x7a
 800b0b6:	72bb      	strb	r3, [r7, #10]
 800b0b8:	23cc      	movs	r3, #204	; 0xcc
 800b0ba:	72fb      	strb	r3, [r7, #11]
 800b0bc:	2340      	movs	r3, #64	; 0x40
 800b0be:	733b      	strb	r3, [r7, #12]
 800b0c0:	23fe      	movs	r3, #254	; 0xfe
 800b0c2:	737b      	strb	r3, [r7, #13]
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	73bb      	strb	r3, [r7, #14]
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800b0cc:	4639      	mov	r1, r7
 800b0ce:	4b39      	ldr	r3, [pc, #228]	; (800b1b4 <P2PS_STM_Init+0x134>)
 800b0d0:	9300      	str	r3, [sp, #0]
 800b0d2:	2308      	movs	r3, #8
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	2002      	movs	r0, #2
 800b0d8:	f7ff f8ea 	bl	800a2b0 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800b0dc:	2319      	movs	r3, #25
 800b0de:	703b      	strb	r3, [r7, #0]
 800b0e0:	23ed      	movs	r3, #237	; 0xed
 800b0e2:	707b      	strb	r3, [r7, #1]
 800b0e4:	2382      	movs	r3, #130	; 0x82
 800b0e6:	70bb      	strb	r3, [r7, #2]
 800b0e8:	23ae      	movs	r3, #174	; 0xae
 800b0ea:	70fb      	strb	r3, [r7, #3]
 800b0ec:	23ed      	movs	r3, #237	; 0xed
 800b0ee:	713b      	strb	r3, [r7, #4]
 800b0f0:	2321      	movs	r3, #33	; 0x21
 800b0f2:	717b      	strb	r3, [r7, #5]
 800b0f4:	234c      	movs	r3, #76	; 0x4c
 800b0f6:	71bb      	strb	r3, [r7, #6]
 800b0f8:	239d      	movs	r3, #157	; 0x9d
 800b0fa:	71fb      	strb	r3, [r7, #7]
 800b0fc:	2341      	movs	r3, #65	; 0x41
 800b0fe:	723b      	strb	r3, [r7, #8]
 800b100:	2345      	movs	r3, #69	; 0x45
 800b102:	727b      	strb	r3, [r7, #9]
 800b104:	2322      	movs	r3, #34	; 0x22
 800b106:	72bb      	strb	r3, [r7, #10]
 800b108:	238e      	movs	r3, #142	; 0x8e
 800b10a:	72fb      	strb	r3, [r7, #11]
 800b10c:	2341      	movs	r3, #65	; 0x41
 800b10e:	733b      	strb	r3, [r7, #12]
 800b110:	23fe      	movs	r3, #254	; 0xfe
 800b112:	737b      	strb	r3, [r7, #13]
 800b114:	2300      	movs	r3, #0
 800b116:	73bb      	strb	r3, [r7, #14]
 800b118:	2300      	movs	r3, #0
 800b11a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800b11c:	4b25      	ldr	r3, [pc, #148]	; (800b1b4 <P2PS_STM_Init+0x134>)
 800b11e:	8818      	ldrh	r0, [r3, #0]
 800b120:	463a      	mov	r2, r7
 800b122:	4b25      	ldr	r3, [pc, #148]	; (800b1b8 <P2PS_STM_Init+0x138>)
 800b124:	9305      	str	r3, [sp, #20]
 800b126:	2301      	movs	r3, #1
 800b128:	9304      	str	r3, [sp, #16]
 800b12a:	230a      	movs	r3, #10
 800b12c:	9303      	str	r3, [sp, #12]
 800b12e:	2301      	movs	r3, #1
 800b130:	9302      	str	r3, [sp, #8]
 800b132:	2300      	movs	r3, #0
 800b134:	9301      	str	r3, [sp, #4]
 800b136:	2306      	movs	r3, #6
 800b138:	9300      	str	r3, [sp, #0]
 800b13a:	2302      	movs	r3, #2
 800b13c:	2102      	movs	r1, #2
 800b13e:	f7ff f966 	bl	800a40e <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800b142:	2319      	movs	r3, #25
 800b144:	703b      	strb	r3, [r7, #0]
 800b146:	23ed      	movs	r3, #237	; 0xed
 800b148:	707b      	strb	r3, [r7, #1]
 800b14a:	2382      	movs	r3, #130	; 0x82
 800b14c:	70bb      	strb	r3, [r7, #2]
 800b14e:	23ae      	movs	r3, #174	; 0xae
 800b150:	70fb      	strb	r3, [r7, #3]
 800b152:	23ed      	movs	r3, #237	; 0xed
 800b154:	713b      	strb	r3, [r7, #4]
 800b156:	2321      	movs	r3, #33	; 0x21
 800b158:	717b      	strb	r3, [r7, #5]
 800b15a:	234c      	movs	r3, #76	; 0x4c
 800b15c:	71bb      	strb	r3, [r7, #6]
 800b15e:	239d      	movs	r3, #157	; 0x9d
 800b160:	71fb      	strb	r3, [r7, #7]
 800b162:	2341      	movs	r3, #65	; 0x41
 800b164:	723b      	strb	r3, [r7, #8]
 800b166:	2345      	movs	r3, #69	; 0x45
 800b168:	727b      	strb	r3, [r7, #9]
 800b16a:	2322      	movs	r3, #34	; 0x22
 800b16c:	72bb      	strb	r3, [r7, #10]
 800b16e:	238e      	movs	r3, #142	; 0x8e
 800b170:	72fb      	strb	r3, [r7, #11]
 800b172:	2342      	movs	r3, #66	; 0x42
 800b174:	733b      	strb	r3, [r7, #12]
 800b176:	23fe      	movs	r3, #254	; 0xfe
 800b178:	737b      	strb	r3, [r7, #13]
 800b17a:	2300      	movs	r3, #0
 800b17c:	73bb      	strb	r3, [r7, #14]
 800b17e:	2300      	movs	r3, #0
 800b180:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800b182:	4b0c      	ldr	r3, [pc, #48]	; (800b1b4 <P2PS_STM_Init+0x134>)
 800b184:	8818      	ldrh	r0, [r3, #0]
 800b186:	463a      	mov	r2, r7
 800b188:	4b0c      	ldr	r3, [pc, #48]	; (800b1bc <P2PS_STM_Init+0x13c>)
 800b18a:	9305      	str	r3, [sp, #20]
 800b18c:	2301      	movs	r3, #1
 800b18e:	9304      	str	r3, [sp, #16]
 800b190:	230a      	movs	r3, #10
 800b192:	9303      	str	r3, [sp, #12]
 800b194:	2301      	movs	r3, #1
 800b196:	9302      	str	r3, [sp, #8]
 800b198:	2300      	movs	r3, #0
 800b19a:	9301      	str	r3, [sp, #4]
 800b19c:	2310      	movs	r3, #16
 800b19e:	9300      	str	r3, [sp, #0]
 800b1a0:	237b      	movs	r3, #123	; 0x7b
 800b1a2:	2102      	movs	r1, #2
 800b1a4:	f7ff f933 	bl	800a40e <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 800b1a8:	bf00      	nop
}
 800b1aa:	3710      	adds	r7, #16
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}
 800b1b0:	0800afbd 	.word	0x0800afbd
 800b1b4:	2000010c 	.word	0x2000010c
 800b1b8:	2000010e 	.word	0x2000010e
 800b1bc:	20000110 	.word	0x20000110

0800b1c0 <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b086      	sub	sp, #24
 800b1c4:	af02      	add	r7, sp, #8
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	6039      	str	r1, [r7, #0]
 800b1ca:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800b1cc:	2342      	movs	r3, #66	; 0x42
 800b1ce:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800b1d0:	88fb      	ldrh	r3, [r7, #6]
 800b1d2:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d000      	beq.n	800b1dc <P2PS_STM_App_Update_Char+0x1c>
                             (uint8_t *)  pPayload);
    
      break;

    default:
      break;
 800b1da:	e00c      	b.n	800b1f6 <P2PS_STM_App_Update_Char+0x36>
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800b1dc:	4b08      	ldr	r3, [pc, #32]	; (800b200 <P2PS_STM_App_Update_Char+0x40>)
 800b1de:	8818      	ldrh	r0, [r3, #0]
 800b1e0:	4b07      	ldr	r3, [pc, #28]	; (800b200 <P2PS_STM_App_Update_Char+0x40>)
 800b1e2:	8899      	ldrh	r1, [r3, #4]
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	9300      	str	r3, [sp, #0]
 800b1e8:	237b      	movs	r3, #123	; 0x7b
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f7ff f9f9 	bl	800a5e2 <aci_gatt_update_char_value>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	73fb      	strb	r3, [r7, #15]
      break;
 800b1f4:	bf00      	nop
  }

  return result;
 800b1f6:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3710      	adds	r7, #16
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}
 800b200:	2000010c 	.word	0x2000010c

0800b204 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b088      	sub	sp, #32
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b20c:	f107 030c 	add.w	r3, r7, #12
 800b210:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800b218:	69fb      	ldr	r3, [r7, #28]
 800b21a:	2121      	movs	r1, #33	; 0x21
 800b21c:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800b220:	f000 f88c 	bl	800b33c <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b224:	69fb      	ldr	r3, [r7, #28]
 800b226:	330b      	adds	r3, #11
 800b228:	78db      	ldrb	r3, [r3, #3]
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3720      	adds	r7, #32
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}

0800b232 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800b232:	b580      	push	{r7, lr}
 800b234:	b088      	sub	sp, #32
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b23a:	f107 030c 	add.w	r3, r7, #12
 800b23e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800b246:	69fb      	ldr	r3, [r7, #28]
 800b248:	210f      	movs	r1, #15
 800b24a:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800b24e:	f000 f875 	bl	800b33c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b252:	69fb      	ldr	r3, [r7, #28]
 800b254:	330b      	adds	r3, #11
 800b256:	78db      	ldrb	r3, [r3, #3]
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3720      	adds	r7, #32
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <shci_init>:
static void OutputRspTrace(TL_EvtPacket_t *p_rsp);
static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer);

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	4a08      	ldr	r2, [pc, #32]	; (800b290 <shci_init+0x30>)
 800b270:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800b272:	4a08      	ldr	r2, [pc, #32]	; (800b294 <shci_init+0x34>)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800b278:	4806      	ldr	r0, [pc, #24]	; (800b294 <shci_init+0x34>)
 800b27a:	f000 f947 	bl	800b50c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	4618      	mov	r0, r3
 800b284:	f000 f8a0 	bl	800b3c8 <TlInit>

  return;
 800b288:	bf00      	nop
}
 800b28a:	3708      	adds	r7, #8
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}
 800b290:	20000640 	.word	0x20000640
 800b294:	20000620 	.word	0x20000620

0800b298 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b29e:	4824      	ldr	r0, [pc, #144]	; (800b330 <shci_user_evt_proc+0x98>)
 800b2a0:	f000 f958 	bl	800b554 <LST_is_empty>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d12f      	bne.n	800b30a <shci_user_evt_proc+0x72>
 800b2aa:	4b22      	ldr	r3, [pc, #136]	; (800b334 <shci_user_evt_proc+0x9c>)
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d02b      	beq.n	800b30a <shci_user_evt_proc+0x72>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800b2b2:	f107 030c 	add.w	r3, r7, #12
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	481d      	ldr	r0, [pc, #116]	; (800b330 <shci_user_evt_proc+0x98>)
 800b2ba:	f000 f9d2 	bl	800b662 <LST_remove_head>

    OutputEvtTrace(phcievtbuffer);
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f000 f913 	bl	800b4ec <OutputEvtTrace>

    if (shciContext.UserEvtRx != NULL)
 800b2c6:	4b1c      	ldr	r3, [pc, #112]	; (800b338 <shci_user_evt_proc+0xa0>)
 800b2c8:	69db      	ldr	r3, [r3, #28]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d00c      	beq.n	800b2e8 <shci_user_evt_proc+0x50>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800b2d6:	4b18      	ldr	r3, [pc, #96]	; (800b338 <shci_user_evt_proc+0xa0>)
 800b2d8:	69db      	ldr	r3, [r3, #28]
 800b2da:	1d3a      	adds	r2, r7, #4
 800b2dc:	4610      	mov	r0, r2
 800b2de:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800b2e0:	793a      	ldrb	r2, [r7, #4]
 800b2e2:	4b14      	ldr	r3, [pc, #80]	; (800b334 <shci_user_evt_proc+0x9c>)
 800b2e4:	701a      	strb	r2, [r3, #0]
 800b2e6:	e002      	b.n	800b2ee <shci_user_evt_proc+0x56>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b2e8:	4b12      	ldr	r3, [pc, #72]	; (800b334 <shci_user_evt_proc+0x9c>)
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800b2ee:	4b11      	ldr	r3, [pc, #68]	; (800b334 <shci_user_evt_proc+0x9c>)
 800b2f0:	781b      	ldrb	r3, [r3, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d004      	beq.n	800b300 <shci_user_evt_proc+0x68>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f000 fc2d 	bl	800bb58 <TL_MM_EvtDone>
 800b2fe:	e004      	b.n	800b30a <shci_user_evt_proc+0x72>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	4619      	mov	r1, r3
 800b304:	480a      	ldr	r0, [pc, #40]	; (800b330 <shci_user_evt_proc+0x98>)
 800b306:	f000 f945 	bl	800b594 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b30a:	4809      	ldr	r0, [pc, #36]	; (800b330 <shci_user_evt_proc+0x98>)
 800b30c:	f000 f922 	bl	800b554 <LST_is_empty>
 800b310:	4603      	mov	r3, r0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d107      	bne.n	800b326 <shci_user_evt_proc+0x8e>
 800b316:	4b07      	ldr	r3, [pc, #28]	; (800b334 <shci_user_evt_proc+0x9c>)
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d003      	beq.n	800b326 <shci_user_evt_proc+0x8e>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800b31e:	4804      	ldr	r0, [pc, #16]	; (800b330 <shci_user_evt_proc+0x98>)
 800b320:	f7f6 f837 	bl	8001392 <shci_notify_asynch_evt>
  }


  return;
 800b324:	bf00      	nop
 800b326:	bf00      	nop
}
 800b328:	3710      	adds	r7, #16
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	bf00      	nop
 800b330:	20000138 	.word	0x20000138
 800b334:	20000148 	.word	0x20000148
 800b338:	20000620 	.word	0x20000620

0800b33c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b084      	sub	sp, #16
 800b340:	af00      	add	r7, sp, #0
 800b342:	60ba      	str	r2, [r7, #8]
 800b344:	607b      	str	r3, [r7, #4]
 800b346:	4603      	mov	r3, r0
 800b348:	81fb      	strh	r3, [r7, #14]
 800b34a:	460b      	mov	r3, r1
 800b34c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800b34e:	2000      	movs	r0, #0
 800b350:	f000 f86c 	bl	800b42c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800b354:	4b1a      	ldr	r3, [pc, #104]	; (800b3c0 <shci_send+0x84>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	89fa      	ldrh	r2, [r7, #14]
 800b35a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800b35e:	4b18      	ldr	r3, [pc, #96]	; (800b3c0 <shci_send+0x84>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	7b7a      	ldrb	r2, [r7, #13]
 800b364:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800b366:	4b16      	ldr	r3, [pc, #88]	; (800b3c0 <shci_send+0x84>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	330c      	adds	r3, #12
 800b36c:	7b7a      	ldrb	r2, [r7, #13]
 800b36e:	68b9      	ldr	r1, [r7, #8]
 800b370:	4618      	mov	r0, r3
 800b372:	f001 fd79 	bl	800ce68 <memcpy>

  OutputCmdTrace(pCmdBuffer);
 800b376:	4b12      	ldr	r3, [pc, #72]	; (800b3c0 <shci_send+0x84>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	4618      	mov	r0, r3
 800b37c:	f000 f89c 	bl	800b4b8 <OutputCmdTrace>

  shciContext.io.Send(0,0);
 800b380:	4b10      	ldr	r3, [pc, #64]	; (800b3c4 <shci_send+0x88>)
 800b382:	691b      	ldr	r3, [r3, #16]
 800b384:	2100      	movs	r1, #0
 800b386:	2000      	movs	r0, #0
 800b388:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800b38a:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800b38e:	f7f6 f818 	bl	80013c2 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f103 0008 	add.w	r0, r3, #8
 800b398:	4b09      	ldr	r3, [pc, #36]	; (800b3c0 <shci_send+0x84>)
 800b39a:	6819      	ldr	r1, [r3, #0]
 800b39c:	4b08      	ldr	r3, [pc, #32]	; (800b3c0 <shci_send+0x84>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	789b      	ldrb	r3, [r3, #2]
 800b3a2:	3303      	adds	r3, #3
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	f001 fd5f 	bl	800ce68 <memcpy>

  OutputRspTrace(p_rsp);
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 f88e 	bl	800b4cc <OutputRspTrace>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b3b0:	2001      	movs	r0, #1
 800b3b2:	f000 f83b 	bl	800b42c <Cmd_SetStatus>

  return;
 800b3b6:	bf00      	nop
}
 800b3b8:	3710      	adds	r7, #16
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	20000144 	.word	0x20000144
 800b3c4:	20000620 	.word	0x20000620

0800b3c8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b086      	sub	sp, #24
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800b3d0:	4a10      	ldr	r2, [pc, #64]	; (800b414 <TlInit+0x4c>)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800b3d6:	4810      	ldr	r0, [pc, #64]	; (800b418 <TlInit+0x50>)
 800b3d8:	f000 f8ac 	bl	800b534 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b3dc:	2001      	movs	r0, #1
 800b3de:	f000 f825 	bl	800b42c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b3e2:	4b0e      	ldr	r3, [pc, #56]	; (800b41c <TlInit+0x54>)
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800b3e8:	4b0d      	ldr	r3, [pc, #52]	; (800b420 <TlInit+0x58>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d00c      	beq.n	800b40a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800b3f4:	4b0b      	ldr	r3, [pc, #44]	; (800b424 <TlInit+0x5c>)
 800b3f6:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800b3f8:	4b0b      	ldr	r3, [pc, #44]	; (800b428 <TlInit+0x60>)
 800b3fa:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800b3fc:	4b08      	ldr	r3, [pc, #32]	; (800b420 <TlInit+0x58>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f107 020c 	add.w	r2, r7, #12
 800b404:	4610      	mov	r0, r2
 800b406:	4798      	blx	r3
  }

  return;
 800b408:	bf00      	nop
 800b40a:	bf00      	nop
}
 800b40c:	3718      	adds	r7, #24
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
 800b412:	bf00      	nop
 800b414:	20000144 	.word	0x20000144
 800b418:	20000138 	.word	0x20000138
 800b41c:	20000148 	.word	0x20000148
 800b420:	20000620 	.word	0x20000620
 800b424:	0800b47d 	.word	0x0800b47d
 800b428:	0800b495 	.word	0x0800b495

0800b42c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b082      	sub	sp, #8
 800b430:	af00      	add	r7, sp, #0
 800b432:	4603      	mov	r3, r0
 800b434:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800b436:	79fb      	ldrb	r3, [r7, #7]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d10b      	bne.n	800b454 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800b43c:	4b0d      	ldr	r3, [pc, #52]	; (800b474 <Cmd_SetStatus+0x48>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d003      	beq.n	800b44c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800b444:	4b0b      	ldr	r3, [pc, #44]	; (800b474 <Cmd_SetStatus+0x48>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2000      	movs	r0, #0
 800b44a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800b44c:	4b0a      	ldr	r3, [pc, #40]	; (800b478 <Cmd_SetStatus+0x4c>)
 800b44e:	2200      	movs	r2, #0
 800b450:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800b452:	e00b      	b.n	800b46c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800b454:	4b08      	ldr	r3, [pc, #32]	; (800b478 <Cmd_SetStatus+0x4c>)
 800b456:	2201      	movs	r2, #1
 800b458:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800b45a:	4b06      	ldr	r3, [pc, #24]	; (800b474 <Cmd_SetStatus+0x48>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d004      	beq.n	800b46c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800b462:	4b04      	ldr	r3, [pc, #16]	; (800b474 <Cmd_SetStatus+0x48>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	2001      	movs	r0, #1
 800b468:	4798      	blx	r3
  return;
 800b46a:	bf00      	nop
 800b46c:	bf00      	nop
}
 800b46e:	3708      	adds	r7, #8
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}
 800b474:	20000640 	.word	0x20000640
 800b478:	20000140 	.word	0x20000140

0800b47c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b082      	sub	sp, #8
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800b484:	2000      	movs	r0, #0
 800b486:	f7f5 ff91 	bl	80013ac <shci_cmd_resp_release>

  return;
 800b48a:	bf00      	nop
}
 800b48c:	3708      	adds	r7, #8
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
	...

0800b494 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b082      	sub	sp, #8
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800b49c:	6879      	ldr	r1, [r7, #4]
 800b49e:	4805      	ldr	r0, [pc, #20]	; (800b4b4 <TlUserEvtReceived+0x20>)
 800b4a0:	f000 f89c 	bl	800b5dc <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b4a4:	4803      	ldr	r0, [pc, #12]	; (800b4b4 <TlUserEvtReceived+0x20>)
 800b4a6:	f7f5 ff74 	bl	8001392 <shci_notify_asynch_evt>

  return;
 800b4aa:	bf00      	nop
}
 800b4ac:	3708      	adds	r7, #8
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	20000138 	.word	0x20000138

0800b4b8 <OutputCmdTrace>:

static void OutputCmdTrace(TL_CmdPacket_t *pCmdBuffer)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b083      	sub	sp, #12
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
    TL_SHCI_CMD_DBG_MSG(" payload:");
    TL_SHCI_CMD_DBG_BUF(pCmdBuffer->cmdserial.cmd.payload, pCmdBuffer->cmdserial.cmd.plen, "");
  }
  TL_SHCI_CMD_DBG_MSG("\r\n");

  return;
 800b4c0:	bf00      	nop
}
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <OutputRspTrace>:

static void OutputRspTrace(TL_EvtPacket_t *p_rsp)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  switch(p_rsp->evtserial.evt.evtcode)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	7a5b      	ldrb	r3, [r3, #9]
 800b4d8:	2b0e      	cmp	r3, #14
 800b4da:	d000      	beq.n	800b4de <OutputRspTrace+0x12>
      }
      break;

    default:
      TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_rsp->evtserial.evt.evtcode);
      break;
 800b4dc:	e000      	b.n	800b4e0 <OutputRspTrace+0x14>
      break;
 800b4de:	bf00      	nop
  }

  TL_SHCI_CMD_DBG_MSG("\r\n");

  return;
 800b4e0:	bf00      	nop
}
 800b4e2:	370c      	adds	r7, #12
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr

0800b4ec <OutputEvtTrace>:

static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  if(phcievtbuffer->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	7a5b      	ldrb	r3, [r3, #9]
 800b4f8:	2bff      	cmp	r3, #255	; 0xff
 800b4fa:	d100      	bne.n	800b4fe <OutputEvtTrace+0x12>
    }
  }

  TL_SHCI_EVT_DBG_MSG("\r\n");

  return;
 800b4fc:	bf00      	nop
 800b4fe:	bf00      	nop
}
 800b500:	370c      	adds	r7, #12
 800b502:	46bd      	mov	sp, r7
 800b504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b508:	4770      	bx	lr
	...

0800b50c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	4a05      	ldr	r2, [pc, #20]	; (800b52c <shci_register_io_bus+0x20>)
 800b518:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	4a04      	ldr	r2, [pc, #16]	; (800b530 <shci_register_io_bus+0x24>)
 800b51e:	611a      	str	r2, [r3, #16]

  return;
 800b520:	bf00      	nop
}
 800b522:	370c      	adds	r7, #12
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr
 800b52c:	0800ba0d 	.word	0x0800ba0d
 800b530:	0800ba61 	.word	0x0800ba61

0800b534 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	687a      	ldr	r2, [r7, #4]
 800b540:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	605a      	str	r2, [r3, #4]
}
 800b548:	bf00      	nop
 800b54a:	370c      	adds	r7, #12
 800b54c:	46bd      	mov	sp, r7
 800b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b552:	4770      	bx	lr

0800b554 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800b554:	b480      	push	{r7}
 800b556:	b087      	sub	sp, #28
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b55c:	f3ef 8310 	mrs	r3, PRIMASK
 800b560:	60fb      	str	r3, [r7, #12]
  return(result);
 800b562:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b564:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b566:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	687a      	ldr	r2, [r7, #4]
 800b56e:	429a      	cmp	r2, r3
 800b570:	d102      	bne.n	800b578 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800b572:	2301      	movs	r3, #1
 800b574:	75fb      	strb	r3, [r7, #23]
 800b576:	e001      	b.n	800b57c <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800b578:	2300      	movs	r3, #0
 800b57a:	75fb      	strb	r3, [r7, #23]
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800b586:	7dfb      	ldrb	r3, [r7, #23]
}
 800b588:	4618      	mov	r0, r3
 800b58a:	371c      	adds	r7, #28
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800b594:	b480      	push	{r7}
 800b596:	b087      	sub	sp, #28
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b59e:	f3ef 8310 	mrs	r3, PRIMASK
 800b5a2:	60fb      	str	r3, [r7, #12]
  return(result);
 800b5a4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b5a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b5a8:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681a      	ldr	r2, [r3, #0]
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	683a      	ldr	r2, [r7, #0]
 800b5bc:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	683a      	ldr	r2, [r7, #0]
 800b5c4:	605a      	str	r2, [r3, #4]
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b5d0:	bf00      	nop
 800b5d2:	371c      	adds	r7, #28
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b087      	sub	sp, #28
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5e6:	f3ef 8310 	mrs	r3, PRIMASK
 800b5ea:	60fb      	str	r3, [r7, #12]
  return(result);
 800b5ec:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b5ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b5f0:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	685a      	ldr	r2, [r3, #4]
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	683a      	ldr	r2, [r7, #0]
 800b604:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	683a      	ldr	r2, [r7, #0]
 800b60c:	601a      	str	r2, [r3, #0]
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b618:	bf00      	nop
 800b61a:	371c      	adds	r7, #28
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800b624:	b480      	push	{r7}
 800b626:	b087      	sub	sp, #28
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b62c:	f3ef 8310 	mrs	r3, PRIMASK
 800b630:	60fb      	str	r3, [r7, #12]
  return(result);
 800b632:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b634:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b636:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	687a      	ldr	r2, [r7, #4]
 800b63e:	6812      	ldr	r2, [r2, #0]
 800b640:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	687a      	ldr	r2, [r7, #4]
 800b648:	6852      	ldr	r2, [r2, #4]
 800b64a:	605a      	str	r2, [r3, #4]
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b656:	bf00      	nop
 800b658:	371c      	adds	r7, #28
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr

0800b662 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b086      	sub	sp, #24
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
 800b66a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b66c:	f3ef 8310 	mrs	r3, PRIMASK
 800b670:	60fb      	str	r3, [r7, #12]
  return(result);
 800b672:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b674:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b676:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4618      	mov	r0, r3
 800b686:	f7ff ffcd 	bl	800b624 <LST_remove_node>
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b694:	bf00      	nop
 800b696:	3718      	adds	r7, #24
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 800b69c:	b480      	push	{r7}
 800b69e:	af00      	add	r7, sp, #0
  return;
 800b6a0:	bf00      	nop
}
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a8:	4770      	bx	lr

0800b6aa <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800b6aa:	b480      	push	{r7}
 800b6ac:	af00      	add	r7, sp, #0
  return;
 800b6ae:	bf00      	nop
}
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr

0800b6b8 <DIS_Init>:
__weak void DIS_Init( void )
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	af00      	add	r7, sp, #0
  return;
 800b6bc:	bf00      	nop
}
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c4:	4770      	bx	lr

0800b6c6 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 800b6c6:	b480      	push	{r7}
 800b6c8:	af00      	add	r7, sp, #0
  return;
 800b6ca:	bf00      	nop
}
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr

0800b6d4 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	af00      	add	r7, sp, #0
  return;
 800b6d8:	bf00      	nop
}
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr

0800b6e2 <HRS_Init>:
__weak void HRS_Init( void )
{
 800b6e2:	b480      	push	{r7}
 800b6e4:	af00      	add	r7, sp, #0
  return;
 800b6e6:	bf00      	nop
}
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr

0800b6f0 <HTS_Init>:
__weak void HTS_Init( void )
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	af00      	add	r7, sp, #0
  return;
 800b6f4:	bf00      	nop
}
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr

0800b6fe <IAS_Init>:
__weak void IAS_Init( void )
{
 800b6fe:	b480      	push	{r7}
 800b700:	af00      	add	r7, sp, #0
  return;
 800b702:	bf00      	nop
}
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr

0800b70c <LLS_Init>:
__weak void LLS_Init( void )
{
 800b70c:	b480      	push	{r7}
 800b70e:	af00      	add	r7, sp, #0
  return;
 800b710:	bf00      	nop
}
 800b712:	46bd      	mov	sp, r7
 800b714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b718:	4770      	bx	lr

0800b71a <TPS_Init>:
__weak void TPS_Init( void )
{
 800b71a:	b480      	push	{r7}
 800b71c:	af00      	add	r7, sp, #0
  return;
 800b71e:	bf00      	nop
}
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr

0800b728 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800b728:	b480      	push	{r7}
 800b72a:	af00      	add	r7, sp, #0
  return;
 800b72c:	bf00      	nop
}
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr

0800b736 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800b736:	b480      	push	{r7}
 800b738:	af00      	add	r7, sp, #0
  return;
 800b73a:	bf00      	nop
}
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr

0800b744 <MESH_Init>:
__weak void MESH_Init( void )
{
 800b744:	b480      	push	{r7}
 800b746:	af00      	add	r7, sp, #0
  return;
 800b748:	bf00      	nop
}
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr

0800b752 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800b752:	b480      	push	{r7}
 800b754:	af00      	add	r7, sp, #0
  return;
 800b756:	bf00      	nop
}
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 800b760:	b480      	push	{r7}
 800b762:	af00      	add	r7, sp, #0
  return;
 800b764:	bf00      	nop
}
 800b766:	46bd      	mov	sp, r7
 800b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76c:	4770      	bx	lr
	...

0800b770 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800b770:	b580      	push	{r7, lr}
 800b772:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800b774:	4b04      	ldr	r3, [pc, #16]	; (800b788 <SVCCTL_Init+0x18>)
 800b776:	2200      	movs	r2, #0
 800b778:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800b77a:	4b04      	ldr	r3, [pc, #16]	; (800b78c <SVCCTL_Init+0x1c>)
 800b77c:	2200      	movs	r2, #0
 800b77e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800b780:	f000 f806 	bl	800b790 <SVCCTL_SvcInit>

  return;
 800b784:	bf00      	nop
}
 800b786:	bd80      	pop	{r7, pc}
 800b788:	20000114 	.word	0x20000114
 800b78c:	20000134 	.word	0x20000134

0800b790 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	af00      	add	r7, sp, #0
  BLS_Init();
 800b794:	f7ff ff82 	bl	800b69c <BLS_Init>

  CRS_STM_Init();
 800b798:	f7ff ff87 	bl	800b6aa <CRS_STM_Init>

  DIS_Init();
 800b79c:	f7ff ff8c 	bl	800b6b8 <DIS_Init>

  EDS_STM_Init();
 800b7a0:	f7ff ff91 	bl	800b6c6 <EDS_STM_Init>

  HIDS_Init();
 800b7a4:	f7ff ff96 	bl	800b6d4 <HIDS_Init>

  HRS_Init();
 800b7a8:	f7ff ff9b 	bl	800b6e2 <HRS_Init>

  HTS_Init();
 800b7ac:	f7ff ffa0 	bl	800b6f0 <HTS_Init>

  IAS_Init();
 800b7b0:	f7ff ffa5 	bl	800b6fe <IAS_Init>

  LLS_Init();
 800b7b4:	f7ff ffaa 	bl	800b70c <LLS_Init>

  TPS_Init();
 800b7b8:	f7ff ffaf 	bl	800b71a <TPS_Init>

  MOTENV_STM_Init();
 800b7bc:	f7ff ffb4 	bl	800b728 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800b7c0:	f7ff fc5e 	bl	800b080 <P2PS_STM_Init>

  OTAS_STM_Init();
 800b7c4:	f7ff ffb7 	bl	800b736 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800b7c8:	f7ff ffc3 	bl	800b752 <BVOPUS_STM_Init>

  MESH_Init();
 800b7cc:	f7ff ffba 	bl	800b744 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800b7d0:	f7ff ffc6 	bl	800b760 <SVCCTL_InitCustomSvc>
  
  return;
 800b7d4:	bf00      	nop
}
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800b7e0:	4b09      	ldr	r3, [pc, #36]	; (800b808 <SVCCTL_RegisterSvcHandler+0x30>)
 800b7e2:	7f1b      	ldrb	r3, [r3, #28]
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	4a08      	ldr	r2, [pc, #32]	; (800b808 <SVCCTL_RegisterSvcHandler+0x30>)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800b7ee:	4b06      	ldr	r3, [pc, #24]	; (800b808 <SVCCTL_RegisterSvcHandler+0x30>)
 800b7f0:	7f1b      	ldrb	r3, [r3, #28]
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	b2da      	uxtb	r2, r3
 800b7f6:	4b04      	ldr	r3, [pc, #16]	; (800b808 <SVCCTL_RegisterSvcHandler+0x30>)
 800b7f8:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800b7fa:	bf00      	nop
}
 800b7fc:	370c      	adds	r7, #12
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr
 800b806:	bf00      	nop
 800b808:	20000114 	.word	0x20000114

0800b80c <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b086      	sub	sp, #24
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	3301      	adds	r3, #1
 800b818:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800b81a:	2300      	movs	r3, #0
 800b81c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	2bff      	cmp	r3, #255	; 0xff
 800b824:	d000      	beq.n	800b828 <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800b826:	e025      	b.n	800b874 <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	3302      	adds	r3, #2
 800b82c:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	881b      	ldrh	r3, [r3, #0]
 800b832:	b29b      	uxth	r3, r3
 800b834:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b838:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b83c:	d000      	beq.n	800b840 <SVCCTL_UserEvtRx+0x34>
          break;
 800b83e:	e018      	b.n	800b872 <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800b840:	2300      	movs	r3, #0
 800b842:	757b      	strb	r3, [r7, #21]
 800b844:	e00d      	b.n	800b862 <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800b846:	7d7b      	ldrb	r3, [r7, #21]
 800b848:	4a18      	ldr	r2, [pc, #96]	; (800b8ac <SVCCTL_UserEvtRx+0xa0>)
 800b84a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	4798      	blx	r3
 800b852:	4603      	mov	r3, r0
 800b854:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800b856:	7dfb      	ldrb	r3, [r7, #23]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d108      	bne.n	800b86e <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800b85c:	7d7b      	ldrb	r3, [r7, #21]
 800b85e:	3301      	adds	r3, #1
 800b860:	757b      	strb	r3, [r7, #21]
 800b862:	4b12      	ldr	r3, [pc, #72]	; (800b8ac <SVCCTL_UserEvtRx+0xa0>)
 800b864:	7f1b      	ldrb	r3, [r3, #28]
 800b866:	7d7a      	ldrb	r2, [r7, #21]
 800b868:	429a      	cmp	r2, r3
 800b86a:	d3ec      	bcc.n	800b846 <SVCCTL_UserEvtRx+0x3a>
          break;
 800b86c:	e000      	b.n	800b870 <SVCCTL_UserEvtRx+0x64>
              break;
 800b86e:	bf00      	nop
          break;
 800b870:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800b872:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800b874:	7dfb      	ldrb	r3, [r7, #23]
 800b876:	2b01      	cmp	r3, #1
 800b878:	d009      	beq.n	800b88e <SVCCTL_UserEvtRx+0x82>
 800b87a:	2b02      	cmp	r3, #2
 800b87c:	d00a      	beq.n	800b894 <SVCCTL_UserEvtRx+0x88>
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d10b      	bne.n	800b89a <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 fa80 	bl	800bd88 <SVCCTL_App_Notification>
 800b888:	4603      	mov	r3, r0
 800b88a:	75bb      	strb	r3, [r7, #22]
      break;
 800b88c:	e008      	b.n	800b8a0 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800b88e:	2301      	movs	r3, #1
 800b890:	75bb      	strb	r3, [r7, #22]
      break;
 800b892:	e005      	b.n	800b8a0 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800b894:	2300      	movs	r3, #0
 800b896:	75bb      	strb	r3, [r7, #22]
      break;
 800b898:	e002      	b.n	800b8a0 <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800b89a:	2301      	movs	r3, #1
 800b89c:	75bb      	strb	r3, [r7, #22]
      break;
 800b89e:	bf00      	nop
  }

  return (return_status);
 800b8a0:	7dbb      	ldrb	r3, [r7, #22]
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3718      	adds	r7, #24
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	bf00      	nop
 800b8ac:	20000114 	.word	0x20000114

0800b8b0 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800b8b4:	f000 ff98 	bl	800c7e8 <HW_IPCC_Enable>

  return;
 800b8b8:	bf00      	nop
}
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <TL_Init>:


void TL_Init( void )
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800b8c0:	4b10      	ldr	r3, [pc, #64]	; (800b904 <TL_Init+0x48>)
 800b8c2:	4a11      	ldr	r2, [pc, #68]	; (800b908 <TL_Init+0x4c>)
 800b8c4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800b8c6:	4b0f      	ldr	r3, [pc, #60]	; (800b904 <TL_Init+0x48>)
 800b8c8:	4a10      	ldr	r2, [pc, #64]	; (800b90c <TL_Init+0x50>)
 800b8ca:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800b8cc:	4b0d      	ldr	r3, [pc, #52]	; (800b904 <TL_Init+0x48>)
 800b8ce:	4a10      	ldr	r2, [pc, #64]	; (800b910 <TL_Init+0x54>)
 800b8d0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800b8d2:	4b0c      	ldr	r3, [pc, #48]	; (800b904 <TL_Init+0x48>)
 800b8d4:	4a0f      	ldr	r2, [pc, #60]	; (800b914 <TL_Init+0x58>)
 800b8d6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 800b8d8:	4b0a      	ldr	r3, [pc, #40]	; (800b904 <TL_Init+0x48>)
 800b8da:	4a0f      	ldr	r2, [pc, #60]	; (800b918 <TL_Init+0x5c>)
 800b8dc:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800b8de:	4b09      	ldr	r3, [pc, #36]	; (800b904 <TL_Init+0x48>)
 800b8e0:	4a0e      	ldr	r2, [pc, #56]	; (800b91c <TL_Init+0x60>)
 800b8e2:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800b8e4:	4b07      	ldr	r3, [pc, #28]	; (800b904 <TL_Init+0x48>)
 800b8e6:	4a0e      	ldr	r2, [pc, #56]	; (800b920 <TL_Init+0x64>)
 800b8e8:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800b8ea:	4b06      	ldr	r3, [pc, #24]	; (800b904 <TL_Init+0x48>)
 800b8ec:	4a0d      	ldr	r2, [pc, #52]	; (800b924 <TL_Init+0x68>)
 800b8ee:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800b8f0:	4b04      	ldr	r3, [pc, #16]	; (800b904 <TL_Init+0x48>)
 800b8f2:	4a0d      	ldr	r2, [pc, #52]	; (800b928 <TL_Init+0x6c>)
 800b8f4:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800b8f6:	4b03      	ldr	r3, [pc, #12]	; (800b904 <TL_Init+0x48>)
 800b8f8:	4a0c      	ldr	r2, [pc, #48]	; (800b92c <TL_Init+0x70>)
 800b8fa:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800b8fc:	f000 ff84 	bl	800c808 <HW_IPCC_Init>

  return;
 800b900:	bf00      	nop
}
 800b902:	bd80      	pop	{r7, pc}
 800b904:	20030000 	.word	0x20030000
 800b908:	20030028 	.word	0x20030028
 800b90c:	20030048 	.word	0x20030048
 800b910:	20030058 	.word	0x20030058
 800b914:	20030064 	.word	0x20030064
 800b918:	2003006c 	.word	0x2003006c
 800b91c:	20030074 	.word	0x20030074
 800b920:	2003007c 	.word	0x2003007c
 800b924:	20030098 	.word	0x20030098
 800b928:	2003009c 	.word	0x2003009c
 800b92c:	200300a8 	.word	0x200300a8

0800b930 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800b93c:	4811      	ldr	r0, [pc, #68]	; (800b984 <TL_BLE_Init+0x54>)
 800b93e:	f7ff fdf9 	bl	800b534 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800b942:	4b11      	ldr	r3, [pc, #68]	; (800b988 <TL_BLE_Init+0x58>)
 800b944:	685b      	ldr	r3, [r3, #4]
 800b946:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	689a      	ldr	r2, [r3, #8]
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	68da      	ldr	r2, [r3, #12]
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	4a0c      	ldr	r2, [pc, #48]	; (800b98c <TL_BLE_Init+0x5c>)
 800b95c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	4a08      	ldr	r2, [pc, #32]	; (800b984 <TL_BLE_Init+0x54>)
 800b962:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800b964:	f000 ff66 	bl	800c834 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4a08      	ldr	r2, [pc, #32]	; (800b990 <TL_BLE_Init+0x60>)
 800b96e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	4a07      	ldr	r2, [pc, #28]	; (800b994 <TL_BLE_Init+0x64>)
 800b976:	6013      	str	r3, [r2, #0]

  return 0;
 800b978:	2300      	movs	r3, #0
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3710      	adds	r7, #16
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}
 800b982:	bf00      	nop
 800b984:	200300c4 	.word	0x200300c4
 800b988:	20030000 	.word	0x20030000
 800b98c:	20030a48 	.word	0x20030a48
 800b990:	2000064c 	.word	0x2000064c
 800b994:	20000650 	.word	0x20000650

0800b998 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b082      	sub	sp, #8
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	460b      	mov	r3, r1
 800b9a2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800b9a4:	4b05      	ldr	r3, [pc, #20]	; (800b9bc <TL_BLE_SendCmd+0x24>)
 800b9a6:	685b      	ldr	r3, [r3, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	721a      	strb	r2, [r3, #8]

  HW_IPCC_BLE_SendCmd();
 800b9ae:	f000 ff4b 	bl	800c848 <HW_IPCC_BLE_SendCmd>

  return 0;
 800b9b2:	2300      	movs	r3, #0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3708      	adds	r7, #8
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	20030000 	.word	0x20030000

0800b9c0 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800b9c6:	e009      	b.n	800b9dc <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800b9c8:	1d3b      	adds	r3, r7, #4
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	4808      	ldr	r0, [pc, #32]	; (800b9f0 <HW_IPCC_BLE_RxEvtNot+0x30>)
 800b9ce:	f7ff fe48 	bl	800b662 <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 800b9d2:	4b08      	ldr	r3, [pc, #32]	; (800b9f4 <HW_IPCC_BLE_RxEvtNot+0x34>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	687a      	ldr	r2, [r7, #4]
 800b9d8:	4610      	mov	r0, r2
 800b9da:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800b9dc:	4804      	ldr	r0, [pc, #16]	; (800b9f0 <HW_IPCC_BLE_RxEvtNot+0x30>)
 800b9de:	f7ff fdb9 	bl	800b554 <LST_is_empty>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d0ef      	beq.n	800b9c8 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800b9e8:	bf00      	nop
}
 800b9ea:	3708      	adds	r7, #8
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}
 800b9f0:	200300c4 	.word	0x200300c4
 800b9f4:	2000064c 	.word	0x2000064c

0800b9f8 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800b9fc:	4b02      	ldr	r3, [pc, #8]	; (800ba08 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4798      	blx	r3

  return;
 800ba02:	bf00      	nop
}
 800ba04:	bd80      	pop	{r7, pc}
 800ba06:	bf00      	nop
 800ba08:	20000650 	.word	0x20000650

0800ba0c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b084      	sub	sp, #16
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800ba18:	480d      	ldr	r0, [pc, #52]	; (800ba50 <TL_SYS_Init+0x44>)
 800ba1a:	f7ff fd8b 	bl	800b534 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800ba1e:	4b0d      	ldr	r3, [pc, #52]	; (800ba54 <TL_SYS_Init+0x48>)
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	689a      	ldr	r2, [r3, #8]
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	4a08      	ldr	r2, [pc, #32]	; (800ba50 <TL_SYS_Init+0x44>)
 800ba30:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800ba32:	f000 ff2b 	bl	800c88c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4a07      	ldr	r2, [pc, #28]	; (800ba58 <TL_SYS_Init+0x4c>)
 800ba3c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	685b      	ldr	r3, [r3, #4]
 800ba42:	4a06      	ldr	r2, [pc, #24]	; (800ba5c <TL_SYS_Init+0x50>)
 800ba44:	6013      	str	r3, [r2, #0]

  return 0;
 800ba46:	2300      	movs	r3, #0
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3710      	adds	r7, #16
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	200300cc 	.word	0x200300cc
 800ba54:	20030000 	.word	0x20030000
 800ba58:	20000654 	.word	0x20000654
 800ba5c:	20000658 	.word	0x20000658

0800ba60 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b082      	sub	sp, #8
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	460b      	mov	r3, r1
 800ba6a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800ba6c:	4b05      	ldr	r3, [pc, #20]	; (800ba84 <TL_SYS_SendCmd+0x24>)
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	2210      	movs	r2, #16
 800ba74:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 800ba76:	f000 ff13 	bl	800c8a0 <HW_IPCC_SYS_SendCmd>

  return 0;
 800ba7a:	2300      	movs	r3, #0
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3708      	adds	r7, #8
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	20030000 	.word	0x20030000

0800ba88 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ba8c:	4b04      	ldr	r3, [pc, #16]	; (800baa0 <HW_IPCC_SYS_CmdEvtNot+0x18>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4a04      	ldr	r2, [pc, #16]	; (800baa4 <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 800ba92:	68d2      	ldr	r2, [r2, #12]
 800ba94:	6812      	ldr	r2, [r2, #0]
 800ba96:	4610      	mov	r0, r2
 800ba98:	4798      	blx	r3

  return;
 800ba9a:	bf00      	nop
}
 800ba9c:	bd80      	pop	{r7, pc}
 800ba9e:	bf00      	nop
 800baa0:	20000654 	.word	0x20000654
 800baa4:	20030000 	.word	0x20030000

0800baa8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800baae:	e009      	b.n	800bac4 <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800bab0:	1d3b      	adds	r3, r7, #4
 800bab2:	4619      	mov	r1, r3
 800bab4:	4808      	ldr	r0, [pc, #32]	; (800bad8 <HW_IPCC_SYS_EvtNot+0x30>)
 800bab6:	f7ff fdd4 	bl	800b662 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 800baba:	4b08      	ldr	r3, [pc, #32]	; (800badc <HW_IPCC_SYS_EvtNot+0x34>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	687a      	ldr	r2, [r7, #4]
 800bac0:	4610      	mov	r0, r2
 800bac2:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800bac4:	4804      	ldr	r0, [pc, #16]	; (800bad8 <HW_IPCC_SYS_EvtNot+0x30>)
 800bac6:	f7ff fd45 	bl	800b554 <LST_is_empty>
 800baca:	4603      	mov	r3, r0
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d0ef      	beq.n	800bab0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800bad0:	bf00      	nop
}
 800bad2:	3708      	adds	r7, #8
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	200300cc 	.word	0x200300cc
 800badc:	20000658 	.word	0x20000658

0800bae0 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b082      	sub	sp, #8
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800bae8:	4817      	ldr	r0, [pc, #92]	; (800bb48 <TL_MM_Init+0x68>)
 800baea:	f7ff fd23 	bl	800b534 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800baee:	4817      	ldr	r0, [pc, #92]	; (800bb4c <TL_MM_Init+0x6c>)
 800baf0:	f7ff fd20 	bl	800b534 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800baf4:	4b16      	ldr	r3, [pc, #88]	; (800bb50 <TL_MM_Init+0x70>)
 800baf6:	691b      	ldr	r3, [r3, #16]
 800baf8:	4a16      	ldr	r2, [pc, #88]	; (800bb54 <TL_MM_Init+0x74>)
 800bafa:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800bafc:	4b15      	ldr	r3, [pc, #84]	; (800bb54 <TL_MM_Init+0x74>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	687a      	ldr	r2, [r7, #4]
 800bb02:	6892      	ldr	r2, [r2, #8]
 800bb04:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800bb06:	4b13      	ldr	r3, [pc, #76]	; (800bb54 <TL_MM_Init+0x74>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	687a      	ldr	r2, [r7, #4]
 800bb0c:	68d2      	ldr	r2, [r2, #12]
 800bb0e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800bb10:	4b10      	ldr	r3, [pc, #64]	; (800bb54 <TL_MM_Init+0x74>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4a0c      	ldr	r2, [pc, #48]	; (800bb48 <TL_MM_Init+0x68>)
 800bb16:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800bb18:	4b0e      	ldr	r3, [pc, #56]	; (800bb54 <TL_MM_Init+0x74>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	687a      	ldr	r2, [r7, #4]
 800bb1e:	6812      	ldr	r2, [r2, #0]
 800bb20:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800bb22:	4b0c      	ldr	r3, [pc, #48]	; (800bb54 <TL_MM_Init+0x74>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	687a      	ldr	r2, [r7, #4]
 800bb28:	6852      	ldr	r2, [r2, #4]
 800bb2a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800bb2c:	4b09      	ldr	r3, [pc, #36]	; (800bb54 <TL_MM_Init+0x74>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	687a      	ldr	r2, [r7, #4]
 800bb32:	6912      	ldr	r2, [r2, #16]
 800bb34:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800bb36:	4b07      	ldr	r3, [pc, #28]	; (800bb54 <TL_MM_Init+0x74>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	687a      	ldr	r2, [r7, #4]
 800bb3c:	6952      	ldr	r2, [r2, #20]
 800bb3e:	619a      	str	r2, [r3, #24]

  return;
 800bb40:	bf00      	nop
}
 800bb42:	3708      	adds	r7, #8
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	200300b4 	.word	0x200300b4
 800bb4c:	20000644 	.word	0x20000644
 800bb50:	20030000 	.word	0x20030000
 800bb54:	2000065c 	.word	0x2000065c

0800bb58 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800bb60:	6879      	ldr	r1, [r7, #4]
 800bb62:	4806      	ldr	r0, [pc, #24]	; (800bb7c <TL_MM_EvtDone+0x24>)
 800bb64:	f7ff fd3a 	bl	800b5dc <LST_insert_tail>

  OutputMemReleaseTrace(phcievt);
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 f82b 	bl	800bbc4 <OutputMemReleaseTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800bb6e:	4804      	ldr	r0, [pc, #16]	; (800bb80 <TL_MM_EvtDone+0x28>)
 800bb70:	f000 febc 	bl	800c8ec <HW_IPCC_MM_SendFreeBuf>

  return;
 800bb74:	bf00      	nop
}
 800bb76:	3708      	adds	r7, #8
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}
 800bb7c:	20000644 	.word	0x20000644
 800bb80:	0800bb85 	.word	0x0800bb85

0800bb84 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b082      	sub	sp, #8
 800bb88:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800bb8a:	e00c      	b.n	800bba6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800bb8c:	1d3b      	adds	r3, r7, #4
 800bb8e:	4619      	mov	r1, r3
 800bb90:	480a      	ldr	r0, [pc, #40]	; (800bbbc <SendFreeBuf+0x38>)
 800bb92:	f7ff fd66 	bl	800b662 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800bb96:	4b0a      	ldr	r3, [pc, #40]	; (800bbc0 <SendFreeBuf+0x3c>)
 800bb98:	691b      	ldr	r3, [r3, #16]
 800bb9a:	691b      	ldr	r3, [r3, #16]
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	4611      	mov	r1, r2
 800bba0:	4618      	mov	r0, r3
 800bba2:	f7ff fd1b 	bl	800b5dc <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800bba6:	4805      	ldr	r0, [pc, #20]	; (800bbbc <SendFreeBuf+0x38>)
 800bba8:	f7ff fcd4 	bl	800b554 <LST_is_empty>
 800bbac:	4603      	mov	r3, r0
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d0ec      	beq.n	800bb8c <SendFreeBuf+0x8>
  }

  return;
 800bbb2:	bf00      	nop
}
 800bbb4:	3708      	adds	r7, #8
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	20000644 	.word	0x20000644
 800bbc0:	20030000 	.word	0x20030000

0800bbc4 <OutputMemReleaseTrace>:

static void OutputMemReleaseTrace(TL_EvtPacket_t * phcievt)
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b083      	sub	sp, #12
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  switch(phcievt->evtserial.evt.evtcode)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	7a5b      	ldrb	r3, [r3, #9]
 800bbd0:	2b0f      	cmp	r3, #15
 800bbd2:	d004      	beq.n	800bbde <OutputMemReleaseTrace+0x1a>
 800bbd4:	2bff      	cmp	r3, #255	; 0xff
 800bbd6:	d004      	beq.n	800bbe2 <OutputMemReleaseTrace+0x1e>
 800bbd8:	2b0e      	cmp	r3, #14
 800bbda:	d004      	beq.n	800bbe6 <OutputMemReleaseTrace+0x22>
      break;

    default:
      TL_MM_DBG__MSG("mm evt released: 0x%02X", phcievt->evtserial.evt.evtcode);
      TL_MM_DBG__MSG(" buffer addr: 0x%08X", phcievt);
      break;
 800bbdc:	e004      	b.n	800bbe8 <OutputMemReleaseTrace+0x24>
      break;
 800bbde:	bf00      	nop
 800bbe0:	e002      	b.n	800bbe8 <OutputMemReleaseTrace+0x24>
      break;
 800bbe2:	bf00      	nop
 800bbe4:	e000      	b.n	800bbe8 <OutputMemReleaseTrace+0x24>
      break;
 800bbe6:	bf00      	nop
  }

  TL_MM_DBG__MSG("\r\n");

  return;
 800bbe8:	bf00      	nop
}
 800bbea:	370c      	adds	r7, #12
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr

0800bbf4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800bbf8:	4805      	ldr	r0, [pc, #20]	; (800bc10 <TL_TRACES_Init+0x1c>)
 800bbfa:	f7ff fc9b 	bl	800b534 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800bbfe:	4b05      	ldr	r3, [pc, #20]	; (800bc14 <TL_TRACES_Init+0x20>)
 800bc00:	695b      	ldr	r3, [r3, #20]
 800bc02:	4a03      	ldr	r2, [pc, #12]	; (800bc10 <TL_TRACES_Init+0x1c>)
 800bc04:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800bc06:	f000 fea7 	bl	800c958 <HW_IPCC_TRACES_Init>

  return;
 800bc0a:	bf00      	nop
}
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	bf00      	nop
 800bc10:	200300bc 	.word	0x200300bc
 800bc14:	20030000 	.word	0x20030000

0800bc18 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b082      	sub	sp, #8
 800bc1c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800bc1e:	e008      	b.n	800bc32 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800bc20:	1d3b      	adds	r3, r7, #4
 800bc22:	4619      	mov	r1, r3
 800bc24:	4808      	ldr	r0, [pc, #32]	; (800bc48 <HW_IPCC_TRACES_EvtNot+0x30>)
 800bc26:	f7ff fd1c 	bl	800b662 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f000 f80d 	bl	800bc4c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800bc32:	4805      	ldr	r0, [pc, #20]	; (800bc48 <HW_IPCC_TRACES_EvtNot+0x30>)
 800bc34:	f7ff fc8e 	bl	800b554 <LST_is_empty>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d0f0      	beq.n	800bc20 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800bc3e:	bf00      	nop
}
 800bc40:	3708      	adds	r7, #8
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	bf00      	nop
 800bc48:	200300bc 	.word	0x200300bc

0800bc4c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b083      	sub	sp, #12
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800bc54:	bf00      	nop
 800bc56:	370c      	adds	r7, #12
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr

0800bc60 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800bc60:	b480      	push	{r7}
 800bc62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800bc64:	4b03      	ldr	r3, [pc, #12]	; (800bc74 <LL_FLASH_GetUDN+0x14>)
 800bc66:	681b      	ldr	r3, [r3, #0]
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr
 800bc72:	bf00      	nop
 800bc74:	1fff7580 	.word	0x1fff7580

0800bc78 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800bc7c:	4b03      	ldr	r3, [pc, #12]	; (800bc8c <LL_FLASH_GetDeviceID+0x14>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	b2db      	uxtb	r3, r3
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr
 800bc8c:	1fff7584 	.word	0x1fff7584

0800bc90 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800bc90:	b480      	push	{r7}
 800bc92:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800bc94:	4b03      	ldr	r3, [pc, #12]	; (800bca4 <LL_FLASH_GetSTCompanyID+0x14>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	0a1b      	lsrs	r3, r3, #8
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr
 800bca4:	1fff7584 	.word	0x1fff7584

0800bca8 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800bca8:	b5b0      	push	{r4, r5, r7, lr}
 800bcaa:	b08c      	sub	sp, #48	; 0x30
 800bcac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800bcae:	4b2b      	ldr	r3, [pc, #172]	; (800bd5c <APP_BLE_Init+0xb4>)
 800bcb0:	463c      	mov	r4, r7
 800bcb2:	461d      	mov	r5, r3
 800bcb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bcb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bcb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bcba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bcbc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800bcc0:	c407      	stmia	r4!, {r0, r1, r2}
 800bcc2:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800bcc4:	f000 f928 	bl	800bf18 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800bcc8:	2101      	movs	r1, #1
 800bcca:	2002      	movs	r0, #2
 800bccc:	f000 fe6c 	bl	800c9a8 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800bcd0:	4a23      	ldr	r2, [pc, #140]	; (800bd60 <APP_BLE_Init+0xb8>)
 800bcd2:	2100      	movs	r1, #0
 800bcd4:	2004      	movs	r0, #4
 800bcd6:	f000 ff75 	bl	800cbc4 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 800bcda:	463b      	mov	r3, r7
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f7ff fa91 	bl	800b204 <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800bce2:	f000 f92f 	bl	800bf44 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800bce6:	f7ff fd43 	bl	800b770 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800bcea:	4b1e      	ldr	r3, [pc, #120]	; (800bd64 <APP_BLE_Init+0xbc>)
 800bcec:	2200      	movs	r2, #0
 800bcee:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800bcf2:	4b1c      	ldr	r3, [pc, #112]	; (800bd64 <APP_BLE_Init+0xbc>)
 800bcf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcf8:	84da      	strh	r2, [r3, #38]	; 0x26
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800bcfa:	4a1b      	ldr	r2, [pc, #108]	; (800bd68 <APP_BLE_Init+0xc0>)
 800bcfc:	2100      	movs	r1, #0
 800bcfe:	2001      	movs	r0, #1
 800bd00:	f000 ff60 	bl	800cbc4 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)
  manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 800bd04:	2006      	movs	r0, #6
 800bd06:	f7fe fe01 	bl	800a90c <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800bd0a:	f000 fb65 	bl	800c3d8 <P2PS_APP_Init>

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800bd0e:	4b17      	ldr	r3, [pc, #92]	; (800bd6c <APP_BLE_Init+0xc4>)
 800bd10:	2200      	movs	r2, #0
 800bd12:	4917      	ldr	r1, [pc, #92]	; (800bd70 <APP_BLE_Init+0xc8>)
 800bd14:	2000      	movs	r0, #0
 800bd16:	f7f6 f905 	bl	8001f24 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800bd1a:	4b16      	ldr	r3, [pc, #88]	; (800bd74 <APP_BLE_Init+0xcc>)
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	4916      	ldr	r1, [pc, #88]	; (800bd78 <APP_BLE_Init+0xd0>)
 800bd20:	2000      	movs	r0, #0
 800bd22:	f7f6 f8ff 	bl	8001f24 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800bd26:	4b0f      	ldr	r3, [pc, #60]	; (800bd64 <APP_BLE_Init+0xbc>)
 800bd28:	2200      	movs	r2, #0
 800bd2a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800bd2e:	4b0d      	ldr	r3, [pc, #52]	; (800bd64 <APP_BLE_Init+0xbc>)
 800bd30:	2200      	movs	r2, #0
 800bd32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800bd36:	4b11      	ldr	r3, [pc, #68]	; (800bd7c <APP_BLE_Init+0xd4>)
 800bd38:	2280      	movs	r2, #128	; 0x80
 800bd3a:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800bd3c:	4b10      	ldr	r3, [pc, #64]	; (800bd80 <APP_BLE_Init+0xd8>)
 800bd3e:	22a0      	movs	r2, #160	; 0xa0
 800bd40:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 800bd42:	2001      	movs	r0, #1
 800bd44:	f000 f9d8 	bl	800c0f8 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */
   HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800bd48:	2201      	movs	r2, #1
 800bd4a:	2120      	movs	r1, #32
 800bd4c:	480d      	ldr	r0, [pc, #52]	; (800bd84 <APP_BLE_Init+0xdc>)
 800bd4e:	f7f9 fae3 	bl	8005318 <HAL_GPIO_WritePin>
/* USER CODE END APP_BLE_Init_2 */
  return;
 800bd52:	bf00      	nop
}
 800bd54:	3730      	adds	r7, #48	; 0x30
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bdb0      	pop	{r4, r5, r7, pc}
 800bd5a:	bf00      	nop
 800bd5c:	0800cf00 	.word	0x0800cf00
 800bd60:	0800abc1 	.word	0x0800abc1
 800bd64:	2000014c 	.word	0x2000014c
 800bd68:	0800c265 	.word	0x0800c265
 800bd6c:	0800c299 	.word	0x0800c299
 800bd70:	200001dd 	.word	0x200001dd
 800bd74:	0800c2a9 	.word	0x0800c2a9
 800bd78:	200001de 	.word	0x200001de
 800bd7c:	200001e0 	.word	0x200001e0
 800bd80:	200001e2 	.word	0x200001e2
 800bd84:	48000400 	.word	0x48000400

0800bd88 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b08a      	sub	sp, #40	; 0x28
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800bd90:	2342      	movs	r3, #66	; 0x42
 800bd92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	3301      	adds	r3, #1
 800bd9a:	623b      	str	r3, [r7, #32]

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 800bd9c:	6a3b      	ldr	r3, [r7, #32]
 800bd9e:	781b      	ldrb	r3, [r3, #0]
 800bda0:	2b3e      	cmp	r3, #62	; 0x3e
 800bda2:	d02f      	beq.n	800be04 <SVCCTL_App_Notification+0x7c>
 800bda4:	2bff      	cmp	r3, #255	; 0xff
 800bda6:	f000 808c 	beq.w	800bec2 <SVCCTL_App_Notification+0x13a>
 800bdaa:	2b05      	cmp	r3, #5
 800bdac:	d000      	beq.n	800bdb0 <SVCCTL_App_Notification+0x28>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
        break;
 800bdae:	e09b      	b.n	800bee8 <SVCCTL_App_Notification+0x160>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 800bdb0:	6a3b      	ldr	r3, [r7, #32]
 800bdb2:	3302      	adds	r3, #2
 800bdb4:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bdbc:	b29a      	uxth	r2, r3
 800bdbe:	4b4d      	ldr	r3, [pc, #308]	; (800bef4 <SVCCTL_App_Notification+0x16c>)
 800bdc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d106      	bne.n	800bdd4 <SVCCTL_App_Notification+0x4c>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800bdc6:	4b4b      	ldr	r3, [pc, #300]	; (800bef4 <SVCCTL_App_Notification+0x16c>)
 800bdc8:	2200      	movs	r2, #0
 800bdca:	84da      	strh	r2, [r3, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800bdcc:	4b49      	ldr	r3, [pc, #292]	; (800bef4 <SVCCTL_App_Notification+0x16c>)
 800bdce:	2200      	movs	r2, #0
 800bdd0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      Adv_Request(APP_BLE_FAST_ADV);
 800bdd4:	2001      	movs	r0, #1
 800bdd6:	f000 f98f 	bl	800c0f8 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800bdda:	4b47      	ldr	r3, [pc, #284]	; (800bef8 <SVCCTL_App_Notification+0x170>)
 800bddc:	2201      	movs	r2, #1
 800bdde:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800bde0:	4b44      	ldr	r3, [pc, #272]	; (800bef4 <SVCCTL_App_Notification+0x16c>)
 800bde2:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800bde4:	4b44      	ldr	r3, [pc, #272]	; (800bef8 <SVCCTL_App_Notification+0x170>)
 800bde6:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 800bde8:	4843      	ldr	r0, [pc, #268]	; (800bef8 <SVCCTL_App_Notification+0x170>)
 800bdea:	f000 fae1 	bl	800c3b0 <P2PS_APP_Notification>
        HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800bdee:	2200      	movs	r2, #0
 800bdf0:	2101      	movs	r1, #1
 800bdf2:	4842      	ldr	r0, [pc, #264]	; (800befc <SVCCTL_App_Notification+0x174>)
 800bdf4:	f7f9 fa90 	bl	8005318 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	2120      	movs	r1, #32
 800bdfc:	483f      	ldr	r0, [pc, #252]	; (800befc <SVCCTL_App_Notification+0x174>)
 800bdfe:	f7f9 fa8b 	bl	8005318 <HAL_GPIO_WritePin>
    break; /* EVT_DISCONN_COMPLETE */
 800be02:	e071      	b.n	800bee8 <SVCCTL_App_Notification+0x160>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800be04:	6a3b      	ldr	r3, [r7, #32]
 800be06:	3302      	adds	r3, #2
 800be08:	61bb      	str	r3, [r7, #24]
      switch (meta_evt->subevent)
 800be0a:	69bb      	ldr	r3, [r7, #24]
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	2b03      	cmp	r3, #3
 800be10:	d053      	beq.n	800beba <SVCCTL_App_Notification+0x132>
 800be12:	2b0c      	cmp	r3, #12
 800be14:	d002      	beq.n	800be1c <SVCCTL_App_Notification+0x94>
 800be16:	2b01      	cmp	r3, #1
 800be18:	d016      	beq.n	800be48 <SVCCTL_App_Notification+0xc0>
          break;
 800be1a:	e051      	b.n	800bec0 <SVCCTL_App_Notification+0x138>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 800be1c:	69bb      	ldr	r3, [r7, #24]
 800be1e:	3301      	adds	r3, #1
 800be20:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 800be22:	4b34      	ldr	r3, [pc, #208]	; (800bef4 <SVCCTL_App_Notification+0x16c>)
 800be24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800be26:	f107 020a 	add.w	r2, r7, #10
 800be2a:	f107 010b 	add.w	r1, r7, #11
 800be2e:	4618      	mov	r0, r3
 800be30:	f7fe fdda 	bl	800a9e8 <hci_le_read_phy>
 800be34:	4603      	mov	r3, r0
 800be36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret == BLE_STATUS_SUCCESS)
 800be3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d13d      	bne.n	800bebe <SVCCTL_App_Notification+0x136>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 800be42:	7afb      	ldrb	r3, [r7, #11]
 800be44:	2b02      	cmp	r3, #2
          break;
 800be46:	e03a      	b.n	800bebe <SVCCTL_App_Notification+0x136>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800be48:	69bb      	ldr	r3, [r7, #24]
 800be4a:	3301      	adds	r3, #1
 800be4c:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800be4e:	4b29      	ldr	r3, [pc, #164]	; (800bef4 <SVCCTL_App_Notification+0x16c>)
 800be50:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800be54:	4618      	mov	r0, r3
 800be56:	f7f6 f8db 	bl	8002010 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800be5a:	4b26      	ldr	r3, [pc, #152]	; (800bef4 <SVCCTL_App_Notification+0x16c>)
 800be5c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800be60:	2b04      	cmp	r3, #4
 800be62:	d104      	bne.n	800be6e <SVCCTL_App_Notification+0xe6>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800be64:	4b23      	ldr	r3, [pc, #140]	; (800bef4 <SVCCTL_App_Notification+0x16c>)
 800be66:	2206      	movs	r2, #6
 800be68:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800be6c:	e003      	b.n	800be76 <SVCCTL_App_Notification+0xee>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800be6e:	4b21      	ldr	r3, [pc, #132]	; (800bef4 <SVCCTL_App_Notification+0x16c>)
 800be70:	2205      	movs	r2, #5
 800be72:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800be7c:	b29a      	uxth	r2, r3
 800be7e:	4b1d      	ldr	r3, [pc, #116]	; (800bef4 <SVCCTL_App_Notification+0x16c>)
 800be80:	84da      	strh	r2, [r3, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800be82:	4b1d      	ldr	r3, [pc, #116]	; (800bef8 <SVCCTL_App_Notification+0x170>)
 800be84:	2200      	movs	r2, #0
 800be86:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800be88:	4b1a      	ldr	r3, [pc, #104]	; (800bef4 <SVCCTL_App_Notification+0x16c>)
 800be8a:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800be8c:	4b1a      	ldr	r3, [pc, #104]	; (800bef8 <SVCCTL_App_Notification+0x170>)
 800be8e:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 800be90:	4819      	ldr	r0, [pc, #100]	; (800bef8 <SVCCTL_App_Notification+0x170>)
 800be92:	f000 fa8d 	bl	800c3b0 <P2PS_APP_Notification>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800be96:	2201      	movs	r2, #1
 800be98:	2101      	movs	r1, #1
 800be9a:	4818      	ldr	r0, [pc, #96]	; (800befc <SVCCTL_App_Notification+0x174>)
 800be9c:	f7f9 fa3c 	bl	8005318 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800bea0:	2200      	movs	r2, #0
 800bea2:	2120      	movs	r1, #32
 800bea4:	4815      	ldr	r0, [pc, #84]	; (800befc <SVCCTL_App_Notification+0x174>)
 800bea6:	f7f9 fa37 	bl	8005318 <HAL_GPIO_WritePin>
          aci_gatt_exchange_config(connection_complete_event->Connection_Handle);
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800beb0:	b29b      	uxth	r3, r3
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7fe fc1c 	bl	800a6f0 <aci_gatt_exchange_config>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 800beb8:	e002      	b.n	800bec0 <SVCCTL_App_Notification+0x138>
          break;
 800beba:	bf00      	nop
 800bebc:	e014      	b.n	800bee8 <SVCCTL_App_Notification+0x160>
          break;
 800bebe:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 800bec0:	e012      	b.n	800bee8 <SVCCTL_App_Notification+0x160>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800bec2:	6a3b      	ldr	r3, [r7, #32]
 800bec4:	3302      	adds	r3, #2
 800bec6:	61fb      	str	r3, [r7, #28]
      switch (blue_evt->ecode)
 800bec8:	69fb      	ldr	r3, [r7, #28]
 800beca:	881b      	ldrh	r3, [r3, #0]
 800becc:	b29b      	uxth	r3, r3
 800bece:	f240 4207 	movw	r2, #1031	; 0x407
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d004      	beq.n	800bee0 <SVCCTL_App_Notification+0x158>
 800bed6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800beda:	d003      	beq.n	800bee4 <SVCCTL_App_Notification+0x15c>
 800bedc:	2b04      	cmp	r3, #4
          break; /* RADIO_ACTIVITY_EVENT */
 800bede:	e002      	b.n	800bee6 <SVCCTL_App_Notification+0x15e>
          break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800bee0:	bf00      	nop
 800bee2:	e000      	b.n	800bee6 <SVCCTL_App_Notification+0x15e>
      break;
 800bee4:	bf00      	nop
      break; /* EVT_VENDOR */
 800bee6:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800bee8:	2301      	movs	r3, #1
}
 800beea:	4618      	mov	r0, r3
 800beec:	3728      	adds	r7, #40	; 0x28
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	2000014c 	.word	0x2000014c
 800bef8:	20000c84 	.word	0x20000c84
 800befc:	48000400 	.word	0x48000400

0800bf00 <APP_BLE_Get_Server_Connection_Status>:

APP_BLE_ConnStatus_t APP_BLE_Get_Server_Connection_Status(void)
{
 800bf00:	b480      	push	{r7}
 800bf02:	af00      	add	r7, sp, #0
    return BleApplicationContext.Device_Connection_Status;
 800bf04:	4b03      	ldr	r3, [pc, #12]	; (800bf14 <APP_BLE_Get_Server_Connection_Status+0x14>)
 800bf06:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr
 800bf14:	2000014c 	.word	0x2000014c

0800bf18 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800bf1e:	4b06      	ldr	r3, [pc, #24]	; (800bf38 <Ble_Tl_Init+0x20>)
 800bf20:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800bf22:	4b06      	ldr	r3, [pc, #24]	; (800bf3c <Ble_Tl_Init+0x24>)
 800bf24:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800bf26:	463b      	mov	r3, r7
 800bf28:	4619      	mov	r1, r3
 800bf2a:	4805      	ldr	r0, [pc, #20]	; (800bf40 <Ble_Tl_Init+0x28>)
 800bf2c:	f7fe fe2c 	bl	800ab88 <hci_init>

  return;
 800bf30:	bf00      	nop
}
 800bf32:	3708      	adds	r7, #8
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}
 800bf38:	200300d4 	.word	0x200300d4
 800bf3c:	0800c333 	.word	0x0800c333
 800bf40:	0800c2fb 	.word	0x0800c2fb

0800bf44 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 800bf44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf46:	b091      	sub	sp, #68	; 0x44
 800bf48:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 800bf4e:	f7fe fd27 	bl	800a9a0 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800bf52:	f000 f943 	bl	800c1dc <BleGetBdAddress>
 800bf56:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800bf58:	6a3a      	ldr	r2, [r7, #32]
 800bf5a:	2106      	movs	r1, #6
 800bf5c:	2000      	movs	r0, #0
 800bf5e:	f7fe fc15 	bl	800a78c <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800bf62:	6a3b      	ldr	r3, [r7, #32]
 800bf64:	795a      	ldrb	r2, [r3, #5]
 800bf66:	4b5e      	ldr	r3, [pc, #376]	; (800c0e0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800bf68:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 800bf6a:	6a3b      	ldr	r3, [r7, #32]
 800bf6c:	791a      	ldrb	r2, [r3, #4]
 800bf6e:	4b5c      	ldr	r3, [pc, #368]	; (800c0e0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800bf70:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800bf72:	6a3b      	ldr	r3, [r7, #32]
 800bf74:	78da      	ldrb	r2, [r3, #3]
 800bf76:	4b5a      	ldr	r3, [pc, #360]	; (800c0e0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800bf78:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 800bf7a:	6a3b      	ldr	r3, [r7, #32]
 800bf7c:	789a      	ldrb	r2, [r3, #2]
 800bf7e:	4b58      	ldr	r3, [pc, #352]	; (800c0e0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800bf80:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 800bf82:	6a3b      	ldr	r3, [r7, #32]
 800bf84:	785a      	ldrb	r2, [r3, #1]
 800bf86:	4b56      	ldr	r3, [pc, #344]	; (800c0e0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800bf88:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 800bf8a:	6a3b      	ldr	r3, [r7, #32]
 800bf8c:	781a      	ldrb	r2, [r3, #0]
 800bf8e:	4b54      	ldr	r3, [pc, #336]	; (800c0e0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800bf90:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 800bf92:	f64e 536e 	movw	r3, #60782	; 0xed6e
 800bf96:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 800bf98:	f7ff fe62 	bl	800bc60 <LL_FLASH_GetUDN>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800bfa0:	f107 0308 	add.w	r3, r7, #8
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	2106      	movs	r1, #6
 800bfa8:	202e      	movs	r0, #46	; 0x2e
 800bfaa:	f7fe fbef 	bl	800a78c <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800bfae:	4a4d      	ldr	r2, [pc, #308]	; (800c0e4 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 800bfb0:	2110      	movs	r1, #16
 800bfb2:	2018      	movs	r0, #24
 800bfb4:	f7fe fbea 	bl	800a78c <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800bfb8:	4a4b      	ldr	r2, [pc, #300]	; (800c0e8 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 800bfba:	2110      	movs	r1, #16
 800bfbc:	2008      	movs	r0, #8
 800bfbe:	f7fe fbe5 	bl	800a78c <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800bfc2:	2118      	movs	r1, #24
 800bfc4:	2001      	movs	r0, #1
 800bfc6:	f7fe fc4a 	bl	800a85e <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800bfca:	f7fe f94c 	bl	800a266 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800bfd2:	7ffb      	ldrb	r3, [r7, #31]
 800bfd4:	f043 0301 	orr.w	r3, r3, #1
 800bfd8:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 800bfda:	7ffb      	ldrb	r3, [r7, #31]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d01e      	beq.n	800c01e <Ble_Hci_Gap_Gatt_Init+0xda>
  {
    const char *name = "P2PSRV1";
 800bfe0:	4b42      	ldr	r3, [pc, #264]	; (800c0ec <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 800bfe2:	61bb      	str	r3, [r7, #24]
    aci_gap_init(role, 0,
 800bfe4:	f107 0216 	add.w	r2, r7, #22
 800bfe8:	7ff8      	ldrb	r0, [r7, #31]
 800bfea:	f107 0312 	add.w	r3, r7, #18
 800bfee:	9301      	str	r3, [sp, #4]
 800bff0:	f107 0314 	add.w	r3, r7, #20
 800bff4:	9300      	str	r3, [sp, #0]
 800bff6:	4613      	mov	r3, r2
 800bff8:	2207      	movs	r2, #7
 800bffa:	2100      	movs	r1, #0
 800bffc:	f7fe f828 	bl	800a050 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800c000:	8afc      	ldrh	r4, [r7, #22]
 800c002:	8abd      	ldrh	r5, [r7, #20]
 800c004:	69b8      	ldr	r0, [r7, #24]
 800c006:	f7f4 f8b9 	bl	800017c <strlen>
 800c00a:	4603      	mov	r3, r0
 800c00c:	b2da      	uxtb	r2, r3
 800c00e:	69bb      	ldr	r3, [r7, #24]
 800c010:	9300      	str	r3, [sp, #0]
 800c012:	4613      	mov	r3, r2
 800c014:	2200      	movs	r2, #0
 800c016:	4629      	mov	r1, r5
 800c018:	4620      	mov	r0, r4
 800c01a:	f7fe fae2 	bl	800a5e2 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800c01e:	8af8      	ldrh	r0, [r7, #22]
 800c020:	8a79      	ldrh	r1, [r7, #18]
 800c022:	1d3b      	adds	r3, r7, #4
 800c024:	9300      	str	r3, [sp, #0]
 800c026:	2302      	movs	r3, #2
 800c028:	2200      	movs	r2, #0
 800c02a:	f7fe fada 	bl	800a5e2 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800c02e:	2202      	movs	r2, #2
 800c030:	2102      	movs	r1, #2
 800c032:	2000      	movs	r0, #0
 800c034:	f7fe fd40 	bl	800aab8 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800c038:	4b2d      	ldr	r3, [pc, #180]	; (800c0f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c03a:	2201      	movs	r2, #1
 800c03c:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800c03e:	4b2c      	ldr	r3, [pc, #176]	; (800c0f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	4618      	mov	r0, r3
 800c044:	f7fd ff12 	bl	8009e6c <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800c048:	4b29      	ldr	r3, [pc, #164]	; (800c0f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c04a:	2201      	movs	r2, #1
 800c04c:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 800c04e:	4b28      	ldr	r3, [pc, #160]	; (800c0f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c050:	2200      	movs	r2, #0
 800c052:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800c054:	4b26      	ldr	r3, [pc, #152]	; (800c0f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c056:	2208      	movs	r2, #8
 800c058:	755a      	strb	r2, [r3, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800c05a:	4b25      	ldr	r3, [pc, #148]	; (800c0f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c05c:	2210      	movs	r2, #16
 800c05e:	759a      	strb	r2, [r3, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800c060:	4b23      	ldr	r3, [pc, #140]	; (800c0f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c062:	2200      	movs	r2, #0
 800c064:	751a      	strb	r2, [r3, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800c066:	4b22      	ldr	r3, [pc, #136]	; (800c0f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c068:	4a22      	ldr	r2, [pc, #136]	; (800c0f4 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800c06a:	619a      	str	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800c06c:	4b20      	ldr	r3, [pc, #128]	; (800c0f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c06e:	2200      	movs	r2, #0
 800c070:	709a      	strb	r2, [r3, #2]
  for (index = 0; index < 16; index++)
 800c072:	2300      	movs	r3, #0
 800c074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c078:	e00b      	b.n	800c092 <Ble_Hci_Gap_Gatt_Init+0x14e>
  {
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 800c07a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c07e:	4a1c      	ldr	r2, [pc, #112]	; (800c0f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c080:	4413      	add	r3, r2
 800c082:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c086:	711a      	strb	r2, [r3, #4]
  for (index = 0; index < 16; index++)
 800c088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c08c:	3301      	adds	r3, #1
 800c08e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c092:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c096:	2b0f      	cmp	r3, #15
 800c098:	d9ef      	bls.n	800c07a <Ble_Hci_Gap_Gatt_Init+0x136>
  }

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800c09a:	4b15      	ldr	r3, [pc, #84]	; (800c0f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c09c:	789d      	ldrb	r5, [r3, #2]
 800c09e:	4b14      	ldr	r3, [pc, #80]	; (800c0f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c0a0:	785e      	ldrb	r6, [r3, #1]
 800c0a2:	4b13      	ldr	r3, [pc, #76]	; (800c0f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c0a4:	7d5b      	ldrb	r3, [r3, #21]
 800c0a6:	4a12      	ldr	r2, [pc, #72]	; (800c0f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c0a8:	7d92      	ldrb	r2, [r2, #22]
 800c0aa:	4911      	ldr	r1, [pc, #68]	; (800c0f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c0ac:	7d09      	ldrb	r1, [r1, #20]
 800c0ae:	4810      	ldr	r0, [pc, #64]	; (800c0f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c0b0:	6980      	ldr	r0, [r0, #24]
 800c0b2:	2400      	movs	r4, #0
 800c0b4:	9404      	str	r4, [sp, #16]
 800c0b6:	9003      	str	r0, [sp, #12]
 800c0b8:	9102      	str	r1, [sp, #8]
 800c0ba:	9201      	str	r2, [sp, #4]
 800c0bc:	9300      	str	r3, [sp, #0]
 800c0be:	2300      	movs	r3, #0
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	4631      	mov	r1, r6
 800c0c4:	4628      	mov	r0, r5
 800c0c6:	f7fd ff1b 	bl	8009f00 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800c0ca:	4b09      	ldr	r3, [pc, #36]	; (800c0f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c0cc:	789b      	ldrb	r3, [r3, #2]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d001      	beq.n	800c0d6 <Ble_Hci_Gap_Gatt_Init+0x192>
   {
     aci_gap_configure_whitelist();
 800c0d2:	f7fe f8a4 	bl	800a21e <aci_gap_configure_whitelist>
   }
}
 800c0d6:	bf00      	nop
 800c0d8:	372c      	adds	r7, #44	; 0x2c
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	20000044 	.word	0x20000044
 800c0e4:	0800d108 	.word	0x0800d108
 800c0e8:	0800d118 	.word	0x0800d118
 800c0ec:	0800cf30 	.word	0x0800cf30
 800c0f0:	2000014c 	.word	0x2000014c
 800c0f4:	0001b207 	.word	0x0001b207

0800c0f8 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b08c      	sub	sp, #48	; 0x30
 800c0fc:	af08      	add	r7, sp, #32
 800c0fe:	4603      	mov	r3, r0
 800c100:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c102:	2342      	movs	r3, #66	; 0x42
 800c104:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 800c106:	79fb      	ldrb	r3, [r7, #7]
 800c108:	2b01      	cmp	r3, #1
 800c10a:	d106      	bne.n	800c11a <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800c10c:	4b2c      	ldr	r3, [pc, #176]	; (800c1c0 <Adv_Request+0xc8>)
 800c10e:	881b      	ldrh	r3, [r3, #0]
 800c110:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800c112:	4b2c      	ldr	r3, [pc, #176]	; (800c1c4 <Adv_Request+0xcc>)
 800c114:	881b      	ldrh	r3, [r3, #0]
 800c116:	81bb      	strh	r3, [r7, #12]
 800c118:	e005      	b.n	800c126 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800c11a:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800c11e:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800c120:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800c124:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800c126:	4b28      	ldr	r3, [pc, #160]	; (800c1c8 <Adv_Request+0xd0>)
 800c128:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800c12c:	4618      	mov	r0, r3
 800c12e:	f7f5 ff6f 	bl	8002010 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);

    if ((New_Status == APP_BLE_LP_ADV)
 800c132:	79fb      	ldrb	r3, [r7, #7]
 800c134:	2b02      	cmp	r3, #2
 800c136:	d10d      	bne.n	800c154 <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800c138:	4b23      	ldr	r3, [pc, #140]	; (800c1c8 <Adv_Request+0xd0>)
 800c13a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d004      	beq.n	800c14c <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800c142:	4b21      	ldr	r3, [pc, #132]	; (800c1c8 <Adv_Request+0xd0>)
 800c144:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c148:	2b02      	cmp	r3, #2
 800c14a:	d103      	bne.n	800c154 <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 800c14c:	f7fd fd8c 	bl	8009c68 <aci_gap_set_non_discoverable>
 800c150:	4603      	mov	r3, r0
 800c152:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 800c154:	4a1c      	ldr	r2, [pc, #112]	; (800c1c8 <Adv_Request+0xd0>)
 800c156:	79fb      	ldrb	r3, [r7, #7]
 800c158:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 800c15c:	4b1a      	ldr	r3, [pc, #104]	; (800c1c8 <Adv_Request+0xd0>)
 800c15e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c162:	89b8      	ldrh	r0, [r7, #12]
 800c164:	89f9      	ldrh	r1, [r7, #14]
 800c166:	2200      	movs	r2, #0
 800c168:	9206      	str	r2, [sp, #24]
 800c16a:	2200      	movs	r2, #0
 800c16c:	9205      	str	r2, [sp, #20]
 800c16e:	4a17      	ldr	r2, [pc, #92]	; (800c1cc <Adv_Request+0xd4>)
 800c170:	9204      	str	r2, [sp, #16]
 800c172:	9303      	str	r3, [sp, #12]
 800c174:	4b16      	ldr	r3, [pc, #88]	; (800c1d0 <Adv_Request+0xd8>)
 800c176:	9302      	str	r3, [sp, #8]
 800c178:	2308      	movs	r3, #8
 800c17a:	9301      	str	r3, [sp, #4]
 800c17c:	2300      	movs	r3, #0
 800c17e:	9300      	str	r3, [sp, #0]
 800c180:	2300      	movs	r3, #0
 800c182:	4602      	mov	r2, r0
 800c184:	2000      	movs	r0, #0
 800c186:	f7fd fd93 	bl	8009cb0 <aci_gap_set_discoverable>
 800c18a:	4603      	mov	r3, r0
 800c18c:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800c18e:	4911      	ldr	r1, [pc, #68]	; (800c1d4 <Adv_Request+0xdc>)
 800c190:	200e      	movs	r0, #14
 800c192:	f7fd ffe8 	bl	800a166 <aci_gap_update_adv_data>
 800c196:	4603      	mov	r3, r0
 800c198:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 800c19a:	7afb      	ldrb	r3, [r7, #11]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d10a      	bne.n	800c1b6 <Adv_Request+0xbe>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 800c1a0:	79fb      	ldrb	r3, [r7, #7]
 800c1a2:	2b01      	cmp	r3, #1
 800c1a4:	d107      	bne.n	800c1b6 <Adv_Request+0xbe>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800c1a6:	4b08      	ldr	r3, [pc, #32]	; (800c1c8 <Adv_Request+0xd0>)
 800c1a8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800c1ac:	490a      	ldr	r1, [pc, #40]	; (800c1d8 <Adv_Request+0xe0>)
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7f5 ffb8 	bl	8002124 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 800c1b4:	bf00      	nop
 800c1b6:	bf00      	nop
}
 800c1b8:	3710      	adds	r7, #16
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	200001e0 	.word	0x200001e0
 800c1c4:	200001e2 	.word	0x200001e2
 800c1c8:	2000014c 	.word	0x2000014c
 800c1cc:	20000175 	.word	0x20000175
 800c1d0:	0800d128 	.word	0x0800d128
 800c1d4:	20000044 	.word	0x20000044
 800c1d8:	0001e046 	.word	0x0001e046

0800c1dc <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b086      	sub	sp, #24
 800c1e0:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800c1e2:	f7ff fd3d 	bl	800bc60 <LL_FLASH_GetUDN>
 800c1e6:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1ee:	d023      	beq.n	800c238 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800c1f0:	f7ff fd4e 	bl	800bc90 <LL_FLASH_GetSTCompanyID>
 800c1f4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800c1f6:	f7ff fd3f 	bl	800bc78 <LL_FLASH_GetDeviceID>
 800c1fa:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	b2da      	uxtb	r2, r3
 800c200:	4b16      	ldr	r3, [pc, #88]	; (800c25c <BleGetBdAddress+0x80>)
 800c202:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	0a1b      	lsrs	r3, r3, #8
 800c208:	b2da      	uxtb	r2, r3
 800c20a:	4b14      	ldr	r3, [pc, #80]	; (800c25c <BleGetBdAddress+0x80>)
 800c20c:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	0c1b      	lsrs	r3, r3, #16
 800c212:	b2da      	uxtb	r2, r3
 800c214:	4b11      	ldr	r3, [pc, #68]	; (800c25c <BleGetBdAddress+0x80>)
 800c216:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	b2da      	uxtb	r2, r3
 800c21c:	4b0f      	ldr	r3, [pc, #60]	; (800c25c <BleGetBdAddress+0x80>)
 800c21e:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	b2da      	uxtb	r2, r3
 800c224:	4b0d      	ldr	r3, [pc, #52]	; (800c25c <BleGetBdAddress+0x80>)
 800c226:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	0a1b      	lsrs	r3, r3, #8
 800c22c:	b2da      	uxtb	r2, r3
 800c22e:	4b0b      	ldr	r3, [pc, #44]	; (800c25c <BleGetBdAddress+0x80>)
 800c230:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800c232:	4b0a      	ldr	r3, [pc, #40]	; (800c25c <BleGetBdAddress+0x80>)
 800c234:	617b      	str	r3, [r7, #20]
 800c236:	e00b      	b.n	800c250 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800c238:	2000      	movs	r0, #0
 800c23a:	f7fe fe97 	bl	800af6c <OTP_Read>
 800c23e:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d002      	beq.n	800c24c <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	617b      	str	r3, [r7, #20]
 800c24a:	e001      	b.n	800c250 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800c24c:	4b04      	ldr	r3, [pc, #16]	; (800c260 <BleGetBdAddress+0x84>)
 800c24e:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 800c250:	697b      	ldr	r3, [r7, #20]
}
 800c252:	4618      	mov	r0, r3
 800c254:	3718      	adds	r7, #24
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
 800c25a:	bf00      	nop
 800c25c:	20000660 	.word	0x20000660
 800c260:	0800d100 	.word	0x0800d100

0800c264 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b082      	sub	sp, #8
 800c268:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800c26a:	4b0a      	ldr	r3, [pc, #40]	; (800c294 <Adv_Cancel+0x30>)
 800c26c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c270:	2b05      	cmp	r3, #5
 800c272:	d00a      	beq.n	800c28a <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 800c274:	2300      	movs	r3, #0
 800c276:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 800c278:	f7fd fcf6 	bl	8009c68 <aci_gap_set_non_discoverable>
 800c27c:	4603      	mov	r3, r0
 800c27e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c280:	4b04      	ldr	r3, [pc, #16]	; (800c294 <Adv_Cancel+0x30>)
 800c282:	2200      	movs	r2, #0
 800c284:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 800c288:	bf00      	nop
 800c28a:	bf00      	nop
}
 800c28c:	3708      	adds	r7, #8
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
 800c292:	bf00      	nop
 800c294:	2000014c 	.word	0x2000014c

0800c298 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800c29c:	2100      	movs	r1, #0
 800c29e:	2001      	movs	r0, #1
 800c2a0:	f000 fcb0 	bl	800cc04 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 800c2a4:	bf00      	nop
}
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 800c2a8:	b480      	push	{r7}
 800c2aa:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 800c2ac:	bf00      	nop
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr

0800c2b6 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800c2b6:	b580      	push	{r7, lr}
 800c2b8:	b082      	sub	sp, #8
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800c2be:	2100      	movs	r1, #0
 800c2c0:	2004      	movs	r0, #4
 800c2c2:	f000 fc9f 	bl	800cc04 <UTIL_SEQ_SetTask>
  return;
 800c2c6:	bf00      	nop
}
 800c2c8:	3708      	adds	r7, #8
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}

0800c2ce <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800c2ce:	b580      	push	{r7, lr}
 800c2d0:	b082      	sub	sp, #8
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800c2d6:	2001      	movs	r0, #1
 800c2d8:	f000 fcfa 	bl	800ccd0 <UTIL_SEQ_SetEvt>
  return;
 800c2dc:	bf00      	nop
}
 800c2de:	3708      	adds	r7, #8
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}

0800c2e4 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b082      	sub	sp, #8
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800c2ec:	2001      	movs	r0, #1
 800c2ee:	f000 fd0d 	bl	800cd0c <UTIL_SEQ_WaitEvt>
  return;
 800c2f2:	bf00      	nop
}
 800c2f4:	3708      	adds	r7, #8
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}

0800c2fa <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800c2fa:	b580      	push	{r7, lr}
 800c2fc:	b084      	sub	sp, #16
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	685b      	ldr	r3, [r3, #4]
 800c30a:	3308      	adds	r3, #8
 800c30c:	4618      	mov	r0, r3
 800c30e:	f7ff fa7d 	bl	800b80c <SVCCTL_UserEvtRx>
 800c312:	4603      	mov	r3, r0
 800c314:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800c316:	7afb      	ldrb	r3, [r7, #11]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d003      	beq.n	800c324 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	2201      	movs	r2, #1
 800c320:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 800c322:	e002      	b.n	800c32a <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2200      	movs	r2, #0
 800c328:	701a      	strb	r2, [r3, #0]
}
 800c32a:	bf00      	nop
 800c32c:	3710      	adds	r7, #16
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}

0800c332 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800c332:	b580      	push	{r7, lr}
 800c334:	b084      	sub	sp, #16
 800c336:	af00      	add	r7, sp, #0
 800c338:	4603      	mov	r3, r0
 800c33a:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800c33c:	79fb      	ldrb	r3, [r7, #7]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d002      	beq.n	800c348 <BLE_StatusNot+0x16>
 800c342:	2b01      	cmp	r3, #1
 800c344:	d007      	beq.n	800c356 <BLE_StatusNot+0x24>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 800c346:	e00d      	b.n	800c364 <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800c348:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800c34c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800c34e:	68f8      	ldr	r0, [r7, #12]
 800c350:	f000 fc82 	bl	800cc58 <UTIL_SEQ_PauseTask>
      break;
 800c354:	e006      	b.n	800c364 <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800c356:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800c35a:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800c35c:	68f8      	ldr	r0, [r7, #12]
 800c35e:	f000 fc99 	bl	800cc94 <UTIL_SEQ_ResumeTask>
      break;
 800c362:	bf00      	nop
  }
  return;
 800c364:	bf00      	nop
}
 800c366:	3710      	adds	r7, #16
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <P2PS_STM_App_Notification>:
static void P2PS_DataChange_Timer_Callback(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b082      	sub	sp, #8
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	2b01      	cmp	r3, #1
 800c37a:	d00b      	beq.n	800c394 <P2PS_STM_App_Notification+0x28>
 800c37c:	2b03      	cmp	r3, #3
 800c37e:	d00d      	beq.n	800c39c <P2PS_STM_App_Notification+0x30>
 800c380:	2b00      	cmp	r3, #0
 800c382:	d000      	beq.n	800c386 <P2PS_STM_App_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800c384:	e00b      	b.n	800c39e <P2PS_STM_App_Notification+0x32>
    	P2P_Server_App_Context.NotificationStatus = 1;
 800c386:	4b08      	ldr	r3, [pc, #32]	; (800c3a8 <P2PS_STM_App_Notification+0x3c>)
 800c388:	2201      	movs	r2, #1
 800c38a:	701a      	strb	r2, [r3, #0]
    	HAL_TIM_Base_Start_IT(&htim16);
 800c38c:	4807      	ldr	r0, [pc, #28]	; (800c3ac <P2PS_STM_App_Notification+0x40>)
 800c38e:	f7fc fcf5 	bl	8008d7c <HAL_TIM_Base_Start_IT>
      break;
 800c392:	e004      	b.n	800c39e <P2PS_STM_App_Notification+0x32>
    	P2P_Server_App_Context.NotificationStatus = 0;
 800c394:	4b04      	ldr	r3, [pc, #16]	; (800c3a8 <P2PS_STM_App_Notification+0x3c>)
 800c396:	2200      	movs	r2, #0
 800c398:	701a      	strb	r2, [r3, #0]
      break;
 800c39a:	e000      	b.n	800c39e <P2PS_STM_App_Notification+0x32>
      break;
 800c39c:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800c39e:	bf00      	nop
}
 800c3a0:	3708      	adds	r7, #8
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	200001e4 	.word	0x200001e4
 800c3ac:	20000934 	.word	0x20000934

0800c3b0 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800c3b0:	b480      	push	{r7}
 800c3b2:	b083      	sub	sp, #12
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	781b      	ldrb	r3, [r3, #0]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d002      	beq.n	800c3c6 <P2PS_APP_Notification+0x16>
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d002      	beq.n	800c3ca <P2PS_APP_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800c3c4:	e002      	b.n	800c3cc <P2PS_APP_Notification+0x1c>
    break;
 800c3c6:	bf00      	nop
 800c3c8:	e000      	b.n	800c3cc <P2PS_APP_Notification+0x1c>
    break;
 800c3ca:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800c3cc:	bf00      	nop
}
 800c3ce:	370c      	adds	r7, #12
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr

0800c3d8 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
	/* Register task used to update the characteristic (send the notification) */
		//UTIL_SEQ_RegTask(1 << CFG_MY_TASK_NOTIFY_DATA ,UTIL_SEQ_RFU, P2PS_Send_Notification_Task);
		UTIL_SEQ_RegTask(1 << SEND_FSR_DATA_BLE_TASK, UTIL_SEQ_RFU, P2PS_Send_Notification_Task_FSR);
 800c3dc:	4a0b      	ldr	r2, [pc, #44]	; (800c40c <P2PS_APP_Init+0x34>)
 800c3de:	2100      	movs	r1, #0
 800c3e0:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c3e4:	f000 fbee 	bl	800cbc4 <UTIL_SEQ_RegTask>
		UTIL_SEQ_RegTask(1 << SEND_ACC_DATA_BLE_TASK, UTIL_SEQ_RFU, P2PS_Send_Notification_Task_ACC);
 800c3e8:	4a09      	ldr	r2, [pc, #36]	; (800c410 <P2PS_APP_Init+0x38>)
 800c3ea:	2100      	movs	r1, #0
 800c3ec:	2080      	movs	r0, #128	; 0x80
 800c3ee:	f000 fbe9 	bl	800cbc4 <UTIL_SEQ_RegTask>
		UTIL_SEQ_RegTask(1 << SEND_PPG_DATA_BLE_TASK, UTIL_SEQ_RFU, P2PS_Send_Notification_Task_PPG);
 800c3f2:	4a08      	ldr	r2, [pc, #32]	; (800c414 <P2PS_APP_Init+0x3c>)
 800c3f4:	2100      	movs	r1, #0
 800c3f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c3fa:	f000 fbe3 	bl	800cbc4 <UTIL_SEQ_RegTask>
//				P2PS_DataChange_Timer_Callback);

	  /**
	   * Initialize Template application context
	   */
	  P2P_Server_App_Context.NotificationStatus=0;
 800c3fe:	4b06      	ldr	r3, [pc, #24]	; (800c418 <P2PS_APP_Init+0x40>)
 800c400:	2200      	movs	r2, #0
 800c402:	701a      	strb	r2, [r3, #0]
	  P2PS_APP_context_Init();
 800c404:	f000 f864 	bl	800c4d0 <P2PS_APP_context_Init>
/* USER CODE END P2PS_APP_Init */
  return;
 800c408:	bf00      	nop
}
 800c40a:	bd80      	pop	{r7, pc}
 800c40c:	0800c41d 	.word	0x0800c41d
 800c410:	0800c459 	.word	0x0800c459
 800c414:	0800c495 	.word	0x0800c495
 800c418:	200001e4 	.word	0x200001e4

0800c41c <P2PS_Send_Notification_Task_FSR>:

/* USER CODE BEGIN FD */

static void P2PS_Send_Notification_Task_FSR(void)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b0a0      	sub	sp, #128	; 0x80
 800c420:	af00      	add	r7, sp, #0
  /* Update P2P_NOTIFY characteristic */
	uint8_t value[PAYLOAD_LENGTH] = {0};
 800c422:	1d3b      	adds	r3, r7, #4
 800c424:	227b      	movs	r2, #123	; 0x7b
 800c426:	2100      	movs	r1, #0
 800c428:	4618      	mov	r0, r3
 800c42a:	f000 fd28 	bl	800ce7e <memset>

	if(P2P_Server_App_Context.NotificationStatus)
 800c42e:	4b09      	ldr	r3, [pc, #36]	; (800c454 <P2PS_Send_Notification_Task_FSR+0x38>)
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d00a      	beq.n	800c44c <P2PS_Send_Notification_Task_FSR+0x30>
	{
		prepare_fsr_ble_pack(&value[0]);
 800c436:	1d3b      	adds	r3, r7, #4
 800c438:	4618      	mov	r0, r3
 800c43a:	f7f6 fb21 	bl	8002a80 <prepare_fsr_ble_pack>
//		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
		P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID,&value[0]);
 800c43e:	1d3b      	adds	r3, r7, #4
 800c440:	4619      	mov	r1, r3
 800c442:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800c446:	f7fe febb 	bl	800b1c0 <P2PS_STM_App_Update_Char>
	else
	{

	}

  return;
 800c44a:	bf00      	nop
 800c44c:	bf00      	nop
}
 800c44e:	3780      	adds	r7, #128	; 0x80
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}
 800c454:	200001e4 	.word	0x200001e4

0800c458 <P2PS_Send_Notification_Task_ACC>:
static void P2PS_Send_Notification_Task_ACC(void)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b0a0      	sub	sp, #128	; 0x80
 800c45c:	af00      	add	r7, sp, #0
  /* Update P2P_NOTIFY characteristic */
	uint8_t value[PAYLOAD_LENGTH] = {0};
 800c45e:	1d3b      	adds	r3, r7, #4
 800c460:	227b      	movs	r2, #123	; 0x7b
 800c462:	2100      	movs	r1, #0
 800c464:	4618      	mov	r0, r3
 800c466:	f000 fd0a 	bl	800ce7e <memset>

	if(P2P_Server_App_Context.NotificationStatus)
 800c46a:	4b09      	ldr	r3, [pc, #36]	; (800c490 <P2PS_Send_Notification_Task_ACC+0x38>)
 800c46c:	781b      	ldrb	r3, [r3, #0]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d00a      	beq.n	800c488 <P2PS_Send_Notification_Task_ACC+0x30>
	{
		prepare_acc_ble_pack(&value[0]);
 800c472:	1d3b      	adds	r3, r7, #4
 800c474:	4618      	mov	r0, r3
 800c476:	f7f6 fb2b 	bl	8002ad0 <prepare_acc_ble_pack>
//		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
		P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID,&value[0]);
 800c47a:	1d3b      	adds	r3, r7, #4
 800c47c:	4619      	mov	r1, r3
 800c47e:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800c482:	f7fe fe9d 	bl	800b1c0 <P2PS_STM_App_Update_Char>
	else
	{

	}

  return;
 800c486:	bf00      	nop
 800c488:	bf00      	nop
}
 800c48a:	3780      	adds	r7, #128	; 0x80
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}
 800c490:	200001e4 	.word	0x200001e4

0800c494 <P2PS_Send_Notification_Task_PPG>:
static void P2PS_Send_Notification_Task_PPG(void)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b0a0      	sub	sp, #128	; 0x80
 800c498:	af00      	add	r7, sp, #0
  /* Update P2P_NOTIFY characteristic */
	uint8_t value[PAYLOAD_LENGTH] = {0};
 800c49a:	1d3b      	adds	r3, r7, #4
 800c49c:	227b      	movs	r2, #123	; 0x7b
 800c49e:	2100      	movs	r1, #0
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f000 fcec 	bl	800ce7e <memset>

	if(P2P_Server_App_Context.NotificationStatus)
 800c4a6:	4b09      	ldr	r3, [pc, #36]	; (800c4cc <P2PS_Send_Notification_Task_PPG+0x38>)
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d00a      	beq.n	800c4c4 <P2PS_Send_Notification_Task_PPG+0x30>
	{
		prepare_ppg_ble_pack(&value[0]);
 800c4ae:	1d3b      	adds	r3, r7, #4
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7f6 fc8b 	bl	8002dcc <prepare_ppg_ble_pack>
//		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
		P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID,&value[0]);
 800c4b6:	1d3b      	adds	r3, r7, #4
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800c4be:	f7fe fe7f 	bl	800b1c0 <P2PS_STM_App_Update_Char>
	else
	{

	}

  return;
 800c4c2:	bf00      	nop
 800c4c4:	bf00      	nop
}
 800c4c6:	3780      	adds	r7, #128	; 0x80
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}
 800c4cc:	200001e4 	.word	0x200001e4

0800c4d0 <P2PS_APP_context_Init>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
static void P2PS_APP_context_Init(void)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	af00      	add	r7, sp, #0
  P2P_Server_App_Context.Parameter = 0;
 800c4d4:	4b0b      	ldr	r3, [pc, #44]	; (800c504 <P2PS_APP_context_Init+0x34>)
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	805a      	strh	r2, [r3, #2]
  P2P_Server_App_Context.ACC.X = 0;
 800c4da:	4b0a      	ldr	r3, [pc, #40]	; (800c504 <P2PS_APP_context_Init+0x34>)
 800c4dc:	2200      	movs	r2, #0
 800c4de:	809a      	strh	r2, [r3, #4]
  P2P_Server_App_Context.ACC.Y = 0;
 800c4e0:	4b08      	ldr	r3, [pc, #32]	; (800c504 <P2PS_APP_context_Init+0x34>)
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	80da      	strh	r2, [r3, #6]
  P2P_Server_App_Context.ACC.Z = 0;
 800c4e6:	4b07      	ldr	r3, [pc, #28]	; (800c504 <P2PS_APP_context_Init+0x34>)
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	811a      	strh	r2, [r3, #8]
  P2P_Server_App_Context.ECG.ecg_value = 0;
 800c4ec:	4b05      	ldr	r3, [pc, #20]	; (800c504 <P2PS_APP_context_Init+0x34>)
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	815a      	strh	r2, [r3, #10]
  P2P_Server_App_Context.PPG.ppg_value = 0;
 800c4f2:	4b04      	ldr	r3, [pc, #16]	; (800c504 <P2PS_APP_context_Init+0x34>)
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	819a      	strh	r2, [r3, #12]
}
 800c4f8:	bf00      	nop
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr
 800c502:	bf00      	nop
 800c504:	200001e4 	.word	0x200001e4

0800c508 <LL_PWR_EnableBootC2>:
{
 800c508:	b480      	push	{r7}
 800c50a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800c50c:	4b05      	ldr	r3, [pc, #20]	; (800c524 <LL_PWR_EnableBootC2+0x1c>)
 800c50e:	68db      	ldr	r3, [r3, #12]
 800c510:	4a04      	ldr	r2, [pc, #16]	; (800c524 <LL_PWR_EnableBootC2+0x1c>)
 800c512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c516:	60d3      	str	r3, [r2, #12]
}
 800c518:	bf00      	nop
 800c51a:	46bd      	mov	sp, r7
 800c51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c520:	4770      	bx	lr
 800c522:	bf00      	nop
 800c524:	58000400 	.word	0x58000400

0800c528 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800c528:	b480      	push	{r7}
 800c52a:	b083      	sub	sp, #12
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800c530:	4b06      	ldr	r3, [pc, #24]	; (800c54c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800c532:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800c536:	4905      	ldr	r1, [pc, #20]	; (800c54c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	4313      	orrs	r3, r2
 800c53c:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800c540:	bf00      	nop
 800c542:	370c      	adds	r7, #12
 800c544:	46bd      	mov	sp, r7
 800c546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54a:	4770      	bx	lr
 800c54c:	58000800 	.word	0x58000800

0800c550 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800c550:	b480      	push	{r7}
 800c552:	b083      	sub	sp, #12
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800c558:	4b05      	ldr	r3, [pc, #20]	; (800c570 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c55a:	6a1a      	ldr	r2, [r3, #32]
 800c55c:	4904      	ldr	r1, [pc, #16]	; (800c570 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	4313      	orrs	r3, r2
 800c562:	620b      	str	r3, [r1, #32]
}
 800c564:	bf00      	nop
 800c566:	370c      	adds	r7, #12
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr
 800c570:	58000800 	.word	0x58000800

0800c574 <LL_AHB3_GRP1_EnableClock>:
{
 800c574:	b480      	push	{r7}
 800c576:	b085      	sub	sp, #20
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800c57c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c580:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c582:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	4313      	orrs	r3, r2
 800c58a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800c58c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c590:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	4013      	ands	r3, r2
 800c596:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c598:	68fb      	ldr	r3, [r7, #12]
}
 800c59a:	bf00      	nop
 800c59c:	3714      	adds	r7, #20
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a4:	4770      	bx	lr

0800c5a6 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800c5a6:	b480      	push	{r7}
 800c5a8:	b083      	sub	sp, #12
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	601a      	str	r2, [r3, #0]
}
 800c5ba:	bf00      	nop
 800c5bc:	370c      	adds	r7, #12
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c4:	4770      	bx	lr

0800c5c6 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800c5c6:	b480      	push	{r7}
 800c5c8:	b083      	sub	sp, #12
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f043 0201 	orr.w	r2, r3, #1
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	601a      	str	r2, [r3, #0]
}
 800c5da:	bf00      	nop
 800c5dc:	370c      	adds	r7, #12
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e4:	4770      	bx	lr

0800c5e6 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c5e6:	b480      	push	{r7}
 800c5e8:	b083      	sub	sp, #12
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	6078      	str	r0, [r7, #4]
 800c5ee:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	685a      	ldr	r2, [r3, #4]
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	041b      	lsls	r3, r3, #16
 800c5f8:	43db      	mvns	r3, r3
 800c5fa:	401a      	ands	r2, r3
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	605a      	str	r2, [r3, #4]
}
 800c600:	bf00      	nop
 800c602:	370c      	adds	r7, #12
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr

0800c60c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b083      	sub	sp, #12
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	685a      	ldr	r2, [r3, #4]
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	041b      	lsls	r3, r3, #16
 800c61e:	431a      	orrs	r2, r3
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	605a      	str	r2, [r3, #4]
}
 800c624:	bf00      	nop
 800c626:	370c      	adds	r7, #12
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr

0800c630 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c630:	b480      	push	{r7}
 800c632:	b083      	sub	sp, #12
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
 800c638:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	685a      	ldr	r2, [r3, #4]
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	43db      	mvns	r3, r3
 800c642:	401a      	ands	r2, r3
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	605a      	str	r2, [r3, #4]
}
 800c648:	bf00      	nop
 800c64a:	370c      	adds	r7, #12
 800c64c:	46bd      	mov	sp, r7
 800c64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c652:	4770      	bx	lr

0800c654 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c654:	b480      	push	{r7}
 800c656:	b083      	sub	sp, #12
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	683a      	ldr	r2, [r7, #0]
 800c662:	609a      	str	r2, [r3, #8]
}
 800c664:	bf00      	nop
 800c666:	370c      	adds	r7, #12
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr

0800c670 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c670:	b480      	push	{r7}
 800c672:	b083      	sub	sp, #12
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	041a      	lsls	r2, r3, #16
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	609a      	str	r2, [r3, #8]
}
 800c682:	bf00      	nop
 800c684:	370c      	adds	r7, #12
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr

0800c68e <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800c68e:	b480      	push	{r7}
 800c690:	b083      	sub	sp, #12
 800c692:	af00      	add	r7, sp, #0
 800c694:	6078      	str	r0, [r7, #4]
 800c696:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	68da      	ldr	r2, [r3, #12]
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	4013      	ands	r3, r2
 800c6a0:	683a      	ldr	r2, [r7, #0]
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	d101      	bne.n	800c6aa <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	e000      	b.n	800c6ac <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800c6aa:	2300      	movs	r3, #0
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	370c      	adds	r7, #12
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b6:	4770      	bx	lr

0800c6b8 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b083      	sub	sp, #12
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	69da      	ldr	r2, [r3, #28]
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	4013      	ands	r3, r2
 800c6ca:	683a      	ldr	r2, [r7, #0]
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	d101      	bne.n	800c6d4 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	e000      	b.n	800c6d6 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800c6d4:	2300      	movs	r3, #0
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	370c      	adds	r7, #12
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e0:	4770      	bx	lr
	...

0800c6e4 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800c6e8:	2102      	movs	r1, #2
 800c6ea:	4819      	ldr	r0, [pc, #100]	; (800c750 <HW_IPCC_Rx_Handler+0x6c>)
 800c6ec:	f7ff ffe4 	bl	800c6b8 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d009      	beq.n	800c70a <HW_IPCC_Rx_Handler+0x26>
 800c6f6:	4b16      	ldr	r3, [pc, #88]	; (800c750 <HW_IPCC_Rx_Handler+0x6c>)
 800c6f8:	685b      	ldr	r3, [r3, #4]
 800c6fa:	43db      	mvns	r3, r3
 800c6fc:	f003 0302 	and.w	r3, r3, #2
 800c700:	2b00      	cmp	r3, #0
 800c702:	d002      	beq.n	800c70a <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800c704:	f000 f8e6 	bl	800c8d4 <HW_IPCC_SYS_EvtHandler>
 800c708:	e01f      	b.n	800c74a <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800c70a:	2101      	movs	r1, #1
 800c70c:	4810      	ldr	r0, [pc, #64]	; (800c750 <HW_IPCC_Rx_Handler+0x6c>)
 800c70e:	f7ff ffd3 	bl	800c6b8 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c712:	4603      	mov	r3, r0
 800c714:	2b00      	cmp	r3, #0
 800c716:	d008      	beq.n	800c72a <HW_IPCC_Rx_Handler+0x46>
 800c718:	4b0d      	ldr	r3, [pc, #52]	; (800c750 <HW_IPCC_Rx_Handler+0x6c>)
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	f003 0301 	and.w	r3, r3, #1
 800c720:	2b00      	cmp	r3, #0
 800c722:	d102      	bne.n	800c72a <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800c724:	f000 f89a 	bl	800c85c <HW_IPCC_BLE_EvtHandler>
 800c728:	e00f      	b.n	800c74a <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800c72a:	2108      	movs	r1, #8
 800c72c:	4808      	ldr	r0, [pc, #32]	; (800c750 <HW_IPCC_Rx_Handler+0x6c>)
 800c72e:	f7ff ffc3 	bl	800c6b8 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c732:	4603      	mov	r3, r0
 800c734:	2b00      	cmp	r3, #0
 800c736:	d009      	beq.n	800c74c <HW_IPCC_Rx_Handler+0x68>
 800c738:	4b05      	ldr	r3, [pc, #20]	; (800c750 <HW_IPCC_Rx_Handler+0x6c>)
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	43db      	mvns	r3, r3
 800c73e:	f003 0308 	and.w	r3, r3, #8
 800c742:	2b00      	cmp	r3, #0
 800c744:	d002      	beq.n	800c74c <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800c746:	f000 f911 	bl	800c96c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800c74a:	bf00      	nop
 800c74c:	bf00      	nop
}
 800c74e:	bd80      	pop	{r7, pc}
 800c750:	58000c00 	.word	0x58000c00

0800c754 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800c754:	b580      	push	{r7, lr}
 800c756:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800c758:	2102      	movs	r1, #2
 800c75a:	4822      	ldr	r0, [pc, #136]	; (800c7e4 <HW_IPCC_Tx_Handler+0x90>)
 800c75c:	f7ff ff97 	bl	800c68e <LL_C1_IPCC_IsActiveFlag_CHx>
 800c760:	4603      	mov	r3, r0
 800c762:	2b00      	cmp	r3, #0
 800c764:	d109      	bne.n	800c77a <HW_IPCC_Tx_Handler+0x26>
 800c766:	4b1f      	ldr	r3, [pc, #124]	; (800c7e4 <HW_IPCC_Tx_Handler+0x90>)
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	43db      	mvns	r3, r3
 800c76c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c770:	2b00      	cmp	r3, #0
 800c772:	d002      	beq.n	800c77a <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800c774:	f000 f8a2 	bl	800c8bc <HW_IPCC_SYS_CmdEvtHandler>
 800c778:	e031      	b.n	800c7de <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800c77a:	2102      	movs	r1, #2
 800c77c:	4819      	ldr	r0, [pc, #100]	; (800c7e4 <HW_IPCC_Tx_Handler+0x90>)
 800c77e:	f7ff ff86 	bl	800c68e <LL_C1_IPCC_IsActiveFlag_CHx>
 800c782:	4603      	mov	r3, r0
 800c784:	2b00      	cmp	r3, #0
 800c786:	d109      	bne.n	800c79c <HW_IPCC_Tx_Handler+0x48>
 800c788:	4b16      	ldr	r3, [pc, #88]	; (800c7e4 <HW_IPCC_Tx_Handler+0x90>)
 800c78a:	685b      	ldr	r3, [r3, #4]
 800c78c:	43db      	mvns	r3, r3
 800c78e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c792:	2b00      	cmp	r3, #0
 800c794:	d002      	beq.n	800c79c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800c796:	f000 f891 	bl	800c8bc <HW_IPCC_SYS_CmdEvtHandler>
 800c79a:	e020      	b.n	800c7de <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800c79c:	2108      	movs	r1, #8
 800c79e:	4811      	ldr	r0, [pc, #68]	; (800c7e4 <HW_IPCC_Tx_Handler+0x90>)
 800c7a0:	f7ff ff75 	bl	800c68e <LL_C1_IPCC_IsActiveFlag_CHx>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d109      	bne.n	800c7be <HW_IPCC_Tx_Handler+0x6a>
 800c7aa:	4b0e      	ldr	r3, [pc, #56]	; (800c7e4 <HW_IPCC_Tx_Handler+0x90>)
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	43db      	mvns	r3, r3
 800c7b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d002      	beq.n	800c7be <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 800c7b8:	f000 f8ba 	bl	800c930 <HW_IPCC_MM_FreeBufHandler>
 800c7bc:	e00f      	b.n	800c7de <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800c7be:	2120      	movs	r1, #32
 800c7c0:	4808      	ldr	r0, [pc, #32]	; (800c7e4 <HW_IPCC_Tx_Handler+0x90>)
 800c7c2:	f7ff ff64 	bl	800c68e <LL_C1_IPCC_IsActiveFlag_CHx>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d109      	bne.n	800c7e0 <HW_IPCC_Tx_Handler+0x8c>
 800c7cc:	4b05      	ldr	r3, [pc, #20]	; (800c7e4 <HW_IPCC_Tx_Handler+0x90>)
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	43db      	mvns	r3, r3
 800c7d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d002      	beq.n	800c7e0 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800c7da:	f000 f84b 	bl	800c874 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800c7de:	bf00      	nop
 800c7e0:	bf00      	nop
}
 800c7e2:	bd80      	pop	{r7, pc}
 800c7e4:	58000c00 	.word	0x58000c00

0800c7e8 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	af00      	add	r7, sp, #0
  /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800c7ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c7f0:	f7ff fe9a 	bl	800c528 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800c7f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c7f8:	f7ff feaa 	bl	800c550 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800c7fc:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800c7fe:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800c800:	f7ff fe82 	bl	800c508 <LL_PWR_EnableBootC2>

  return;
 800c804:	bf00      	nop
}
 800c806:	bd80      	pop	{r7, pc}

0800c808 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800c80c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c810:	f7ff feb0 	bl	800c574 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800c814:	4806      	ldr	r0, [pc, #24]	; (800c830 <HW_IPCC_Init+0x28>)
 800c816:	f7ff fed6 	bl	800c5c6 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800c81a:	4805      	ldr	r0, [pc, #20]	; (800c830 <HW_IPCC_Init+0x28>)
 800c81c:	f7ff fec3 	bl	800c5a6 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800c820:	202c      	movs	r0, #44	; 0x2c
 800c822:	f7f8 fbc4 	bl	8004fae <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800c826:	202d      	movs	r0, #45	; 0x2d
 800c828:	f7f8 fbc1 	bl	8004fae <HAL_NVIC_EnableIRQ>

  return;
 800c82c:	bf00      	nop
}
 800c82e:	bd80      	pop	{r7, pc}
 800c830:	58000c00 	.word	0x58000c00

0800c834 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800c834:	b580      	push	{r7, lr}
 800c836:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800c838:	2101      	movs	r1, #1
 800c83a:	4802      	ldr	r0, [pc, #8]	; (800c844 <HW_IPCC_BLE_Init+0x10>)
 800c83c:	f7ff fef8 	bl	800c630 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c840:	bf00      	nop
}
 800c842:	bd80      	pop	{r7, pc}
 800c844:	58000c00 	.word	0x58000c00

0800c848 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800c84c:	2101      	movs	r1, #1
 800c84e:	4802      	ldr	r0, [pc, #8]	; (800c858 <HW_IPCC_BLE_SendCmd+0x10>)
 800c850:	f7ff ff0e 	bl	800c670 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800c854:	bf00      	nop
}
 800c856:	bd80      	pop	{r7, pc}
 800c858:	58000c00 	.word	0x58000c00

0800c85c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800c860:	f7ff f8ae 	bl	800b9c0 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800c864:	2101      	movs	r1, #1
 800c866:	4802      	ldr	r0, [pc, #8]	; (800c870 <HW_IPCC_BLE_EvtHandler+0x14>)
 800c868:	f7ff fef4 	bl	800c654 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c86c:	bf00      	nop
}
 800c86e:	bd80      	pop	{r7, pc}
 800c870:	58000c00 	.word	0x58000c00

0800c874 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800c874:	b580      	push	{r7, lr}
 800c876:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800c878:	2120      	movs	r1, #32
 800c87a:	4803      	ldr	r0, [pc, #12]	; (800c888 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800c87c:	f7ff fec6 	bl	800c60c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800c880:	f7ff f8ba 	bl	800b9f8 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800c884:	bf00      	nop
}
 800c886:	bd80      	pop	{r7, pc}
 800c888:	58000c00 	.word	0x58000c00

0800c88c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800c890:	2102      	movs	r1, #2
 800c892:	4802      	ldr	r0, [pc, #8]	; (800c89c <HW_IPCC_SYS_Init+0x10>)
 800c894:	f7ff fecc 	bl	800c630 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c898:	bf00      	nop
}
 800c89a:	bd80      	pop	{r7, pc}
 800c89c:	58000c00 	.word	0x58000c00

0800c8a0 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c8a4:	2102      	movs	r1, #2
 800c8a6:	4804      	ldr	r0, [pc, #16]	; (800c8b8 <HW_IPCC_SYS_SendCmd+0x18>)
 800c8a8:	f7ff fee2 	bl	800c670 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c8ac:	2102      	movs	r1, #2
 800c8ae:	4802      	ldr	r0, [pc, #8]	; (800c8b8 <HW_IPCC_SYS_SendCmd+0x18>)
 800c8b0:	f7ff fe99 	bl	800c5e6 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800c8b4:	bf00      	nop
}
 800c8b6:	bd80      	pop	{r7, pc}
 800c8b8:	58000c00 	.word	0x58000c00

0800c8bc <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c8c0:	2102      	movs	r1, #2
 800c8c2:	4803      	ldr	r0, [pc, #12]	; (800c8d0 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800c8c4:	f7ff fea2 	bl	800c60c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800c8c8:	f7ff f8de 	bl	800ba88 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800c8cc:	bf00      	nop
}
 800c8ce:	bd80      	pop	{r7, pc}
 800c8d0:	58000c00 	.word	0x58000c00

0800c8d4 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800c8d8:	f7ff f8e6 	bl	800baa8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800c8dc:	2102      	movs	r1, #2
 800c8de:	4802      	ldr	r0, [pc, #8]	; (800c8e8 <HW_IPCC_SYS_EvtHandler+0x14>)
 800c8e0:	f7ff feb8 	bl	800c654 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c8e4:	bf00      	nop
}
 800c8e6:	bd80      	pop	{r7, pc}
 800c8e8:	58000c00 	.word	0x58000c00

0800c8ec <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b082      	sub	sp, #8
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800c8f4:	2108      	movs	r1, #8
 800c8f6:	480c      	ldr	r0, [pc, #48]	; (800c928 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c8f8:	f7ff fec9 	bl	800c68e <LL_C1_IPCC_IsActiveFlag_CHx>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d007      	beq.n	800c912 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800c902:	4a0a      	ldr	r2, [pc, #40]	; (800c92c <HW_IPCC_MM_SendFreeBuf+0x40>)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c908:	2108      	movs	r1, #8
 800c90a:	4807      	ldr	r0, [pc, #28]	; (800c928 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c90c:	f7ff fe6b 	bl	800c5e6 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800c910:	e006      	b.n	800c920 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c916:	2108      	movs	r1, #8
 800c918:	4803      	ldr	r0, [pc, #12]	; (800c928 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c91a:	f7ff fea9 	bl	800c670 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800c91e:	bf00      	nop
}
 800c920:	3708      	adds	r7, #8
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
 800c926:	bf00      	nop
 800c928:	58000c00 	.word	0x58000c00
 800c92c:	20000668 	.word	0x20000668

0800c930 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800c930:	b580      	push	{r7, lr}
 800c932:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c934:	2108      	movs	r1, #8
 800c936:	4806      	ldr	r0, [pc, #24]	; (800c950 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800c938:	f7ff fe68 	bl	800c60c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800c93c:	4b05      	ldr	r3, [pc, #20]	; (800c954 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c942:	2108      	movs	r1, #8
 800c944:	4802      	ldr	r0, [pc, #8]	; (800c950 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800c946:	f7ff fe93 	bl	800c670 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800c94a:	bf00      	nop
}
 800c94c:	bd80      	pop	{r7, pc}
 800c94e:	bf00      	nop
 800c950:	58000c00 	.word	0x58000c00
 800c954:	20000668 	.word	0x20000668

0800c958 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800c95c:	2108      	movs	r1, #8
 800c95e:	4802      	ldr	r0, [pc, #8]	; (800c968 <HW_IPCC_TRACES_Init+0x10>)
 800c960:	f7ff fe66 	bl	800c630 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c964:	bf00      	nop
}
 800c966:	bd80      	pop	{r7, pc}
 800c968:	58000c00 	.word	0x58000c00

0800c96c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800c970:	f7ff f952 	bl	800bc18 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800c974:	2108      	movs	r1, #8
 800c976:	4802      	ldr	r0, [pc, #8]	; (800c980 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800c978:	f7ff fe6c 	bl	800c654 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c97c:	bf00      	nop
}
 800c97e:	bd80      	pop	{r7, pc}
 800c980:	58000c00 	.word	0x58000c00

0800c984 <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 800c984:	b480      	push	{r7}
 800c986:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800c988:	4b05      	ldr	r3, [pc, #20]	; (800c9a0 <UTIL_LPM_Init+0x1c>)
 800c98a:	2200      	movs	r2, #0
 800c98c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800c98e:	4b05      	ldr	r3, [pc, #20]	; (800c9a4 <UTIL_LPM_Init+0x20>)
 800c990:	2200      	movs	r2, #0
 800c992:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800c994:	bf00      	nop
 800c996:	46bd      	mov	sp, r7
 800c998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99c:	4770      	bx	lr
 800c99e:	bf00      	nop
 800c9a0:	2000066c 	.word	0x2000066c
 800c9a4:	20000670 	.word	0x20000670

0800c9a8 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b087      	sub	sp, #28
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
 800c9b0:	460b      	mov	r3, r1
 800c9b2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9b4:	f3ef 8310 	mrs	r3, PRIMASK
 800c9b8:	613b      	str	r3, [r7, #16]
  return(result);
 800c9ba:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800c9bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c9be:	b672      	cpsid	i
  
  switch(state)
 800c9c0:	78fb      	ldrb	r3, [r7, #3]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d009      	beq.n	800c9da <UTIL_LPM_SetOffMode+0x32>
 800c9c6:	2b01      	cmp	r3, #1
 800c9c8:	d000      	beq.n	800c9cc <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 800c9ca:	e00e      	b.n	800c9ea <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 800c9cc:	4b0c      	ldr	r3, [pc, #48]	; (800ca00 <UTIL_LPM_SetOffMode+0x58>)
 800c9ce:	681a      	ldr	r2, [r3, #0]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	4313      	orrs	r3, r2
 800c9d4:	4a0a      	ldr	r2, [pc, #40]	; (800ca00 <UTIL_LPM_SetOffMode+0x58>)
 800c9d6:	6013      	str	r3, [r2, #0]
      break;
 800c9d8:	e007      	b.n	800c9ea <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	43da      	mvns	r2, r3
 800c9de:	4b08      	ldr	r3, [pc, #32]	; (800ca00 <UTIL_LPM_SetOffMode+0x58>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	4013      	ands	r3, r2
 800c9e4:	4a06      	ldr	r2, [pc, #24]	; (800ca00 <UTIL_LPM_SetOffMode+0x58>)
 800c9e6:	6013      	str	r3, [r2, #0]
      break;
 800c9e8:	bf00      	nop
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800c9f4:	bf00      	nop
 800c9f6:	371c      	adds	r7, #28
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr
 800ca00:	20000670 	.word	0x20000670

0800ca04 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b08c      	sub	sp, #48	; 0x30
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800ca0c:	4b65      	ldr	r3, [pc, #404]	; (800cba4 <UTIL_SEQ_Run+0x1a0>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800ca12:	4b64      	ldr	r3, [pc, #400]	; (800cba4 <UTIL_SEQ_Run+0x1a0>)
 800ca14:	681a      	ldr	r2, [r3, #0]
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	4013      	ands	r3, r2
 800ca1a:	4a62      	ldr	r2, [pc, #392]	; (800cba4 <UTIL_SEQ_Run+0x1a0>)
 800ca1c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800ca1e:	e081      	b.n	800cb24 <UTIL_SEQ_Run+0x120>
  {
    counter = 0U;
 800ca20:	2300      	movs	r3, #0
 800ca22:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800ca24:	e002      	b.n	800ca2c <UTIL_SEQ_Run+0x28>
    {
      counter++;
 800ca26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca28:	3301      	adds	r3, #1
 800ca2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800ca2c:	4a5e      	ldr	r2, [pc, #376]	; (800cba8 <UTIL_SEQ_Run+0x1a4>)
 800ca2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca30:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ca34:	4b5d      	ldr	r3, [pc, #372]	; (800cbac <UTIL_SEQ_Run+0x1a8>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	401a      	ands	r2, r3
 800ca3a:	4b5a      	ldr	r3, [pc, #360]	; (800cba4 <UTIL_SEQ_Run+0x1a0>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	4013      	ands	r3, r2
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d0f0      	beq.n	800ca26 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800ca44:	4a58      	ldr	r2, [pc, #352]	; (800cba8 <UTIL_SEQ_Run+0x1a4>)
 800ca46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca48:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ca4c:	4b57      	ldr	r3, [pc, #348]	; (800cbac <UTIL_SEQ_Run+0x1a8>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	401a      	ands	r2, r3
 800ca52:	4b54      	ldr	r3, [pc, #336]	; (800cba4 <UTIL_SEQ_Run+0x1a0>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	4013      	ands	r3, r2
 800ca58:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800ca5a:	4a53      	ldr	r2, [pc, #332]	; (800cba8 <UTIL_SEQ_Run+0x1a4>)
 800ca5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca5e:	00db      	lsls	r3, r3, #3
 800ca60:	4413      	add	r3, r2
 800ca62:	685a      	ldr	r2, [r3, #4]
 800ca64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca66:	4013      	ands	r3, r2
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d106      	bne.n	800ca7a <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800ca6c:	4a4e      	ldr	r2, [pc, #312]	; (800cba8 <UTIL_SEQ_Run+0x1a4>)
 800ca6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca70:	00db      	lsls	r3, r3, #3
 800ca72:	4413      	add	r3, r2
 800ca74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca78:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800ca7a:	4a4b      	ldr	r2, [pc, #300]	; (800cba8 <UTIL_SEQ_Run+0x1a4>)
 800ca7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7e:	00db      	lsls	r3, r3, #3
 800ca80:	4413      	add	r3, r2
 800ca82:	685a      	ldr	r2, [r3, #4]
 800ca84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca86:	4013      	ands	r3, r2
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f000 f98f 	bl	800cdac <SEQ_BitPosition>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	461a      	mov	r2, r3
 800ca92:	4b47      	ldr	r3, [pc, #284]	; (800cbb0 <UTIL_SEQ_Run+0x1ac>)
 800ca94:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800ca96:	4a44      	ldr	r2, [pc, #272]	; (800cba8 <UTIL_SEQ_Run+0x1a4>)
 800ca98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca9a:	00db      	lsls	r3, r3, #3
 800ca9c:	4413      	add	r3, r2
 800ca9e:	685a      	ldr	r2, [r3, #4]
 800caa0:	4b43      	ldr	r3, [pc, #268]	; (800cbb0 <UTIL_SEQ_Run+0x1ac>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	2101      	movs	r1, #1
 800caa6:	fa01 f303 	lsl.w	r3, r1, r3
 800caaa:	43db      	mvns	r3, r3
 800caac:	401a      	ands	r2, r3
 800caae:	493e      	ldr	r1, [pc, #248]	; (800cba8 <UTIL_SEQ_Run+0x1a4>)
 800cab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab2:	00db      	lsls	r3, r3, #3
 800cab4:	440b      	add	r3, r1
 800cab6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cab8:	f3ef 8310 	mrs	r3, PRIMASK
 800cabc:	61bb      	str	r3, [r7, #24]
  return(result);
 800cabe:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cac0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800cac2:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800cac4:	4b3a      	ldr	r3, [pc, #232]	; (800cbb0 <UTIL_SEQ_Run+0x1ac>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	2201      	movs	r2, #1
 800caca:	fa02 f303 	lsl.w	r3, r2, r3
 800cace:	43da      	mvns	r2, r3
 800cad0:	4b38      	ldr	r3, [pc, #224]	; (800cbb4 <UTIL_SEQ_Run+0x1b0>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4013      	ands	r3, r2
 800cad6:	4a37      	ldr	r2, [pc, #220]	; (800cbb4 <UTIL_SEQ_Run+0x1b0>)
 800cad8:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800cada:	2302      	movs	r3, #2
 800cadc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cade:	e013      	b.n	800cb08 <UTIL_SEQ_Run+0x104>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800cae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae2:	3b01      	subs	r3, #1
 800cae4:	4a30      	ldr	r2, [pc, #192]	; (800cba8 <UTIL_SEQ_Run+0x1a4>)
 800cae6:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800caea:	4b31      	ldr	r3, [pc, #196]	; (800cbb0 <UTIL_SEQ_Run+0x1ac>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	2201      	movs	r2, #1
 800caf0:	fa02 f303 	lsl.w	r3, r2, r3
 800caf4:	43da      	mvns	r2, r3
 800caf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf8:	3b01      	subs	r3, #1
 800cafa:	400a      	ands	r2, r1
 800cafc:	492a      	ldr	r1, [pc, #168]	; (800cba8 <UTIL_SEQ_Run+0x1a4>)
 800cafe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800cb02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb04:	3b01      	subs	r3, #1
 800cb06:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d1e8      	bne.n	800cae0 <UTIL_SEQ_Run+0xdc>
 800cb0e:	6a3b      	ldr	r3, [r7, #32]
 800cb10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800cb18:	4b25      	ldr	r3, [pc, #148]	; (800cbb0 <UTIL_SEQ_Run+0x1ac>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4a26      	ldr	r2, [pc, #152]	; (800cbb8 <UTIL_SEQ_Run+0x1b4>)
 800cb1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb22:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800cb24:	4b23      	ldr	r3, [pc, #140]	; (800cbb4 <UTIL_SEQ_Run+0x1b0>)
 800cb26:	681a      	ldr	r2, [r3, #0]
 800cb28:	4b20      	ldr	r3, [pc, #128]	; (800cbac <UTIL_SEQ_Run+0x1a8>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	401a      	ands	r2, r3
 800cb2e:	4b1d      	ldr	r3, [pc, #116]	; (800cba4 <UTIL_SEQ_Run+0x1a0>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	4013      	ands	r3, r2
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d007      	beq.n	800cb48 <UTIL_SEQ_Run+0x144>
 800cb38:	4b20      	ldr	r3, [pc, #128]	; (800cbbc <UTIL_SEQ_Run+0x1b8>)
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	4b20      	ldr	r3, [pc, #128]	; (800cbc0 <UTIL_SEQ_Run+0x1bc>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4013      	ands	r3, r2
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	f43f af6c 	beq.w	800ca20 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800cb48:	4b19      	ldr	r3, [pc, #100]	; (800cbb0 <UTIL_SEQ_Run+0x1ac>)
 800cb4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb4e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800cb50:	f000 f91e 	bl	800cd90 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb54:	f3ef 8310 	mrs	r3, PRIMASK
 800cb58:	613b      	str	r3, [r7, #16]
  return(result);
 800cb5a:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cb5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb5e:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800cb60:	4b14      	ldr	r3, [pc, #80]	; (800cbb4 <UTIL_SEQ_Run+0x1b0>)
 800cb62:	681a      	ldr	r2, [r3, #0]
 800cb64:	4b11      	ldr	r3, [pc, #68]	; (800cbac <UTIL_SEQ_Run+0x1a8>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	401a      	ands	r2, r3
 800cb6a:	4b0e      	ldr	r3, [pc, #56]	; (800cba4 <UTIL_SEQ_Run+0x1a0>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	4013      	ands	r3, r2
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d108      	bne.n	800cb86 <UTIL_SEQ_Run+0x182>
 800cb74:	4b11      	ldr	r3, [pc, #68]	; (800cbbc <UTIL_SEQ_Run+0x1b8>)
 800cb76:	681a      	ldr	r2, [r3, #0]
 800cb78:	4b11      	ldr	r3, [pc, #68]	; (800cbc0 <UTIL_SEQ_Run+0x1bc>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	4013      	ands	r3, r2
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d101      	bne.n	800cb86 <UTIL_SEQ_Run+0x182>
  {
	UTIL_SEQ_Idle( );
 800cb82:	f7f4 fbf2 	bl	800136a <UTIL_SEQ_Idle>
 800cb86:	69fb      	ldr	r3, [r7, #28]
 800cb88:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  
  UTIL_SEQ_PostIdle( );
 800cb90:	f000 f905 	bl	800cd9e <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800cb94:	4a03      	ldr	r2, [pc, #12]	; (800cba4 <UTIL_SEQ_Run+0x1a0>)
 800cb96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb98:	6013      	str	r3, [r2, #0]

  return;
 800cb9a:	bf00      	nop
}
 800cb9c:	3730      	adds	r7, #48	; 0x30
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
 800cba2:	bf00      	nop
 800cba4:	20000058 	.word	0x20000058
 800cba8:	20000704 	.word	0x20000704
 800cbac:	20000054 	.word	0x20000054
 800cbb0:	20000680 	.word	0x20000680
 800cbb4:	20000674 	.word	0x20000674
 800cbb8:	20000684 	.word	0x20000684
 800cbbc:	20000678 	.word	0x20000678
 800cbc0:	2000067c 	.word	0x2000067c

0800cbc4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b088      	sub	sp, #32
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	60f8      	str	r0, [r7, #12]
 800cbcc:	60b9      	str	r1, [r7, #8]
 800cbce:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cbd0:	f3ef 8310 	mrs	r3, PRIMASK
 800cbd4:	617b      	str	r3, [r7, #20]
  return(result);
 800cbd6:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800cbd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800cbda:	b672      	cpsid	i

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800cbdc:	68f8      	ldr	r0, [r7, #12]
 800cbde:	f000 f8e5 	bl	800cdac <SEQ_BitPosition>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	4a06      	ldr	r2, [pc, #24]	; (800cc00 <UTIL_SEQ_RegTask+0x3c>)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800cbee:	69fb      	ldr	r3, [r7, #28]
 800cbf0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbf2:	69bb      	ldr	r3, [r7, #24]
 800cbf4:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800cbf8:	bf00      	nop
}
 800cbfa:	3720      	adds	r7, #32
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}
 800cc00:	20000684 	.word	0x20000684

0800cc04 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800cc04:	b480      	push	{r7}
 800cc06:	b087      	sub	sp, #28
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc0e:	f3ef 8310 	mrs	r3, PRIMASK
 800cc12:	60fb      	str	r3, [r7, #12]
  return(result);
 800cc14:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cc16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cc18:	b672      	cpsid	i

  TaskSet |= TaskId_bm;
 800cc1a:	4b0d      	ldr	r3, [pc, #52]	; (800cc50 <UTIL_SEQ_SetTask+0x4c>)
 800cc1c:	681a      	ldr	r2, [r3, #0]
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	4313      	orrs	r3, r2
 800cc22:	4a0b      	ldr	r2, [pc, #44]	; (800cc50 <UTIL_SEQ_SetTask+0x4c>)
 800cc24:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800cc26:	4a0b      	ldr	r2, [pc, #44]	; (800cc54 <UTIL_SEQ_SetTask+0x50>)
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	431a      	orrs	r2, r3
 800cc32:	4908      	ldr	r1, [pc, #32]	; (800cc54 <UTIL_SEQ_SetTask+0x50>)
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800cc44:	bf00      	nop
}
 800cc46:	371c      	adds	r7, #28
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr
 800cc50:	20000674 	.word	0x20000674
 800cc54:	20000704 	.word	0x20000704

0800cc58 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b087      	sub	sp, #28
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc60:	f3ef 8310 	mrs	r3, PRIMASK
 800cc64:	60fb      	str	r3, [r7, #12]
  return(result);
 800cc66:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cc68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cc6a:	b672      	cpsid	i

  TaskMask &= (~TaskId_bm);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	43da      	mvns	r2, r3
 800cc70:	4b07      	ldr	r3, [pc, #28]	; (800cc90 <UTIL_SEQ_PauseTask+0x38>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	4013      	ands	r3, r2
 800cc76:	4a06      	ldr	r2, [pc, #24]	; (800cc90 <UTIL_SEQ_PauseTask+0x38>)
 800cc78:	6013      	str	r3, [r2, #0]
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800cc84:	bf00      	nop
}
 800cc86:	371c      	adds	r7, #28
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8e:	4770      	bx	lr
 800cc90:	20000054 	.word	0x20000054

0800cc94 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800cc94:	b480      	push	{r7}
 800cc96:	b087      	sub	sp, #28
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc9c:	f3ef 8310 	mrs	r3, PRIMASK
 800cca0:	60fb      	str	r3, [r7, #12]
  return(result);
 800cca2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cca4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cca6:	b672      	cpsid	i

  TaskMask |= TaskId_bm;
 800cca8:	4b08      	ldr	r3, [pc, #32]	; (800cccc <UTIL_SEQ_ResumeTask+0x38>)
 800ccaa:	681a      	ldr	r2, [r3, #0]
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	4a06      	ldr	r2, [pc, #24]	; (800cccc <UTIL_SEQ_ResumeTask+0x38>)
 800ccb2:	6013      	str	r3, [r2, #0]
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ccbe:	bf00      	nop
}
 800ccc0:	371c      	adds	r7, #28
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc8:	4770      	bx	lr
 800ccca:	bf00      	nop
 800cccc:	20000054 	.word	0x20000054

0800ccd0 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b087      	sub	sp, #28
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ccd8:	f3ef 8310 	mrs	r3, PRIMASK
 800ccdc:	60fb      	str	r3, [r7, #12]
  return(result);
 800ccde:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cce0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cce2:	b672      	cpsid	i

  EvtSet |= EvtId_bm;
 800cce4:	4b08      	ldr	r3, [pc, #32]	; (800cd08 <UTIL_SEQ_SetEvt+0x38>)
 800cce6:	681a      	ldr	r2, [r3, #0]
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	4313      	orrs	r3, r2
 800ccec:	4a06      	ldr	r2, [pc, #24]	; (800cd08 <UTIL_SEQ_SetEvt+0x38>)
 800ccee:	6013      	str	r3, [r2, #0]
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ccf4:	693b      	ldr	r3, [r7, #16]
 800ccf6:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ccfa:	bf00      	nop
}
 800ccfc:	371c      	adds	r7, #28
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd04:	4770      	bx	lr
 800cd06:	bf00      	nop
 800cd08:	20000678 	.word	0x20000678

0800cd0c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b086      	sub	sp, #24
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800cd14:	4b1b      	ldr	r3, [pc, #108]	; (800cd84 <UTIL_SEQ_WaitEvt+0x78>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800cd1a:	4b1a      	ldr	r3, [pc, #104]	; (800cd84 <UTIL_SEQ_WaitEvt+0x78>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd22:	d102      	bne.n	800cd2a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 800cd24:	2300      	movs	r3, #0
 800cd26:	617b      	str	r3, [r7, #20]
 800cd28:	e005      	b.n	800cd36 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 800cd2a:	4b16      	ldr	r3, [pc, #88]	; (800cd84 <UTIL_SEQ_WaitEvt+0x78>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	2201      	movs	r2, #1
 800cd30:	fa02 f303 	lsl.w	r3, r2, r3
 800cd34:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800cd36:	4b14      	ldr	r3, [pc, #80]	; (800cd88 <UTIL_SEQ_WaitEvt+0x7c>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 800cd3c:	4a12      	ldr	r2, [pc, #72]	; (800cd88 <UTIL_SEQ_WaitEvt+0x7c>)
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 800cd42:	e005      	b.n	800cd50 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 800cd44:	4b10      	ldr	r3, [pc, #64]	; (800cd88 <UTIL_SEQ_WaitEvt+0x7c>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	4619      	mov	r1, r3
 800cd4a:	6978      	ldr	r0, [r7, #20]
 800cd4c:	f7f4 fb14 	bl	8001378 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 800cd50:	4b0e      	ldr	r3, [pc, #56]	; (800cd8c <UTIL_SEQ_WaitEvt+0x80>)
 800cd52:	681a      	ldr	r2, [r3, #0]
 800cd54:	4b0c      	ldr	r3, [pc, #48]	; (800cd88 <UTIL_SEQ_WaitEvt+0x7c>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	4013      	ands	r3, r2
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d0f2      	beq.n	800cd44 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800cd5e:	4a09      	ldr	r2, [pc, #36]	; (800cd84 <UTIL_SEQ_WaitEvt+0x78>)
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 800cd64:	4b08      	ldr	r3, [pc, #32]	; (800cd88 <UTIL_SEQ_WaitEvt+0x7c>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	43da      	mvns	r2, r3
 800cd6a:	4b08      	ldr	r3, [pc, #32]	; (800cd8c <UTIL_SEQ_WaitEvt+0x80>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	4013      	ands	r3, r2
 800cd70:	4a06      	ldr	r2, [pc, #24]	; (800cd8c <UTIL_SEQ_WaitEvt+0x80>)
 800cd72:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 800cd74:	4a04      	ldr	r2, [pc, #16]	; (800cd88 <UTIL_SEQ_WaitEvt+0x7c>)
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	6013      	str	r3, [r2, #0]

  return;
 800cd7a:	bf00      	nop
}
 800cd7c:	3718      	adds	r7, #24
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
 800cd82:	bf00      	nop
 800cd84:	20000680 	.word	0x20000680
 800cd88:	2000067c 	.word	0x2000067c
 800cd8c:	20000678 	.word	0x20000678

0800cd90 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800cd90:	b480      	push	{r7}
 800cd92:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800cd94:	bf00      	nop
}
 800cd96:	46bd      	mov	sp, r7
 800cd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9c:	4770      	bx	lr

0800cd9e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800cd9e:	b480      	push	{r7}
 800cda0:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800cda2:	bf00      	nop
}
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr

0800cdac <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b085      	sub	sp, #20
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	0c1b      	lsrs	r3, r3, #16
 800cdbc:	041b      	lsls	r3, r3, #16
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d104      	bne.n	800cdcc <SEQ_BitPosition+0x20>
 800cdc2:	2310      	movs	r3, #16
 800cdc4:	73fb      	strb	r3, [r7, #15]
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	041b      	lsls	r3, r3, #16
 800cdca:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d105      	bne.n	800cde2 <SEQ_BitPosition+0x36>
 800cdd6:	7bfb      	ldrb	r3, [r7, #15]
 800cdd8:	3308      	adds	r3, #8
 800cdda:	73fb      	strb	r3, [r7, #15]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	021b      	lsls	r3, r3, #8
 800cde0:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d105      	bne.n	800cdf8 <SEQ_BitPosition+0x4c>
 800cdec:	7bfb      	ldrb	r3, [r7, #15]
 800cdee:	3304      	adds	r3, #4
 800cdf0:	73fb      	strb	r3, [r7, #15]
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	011b      	lsls	r3, r3, #4
 800cdf6:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	0f1b      	lsrs	r3, r3, #28
 800cdfc:	4a07      	ldr	r2, [pc, #28]	; (800ce1c <SEQ_BitPosition+0x70>)
 800cdfe:	5cd2      	ldrb	r2, [r2, r3]
 800ce00:	7bfb      	ldrb	r3, [r7, #15]
 800ce02:	4413      	add	r3, r2
 800ce04:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800ce06:	7bfb      	ldrb	r3, [r7, #15]
 800ce08:	f1c3 031f 	rsb	r3, r3, #31
 800ce0c:	b2db      	uxtb	r3, r3
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3714      	adds	r7, #20
 800ce12:	46bd      	mov	sp, r7
 800ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce18:	4770      	bx	lr
 800ce1a:	bf00      	nop
 800ce1c:	0800d130 	.word	0x0800d130

0800ce20 <__libc_init_array>:
 800ce20:	b570      	push	{r4, r5, r6, lr}
 800ce22:	4e0d      	ldr	r6, [pc, #52]	; (800ce58 <__libc_init_array+0x38>)
 800ce24:	4c0d      	ldr	r4, [pc, #52]	; (800ce5c <__libc_init_array+0x3c>)
 800ce26:	1ba4      	subs	r4, r4, r6
 800ce28:	10a4      	asrs	r4, r4, #2
 800ce2a:	2500      	movs	r5, #0
 800ce2c:	42a5      	cmp	r5, r4
 800ce2e:	d109      	bne.n	800ce44 <__libc_init_array+0x24>
 800ce30:	4e0b      	ldr	r6, [pc, #44]	; (800ce60 <__libc_init_array+0x40>)
 800ce32:	4c0c      	ldr	r4, [pc, #48]	; (800ce64 <__libc_init_array+0x44>)
 800ce34:	f000 f82c 	bl	800ce90 <_init>
 800ce38:	1ba4      	subs	r4, r4, r6
 800ce3a:	10a4      	asrs	r4, r4, #2
 800ce3c:	2500      	movs	r5, #0
 800ce3e:	42a5      	cmp	r5, r4
 800ce40:	d105      	bne.n	800ce4e <__libc_init_array+0x2e>
 800ce42:	bd70      	pop	{r4, r5, r6, pc}
 800ce44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ce48:	4798      	blx	r3
 800ce4a:	3501      	adds	r5, #1
 800ce4c:	e7ee      	b.n	800ce2c <__libc_init_array+0xc>
 800ce4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ce52:	4798      	blx	r3
 800ce54:	3501      	adds	r5, #1
 800ce56:	e7f2      	b.n	800ce3e <__libc_init_array+0x1e>
 800ce58:	0800d148 	.word	0x0800d148
 800ce5c:	0800d148 	.word	0x0800d148
 800ce60:	0800d148 	.word	0x0800d148
 800ce64:	0800d14c 	.word	0x0800d14c

0800ce68 <memcpy>:
 800ce68:	b510      	push	{r4, lr}
 800ce6a:	1e43      	subs	r3, r0, #1
 800ce6c:	440a      	add	r2, r1
 800ce6e:	4291      	cmp	r1, r2
 800ce70:	d100      	bne.n	800ce74 <memcpy+0xc>
 800ce72:	bd10      	pop	{r4, pc}
 800ce74:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce78:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce7c:	e7f7      	b.n	800ce6e <memcpy+0x6>

0800ce7e <memset>:
 800ce7e:	4402      	add	r2, r0
 800ce80:	4603      	mov	r3, r0
 800ce82:	4293      	cmp	r3, r2
 800ce84:	d100      	bne.n	800ce88 <memset+0xa>
 800ce86:	4770      	bx	lr
 800ce88:	f803 1b01 	strb.w	r1, [r3], #1
 800ce8c:	e7f9      	b.n	800ce82 <memset+0x4>
	...

0800ce90 <_init>:
 800ce90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce92:	bf00      	nop
 800ce94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce96:	bc08      	pop	{r3}
 800ce98:	469e      	mov	lr, r3
 800ce9a:	4770      	bx	lr

0800ce9c <_fini>:
 800ce9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce9e:	bf00      	nop
 800cea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cea2:	bc08      	pop	{r3}
 800cea4:	469e      	mov	lr, r3
 800cea6:	4770      	bx	lr
