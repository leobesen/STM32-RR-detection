
SERVER_NUCLEO_LB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c498  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  0800c5d8  0800c5d8  0001c5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c744  0800c744  0001c744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c74c  0800c74c  0001c74c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c750  0800c750  0001c750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000058  20000004  0800c754  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  2000005c  0800c7ac  0002005c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003d  200000f8  0800c845  000200f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000138  0800c882  00020138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 000000a8  2000014c  0800c893  0002014c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000a24  200001f4  0800c93b  000201f4  2**2
                  ALLOC
 12 ._user_heap_stack 00000c00  20000c18  0800c93b  00020c18  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000024  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       0000019f  20030024  20030024  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000880  200301c4  200301c4  00030000  2**2
                  ALLOC
 17 .debug_info   00045ea6  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 00007f0b  00000000  00000000  000660ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00003210  00000000  00000000  0006dfd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00002e68  00000000  00000000  000711e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  000309ac  00000000  00000000  00074050  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   00033c39  00000000  00000000  000a49fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    00103c2f  00000000  00000000  000d8635  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  001dc264  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000d120  00000000  00000000  001dc2e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f4 	.word	0x200001f4
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c5c0 	.word	0x0800c5c0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f8 	.word	0x200001f8
 800017c:	0800c5c0 	.word	0x0800c5c0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_uldivmod>:
 8000190:	b953      	cbnz	r3, 80001a8 <__aeabi_uldivmod+0x18>
 8000192:	b94a      	cbnz	r2, 80001a8 <__aeabi_uldivmod+0x18>
 8000194:	2900      	cmp	r1, #0
 8000196:	bf08      	it	eq
 8000198:	2800      	cmpeq	r0, #0
 800019a:	bf1c      	itt	ne
 800019c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001a4:	f000 b972 	b.w	800048c <__aeabi_idiv0>
 80001a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b0:	f000 f806 	bl	80001c0 <__udivmoddi4>
 80001b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001bc:	b004      	add	sp, #16
 80001be:	4770      	bx	lr

080001c0 <__udivmoddi4>:
 80001c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c4:	9e08      	ldr	r6, [sp, #32]
 80001c6:	4604      	mov	r4, r0
 80001c8:	4688      	mov	r8, r1
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d14b      	bne.n	8000266 <__udivmoddi4+0xa6>
 80001ce:	428a      	cmp	r2, r1
 80001d0:	4615      	mov	r5, r2
 80001d2:	d967      	bls.n	80002a4 <__udivmoddi4+0xe4>
 80001d4:	fab2 f282 	clz	r2, r2
 80001d8:	b14a      	cbz	r2, 80001ee <__udivmoddi4+0x2e>
 80001da:	f1c2 0720 	rsb	r7, r2, #32
 80001de:	fa01 f302 	lsl.w	r3, r1, r2
 80001e2:	fa20 f707 	lsr.w	r7, r0, r7
 80001e6:	4095      	lsls	r5, r2
 80001e8:	ea47 0803 	orr.w	r8, r7, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80001f8:	fa1f fc85 	uxth.w	ip, r5
 80001fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000200:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000204:	fb07 f10c 	mul.w	r1, r7, ip
 8000208:	4299      	cmp	r1, r3
 800020a:	d909      	bls.n	8000220 <__udivmoddi4+0x60>
 800020c:	18eb      	adds	r3, r5, r3
 800020e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000212:	f080 811b 	bcs.w	800044c <__udivmoddi4+0x28c>
 8000216:	4299      	cmp	r1, r3
 8000218:	f240 8118 	bls.w	800044c <__udivmoddi4+0x28c>
 800021c:	3f02      	subs	r7, #2
 800021e:	442b      	add	r3, r5
 8000220:	1a5b      	subs	r3, r3, r1
 8000222:	b2a4      	uxth	r4, r4
 8000224:	fbb3 f0fe 	udiv	r0, r3, lr
 8000228:	fb0e 3310 	mls	r3, lr, r0, r3
 800022c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000230:	fb00 fc0c 	mul.w	ip, r0, ip
 8000234:	45a4      	cmp	ip, r4
 8000236:	d909      	bls.n	800024c <__udivmoddi4+0x8c>
 8000238:	192c      	adds	r4, r5, r4
 800023a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800023e:	f080 8107 	bcs.w	8000450 <__udivmoddi4+0x290>
 8000242:	45a4      	cmp	ip, r4
 8000244:	f240 8104 	bls.w	8000450 <__udivmoddi4+0x290>
 8000248:	3802      	subs	r0, #2
 800024a:	442c      	add	r4, r5
 800024c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000250:	eba4 040c 	sub.w	r4, r4, ip
 8000254:	2700      	movs	r7, #0
 8000256:	b11e      	cbz	r6, 8000260 <__udivmoddi4+0xa0>
 8000258:	40d4      	lsrs	r4, r2
 800025a:	2300      	movs	r3, #0
 800025c:	e9c6 4300 	strd	r4, r3, [r6]
 8000260:	4639      	mov	r1, r7
 8000262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000266:	428b      	cmp	r3, r1
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0xbe>
 800026a:	2e00      	cmp	r6, #0
 800026c:	f000 80eb 	beq.w	8000446 <__udivmoddi4+0x286>
 8000270:	2700      	movs	r7, #0
 8000272:	e9c6 0100 	strd	r0, r1, [r6]
 8000276:	4638      	mov	r0, r7
 8000278:	4639      	mov	r1, r7
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f783 	clz	r7, r3
 8000282:	2f00      	cmp	r7, #0
 8000284:	d147      	bne.n	8000316 <__udivmoddi4+0x156>
 8000286:	428b      	cmp	r3, r1
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd0>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fa 	bhi.w	8000484 <__udivmoddi4+0x2c4>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb61 0303 	sbc.w	r3, r1, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e0      	beq.n	8000260 <__udivmoddi4+0xa0>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7dd      	b.n	8000260 <__udivmoddi4+0xa0>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xe8>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 808f 	bne.w	80003d0 <__udivmoddi4+0x210>
 80002b2:	1b49      	subs	r1, r1, r5
 80002b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002b8:	fa1f f885 	uxth.w	r8, r5
 80002bc:	2701      	movs	r7, #1
 80002be:	fbb1 fcfe 	udiv	ip, r1, lr
 80002c2:	0c23      	lsrs	r3, r4, #16
 80002c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80002c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002cc:	fb08 f10c 	mul.w	r1, r8, ip
 80002d0:	4299      	cmp	r1, r3
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0x124>
 80002d4:	18eb      	adds	r3, r5, r3
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0x122>
 80002dc:	4299      	cmp	r1, r3
 80002de:	f200 80cd 	bhi.w	800047c <__udivmoddi4+0x2bc>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1a59      	subs	r1, r3, r1
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80002f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x14c>
 80002fc:	192c      	adds	r4, r5, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x14a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80b6 	bhi.w	8000476 <__udivmoddi4+0x2b6>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e79f      	b.n	8000256 <__udivmoddi4+0x96>
 8000316:	f1c7 0c20 	rsb	ip, r7, #32
 800031a:	40bb      	lsls	r3, r7
 800031c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000320:	ea4e 0e03 	orr.w	lr, lr, r3
 8000324:	fa01 f407 	lsl.w	r4, r1, r7
 8000328:	fa20 f50c 	lsr.w	r5, r0, ip
 800032c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000330:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000334:	4325      	orrs	r5, r4
 8000336:	fbb3 f9f8 	udiv	r9, r3, r8
 800033a:	0c2c      	lsrs	r4, r5, #16
 800033c:	fb08 3319 	mls	r3, r8, r9, r3
 8000340:	fa1f fa8e 	uxth.w	sl, lr
 8000344:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000348:	fb09 f40a 	mul.w	r4, r9, sl
 800034c:	429c      	cmp	r4, r3
 800034e:	fa02 f207 	lsl.w	r2, r2, r7
 8000352:	fa00 f107 	lsl.w	r1, r0, r7
 8000356:	d90b      	bls.n	8000370 <__udivmoddi4+0x1b0>
 8000358:	eb1e 0303 	adds.w	r3, lr, r3
 800035c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000360:	f080 8087 	bcs.w	8000472 <__udivmoddi4+0x2b2>
 8000364:	429c      	cmp	r4, r3
 8000366:	f240 8084 	bls.w	8000472 <__udivmoddi4+0x2b2>
 800036a:	f1a9 0902 	sub.w	r9, r9, #2
 800036e:	4473      	add	r3, lr
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	b2ad      	uxth	r5, r5
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000380:	fb00 fa0a 	mul.w	sl, r0, sl
 8000384:	45a2      	cmp	sl, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x1da>
 8000388:	eb1e 0404 	adds.w	r4, lr, r4
 800038c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000390:	d26b      	bcs.n	800046a <__udivmoddi4+0x2aa>
 8000392:	45a2      	cmp	sl, r4
 8000394:	d969      	bls.n	800046a <__udivmoddi4+0x2aa>
 8000396:	3802      	subs	r0, #2
 8000398:	4474      	add	r4, lr
 800039a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800039e:	fba0 8902 	umull	r8, r9, r0, r2
 80003a2:	eba4 040a 	sub.w	r4, r4, sl
 80003a6:	454c      	cmp	r4, r9
 80003a8:	46c2      	mov	sl, r8
 80003aa:	464b      	mov	r3, r9
 80003ac:	d354      	bcc.n	8000458 <__udivmoddi4+0x298>
 80003ae:	d051      	beq.n	8000454 <__udivmoddi4+0x294>
 80003b0:	2e00      	cmp	r6, #0
 80003b2:	d069      	beq.n	8000488 <__udivmoddi4+0x2c8>
 80003b4:	ebb1 050a 	subs.w	r5, r1, sl
 80003b8:	eb64 0403 	sbc.w	r4, r4, r3
 80003bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003c0:	40fd      	lsrs	r5, r7
 80003c2:	40fc      	lsrs	r4, r7
 80003c4:	ea4c 0505 	orr.w	r5, ip, r5
 80003c8:	e9c6 5400 	strd	r5, r4, [r6]
 80003cc:	2700      	movs	r7, #0
 80003ce:	e747      	b.n	8000260 <__udivmoddi4+0xa0>
 80003d0:	f1c2 0320 	rsb	r3, r2, #32
 80003d4:	fa20 f703 	lsr.w	r7, r0, r3
 80003d8:	4095      	lsls	r5, r2
 80003da:	fa01 f002 	lsl.w	r0, r1, r2
 80003de:	fa21 f303 	lsr.w	r3, r1, r3
 80003e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e6:	4338      	orrs	r0, r7
 80003e8:	0c01      	lsrs	r1, r0, #16
 80003ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80003ee:	fa1f f885 	uxth.w	r8, r5
 80003f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80003f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fa:	fb07 f308 	mul.w	r3, r7, r8
 80003fe:	428b      	cmp	r3, r1
 8000400:	fa04 f402 	lsl.w	r4, r4, r2
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x256>
 8000406:	1869      	adds	r1, r5, r1
 8000408:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800040c:	d22f      	bcs.n	800046e <__udivmoddi4+0x2ae>
 800040e:	428b      	cmp	r3, r1
 8000410:	d92d      	bls.n	800046e <__udivmoddi4+0x2ae>
 8000412:	3f02      	subs	r7, #2
 8000414:	4429      	add	r1, r5
 8000416:	1acb      	subs	r3, r1, r3
 8000418:	b281      	uxth	r1, r0
 800041a:	fbb3 f0fe 	udiv	r0, r3, lr
 800041e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000422:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000426:	fb00 f308 	mul.w	r3, r0, r8
 800042a:	428b      	cmp	r3, r1
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x27e>
 800042e:	1869      	adds	r1, r5, r1
 8000430:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000434:	d217      	bcs.n	8000466 <__udivmoddi4+0x2a6>
 8000436:	428b      	cmp	r3, r1
 8000438:	d915      	bls.n	8000466 <__udivmoddi4+0x2a6>
 800043a:	3802      	subs	r0, #2
 800043c:	4429      	add	r1, r5
 800043e:	1ac9      	subs	r1, r1, r3
 8000440:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000444:	e73b      	b.n	80002be <__udivmoddi4+0xfe>
 8000446:	4637      	mov	r7, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e709      	b.n	8000260 <__udivmoddi4+0xa0>
 800044c:	4607      	mov	r7, r0
 800044e:	e6e7      	b.n	8000220 <__udivmoddi4+0x60>
 8000450:	4618      	mov	r0, r3
 8000452:	e6fb      	b.n	800024c <__udivmoddi4+0x8c>
 8000454:	4541      	cmp	r1, r8
 8000456:	d2ab      	bcs.n	80003b0 <__udivmoddi4+0x1f0>
 8000458:	ebb8 0a02 	subs.w	sl, r8, r2
 800045c:	eb69 020e 	sbc.w	r2, r9, lr
 8000460:	3801      	subs	r0, #1
 8000462:	4613      	mov	r3, r2
 8000464:	e7a4      	b.n	80003b0 <__udivmoddi4+0x1f0>
 8000466:	4660      	mov	r0, ip
 8000468:	e7e9      	b.n	800043e <__udivmoddi4+0x27e>
 800046a:	4618      	mov	r0, r3
 800046c:	e795      	b.n	800039a <__udivmoddi4+0x1da>
 800046e:	4667      	mov	r7, ip
 8000470:	e7d1      	b.n	8000416 <__udivmoddi4+0x256>
 8000472:	4681      	mov	r9, r0
 8000474:	e77c      	b.n	8000370 <__udivmoddi4+0x1b0>
 8000476:	3802      	subs	r0, #2
 8000478:	442c      	add	r4, r5
 800047a:	e747      	b.n	800030c <__udivmoddi4+0x14c>
 800047c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000480:	442b      	add	r3, r5
 8000482:	e72f      	b.n	80002e4 <__udivmoddi4+0x124>
 8000484:	4638      	mov	r0, r7
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xda>
 8000488:	4637      	mov	r7, r6
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0xa0>

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop

08000490 <LIS3DH_WriteIO>:

//Functions definitions
//Private functions
//Write IO
void LIS3DH_WriteIO(accConfig acc, uint8_t reg, uint8_t *dataW, uint8_t size)
{
 8000490:	b5b0      	push	{r4, r5, r7, lr}
 8000492:	b088      	sub	sp, #32
 8000494:	af00      	add	r7, sp, #0
 8000496:	1d3c      	adds	r4, r7, #4
 8000498:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800049c:	70fb      	strb	r3, [r7, #3]
 800049e:	466b      	mov	r3, sp
 80004a0:	461d      	mov	r5, r3
	uint8_t data[1 + size];
 80004a2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80004a6:	1c58      	adds	r0, r3, #1
 80004a8:	1e43      	subs	r3, r0, #1
 80004aa:	61bb      	str	r3, [r7, #24]
 80004ac:	4603      	mov	r3, r0
 80004ae:	4619      	mov	r1, r3
 80004b0:	f04f 0200 	mov.w	r2, #0
 80004b4:	f04f 0300 	mov.w	r3, #0
 80004b8:	f04f 0400 	mov.w	r4, #0
 80004bc:	00d4      	lsls	r4, r2, #3
 80004be:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80004c2:	00cb      	lsls	r3, r1, #3
 80004c4:	4603      	mov	r3, r0
 80004c6:	4619      	mov	r1, r3
 80004c8:	f04f 0200 	mov.w	r2, #0
 80004cc:	f04f 0300 	mov.w	r3, #0
 80004d0:	f04f 0400 	mov.w	r4, #0
 80004d4:	00d4      	lsls	r4, r2, #3
 80004d6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80004da:	00cb      	lsls	r3, r1, #3
 80004dc:	4603      	mov	r3, r0
 80004de:	3307      	adds	r3, #7
 80004e0:	08db      	lsrs	r3, r3, #3
 80004e2:	00db      	lsls	r3, r3, #3
 80004e4:	ebad 0d03 	sub.w	sp, sp, r3
 80004e8:	466b      	mov	r3, sp
 80004ea:	3300      	adds	r3, #0
 80004ec:	617b      	str	r3, [r7, #20]
	data[0] = reg;
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	78fa      	ldrb	r2, [r7, #3]
 80004f2:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<=size; i++)
 80004f4:	2301      	movs	r3, #1
 80004f6:	61fb      	str	r3, [r7, #28]
 80004f8:	e00c      	b.n	8000514 <LIS3DH_WriteIO+0x84>
		data[i]=dataW[i-1];
 80004fa:	69fb      	ldr	r3, [r7, #28]
 80004fc:	3b01      	subs	r3, #1
 80004fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000500:	4413      	add	r3, r2
 8000502:	7819      	ldrb	r1, [r3, #0]
 8000504:	697a      	ldr	r2, [r7, #20]
 8000506:	69fb      	ldr	r3, [r7, #28]
 8000508:	4413      	add	r3, r2
 800050a:	460a      	mov	r2, r1
 800050c:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<=size; i++)
 800050e:	69fb      	ldr	r3, [r7, #28]
 8000510:	3301      	adds	r3, #1
 8000512:	61fb      	str	r3, [r7, #28]
 8000514:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000518:	69fa      	ldr	r2, [r7, #28]
 800051a:	429a      	cmp	r2, r3
 800051c:	dded      	ble.n	80004fa <LIS3DH_WriteIO+0x6a>
	//Enable CS
	HAL_GPIO_WritePin(acc.GPIOx_CS, acc.GPIO_Pin_CS, GPIO_PIN_RESET);
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	89b9      	ldrh	r1, [r7, #12]
 8000522:	2200      	movs	r2, #0
 8000524:	4618      	mov	r0, r3
 8000526:	f003 fff9 	bl	800451c <HAL_GPIO_WritePin>
	//set register value and data
	HAL_SPI_Transmit(acc.accSPI, data, 1 + size, 1000);
 800052a:	6878      	ldr	r0, [r7, #4]
 800052c:	6979      	ldr	r1, [r7, #20]
 800052e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000532:	b29b      	uxth	r3, r3
 8000534:	3301      	adds	r3, #1
 8000536:	b29a      	uxth	r2, r3
 8000538:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053c:	f006 fe13 	bl	8007166 <HAL_SPI_Transmit>
	//Disable CS
	HAL_GPIO_WritePin(acc.GPIOx_CS, acc.GPIO_Pin_CS, GPIO_PIN_SET);
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	89b9      	ldrh	r1, [r7, #12]
 8000544:	2201      	movs	r2, #1
 8000546:	4618      	mov	r0, r3
 8000548:	f003 ffe8 	bl	800451c <HAL_GPIO_WritePin>
 800054c:	46ad      	mov	sp, r5
}
 800054e:	bf00      	nop
 8000550:	3720      	adds	r7, #32
 8000552:	46bd      	mov	sp, r7
 8000554:	bdb0      	pop	{r4, r5, r7, pc}

08000556 <LIS3DH_ReadIO>:
//2. Read IO
void LIS3DH_ReadIO(accConfig acc, uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8000556:	b590      	push	{r4, r7, lr}
 8000558:	b087      	sub	sp, #28
 800055a:	af00      	add	r7, sp, #0
 800055c:	1d3c      	adds	r4, r7, #4
 800055e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000562:	70fb      	strb	r3, [r7, #3]
	uint8_t spiBuf = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	75fb      	strb	r3, [r7, #23]
	spiBuf = reg | 0x80;
 8000568:	78fb      	ldrb	r3, [r7, #3]
 800056a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800056e:	b2db      	uxtb	r3, r3
 8000570:	75fb      	strb	r3, [r7, #23]
	//Enable CS
	HAL_GPIO_WritePin(acc.GPIOx_CS, acc.GPIO_Pin_CS, GPIO_PIN_RESET);
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	89b9      	ldrh	r1, [r7, #12]
 8000576:	2200      	movs	r2, #0
 8000578:	4618      	mov	r0, r3
 800057a:	f003 ffcf 	bl	800451c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800057e:	2001      	movs	r0, #1
 8000580:	f003 fca2 	bl	8003ec8 <HAL_Delay>
	//set register value
	HAL_SPI_Transmit(acc.accSPI, &spiBuf, 1, 1000);
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f107 0117 	add.w	r1, r7, #23
 800058a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058e:	2201      	movs	r2, #1
 8000590:	f006 fde9 	bl	8007166 <HAL_SPI_Transmit>
	//HAL_Delay(1);
	//Transmit data
	HAL_SPI_Receive(acc.accSPI, &dataR[0], size, 1000);
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800059a:	b29a      	uxth	r2, r3
 800059c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80005a2:	f006 ff46 	bl	8007432 <HAL_SPI_Receive>
	//Disable CS
	HAL_Delay(1);
 80005a6:	2001      	movs	r0, #1
 80005a8:	f003 fc8e 	bl	8003ec8 <HAL_Delay>
	HAL_GPIO_WritePin(acc.GPIOx_CS, acc.GPIO_Pin_CS, GPIO_PIN_SET);
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	89b9      	ldrh	r1, [r7, #12]
 80005b0:	2201      	movs	r2, #1
 80005b2:	4618      	mov	r0, r3
 80005b4:	f003 ffb2 	bl	800451c <HAL_GPIO_WritePin>
	
//	for(uint8_t i=0; i<(size&0x3); i++)
//	{
//		dataR[i] = spiBuf[i];
//	}
}
 80005b8:	bf00      	nop
 80005ba:	371c      	adds	r7, #28
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd90      	pop	{r4, r7, pc}

080005c0 <LIS3DH_Init>:


//1. Accelerometer initialise function
char* LIS3DH_Init(accConfig acc, LIS3DH_InitTypeDef *accInitDef)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b089      	sub	sp, #36	; 0x24
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	1d3c      	adds	r4, r7, #4
 80005c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80005cc:	603b      	str	r3, [r7, #0]
	uint8_t spiData = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	74fb      	strb	r3, [r7, #19]
	uint8_t spiData_aux = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	74bb      	strb	r3, [r7, #18]
	
	//memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
	
	//Enable Axes and Output Data Rate//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		    //Enable Axes
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	789b      	ldrb	r3, [r3, #2]
 80005da:	b25b      	sxtb	r3, r3
 80005dc:	f003 0307 	and.w	r3, r3, #7
 80005e0:	b25a      	sxtb	r2, r3
 80005e2:	7cfb      	ldrb	r3, [r7, #19]
 80005e4:	b25b      	sxtb	r3, r3
 80005e6:	4313      	orrs	r3, r2
 80005e8:	b25b      	sxtb	r3, r3
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	74fb      	strb	r3, [r7, #19]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	b25b      	sxtb	r3, r3
 80005f4:	f023 030f 	bic.w	r3, r3, #15
 80005f8:	b25a      	sxtb	r2, r3
 80005fa:	7cfb      	ldrb	r3, [r7, #19]
 80005fc:	b25b      	sxtb	r3, r3
 80005fe:	4313      	orrs	r3, r2
 8000600:	b25b      	sxtb	r3, r3
 8000602:	b2db      	uxtb	r3, r3
 8000604:	74fb      	strb	r3, [r7, #19]
	//Write to accelerometer
	LIS3DH_WriteIO(acc, CTRL_REG1, &spiData, 1);
 8000606:	2301      	movs	r3, #1
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	f107 0313 	add.w	r3, r7, #19
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2320      	movs	r3, #32
 8000612:	1d3a      	adds	r2, r7, #4
 8000614:	ca07      	ldmia	r2, {r0, r1, r2}
 8000616:	f7ff ff3b 	bl	8000490 <LIS3DH_WriteIO>
	HAL_Delay(10);
 800061a:	200a      	movs	r0, #10
 800061c:	f003 fc54 	bl	8003ec8 <HAL_Delay>
	LIS3DH_ReadIO(acc, CTRL_REG1, &spiData_aux, 1);
 8000620:	2301      	movs	r3, #1
 8000622:	9301      	str	r3, [sp, #4]
 8000624:	f107 0312 	add.w	r3, r7, #18
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2320      	movs	r3, #32
 800062c:	1d3a      	adds	r2, r7, #4
 800062e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000630:	f7ff ff91 	bl	8000556 <LIS3DH_ReadIO>
	HAL_Delay(10);
 8000634:	200a      	movs	r0, #10
 8000636:	f003 fc47 	bl	8003ec8 <HAL_Delay>
	//sprintf(buffer, "%#x, %#x", spiData, spiData_aux);


	//** 2. Full-Scale selection, self test and 4-wire SPI **//
	spiData = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	74fb      	strb	r3, [r7, #19]
	spiData |= (accInitDef->fullScale & 0x30);	//Full-Scale
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	785b      	ldrb	r3, [r3, #1]
 8000642:	b25b      	sxtb	r3, r3
 8000644:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000648:	b25a      	sxtb	r2, r3
 800064a:	7cfb      	ldrb	r3, [r7, #19]
 800064c:	b25b      	sxtb	r3, r3
 800064e:	4313      	orrs	r3, r2
 8000650:	b25b      	sxtb	r3, r3
 8000652:	b2db      	uxtb	r3, r3
 8000654:	74fb      	strb	r3, [r7, #19]
	spiData |= BDU;
 8000656:	7cfb      	ldrb	r3, [r7, #19]
 8000658:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800065c:	b2db      	uxtb	r3, r3
 800065e:	74fb      	strb	r3, [r7, #19]
	if(accInitDef->mode == HIGH_RESOLUTION)
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	791b      	ldrb	r3, [r3, #4]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d104      	bne.n	8000672 <LIS3DH_Init+0xb2>
		spiData |= HR;	//High-resolution
 8000668:	7cfb      	ldrb	r3, [r7, #19]
 800066a:	f043 0308 	orr.w	r3, r3, #8
 800066e:	b2db      	uxtb	r3, r3
 8000670:	74fb      	strb	r3, [r7, #19]
	//Write to accelerometer
	LIS3DH_WriteIO(acc, CTRL_REG4, &spiData, 1);
 8000672:	2301      	movs	r3, #1
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	f107 0313 	add.w	r3, r7, #19
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	2323      	movs	r3, #35	; 0x23
 800067e:	1d3a      	adds	r2, r7, #4
 8000680:	ca07      	ldmia	r2, {r0, r1, r2}
 8000682:	f7ff ff05 	bl	8000490 <LIS3DH_WriteIO>
	HAL_Delay(10);
 8000686:	200a      	movs	r0, #10
 8000688:	f003 fc1e 	bl	8003ec8 <HAL_Delay>
	LIS3DH_ReadIO(acc, CTRL_REG4, &spiData_aux, 1);
 800068c:	2301      	movs	r3, #1
 800068e:	9301      	str	r3, [sp, #4]
 8000690:	f107 0312 	add.w	r3, r7, #18
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2323      	movs	r3, #35	; 0x23
 8000698:	1d3a      	adds	r2, r7, #4
 800069a:	ca07      	ldmia	r2, {r0, r1, r2}
 800069c:	f7ff ff5b 	bl	8000556 <LIS3DH_ReadIO>
	HAL_Delay(10);
 80006a0:	200a      	movs	r0, #10
 80006a2:	f003 fc11 	bl	8003ec8 <HAL_Delay>
	//sprintf(buffer, "%#x, %#x", spiData, spiData_aux);


	//Enable Axes and Output Data Rate//
	//Set CTRL REG4 settings value
	spiData = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	74fb      	strb	r3, [r7, #19]
	spiData |= (accInitDef->enableAxes & 0x07);		    //Enable Axes
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	789b      	ldrb	r3, [r3, #2]
 80006ae:	b25b      	sxtb	r3, r3
 80006b0:	f003 0307 	and.w	r3, r3, #7
 80006b4:	b25a      	sxtb	r2, r3
 80006b6:	7cfb      	ldrb	r3, [r7, #19]
 80006b8:	b25b      	sxtb	r3, r3
 80006ba:	4313      	orrs	r3, r2
 80006bc:	b25b      	sxtb	r3, r3
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	74fb      	strb	r3, [r7, #19]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	b25b      	sxtb	r3, r3
 80006c8:	f023 030f 	bic.w	r3, r3, #15
 80006cc:	b25a      	sxtb	r2, r3
 80006ce:	7cfb      	ldrb	r3, [r7, #19]
 80006d0:	b25b      	sxtb	r3, r3
 80006d2:	4313      	orrs	r3, r2
 80006d4:	b25b      	sxtb	r3, r3
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	74fb      	strb	r3, [r7, #19]
	//Write to accelerometer
	LIS3DH_WriteIO(acc, CTRL_REG1, &spiData, 1);
 80006da:	2301      	movs	r3, #1
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	f107 0313 	add.w	r3, r7, #19
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	2320      	movs	r3, #32
 80006e6:	1d3a      	adds	r2, r7, #4
 80006e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80006ea:	f7ff fed1 	bl	8000490 <LIS3DH_WriteIO>
	HAL_Delay(10);
 80006ee:	200a      	movs	r0, #10
 80006f0:	f003 fbea 	bl	8003ec8 <HAL_Delay>
	LIS3DH_ReadIO(acc, CTRL_REG1, &spiData_aux, 1);
 80006f4:	2301      	movs	r3, #1
 80006f6:	9301      	str	r3, [sp, #4]
 80006f8:	f107 0312 	add.w	r3, r7, #18
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	2320      	movs	r3, #32
 8000700:	1d3a      	adds	r2, r7, #4
 8000702:	ca07      	ldmia	r2, {r0, r1, r2}
 8000704:	f7ff ff27 	bl	8000556 <LIS3DH_ReadIO>
	HAL_Delay(10);
 8000708:	200a      	movs	r0, #10
 800070a:	f003 fbdd 	bl	8003ec8 <HAL_Delay>
//	spiData = 0;
//	spiData |= STREAM_MODE;
//	LIS3DH_WriteIO(FIFO_CTRL_REG, &spiData, 1);

	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	78db      	ldrb	r3, [r3, #3]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d015      	beq.n	8000742 <LIS3DH_Init+0x182>
	{
		spiData = 0x0;
 8000716:	2300      	movs	r3, #0
 8000718:	74fb      	strb	r3, [r7, #19]
		//spiData |= I1_OVERRUN;
		//Write to accelerometer
		LIS3DH_WriteIO(acc, CTRL_REG3, &spiData, 1);
 800071a:	2301      	movs	r3, #1
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	f107 0313 	add.w	r3, r7, #19
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	2322      	movs	r3, #34	; 0x22
 8000726:	1d3a      	adds	r2, r7, #4
 8000728:	ca07      	ldmia	r2, {r0, r1, r2}
 800072a:	f7ff feb1 	bl	8000490 <LIS3DH_WriteIO>
		LIS3DH_ReadIO(acc, CTRL_REG3, &spiData_aux, 1);
 800072e:	2301      	movs	r3, #1
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	f107 0312 	add.w	r3, r7, #18
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	2322      	movs	r3, #34	; 0x22
 800073a:	1d3a      	adds	r2, r7, #4
 800073c:	ca07      	ldmia	r2, {r0, r1, r2}
 800073e:	f7ff ff0a 	bl	8000556 <LIS3DH_ReadIO>
		//sprintf(buffer, "%#x, %#x", spiData, spiData_aux);
	}

	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	785b      	ldrb	r3, [r3, #1]
 8000746:	2b10      	cmp	r3, #16
 8000748:	d022      	beq.n	8000790 <LIS3DH_Init+0x1d0>
 800074a:	2b10      	cmp	r3, #16
 800074c:	dc02      	bgt.n	8000754 <LIS3DH_Init+0x194>
 800074e:	2b00      	cmp	r3, #0
 8000750:	d005      	beq.n	800075e <LIS3DH_Init+0x19e>
 8000752:	e06c      	b.n	800082e <LIS3DH_Init+0x26e>
 8000754:	2b20      	cmp	r3, #32
 8000756:	d034      	beq.n	80007c2 <LIS3DH_Init+0x202>
 8000758:	2b30      	cmp	r3, #48	; 0x30
 800075a:	d04b      	beq.n	80007f4 <LIS3DH_Init+0x234>
 800075c:	e067      	b.n	800082e <LIS3DH_Init+0x26e>
	{
		case FS_2:
			if(accInitDef->mode == HIGH_RESOLUTION)
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	791b      	ldrb	r3, [r3, #4]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d103      	bne.n	800076e <LIS3DH_Init+0x1ae>
				lis3dh_Sensitivity = SENSITIVITY_1;
 8000766:	4b3c      	ldr	r3, [pc, #240]	; (8000858 <LIS3DH_Init+0x298>)
 8000768:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800076c:	601a      	str	r2, [r3, #0]
			if(accInitDef->mode == NORMAL)
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	791b      	ldrb	r3, [r3, #4]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d103      	bne.n	800077e <LIS3DH_Init+0x1be>
				lis3dh_Sensitivity = SENSITIVITY_4;
 8000776:	4b38      	ldr	r3, [pc, #224]	; (8000858 <LIS3DH_Init+0x298>)
 8000778:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800077c:	601a      	str	r2, [r3, #0]
			if(accInitDef->mode == LOW_POWER)
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	791b      	ldrb	r3, [r3, #4]
 8000782:	2b02      	cmp	r3, #2
 8000784:	d14c      	bne.n	8000820 <LIS3DH_Init+0x260>
				lis3dh_Sensitivity = SENSITIVITY_16;
 8000786:	4b34      	ldr	r3, [pc, #208]	; (8000858 <LIS3DH_Init+0x298>)
 8000788:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800078c:	601a      	str	r2, [r3, #0]
			break;
 800078e:	e047      	b.n	8000820 <LIS3DH_Init+0x260>
		
		case FS_4:
			if(accInitDef->mode == HIGH_RESOLUTION)
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	791b      	ldrb	r3, [r3, #4]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d103      	bne.n	80007a0 <LIS3DH_Init+0x1e0>
				lis3dh_Sensitivity = SENSITIVITY_2;
 8000798:	4b2f      	ldr	r3, [pc, #188]	; (8000858 <LIS3DH_Init+0x298>)
 800079a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800079e:	601a      	str	r2, [r3, #0]
			if(accInitDef->mode == NORMAL)
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	791b      	ldrb	r3, [r3, #4]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d103      	bne.n	80007b0 <LIS3DH_Init+0x1f0>
				lis3dh_Sensitivity = SENSITIVITY_8;
 80007a8:	4b2b      	ldr	r3, [pc, #172]	; (8000858 <LIS3DH_Init+0x298>)
 80007aa:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80007ae:	601a      	str	r2, [r3, #0]
			if(accInitDef->mode == LOW_POWER)
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	791b      	ldrb	r3, [r3, #4]
 80007b4:	2b02      	cmp	r3, #2
 80007b6:	d135      	bne.n	8000824 <LIS3DH_Init+0x264>
				lis3dh_Sensitivity = SENSITIVITY_32;
 80007b8:	4b27      	ldr	r3, [pc, #156]	; (8000858 <LIS3DH_Init+0x298>)
 80007ba:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80007be:	601a      	str	r2, [r3, #0]
			break;
 80007c0:	e030      	b.n	8000824 <LIS3DH_Init+0x264>
		
		case FS_8:
			if(accInitDef->mode == HIGH_RESOLUTION)
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	791b      	ldrb	r3, [r3, #4]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d103      	bne.n	80007d2 <LIS3DH_Init+0x212>
				lis3dh_Sensitivity = SENSITIVITY_4;
 80007ca:	4b23      	ldr	r3, [pc, #140]	; (8000858 <LIS3DH_Init+0x298>)
 80007cc:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80007d0:	601a      	str	r2, [r3, #0]
			if(accInitDef->mode == NORMAL)
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	791b      	ldrb	r3, [r3, #4]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d103      	bne.n	80007e2 <LIS3DH_Init+0x222>
				lis3dh_Sensitivity = SENSITIVITY_16;
 80007da:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <LIS3DH_Init+0x298>)
 80007dc:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80007e0:	601a      	str	r2, [r3, #0]
			if(accInitDef->mode == LOW_POWER)
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	791b      	ldrb	r3, [r3, #4]
 80007e6:	2b02      	cmp	r3, #2
 80007e8:	d11e      	bne.n	8000828 <LIS3DH_Init+0x268>
				lis3dh_Sensitivity = SENSITIVITY_64;
 80007ea:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <LIS3DH_Init+0x298>)
 80007ec:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 80007f0:	601a      	str	r2, [r3, #0]
			break;
 80007f2:	e019      	b.n	8000828 <LIS3DH_Init+0x268>
		
		case FS_16:
			if(accInitDef->mode == HIGH_RESOLUTION)
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	791b      	ldrb	r3, [r3, #4]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d102      	bne.n	8000802 <LIS3DH_Init+0x242>
				lis3dh_Sensitivity = SENSITIVITY_12;
 80007fc:	4b16      	ldr	r3, [pc, #88]	; (8000858 <LIS3DH_Init+0x298>)
 80007fe:	4a17      	ldr	r2, [pc, #92]	; (800085c <LIS3DH_Init+0x29c>)
 8000800:	601a      	str	r2, [r3, #0]
			if(accInitDef->mode == NORMAL)
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	791b      	ldrb	r3, [r3, #4]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d102      	bne.n	8000810 <LIS3DH_Init+0x250>
				lis3dh_Sensitivity = SENSITIVITY_48;
 800080a:	4b13      	ldr	r3, [pc, #76]	; (8000858 <LIS3DH_Init+0x298>)
 800080c:	4a14      	ldr	r2, [pc, #80]	; (8000860 <LIS3DH_Init+0x2a0>)
 800080e:	601a      	str	r2, [r3, #0]
			if(accInitDef->mode == LOW_POWER)
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	791b      	ldrb	r3, [r3, #4]
 8000814:	2b02      	cmp	r3, #2
 8000816:	d109      	bne.n	800082c <LIS3DH_Init+0x26c>
				lis3dh_Sensitivity = SENSITIVITY_192;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <LIS3DH_Init+0x298>)
 800081a:	4a12      	ldr	r2, [pc, #72]	; (8000864 <LIS3DH_Init+0x2a4>)
 800081c:	601a      	str	r2, [r3, #0]
			break;
 800081e:	e005      	b.n	800082c <LIS3DH_Init+0x26c>
			break;
 8000820:	bf00      	nop
 8000822:	e004      	b.n	800082e <LIS3DH_Init+0x26e>
			break;
 8000824:	bf00      	nop
 8000826:	e002      	b.n	800082e <LIS3DH_Init+0x26e>
			break;
 8000828:	bf00      	nop
 800082a:	e000      	b.n	800082e <LIS3DH_Init+0x26e>
			break;
 800082c:	bf00      	nop
	}
	//_LIS3DH_CS_DISABLE;

	//Filter impulse response
	for	(int j=0; j<N; j++)	h[j]=1.0/N;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
 8000832:	e009      	b.n	8000848 <LIS3DH_Init+0x288>
 8000834:	4a0c      	ldr	r2, [pc, #48]	; (8000868 <LIS3DH_Init+0x2a8>)
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	4413      	add	r3, r2
 800083c:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	3301      	adds	r3, #1
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	2b0f      	cmp	r3, #15
 800084c:	ddf2      	ble.n	8000834 <LIS3DH_Init+0x274>

	return buffer;
 800084e:	4b07      	ldr	r3, [pc, #28]	; (800086c <LIS3DH_Init+0x2ac>)
}
 8000850:	4618      	mov	r0, r3
 8000852:	371c      	adds	r7, #28
 8000854:	46bd      	mov	sp, r7
 8000856:	bd90      	pop	{r4, r7, pc}
 8000858:	20000004 	.word	0x20000004
 800085c:	41400000 	.word	0x41400000
 8000860:	42400000 	.word	0x42400000
 8000864:	43400000 	.word	0x43400000
 8000868:	20000210 	.word	0x20000210
 800086c:	20000714 	.word	0x20000714

08000870 <LIS3DH_GetDataRaw>:
//2. Get Accelerometer raw data
accDataRaw LIS3DH_GetDataRaw(accConfig acc, LIS3DH_Operation_Mode mode)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	; 0x28
 8000874:	af02      	add	r7, sp, #8
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	4638      	mov	r0, r7
 800087a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t spiBuf[2];
	accDataRaw tempDataRaw = {0};
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	809a      	strh	r2, [r3, #4]
	uint8_t numBits = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	77fb      	strb	r3, [r7, #31]
	uint8_t UINT16_LEN = 16;
 800088c:	2310      	movs	r3, #16
 800088e:	77bb      	strb	r3, [r7, #30]
	if(mode == LOW_POWER) numBits = 8; //not implemented yet
 8000890:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000894:	2b02      	cmp	r3, #2
 8000896:	d101      	bne.n	800089c <LIS3DH_GetDataRaw+0x2c>
 8000898:	2308      	movs	r3, #8
 800089a:	77fb      	strb	r3, [r7, #31]
	if(mode == NORMAL) numBits = 10;
 800089c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d101      	bne.n	80008a8 <LIS3DH_GetDataRaw+0x38>
 80008a4:	230a      	movs	r3, #10
 80008a6:	77fb      	strb	r3, [r7, #31]
	if(mode == HIGH_RESOLUTION) numBits = 12;
 80008a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d101      	bne.n	80008b4 <LIS3DH_GetDataRaw+0x44>
 80008b0:	230c      	movs	r3, #12
 80008b2:	77fb      	strb	r3, [r7, #31]

	//Read X data
	LIS3DH_ReadIO(acc, OUT_X_L, spiBuf, 2);
 80008b4:	2302      	movs	r3, #2
 80008b6:	9301      	str	r3, [sp, #4]
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	2328      	movs	r3, #40	; 0x28
 80008c0:	463a      	mov	r2, r7
 80008c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80008c4:	f7ff fe47 	bl	8000556 <LIS3DH_ReadIO>
	/* x = (MSB<<8) + LSB */
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 80008c8:	7f7b      	ldrb	r3, [r7, #29]
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	021b      	lsls	r3, r3, #8
 80008ce:	b29a      	uxth	r2, r3
 80008d0:	7f3b      	ldrb	r3, [r7, #28]
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	4413      	add	r3, r2
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	82bb      	strh	r3, [r7, #20]
	/* Shift from left-justified to right-justified */
	tempDataRaw.x >>= (UINT16_LEN-numBits);
 80008da:	8abb      	ldrh	r3, [r7, #20]
 80008dc:	4619      	mov	r1, r3
 80008de:	7fba      	ldrb	r2, [r7, #30]
 80008e0:	7ffb      	ldrb	r3, [r7, #31]
 80008e2:	1ad3      	subs	r3, r2, r3
 80008e4:	fa41 f303 	asr.w	r3, r1, r3
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	82bb      	strh	r3, [r7, #20]
	/* Need to handle negative number */
	if((tempDataRaw.x  & ( 0x0001<<(numBits-1) )) ==  0x0001<<(numBits-1)  )
 80008ec:	8abb      	ldrh	r3, [r7, #20]
 80008ee:	4619      	mov	r1, r3
 80008f0:	7ffb      	ldrb	r3, [r7, #31]
 80008f2:	3b01      	subs	r3, #1
 80008f4:	2201      	movs	r2, #1
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	ea01 0203 	and.w	r2, r1, r3
 80008fe:	7ffb      	ldrb	r3, [r7, #31]
 8000900:	3b01      	subs	r3, #1
 8000902:	2101      	movs	r1, #1
 8000904:	fa01 f303 	lsl.w	r3, r1, r3
 8000908:	429a      	cmp	r2, r3
 800090a:	d115      	bne.n	8000938 <LIS3DH_GetDataRaw+0xc8>
	{
			tempDataRaw.x  = ~tempDataRaw.x ;            //invert bits
 800090c:	8abb      	ldrh	r3, [r7, #20]
 800090e:	43db      	mvns	r3, r3
 8000910:	b29b      	uxth	r3, r3
 8000912:	82bb      	strh	r3, [r7, #20]
			tempDataRaw.x  &= ( 0xFFFF>>(16-numBits) );  //but keep just the numBits
 8000914:	8abb      	ldrh	r3, [r7, #20]
 8000916:	b21a      	sxth	r2, r3
 8000918:	7ffb      	ldrb	r3, [r7, #31]
 800091a:	f1c3 0310 	rsb	r3, r3, #16
 800091e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000922:	fa41 f303 	asr.w	r3, r1, r3
 8000926:	b21b      	sxth	r3, r3
 8000928:	4013      	ands	r3, r2
 800092a:	b21b      	sxth	r3, r3
 800092c:	b29b      	uxth	r3, r3
 800092e:	82bb      	strh	r3, [r7, #20]
			tempDataRaw.x  = ~tempDataRaw.x ;            //invert bits
 8000930:	8abb      	ldrh	r3, [r7, #20]
 8000932:	43db      	mvns	r3, r3
 8000934:	b29b      	uxth	r3, r3
 8000936:	82bb      	strh	r3, [r7, #20]
    }

	//Read Y data
	LIS3DH_ReadIO(acc, OUT_Y_L, spiBuf, 2);
 8000938:	2302      	movs	r3, #2
 800093a:	9301      	str	r3, [sp, #4]
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	232a      	movs	r3, #42	; 0x2a
 8000944:	463a      	mov	r2, r7
 8000946:	ca07      	ldmia	r2, {r0, r1, r2}
 8000948:	f7ff fe05 	bl	8000556 <LIS3DH_ReadIO>
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 800094c:	7f7b      	ldrb	r3, [r7, #29]
 800094e:	b29b      	uxth	r3, r3
 8000950:	021b      	lsls	r3, r3, #8
 8000952:	b29a      	uxth	r2, r3
 8000954:	7f3b      	ldrb	r3, [r7, #28]
 8000956:	b29b      	uxth	r3, r3
 8000958:	4413      	add	r3, r2
 800095a:	b29b      	uxth	r3, r3
 800095c:	82fb      	strh	r3, [r7, #22]
	tempDataRaw.y >>= (UINT16_LEN-numBits); //Shift from left-justified to right-justified
 800095e:	8afb      	ldrh	r3, [r7, #22]
 8000960:	4619      	mov	r1, r3
 8000962:	7fba      	ldrb	r2, [r7, #30]
 8000964:	7ffb      	ldrb	r3, [r7, #31]
 8000966:	1ad3      	subs	r3, r2, r3
 8000968:	fa41 f303 	asr.w	r3, r1, r3
 800096c:	b29b      	uxth	r3, r3
 800096e:	82fb      	strh	r3, [r7, #22]
	if((tempDataRaw.y  & ( 0x0001<<(numBits-1) )) ==  0x0001<<(numBits-1)  ) //Need to handle negative number
 8000970:	8afb      	ldrh	r3, [r7, #22]
 8000972:	4619      	mov	r1, r3
 8000974:	7ffb      	ldrb	r3, [r7, #31]
 8000976:	3b01      	subs	r3, #1
 8000978:	2201      	movs	r2, #1
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	ea01 0203 	and.w	r2, r1, r3
 8000982:	7ffb      	ldrb	r3, [r7, #31]
 8000984:	3b01      	subs	r3, #1
 8000986:	2101      	movs	r1, #1
 8000988:	fa01 f303 	lsl.w	r3, r1, r3
 800098c:	429a      	cmp	r2, r3
 800098e:	d115      	bne.n	80009bc <LIS3DH_GetDataRaw+0x14c>
	{
		tempDataRaw.y  = ~tempDataRaw.x ;            //invert bits
 8000990:	8abb      	ldrh	r3, [r7, #20]
 8000992:	43db      	mvns	r3, r3
 8000994:	b29b      	uxth	r3, r3
 8000996:	82fb      	strh	r3, [r7, #22]
		tempDataRaw.y  &= ( 0xFFFF>>(16-numBits) );  //but keep just the 10-bits
 8000998:	8afb      	ldrh	r3, [r7, #22]
 800099a:	b21a      	sxth	r2, r3
 800099c:	7ffb      	ldrb	r3, [r7, #31]
 800099e:	f1c3 0310 	rsb	r3, r3, #16
 80009a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80009a6:	fa41 f303 	asr.w	r3, r1, r3
 80009aa:	b21b      	sxth	r3, r3
 80009ac:	4013      	ands	r3, r2
 80009ae:	b21b      	sxth	r3, r3
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	82fb      	strh	r3, [r7, #22]
		tempDataRaw.y  = ~tempDataRaw.x ;            //invert bits
 80009b4:	8abb      	ldrh	r3, [r7, #20]
 80009b6:	43db      	mvns	r3, r3
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	82fb      	strh	r3, [r7, #22]
	}
	
	//Read Z data
	LIS3DH_ReadIO(acc, OUT_Z_L, spiBuf, 2);
 80009bc:	2302      	movs	r3, #2
 80009be:	9301      	str	r3, [sp, #4]
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	232c      	movs	r3, #44	; 0x2c
 80009c8:	463a      	mov	r2, r7
 80009ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80009cc:	f7ff fdc3 	bl	8000556 <LIS3DH_ReadIO>
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 80009d0:	7f7b      	ldrb	r3, [r7, #29]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	021b      	lsls	r3, r3, #8
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	7f3b      	ldrb	r3, [r7, #28]
 80009da:	b29b      	uxth	r3, r3
 80009dc:	4413      	add	r3, r2
 80009de:	b29b      	uxth	r3, r3
 80009e0:	833b      	strh	r3, [r7, #24]
	tempDataRaw.z >>= (UINT16_LEN-numBits); //Shift from left-justified to right-justified
 80009e2:	8b3b      	ldrh	r3, [r7, #24]
 80009e4:	4619      	mov	r1, r3
 80009e6:	7fba      	ldrb	r2, [r7, #30]
 80009e8:	7ffb      	ldrb	r3, [r7, #31]
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	fa41 f303 	asr.w	r3, r1, r3
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	833b      	strh	r3, [r7, #24]
	if((tempDataRaw.z  & ( 0x0001<<(numBits-1) )) ==  0x0001<<(numBits-1)  ) //Need to handle negative number
 80009f4:	8b3b      	ldrh	r3, [r7, #24]
 80009f6:	4619      	mov	r1, r3
 80009f8:	7ffb      	ldrb	r3, [r7, #31]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	2201      	movs	r2, #1
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	ea01 0203 	and.w	r2, r1, r3
 8000a06:	7ffb      	ldrb	r3, [r7, #31]
 8000a08:	3b01      	subs	r3, #1
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d115      	bne.n	8000a40 <LIS3DH_GetDataRaw+0x1d0>
	{
		tempDataRaw.z  = ~tempDataRaw.x ;            //invert bits
 8000a14:	8abb      	ldrh	r3, [r7, #20]
 8000a16:	43db      	mvns	r3, r3
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	833b      	strh	r3, [r7, #24]
		tempDataRaw.z  &= ( 0xFFFF>>(16-numBits) );  //but keep just the 10-bits
 8000a1c:	8b3b      	ldrh	r3, [r7, #24]
 8000a1e:	b21a      	sxth	r2, r3
 8000a20:	7ffb      	ldrb	r3, [r7, #31]
 8000a22:	f1c3 0310 	rsb	r3, r3, #16
 8000a26:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a2a:	fa41 f303 	asr.w	r3, r1, r3
 8000a2e:	b21b      	sxth	r3, r3
 8000a30:	4013      	ands	r3, r2
 8000a32:	b21b      	sxth	r3, r3
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	833b      	strh	r3, [r7, #24]
		tempDataRaw.z  = ~tempDataRaw.x ;            //invert bits
 8000a38:	8abb      	ldrh	r3, [r7, #20]
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	833b      	strh	r3, [r7, #24]
	}
	
	return tempDataRaw;
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	461a      	mov	r2, r3
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	6818      	ldr	r0, [r3, #0]
 8000a4a:	6010      	str	r0, [r2, #0]
 8000a4c:	889b      	ldrh	r3, [r3, #4]
 8000a4e:	8093      	strh	r3, [r2, #4]
	
}
 8000a50:	68f8      	ldr	r0, [r7, #12]
 8000a52:	3720      	adds	r7, #32
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <begin>:
#include <stdlib.h>     /* abs */

float temperature;
//uint16_t IR, RED;

void begin(void){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0

	  uint8_t temp = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	717b      	strb	r3, [r7, #5]
	  uint8_t mode = 0x03; // [0,7]
 8000a62:	2303      	movs	r3, #3
 8000a64:	73fb      	strb	r3, [r7, #15]
	  bool temperature = false;
 8000a66:	2300      	movs	r3, #0
 8000a68:	73bb      	strb	r3, [r7, #14]
	  bool spo2_hs = true;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	737b      	strb	r3, [r7, #13]
	  uint8_t spo2_sr = 1; // [0,7]
 8000a6e:	2301      	movs	r3, #1
 8000a70:	733b      	strb	r3, [r7, #12]
	  uint8_t pulse_width = 0; // [0,3]
 8000a72:	2300      	movs	r3, #0
 8000a74:	72fb      	strb	r3, [r7, #11]
	  uint8_t red_level = 0x0A; // 0b00001111; // [0,15]
 8000a76:	230a      	movs	r3, #10
 8000a78:	72bb      	strb	r3, [r7, #10]
	  uint8_t ir_level = 0x0A; // [0,15]
 8000a7a:	230a      	movs	r3, #10
 8000a7c:	727b      	strb	r3, [r7, #9]
	  uint8_t hr_ready_int = false;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	723b      	strb	r3, [r7, #8]
	  uint8_t spo2_ready_int = false;
 8000a82:	2300      	movs	r3, #0
 8000a84:	71fb      	strb	r3, [r7, #7]
	  uint8_t temp_ready_int = false;
 8000a86:	2300      	movs	r3, #0
 8000a88:	71bb      	strb	r3, [r7, #6]


	  //Reset
	  read_byte( MAX30100_MODE_CONFIG, &temp );
 8000a8a:	1d7b      	adds	r3, r7, #5
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	2006      	movs	r0, #6
 8000a90:	f000 f976 	bl	8000d80 <read_byte>

	  temp |= (1<<6);
 8000a94:	797b      	ldrb	r3, [r7, #5]
 8000a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_MODE_CONFIG, temp);
 8000a9e:	797b      	ldrb	r3, [r7, #5]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	2006      	movs	r0, #6
 8000aa4:	f000 f950 	bl	8000d48 <write_byte>

	  //Wait for the end of reset state/process
	  do
	  {
		read_byte(MAX30100_MODE_CONFIG, &temp);
 8000aa8:	1d7b      	adds	r3, r7, #5
 8000aaa:	4619      	mov	r1, r3
 8000aac:	2006      	movs	r0, #6
 8000aae:	f000 f967 	bl	8000d80 <read_byte>
	    temp &= (1<<6);
 8000ab2:	797b      	ldrb	r3, [r7, #5]
 8000ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	717b      	strb	r3, [r7, #5]
	  }
	  while (temp != 0);
 8000abc:	797b      	ldrb	r3, [r7, #5]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d1f2      	bne.n	8000aa8 <begin+0x50>

	  //Mode Configuration
	  read_byte( MAX30100_MODE_CONFIG, &temp );
 8000ac2:	1d7b      	adds	r3, r7, #5
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	2006      	movs	r0, #6
 8000ac8:	f000 f95a 	bl	8000d80 <read_byte>

	  temp |= mode;
 8000acc:	797a      	ldrb	r2, [r7, #5]
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_MODE_CONFIG, temp);
 8000ad6:	797b      	ldrb	r3, [r7, #5]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	2006      	movs	r0, #6
 8000adc:	f000 f934 	bl	8000d48 <write_byte>
	  temp = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_MODE_CONFIG, &temp ); //check
 8000ae4:	1d7b      	adds	r3, r7, #5
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	2006      	movs	r0, #6
 8000aea:	f000 f949 	bl	8000d80 <read_byte>

	  //Temperature sensor activation
	  read_byte( MAX30100_MODE_CONFIG, &temp );
 8000aee:	1d7b      	adds	r3, r7, #5
 8000af0:	4619      	mov	r1, r3
 8000af2:	2006      	movs	r0, #6
 8000af4:	f000 f944 	bl	8000d80 <read_byte>

	  if ( temperature == true )
 8000af8:	7bbb      	ldrb	r3, [r7, #14]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d005      	beq.n	8000b0a <begin+0xb2>
	    temp |= (1<<3);
 8000afe:	797b      	ldrb	r3, [r7, #5]
 8000b00:	f043 0308 	orr.w	r3, r3, #8
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	717b      	strb	r3, [r7, #5]
 8000b08:	e004      	b.n	8000b14 <begin+0xbc>
	  else
	    temp &= ~(1<<3);
 8000b0a:	797b      	ldrb	r3, [r7, #5]
 8000b0c:	f023 0308 	bic.w	r3, r3, #8
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	717b      	strb	r3, [r7, #5]

	  write_byte(MAX30100_MODE_CONFIG, temp);
 8000b14:	797b      	ldrb	r3, [r7, #5]
 8000b16:	4619      	mov	r1, r3
 8000b18:	2006      	movs	r0, #6
 8000b1a:	f000 f915 	bl	8000d48 <write_byte>
	  temp = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_MODE_CONFIG, &temp ); //check
 8000b22:	1d7b      	adds	r3, r7, #5
 8000b24:	4619      	mov	r1, r3
 8000b26:	2006      	movs	r0, #6
 8000b28:	f000 f92a 	bl	8000d80 <read_byte>

	  //SPO2 high resolution activation
	  read_byte( MAX30100_SPO2_CONFIG, &temp );
 8000b2c:	1d7b      	adds	r3, r7, #5
 8000b2e:	4619      	mov	r1, r3
 8000b30:	2007      	movs	r0, #7
 8000b32:	f000 f925 	bl	8000d80 <read_byte>

	  if (spo2_hs == true)
 8000b36:	7b7b      	ldrb	r3, [r7, #13]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d005      	beq.n	8000b48 <begin+0xf0>
	    temp |= (1<<6);
 8000b3c:	797b      	ldrb	r3, [r7, #5]
 8000b3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	717b      	strb	r3, [r7, #5]
 8000b46:	e004      	b.n	8000b52 <begin+0xfa>

	  else
	    temp &= ~(1<<6);
 8000b48:	797b      	ldrb	r3, [r7, #5]
 8000b4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_SPO2_CONFIG, temp);
 8000b52:	797b      	ldrb	r3, [r7, #5]
 8000b54:	4619      	mov	r1, r3
 8000b56:	2007      	movs	r0, #7
 8000b58:	f000 f8f6 	bl	8000d48 <write_byte>

	  //SPO2 sample rate configuration
	  read_byte( MAX30100_SPO2_CONFIG, &temp );
 8000b5c:	1d7b      	adds	r3, r7, #5
 8000b5e:	4619      	mov	r1, r3
 8000b60:	2007      	movs	r0, #7
 8000b62:	f000 f90d 	bl	8000d80 <read_byte>
	  temp |= (spo2_sr << 2);
 8000b66:	7b3b      	ldrb	r3, [r7, #12]
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	b25a      	sxtb	r2, r3
 8000b6c:	797b      	ldrb	r3, [r7, #5]
 8000b6e:	b25b      	sxtb	r3, r3
 8000b70:	4313      	orrs	r3, r2
 8000b72:	b25b      	sxtb	r3, r3
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	717b      	strb	r3, [r7, #5]

	  write_byte( MAX30100_SPO2_CONFIG, temp );
 8000b78:	797b      	ldrb	r3, [r7, #5]
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	2007      	movs	r0, #7
 8000b7e:	f000 f8e3 	bl	8000d48 <write_byte>
	  temp = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_SPO2_CONFIG, &temp ); //check
 8000b86:	1d7b      	adds	r3, r7, #5
 8000b88:	4619      	mov	r1, r3
 8000b8a:	2007      	movs	r0, #7
 8000b8c:	f000 f8f8 	bl	8000d80 <read_byte>

	  //LED pulse width configuration
	  read_byte( MAX30100_SPO2_CONFIG, &temp );
 8000b90:	1d7b      	adds	r3, r7, #5
 8000b92:	4619      	mov	r1, r3
 8000b94:	2007      	movs	r0, #7
 8000b96:	f000 f8f3 	bl	8000d80 <read_byte>

	  temp |= pulse_width;
 8000b9a:	797a      	ldrb	r2, [r7, #5]
 8000b9c:	7afb      	ldrb	r3, [r7, #11]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_SPO2_CONFIG, temp);
 8000ba4:	797b      	ldrb	r3, [r7, #5]
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	2007      	movs	r0, #7
 8000baa:	f000 f8cd 	bl	8000d48 <write_byte>
	  temp = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_SPO2_CONFIG, &temp ); //check
 8000bb2:	1d7b      	adds	r3, r7, #5
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	2007      	movs	r0, #7
 8000bb8:	f000 f8e2 	bl	8000d80 <read_byte>

	  //LED red current level
	  read_byte( MAX30100_LED_CONFIG, &temp );
 8000bbc:	1d7b      	adds	r3, r7, #5
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	2009      	movs	r0, #9
 8000bc2:	f000 f8dd 	bl	8000d80 <read_byte>

	  temp |= (red_level << 4);
 8000bc6:	7abb      	ldrb	r3, [r7, #10]
 8000bc8:	011b      	lsls	r3, r3, #4
 8000bca:	b25a      	sxtb	r2, r3
 8000bcc:	797b      	ldrb	r3, [r7, #5]
 8000bce:	b25b      	sxtb	r3, r3
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	b25b      	sxtb	r3, r3
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_LED_CONFIG, temp);
 8000bd8:	797b      	ldrb	r3, [r7, #5]
 8000bda:	4619      	mov	r1, r3
 8000bdc:	2009      	movs	r0, #9
 8000bde:	f000 f8b3 	bl	8000d48 <write_byte>
	  temp = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_LED_CONFIG, &temp ); //check
 8000be6:	1d7b      	adds	r3, r7, #5
 8000be8:	4619      	mov	r1, r3
 8000bea:	2009      	movs	r0, #9
 8000bec:	f000 f8c8 	bl	8000d80 <read_byte>

	  //LED ir current level
	  read_byte( MAX30100_LED_CONFIG, &temp );
 8000bf0:	1d7b      	adds	r3, r7, #5
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	2009      	movs	r0, #9
 8000bf6:	f000 f8c3 	bl	8000d80 <read_byte>

	  temp |= ir_level;
 8000bfa:	797a      	ldrb	r2, [r7, #5]
 8000bfc:	7a7b      	ldrb	r3, [r7, #9]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_LED_CONFIG, temp);
 8000c04:	797b      	ldrb	r3, [r7, #5]
 8000c06:	4619      	mov	r1, r3
 8000c08:	2009      	movs	r0, #9
 8000c0a:	f000 f89d 	bl	8000d48 <write_byte>
	  temp = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_LED_CONFIG, &temp ); //check
 8000c12:	1d7b      	adds	r3, r7, #5
 8000c14:	4619      	mov	r1, r3
 8000c16:	2009      	movs	r0, #9
 8000c18:	f000 f8b2 	bl	8000d80 <read_byte>

	  //Heart rate data ready interruption
	  read_byte( MAX30100_INT_ENABLE, &temp );
 8000c1c:	1d7b      	adds	r3, r7, #5
 8000c1e:	4619      	mov	r1, r3
 8000c20:	2001      	movs	r0, #1
 8000c22:	f000 f8ad 	bl	8000d80 <read_byte>
	  if (hr_ready_int == true)
 8000c26:	7a3b      	ldrb	r3, [r7, #8]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d105      	bne.n	8000c38 <begin+0x1e0>
	    temp |= (1<<5);
 8000c2c:	797b      	ldrb	r3, [r7, #5]
 8000c2e:	f043 0320 	orr.w	r3, r3, #32
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	717b      	strb	r3, [r7, #5]
 8000c36:	e004      	b.n	8000c42 <begin+0x1ea>
	  else
	    temp &= ~(1<<5);
 8000c38:	797b      	ldrb	r3, [r7, #5]
 8000c3a:	f023 0320 	bic.w	r3, r3, #32
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	717b      	strb	r3, [r7, #5]

	  write_byte(MAX30100_INT_ENABLE, temp);
 8000c42:	797b      	ldrb	r3, [r7, #5]
 8000c44:	4619      	mov	r1, r3
 8000c46:	2001      	movs	r0, #1
 8000c48:	f000 f87e 	bl	8000d48 <write_byte>
	  temp = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_INT_ENABLE, &temp ); //check
 8000c50:	1d7b      	adds	r3, r7, #5
 8000c52:	4619      	mov	r1, r3
 8000c54:	2001      	movs	r0, #1
 8000c56:	f000 f893 	bl	8000d80 <read_byte>

	  //SPO2 data ready interruption
	  read_byte( MAX30100_INT_ENABLE, &temp );
 8000c5a:	1d7b      	adds	r3, r7, #5
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f000 f88e 	bl	8000d80 <read_byte>
	  if (spo2_ready_int == true)
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d105      	bne.n	8000c76 <begin+0x21e>
	    temp |= (1<<4);
 8000c6a:	797b      	ldrb	r3, [r7, #5]
 8000c6c:	f043 0310 	orr.w	r3, r3, #16
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	717b      	strb	r3, [r7, #5]
 8000c74:	e004      	b.n	8000c80 <begin+0x228>
	  else
	    temp &= ~(1<<4);
 8000c76:	797b      	ldrb	r3, [r7, #5]
 8000c78:	f023 0310 	bic.w	r3, r3, #16
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	717b      	strb	r3, [r7, #5]

	  write_byte(MAX30100_INT_ENABLE, temp);
 8000c80:	797b      	ldrb	r3, [r7, #5]
 8000c82:	4619      	mov	r1, r3
 8000c84:	2001      	movs	r0, #1
 8000c86:	f000 f85f 	bl	8000d48 <write_byte>
	  temp = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_INT_ENABLE, &temp ); //check
 8000c8e:	1d7b      	adds	r3, r7, #5
 8000c90:	4619      	mov	r1, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	f000 f874 	bl	8000d80 <read_byte>

	  //Temperature data ready interruption
	  read_byte(MAX30100_INT_ENABLE, &temp );
 8000c98:	1d7b      	adds	r3, r7, #5
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f000 f86f 	bl	8000d80 <read_byte>
	  if (temp_ready_int == true)
 8000ca2:	79bb      	ldrb	r3, [r7, #6]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d105      	bne.n	8000cb4 <begin+0x25c>
	    temp |= (1<<6);
 8000ca8:	797b      	ldrb	r3, [r7, #5]
 8000caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	717b      	strb	r3, [r7, #5]
 8000cb2:	e004      	b.n	8000cbe <begin+0x266>
	  else
	    temp &= ~(1<<6);
 8000cb4:	797b      	ldrb	r3, [r7, #5]
 8000cb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	717b      	strb	r3, [r7, #5]

	  write_byte(MAX30100_INT_ENABLE, temp);
 8000cbe:	797b      	ldrb	r3, [r7, #5]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f000 f840 	bl	8000d48 <write_byte>
	  temp = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_INT_ENABLE, &temp ); //check
 8000ccc:	1d7b      	adds	r3, r7, #5
 8000cce:	4619      	mov	r1, r3
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	f000 f855 	bl	8000d80 <read_byte>
}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <readFIFO>:


void readFIFO(uint16_t* RED, uint16_t* IR){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af02      	add	r7, sp, #8
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
   /* Burst read four bytes from the FIFO
    * to obtain 16-bit ADC values for IR
    * and RED reflectance.
    */
	uint8_t data[4];
   data[0] = MAX30100_FIFO_DATA;
 8000cea:	2305      	movs	r3, #5
 8000cec:	733b      	strb	r3, [r7, #12]
   HAL_I2C_Master_Transmit(&hi2c3, MAX30100_ADDR, data, 1, 100);
 8000cee:	f107 020c 	add.w	r2, r7, #12
 8000cf2:	2364      	movs	r3, #100	; 0x64
 8000cf4:	9300      	str	r3, [sp, #0]
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	21ae      	movs	r1, #174	; 0xae
 8000cfa:	4812      	ldr	r0, [pc, #72]	; (8000d44 <readFIFO+0x64>)
 8000cfc:	f003 fcf4 	bl	80046e8 <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Receive(&hi2c3, MAX30100_ADDR, data, 4, 1000); // Read four times from the FIFO
 8000d00:	f107 020c 	add.w	r2, r7, #12
 8000d04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d08:	9300      	str	r3, [sp, #0]
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	21ae      	movs	r1, #174	; 0xae
 8000d0e:	480d      	ldr	r0, [pc, #52]	; (8000d44 <readFIFO+0x64>)
 8000d10:	f003 fdde 	bl	80048d0 <HAL_I2C_Master_Receive>

   // Combine bytes to get the actual number
   IR[0] = (data[0]<<8) | data[1];
 8000d14:	7b3b      	ldrb	r3, [r7, #12]
 8000d16:	021b      	lsls	r3, r3, #8
 8000d18:	b21a      	sxth	r2, r3
 8000d1a:	7b7b      	ldrb	r3, [r7, #13]
 8000d1c:	b21b      	sxth	r3, r3
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	b21b      	sxth	r3, r3
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	801a      	strh	r2, [r3, #0]
   RED[0] = (data[2]<<8) | data[3];
 8000d28:	7bbb      	ldrb	r3, [r7, #14]
 8000d2a:	021b      	lsls	r3, r3, #8
 8000d2c:	b21a      	sxth	r2, r3
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	b21b      	sxth	r3, r3
 8000d32:	4313      	orrs	r3, r2
 8000d34:	b21b      	sxth	r3, r3
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	801a      	strh	r2, [r3, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000730 	.word	0x20000730

08000d48 <write_byte>:
   HAL_I2C_Master_Receive(&hi2c3, MAX30100_ADDR, &tempFrac, 1, 100);

   temperature  = (float) tempFrac * 0.0625 + (int8_t) tempInt;
}

void write_byte(uint8_t reg, uint8_t data){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af02      	add	r7, sp, #8
 8000d4e:	4603      	mov	r3, r0
 8000d50:	460a      	mov	r2, r1
 8000d52:	71fb      	strb	r3, [r7, #7]
 8000d54:	4613      	mov	r3, r2
 8000d56:	71bb      	strb	r3, [r7, #6]
   /*  Write to the register of a device. Note the char
    *  type must be used due to the MBED i2c functions
    */
   uint8_t transfer[2] = {reg, data};
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	733b      	strb	r3, [r7, #12]
 8000d5c:	79bb      	ldrb	r3, [r7, #6]
 8000d5e:	737b      	strb	r3, [r7, #13]
   HAL_I2C_Master_Transmit(&hi2c3, MAX30100_ADDR, transfer, 2, 100);
 8000d60:	f107 020c 	add.w	r2, r7, #12
 8000d64:	2364      	movs	r3, #100	; 0x64
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	2302      	movs	r3, #2
 8000d6a:	21ae      	movs	r1, #174	; 0xae
 8000d6c:	4803      	ldr	r0, [pc, #12]	; (8000d7c <write_byte+0x34>)
 8000d6e:	f003 fcbb 	bl	80046e8 <HAL_I2C_Master_Transmit>
}
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000730 	.word	0x20000730

08000d80 <read_byte>:

void read_byte(uint8_t reg, uint8_t* data){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af02      	add	r7, sp, #8
 8000d86:	4603      	mov	r3, r0
 8000d88:	6039      	str	r1, [r7, #0]
 8000d8a:	71fb      	strb	r3, [r7, #7]

	   HAL_I2C_Master_Transmit(&hi2c3, MAX30100_ADDR, &reg, 1, 100);
 8000d8c:	1dfa      	adds	r2, r7, #7
 8000d8e:	2364      	movs	r3, #100	; 0x64
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	2301      	movs	r3, #1
 8000d94:	21ae      	movs	r1, #174	; 0xae
 8000d96:	4807      	ldr	r0, [pc, #28]	; (8000db4 <read_byte+0x34>)
 8000d98:	f003 fca6 	bl	80046e8 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c3, MAX30100_ADDR, data, 1, 100);
 8000d9c:	2364      	movs	r3, #100	; 0x64
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	2301      	movs	r3, #1
 8000da2:	683a      	ldr	r2, [r7, #0]
 8000da4:	21ae      	movs	r1, #174	; 0xae
 8000da6:	4803      	ldr	r0, [pc, #12]	; (8000db4 <read_byte+0x34>)
 8000da8:	f003 fd92 	bl	80048d0 <HAL_I2C_Master_Receive>
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000730 	.word	0x20000730

08000db8 <writeByte>:
float q[4] = {1.0f, 0.0f, 0.0f, 0.0f};           // vector to hold quaternion
float eInt[3] = {0.0f, 0.0f, 0.0f};              // vector to hold integral error for Mahony method


void writeByte(accConfig acc, uint8_t reg, uint8_t data)
{
 8000db8:	b590      	push	{r4, r7, lr}
 8000dba:	b087      	sub	sp, #28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	1d3c      	adds	r4, r7, #4
 8000dc0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000dc4:	70fb      	strb	r3, [r7, #3]
	uint8_t spiReg = reg;
 8000dc6:	78fb      	ldrb	r3, [r7, #3]
 8000dc8:	75fb      	strb	r3, [r7, #23]
	//Enable CS
	HAL_GPIO_WritePin(acc.GPIOx_CS, acc.GPIO_Pin_CS, GPIO_PIN_RESET);
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	89b9      	ldrh	r1, [r7, #12]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f003 fba3 	bl	800451c <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(acc.accSPI, &spiReg, 1, 100);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f107 0117 	add.w	r1, r7, #23
 8000ddc:	2364      	movs	r3, #100	; 0x64
 8000dde:	2201      	movs	r2, #1
 8000de0:	f006 f9c1 	bl	8007166 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(acc.accSPI, &data, 1, 100);
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	2364      	movs	r3, #100	; 0x64
 8000de8:	2201      	movs	r2, #1
 8000dea:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000dee:	f006 f9ba 	bl	8007166 <HAL_SPI_Transmit>
	//Disable CS
	HAL_GPIO_WritePin(acc.GPIOx_CS, acc.GPIO_Pin_CS, GPIO_PIN_SET);
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	89b9      	ldrh	r1, [r7, #12]
 8000df6:	2201      	movs	r2, #1
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f003 fb8f 	bl	800451c <HAL_GPIO_WritePin>

}
 8000dfe:	bf00      	nop
 8000e00:	371c      	adds	r7, #28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd90      	pop	{r4, r7, pc}

08000e06 <readByte>:

void readByte(accConfig acc, uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8000e06:	b590      	push	{r4, r7, lr}
 8000e08:	b087      	sub	sp, #28
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	1d3c      	adds	r4, r7, #4
 8000e0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000e12:	70fb      	strb	r3, [r7, #3]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8000e14:	78fb      	ldrb	r3, [r7, #3]
 8000e16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	753b      	strb	r3, [r7, #20]
	//Enable CS
	HAL_GPIO_WritePin(acc.GPIOx_CS, acc.GPIO_Pin_CS, GPIO_PIN_RESET);
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	89b9      	ldrh	r1, [r7, #12]
 8000e22:	2200      	movs	r2, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f003 fb79 	bl	800451c <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(acc.accSPI, spiBuf, 1, 100);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f107 0114 	add.w	r1, r7, #20
 8000e30:	2364      	movs	r3, #100	; 0x64
 8000e32:	2201      	movs	r2, #1
 8000e34:	f006 f997 	bl	8007166 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(acc.accSPI, dataR, size, 10000);
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	f242 7310 	movw	r3, #10000	; 0x2710
 8000e44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000e46:	f006 faf4 	bl	8007432 <HAL_SPI_Receive>
	//Disable CS
	HAL_GPIO_WritePin(acc.GPIOx_CS, acc.GPIO_Pin_CS, GPIO_PIN_SET);
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	89b9      	ldrh	r1, [r7, #12]
 8000e4e:	2201      	movs	r2, #1
 8000e50:	4618      	mov	r0, r3
 8000e52:	f003 fb63 	bl	800451c <HAL_GPIO_WritePin>


}
 8000e56:	bf00      	nop
 8000e58:	371c      	adds	r7, #28
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd90      	pop	{r4, r7, pc}

08000e5e <readAccelData>:
  }
}


accDataRaw readAccelData(accConfig acc)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b08a      	sub	sp, #40	; 0x28
 8000e62:	af02      	add	r7, sp, #8
 8000e64:	60f8      	str	r0, [r7, #12]
 8000e66:	4638      	mov	r0, r7
 8000e68:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint8_t rawData[6];  // x/y/z accel register data stored here
  accDataRaw data;

  readByte(acc, ACCEL_XOUT_H, &rawData[0], 6);  // Read the six raw data registers into data array
 8000e6c:	2306      	movs	r3, #6
 8000e6e:	9301      	str	r3, [sp, #4]
 8000e70:	f107 0318 	add.w	r3, r7, #24
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	233b      	movs	r3, #59	; 0x3b
 8000e78:	463a      	mov	r2, r7
 8000e7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e7c:	f7ff ffc3 	bl	8000e06 <readByte>
  data.x = (uint16_t)(((uint16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8000e80:	7e3b      	ldrb	r3, [r7, #24]
 8000e82:	021b      	lsls	r3, r3, #8
 8000e84:	b21a      	sxth	r2, r3
 8000e86:	7e7b      	ldrb	r3, [r7, #25]
 8000e88:	b21b      	sxth	r3, r3
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	b21b      	sxth	r3, r3
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	823b      	strh	r3, [r7, #16]
  data.y = (uint16_t)(((uint16_t)rawData[2] << 8) | rawData[3]) ;
 8000e92:	7ebb      	ldrb	r3, [r7, #26]
 8000e94:	021b      	lsls	r3, r3, #8
 8000e96:	b21a      	sxth	r2, r3
 8000e98:	7efb      	ldrb	r3, [r7, #27]
 8000e9a:	b21b      	sxth	r3, r3
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	b21b      	sxth	r3, r3
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	827b      	strh	r3, [r7, #18]
  data.z = (uint16_t)(((uint16_t)rawData[4] << 8) | rawData[5]) ;
 8000ea4:	7f3b      	ldrb	r3, [r7, #28]
 8000ea6:	021b      	lsls	r3, r3, #8
 8000ea8:	b21a      	sxth	r2, r3
 8000eaa:	7f7b      	ldrb	r3, [r7, #29]
 8000eac:	b21b      	sxth	r3, r3
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	b21b      	sxth	r3, r3
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	82bb      	strh	r3, [r7, #20]

  return data;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	f107 0310 	add.w	r3, r7, #16
 8000ebe:	6818      	ldr	r0, [r3, #0]
 8000ec0:	6010      	str	r0, [r2, #0]
 8000ec2:	889b      	ldrh	r3, [r3, #4]
 8000ec4:	8093      	strh	r3, [r2, #4]
}
 8000ec6:	68f8      	ldr	r0, [r7, #12]
 8000ec8:	3720      	adds	r7, #32
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <initMPU9250>:
	writeByte(acc, I2C_SLV0_CTRL, 0x81);
}


void initMPU9250(accConfig acc)
{  
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af02      	add	r7, sp, #8
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t c;

	// Initialize MPU9250 device
  // wake up device
  writeByte(acc, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 8000edc:	2300      	movs	r3, #0
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	236b      	movs	r3, #107	; 0x6b
 8000ee2:	1d3a      	adds	r2, r7, #4
 8000ee4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ee6:	f7ff ff67 	bl	8000db8 <writeByte>
  readByte(acc, PWR_MGMT_1, &c, 1);
 8000eea:	2301      	movs	r3, #1
 8000eec:	9301      	str	r3, [sp, #4]
 8000eee:	f107 0317 	add.w	r3, r7, #23
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	236b      	movs	r3, #107	; 0x6b
 8000ef6:	1d3a      	adds	r2, r7, #4
 8000ef8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000efa:	f7ff ff84 	bl	8000e06 <readByte>
  HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 8000efe:	2064      	movs	r0, #100	; 0x64
 8000f00:	f002 ffe2 	bl	8003ec8 <HAL_Delay>

  // get stable time source
  writeByte(acc, PWR_MGMT_1, 0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8000f04:	2301      	movs	r3, #1
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	236b      	movs	r3, #107	; 0x6b
 8000f0a:	1d3a      	adds	r2, r7, #4
 8000f0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f0e:	f7ff ff53 	bl	8000db8 <writeByte>
  readByte(acc, PWR_MGMT_1, &c, 1);
 8000f12:	2301      	movs	r3, #1
 8000f14:	9301      	str	r3, [sp, #4]
 8000f16:	f107 0317 	add.w	r3, r7, #23
 8000f1a:	9300      	str	r3, [sp, #0]
 8000f1c:	236b      	movs	r3, #107	; 0x6b
 8000f1e:	1d3a      	adds	r2, r7, #4
 8000f20:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f22:	f7ff ff70 	bl	8000e06 <readByte>
  // Configure Gyro and Accelerometer
  // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively; 
  // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
  // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
  writeByte(acc, CONFIG, 0x03);
 8000f26:	2303      	movs	r3, #3
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	231a      	movs	r3, #26
 8000f2c:	1d3a      	adds	r2, r7, #4
 8000f2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f30:	f7ff ff42 	bl	8000db8 <writeByte>
  readByte(acc, CONFIG, &c, 1);
 8000f34:	2301      	movs	r3, #1
 8000f36:	9301      	str	r3, [sp, #4]
 8000f38:	f107 0317 	add.w	r3, r7, #23
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	231a      	movs	r3, #26
 8000f40:	1d3a      	adds	r2, r7, #4
 8000f42:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f44:	f7ff ff5f 	bl	8000e06 <readByte>
  // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  writeByte(acc, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 8000f48:	2304      	movs	r3, #4
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2319      	movs	r3, #25
 8000f4e:	1d3a      	adds	r2, r7, #4
 8000f50:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f52:	f7ff ff31 	bl	8000db8 <writeByte>
  readByte(acc, SMPLRT_DIV, &c, 1);
 8000f56:	2301      	movs	r3, #1
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	f107 0317 	add.w	r3, r7, #23
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	2319      	movs	r3, #25
 8000f62:	1d3a      	adds	r2, r7, #4
 8000f64:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f66:	f7ff ff4e 	bl	8000e06 <readByte>
  //writeByte(GYRO_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
  //writeByte(GYRO_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
  //writeByte(GYRO_CONFIG, c | Gscale << 3); // Set full scale range for the gyro

  // Set accelerometer configuration
  readByte(acc, ACCEL_CONFIG, &c, 1);
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	f107 0317 	add.w	r3, r7, #23
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	231c      	movs	r3, #28
 8000f76:	1d3a      	adds	r2, r7, #4
 8000f78:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f7a:	f7ff ff44 	bl	8000e06 <readByte>
  writeByte(acc, ACCEL_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 8000f7e:	7dfb      	ldrb	r3, [r7, #23]
 8000f80:	f003 031f 	and.w	r3, r3, #31
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	231c      	movs	r3, #28
 8000f8a:	1d3a      	adds	r2, r7, #4
 8000f8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f8e:	f7ff ff13 	bl	8000db8 <writeByte>
  writeByte(acc, ACCEL_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 8000f92:	7dfb      	ldrb	r3, [r7, #23]
 8000f94:	f023 0318 	bic.w	r3, r3, #24
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	231c      	movs	r3, #28
 8000f9e:	1d3a      	adds	r2, r7, #4
 8000fa0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fa2:	f7ff ff09 	bl	8000db8 <writeByte>
  writeByte(acc, ACCEL_CONFIG, c | Ascale << 3); // Set full scale range for the accelerometer
 8000fa6:	4b42      	ldr	r3, [pc, #264]	; (80010b0 <initMPU9250+0x1e0>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	b25a      	sxtb	r2, r3
 8000fae:	7dfb      	ldrb	r3, [r7, #23]
 8000fb0:	b25b      	sxtb	r3, r3
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	b25b      	sxtb	r3, r3
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	231c      	movs	r3, #28
 8000fbc:	1d3a      	adds	r2, r7, #4
 8000fbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fc0:	f7ff fefa 	bl	8000db8 <writeByte>
  readByte(acc, ACCEL_CONFIG, &c, 1);
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	9301      	str	r3, [sp, #4]
 8000fc8:	f107 0317 	add.w	r3, r7, #23
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	231c      	movs	r3, #28
 8000fd0:	1d3a      	adds	r2, r7, #4
 8000fd2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fd4:	f7ff ff17 	bl	8000e06 <readByte>
  // Set accelerometer sample rate configuration
  // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
  // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  readByte(acc, ACCEL_CONFIG2, &c, 1);
 8000fd8:	2301      	movs	r3, #1
 8000fda:	9301      	str	r3, [sp, #4]
 8000fdc:	f107 0317 	add.w	r3, r7, #23
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	231d      	movs	r3, #29
 8000fe4:	1d3a      	adds	r2, r7, #4
 8000fe6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fe8:	f7ff ff0d 	bl	8000e06 <readByte>
  writeByte(acc, ACCEL_CONFIG2, c & ~0x0F); // Clear accel_fchoice_b (bit 3) and A_DLPFG (b	its [2:0])
 8000fec:	7dfb      	ldrb	r3, [r7, #23]
 8000fee:	f023 030f 	bic.w	r3, r3, #15
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	231d      	movs	r3, #29
 8000ff8:	1d3a      	adds	r2, r7, #4
 8000ffa:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ffc:	f7ff fedc 	bl	8000db8 <writeByte>
  writeByte(acc, ACCEL_CONFIG2, c | 0x06); // Set accelerometer rate to 1 kHz and bandwidth to 21 Hz
 8001000:	7dfb      	ldrb	r3, [r7, #23]
 8001002:	f043 0306 	orr.w	r3, r3, #6
 8001006:	b2db      	uxtb	r3, r3
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	231d      	movs	r3, #29
 800100c:	1d3a      	adds	r2, r7, #4
 800100e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001010:	f7ff fed2 	bl	8000db8 <writeByte>
  readByte(acc, ACCEL_CONFIG2, &c, 1);
 8001014:	2301      	movs	r3, #1
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	f107 0317 	add.w	r3, r7, #23
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	231d      	movs	r3, #29
 8001020:	1d3a      	adds	r2, r7, #4
 8001022:	ca07      	ldmia	r2, {r0, r1, r2}
 8001024:	f7ff feef 	bl	8000e06 <readByte>
  // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips 
  // can join the I2C bus and all can be controlled by the Arduino as master
  writeByte(acc, INT_PIN_CFG, 0x22);
 8001028:	2322      	movs	r3, #34	; 0x22
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2337      	movs	r3, #55	; 0x37
 800102e:	1d3a      	adds	r2, r7, #4
 8001030:	ca07      	ldmia	r2, {r0, r1, r2}
 8001032:	f7ff fec1 	bl	8000db8 <writeByte>
  writeByte(acc, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 8001036:	2301      	movs	r3, #1
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	2338      	movs	r3, #56	; 0x38
 800103c:	1d3a      	adds	r2, r7, #4
 800103e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001040:	f7ff feba 	bl	8000db8 <writeByte>

  // Power off gyro
  readByte(acc, PWR_MGMT_2, &c, 1);
 8001044:	2301      	movs	r3, #1
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	f107 0317 	add.w	r3, r7, #23
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	236c      	movs	r3, #108	; 0x6c
 8001050:	1d3a      	adds	r2, r7, #4
 8001052:	ca07      	ldmia	r2, {r0, r1, r2}
 8001054:	f7ff fed7 	bl	8000e06 <readByte>
  c |= 0x07;
 8001058:	7dfb      	ldrb	r3, [r7, #23]
 800105a:	f043 0307 	orr.w	r3, r3, #7
 800105e:	b2db      	uxtb	r3, r3
 8001060:	75fb      	strb	r3, [r7, #23]
  c &= 0xC7;
 8001062:	7dfb      	ldrb	r3, [r7, #23]
 8001064:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001068:	b2db      	uxtb	r3, r3
 800106a:	75fb      	strb	r3, [r7, #23]
  writeByte(acc, PWR_MGMT_2, c); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 800106c:	7dfb      	ldrb	r3, [r7, #23]
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	236c      	movs	r3, #108	; 0x6c
 8001072:	1d3a      	adds	r2, r7, #4
 8001074:	ca07      	ldmia	r2, {r0, r1, r2}
 8001076:	f7ff fe9f 	bl	8000db8 <writeByte>

  //Power off temperature
  readByte(acc, PWR_MGMT_1, &c, 1);
 800107a:	2301      	movs	r3, #1
 800107c:	9301      	str	r3, [sp, #4]
 800107e:	f107 0317 	add.w	r3, r7, #23
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	236b      	movs	r3, #107	; 0x6b
 8001086:	1d3a      	adds	r2, r7, #4
 8001088:	ca07      	ldmia	r2, {r0, r1, r2}
 800108a:	f7ff febc 	bl	8000e06 <readByte>
  c |= 0x08;
 800108e:	7dfb      	ldrb	r3, [r7, #23]
 8001090:	f043 0308 	orr.w	r3, r3, #8
 8001094:	b2db      	uxtb	r3, r3
 8001096:	75fb      	strb	r3, [r7, #23]
  writeByte(acc, PWR_MGMT_1, c); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8001098:	7dfb      	ldrb	r3, [r7, #23]
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	236b      	movs	r3, #107	; 0x6b
 800109e:	1d3a      	adds	r2, r7, #4
 80010a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80010a2:	f7ff fe89 	bl	8000db8 <writeByte>

}
 80010a6:	bf00      	nop
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000250 	.word	0x20000250

080010b4 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80010bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80010c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	608b      	str	r3, [r1, #8]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 80010e0:	f000 f80a 	bl	80010f8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80010e4:	4903      	ldr	r1, [pc, #12]	; (80010f4 <APPE_Init+0x18>)
 80010e6:	2000      	movs	r0, #0
 80010e8:	f000 fd5c 	bl	8001ba4 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80010ec:	f000 f80e 	bl	800110c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80010f0:	bf00      	nop
}
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200007e4 	.word	0x200007e4

080010f8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80010fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001100:	f7ff ffd8 	bl	80010b4 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 8001104:	f002 f84e 	bl	80031a4 <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8001108:	bf00      	nop
}
 800110a:	bd80      	pop	{r7, pc}

0800110c <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001112:	f00a fa05 	bl	800b520 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8001116:	4a11      	ldr	r2, [pc, #68]	; (800115c <appe_Tl_Init+0x50>)
 8001118:	2100      	movs	r1, #0
 800111a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800111e:	f002 f9bb 	bl	8003498 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001122:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <appe_Tl_Init+0x54>)
 8001124:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <appe_Tl_Init+0x58>)
 8001128:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800112a:	463b      	mov	r3, r7
 800112c:	4619      	mov	r1, r3
 800112e:	480e      	ldr	r0, [pc, #56]	; (8001168 <appe_Tl_Init+0x5c>)
 8001130:	f009 ff02 	bl	800af38 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001134:	4b0d      	ldr	r3, [pc, #52]	; (800116c <appe_Tl_Init+0x60>)
 8001136:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001138:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <appe_Tl_Init+0x64>)
 800113a:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800113c:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <appe_Tl_Init+0x68>)
 800113e:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001140:	f240 533c 	movw	r3, #1340	; 0x53c
 8001144:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8001146:	f107 0308 	add.w	r3, r7, #8
 800114a:	4618      	mov	r0, r3
 800114c:	f00a faf6 	bl	800b73c <TL_MM_Init>

  TL_Enable();
 8001150:	f00a f9e0 	bl	800b514 <TL_Enable>

  return;
 8001154:	bf00      	nop
}
 8001156:	3720      	adds	r7, #32
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	0800af71 	.word	0x0800af71
 8001160:	20030700 	.word	0x20030700
 8001164:	08001179 	.word	0x08001179
 8001168:	0800118f 	.word	0x0800118f
 800116c:	20030918 	.word	0x20030918
 8001170:	2003080c 	.word	0x2003080c
 8001174:	200301c4 	.word	0x200301c4

08001178 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001182:	bf00      	nop
}
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <APPE_SysUserEvtRx>:

static void APPE_SysUserEvtRx( void * pPayload )
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8001196:	f00a fb41 	bl	800b81c <TL_TRACES_Init>

  APP_BLE_Init( );
 800119a:	f00a fb99 	bl	800b8d0 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800119e:	2100      	movs	r1, #0
 80011a0:	2001      	movs	r0, #1
 80011a2:	f002 f811 	bl	80031c8 <UTIL_LPM_SetOffMode>
  return;
 80011a6:	bf00      	nop
}
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
 80011b2:	f002 f837 	bl	8003224 <UTIL_LPM_EnterLowPower>
#endif
  return;
 80011b6:	bf00      	nop
}
 80011b8:	bd80      	pop	{r7, pc}

080011ba <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011c8:	f002 f88a 	bl	80032e0 <UTIL_SEQ_Run>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80011dc:	2100      	movs	r1, #0
 80011de:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80011e2:	f002 f979 	bl	80034d8 <UTIL_SEQ_SetTask>
  return;
 80011e6:	bf00      	nop
}
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80011f6:	2002      	movs	r0, #2
 80011f8:	f002 f9d4 	bl	80035a4 <UTIL_SEQ_SetEvt>
  return;
 80011fc:	bf00      	nop
}
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 800120c:	2002      	movs	r0, #2
 800120e:	f002 f9e7 	bl	80035e0 <UTIL_SEQ_WaitEvt>
  return;
 8001212:	bf00      	nop
}
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800121a:	b480      	push	{r7}
 800121c:	b085      	sub	sp, #20
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001226:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001228:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4313      	orrs	r3, r2
 8001230:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001236:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4013      	ands	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800123e:	68fb      	ldr	r3, [r7, #12]
}
 8001240:	bf00      	nop
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001260:	2004      	movs	r0, #4
 8001262:	f7ff ffda 	bl	800121a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	2002      	movs	r0, #2
 8001268:	f7ff ffd7 	bl	800121a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800126c:	2001      	movs	r0, #1
 800126e:	f7ff ffd4 	bl	800121a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001272:	2010      	movs	r0, #16
 8001274:	f7ff ffd1 	bl	800121a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001278:	2008      	movs	r0, #8
 800127a:	f7ff ffce 	bl	800121a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI2_CS_2_Pin|SPI2_CS_1_Pin, GPIO_PIN_SET);
 800127e:	2201      	movs	r2, #1
 8001280:	2103      	movs	r1, #3
 8001282:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001286:	f003 f949 	bl	800451c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_1_GPIO_Port, SPI1_CS_1_Pin, GPIO_PIN_SET);
 800128a:	2201      	movs	r2, #1
 800128c:	2104      	movs	r1, #4
 800128e:	482e      	ldr	r0, [pc, #184]	; (8001348 <MX_GPIO_Init+0xfc>)
 8001290:	f003 f944 	bl	800451c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8001294:	2200      	movs	r2, #0
 8001296:	2123      	movs	r1, #35	; 0x23
 8001298:	482b      	ldr	r0, [pc, #172]	; (8001348 <MX_GPIO_Init+0xfc>)
 800129a:	f003 f93f 	bl	800451c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_2_GPIO_Port, SPI1_CS_2_Pin, GPIO_PIN_SET);
 800129e:	2201      	movs	r2, #1
 80012a0:	2110      	movs	r1, #16
 80012a2:	482a      	ldr	r0, [pc, #168]	; (800134c <MX_GPIO_Init+0x100>)
 80012a4:	f003 f93a 	bl	800451c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI2_CS_2_Pin|SPI2_CS_1_Pin;
 80012a8:	2303      	movs	r3, #3
 80012aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ac:	2301      	movs	r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80012b4:	2301      	movs	r3, #1
 80012b6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	4619      	mov	r1, r3
 80012bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c0:	f002 ffbc 	bl	800423c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012c4:	2310      	movs	r3, #16
 80012c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	4619      	mov	r1, r3
 80012d4:	481e      	ldr	r0, [pc, #120]	; (8001350 <MX_GPIO_Init+0x104>)
 80012d6:	f002 ffb1 	bl	800423c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_1_Pin;
 80012da:	2304      	movs	r3, #4
 80012dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012de:	2301      	movs	r3, #1
 80012e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80012e6:	2301      	movs	r3, #1
 80012e8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI1_CS_1_GPIO_Port, &GPIO_InitStruct);
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	4619      	mov	r1, r3
 80012ee:	4816      	ldr	r0, [pc, #88]	; (8001348 <MX_GPIO_Init+0xfc>)
 80012f0:	f002 ffa4 	bl	800423c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 80012f4:	2323      	movs	r3, #35	; 0x23
 80012f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	4619      	mov	r1, r3
 8001308:	480f      	ldr	r0, [pc, #60]	; (8001348 <MX_GPIO_Init+0xfc>)
 800130a:	f002 ff97 	bl	800423c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_2_Pin;
 800130e:	2310      	movs	r3, #16
 8001310:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001312:	2301      	movs	r3, #1
 8001314:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800131a:	2301      	movs	r3, #1
 800131c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI1_CS_2_GPIO_Port, &GPIO_InitStruct);
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	4619      	mov	r1, r3
 8001322:	480a      	ldr	r0, [pc, #40]	; (800134c <MX_GPIO_Init+0x100>)
 8001324:	f002 ff8a 	bl	800423c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001328:	2303      	movs	r3, #3
 800132a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132c:	2300      	movs	r3, #0
 800132e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	4619      	mov	r1, r3
 8001338:	4806      	ldr	r0, [pc, #24]	; (8001354 <MX_GPIO_Init+0x108>)
 800133a:	f002 ff7f 	bl	800423c <HAL_GPIO_Init>

}
 800133e:	bf00      	nop
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	48000400 	.word	0x48000400
 800134c:	48001000 	.word	0x48001000
 8001350:	48000800 	.word	0x48000800
 8001354:	48000c00 	.word	0x48000c00

08001358 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <LL_EXTI_EnableIT_0_31+0x24>)
 8001362:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001366:	4905      	ldr	r1, [pc, #20]	; (800137c <LL_EXTI_EnableIT_0_31+0x24>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4313      	orrs	r3, r2
 800136c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	58000800 	.word	0x58000800

08001380 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4904      	ldr	r1, [pc, #16]	; (80013a0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4313      	orrs	r3, r2
 8001392:	600b      	str	r3, [r1, #0]

}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	58000800 	.word	0x58000800

080013a4 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <ReadRtcSsrValue+0x3c>)
 80013ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <ReadRtcSsrValue+0x3c>)
 80013b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80013ba:	e005      	b.n	80013c8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80013c0:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <ReadRtcSsrValue+0x3c>)
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d1f5      	bne.n	80013bc <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80013d0:	683b      	ldr	r3, [r7, #0]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40002800 	.word	0x40002800

080013e4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	460a      	mov	r2, r1
 80013ee:	71fb      	strb	r3, [r7, #7]
 80013f0:	4613      	mov	r3, r2
 80013f2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80013f4:	79ba      	ldrb	r2, [r7, #6]
 80013f6:	491d      	ldr	r1, [pc, #116]	; (800146c <LinkTimerAfter+0x88>)
 80013f8:	4613      	mov	r3, r2
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	4413      	add	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	440b      	add	r3, r1
 8001402:	3315      	adds	r3, #21
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	2b06      	cmp	r3, #6
 800140c:	d009      	beq.n	8001422 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	4916      	ldr	r1, [pc, #88]	; (800146c <LinkTimerAfter+0x88>)
 8001412:	4613      	mov	r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	4413      	add	r3, r2
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	440b      	add	r3, r1
 800141c:	3314      	adds	r3, #20
 800141e:	79fa      	ldrb	r2, [r7, #7]
 8001420:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001422:	79fa      	ldrb	r2, [r7, #7]
 8001424:	4911      	ldr	r1, [pc, #68]	; (800146c <LinkTimerAfter+0x88>)
 8001426:	4613      	mov	r3, r2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	4413      	add	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	440b      	add	r3, r1
 8001430:	3315      	adds	r3, #21
 8001432:	7bfa      	ldrb	r2, [r7, #15]
 8001434:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001436:	79fa      	ldrb	r2, [r7, #7]
 8001438:	490c      	ldr	r1, [pc, #48]	; (800146c <LinkTimerAfter+0x88>)
 800143a:	4613      	mov	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4413      	add	r3, r2
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	440b      	add	r3, r1
 8001444:	3314      	adds	r3, #20
 8001446:	79ba      	ldrb	r2, [r7, #6]
 8001448:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800144a:	79ba      	ldrb	r2, [r7, #6]
 800144c:	4907      	ldr	r1, [pc, #28]	; (800146c <LinkTimerAfter+0x88>)
 800144e:	4613      	mov	r3, r2
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	4413      	add	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	440b      	add	r3, r1
 8001458:	3315      	adds	r3, #21
 800145a:	79fa      	ldrb	r2, [r7, #7]
 800145c:	701a      	strb	r2, [r3, #0]

  return;
 800145e:	bf00      	nop
}
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	2000005c 	.word	0x2000005c

08001470 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	460a      	mov	r2, r1
 800147a:	71fb      	strb	r3, [r7, #7]
 800147c:	4613      	mov	r3, r2
 800147e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001480:	4b29      	ldr	r3, [pc, #164]	; (8001528 <LinkTimerBefore+0xb8>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	79ba      	ldrb	r2, [r7, #6]
 8001488:	429a      	cmp	r2, r3
 800148a:	d032      	beq.n	80014f2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800148c:	79ba      	ldrb	r2, [r7, #6]
 800148e:	4927      	ldr	r1, [pc, #156]	; (800152c <LinkTimerBefore+0xbc>)
 8001490:	4613      	mov	r3, r2
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4413      	add	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	440b      	add	r3, r1
 800149a:	3314      	adds	r3, #20
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80014a0:	7bfa      	ldrb	r2, [r7, #15]
 80014a2:	4922      	ldr	r1, [pc, #136]	; (800152c <LinkTimerBefore+0xbc>)
 80014a4:	4613      	mov	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	440b      	add	r3, r1
 80014ae:	3315      	adds	r3, #21
 80014b0:	79fa      	ldrb	r2, [r7, #7]
 80014b2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80014b4:	79fa      	ldrb	r2, [r7, #7]
 80014b6:	491d      	ldr	r1, [pc, #116]	; (800152c <LinkTimerBefore+0xbc>)
 80014b8:	4613      	mov	r3, r2
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	4413      	add	r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	440b      	add	r3, r1
 80014c2:	3315      	adds	r3, #21
 80014c4:	79ba      	ldrb	r2, [r7, #6]
 80014c6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80014c8:	79fa      	ldrb	r2, [r7, #7]
 80014ca:	4918      	ldr	r1, [pc, #96]	; (800152c <LinkTimerBefore+0xbc>)
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	440b      	add	r3, r1
 80014d6:	3314      	adds	r3, #20
 80014d8:	7bfa      	ldrb	r2, [r7, #15]
 80014da:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80014dc:	79ba      	ldrb	r2, [r7, #6]
 80014de:	4913      	ldr	r1, [pc, #76]	; (800152c <LinkTimerBefore+0xbc>)
 80014e0:	4613      	mov	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	4413      	add	r3, r2
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	440b      	add	r3, r1
 80014ea:	3314      	adds	r3, #20
 80014ec:	79fa      	ldrb	r2, [r7, #7]
 80014ee:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80014f0:	e014      	b.n	800151c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80014f2:	79fa      	ldrb	r2, [r7, #7]
 80014f4:	490d      	ldr	r1, [pc, #52]	; (800152c <LinkTimerBefore+0xbc>)
 80014f6:	4613      	mov	r3, r2
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	4413      	add	r3, r2
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	440b      	add	r3, r1
 8001500:	3315      	adds	r3, #21
 8001502:	79ba      	ldrb	r2, [r7, #6]
 8001504:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001506:	79ba      	ldrb	r2, [r7, #6]
 8001508:	4908      	ldr	r1, [pc, #32]	; (800152c <LinkTimerBefore+0xbc>)
 800150a:	4613      	mov	r3, r2
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	4413      	add	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	440b      	add	r3, r1
 8001514:	3314      	adds	r3, #20
 8001516:	79fa      	ldrb	r2, [r7, #7]
 8001518:	701a      	strb	r2, [r3, #0]
  return;
 800151a:	bf00      	nop
}
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	200000ec 	.word	0x200000ec
 800152c:	2000005c 	.word	0x2000005c

08001530 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800153a:	4b4e      	ldr	r3, [pc, #312]	; (8001674 <linkTimer+0x144>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b06      	cmp	r3, #6
 8001542:	d118      	bne.n	8001576 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001544:	4b4b      	ldr	r3, [pc, #300]	; (8001674 <linkTimer+0x144>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	b2da      	uxtb	r2, r3
 800154a:	4b4b      	ldr	r3, [pc, #300]	; (8001678 <linkTimer+0x148>)
 800154c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800154e:	4a49      	ldr	r2, [pc, #292]	; (8001674 <linkTimer+0x144>)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001554:	79fa      	ldrb	r2, [r7, #7]
 8001556:	4949      	ldr	r1, [pc, #292]	; (800167c <linkTimer+0x14c>)
 8001558:	4613      	mov	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	4413      	add	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	440b      	add	r3, r1
 8001562:	3315      	adds	r3, #21
 8001564:	2206      	movs	r2, #6
 8001566:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001568:	4b45      	ldr	r3, [pc, #276]	; (8001680 <linkTimer+0x150>)
 800156a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800156e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	81fb      	strh	r3, [r7, #14]
 8001574:	e078      	b.n	8001668 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001576:	f000 f909 	bl	800178c <ReturnTimeElapsed>
 800157a:	4603      	mov	r3, r0
 800157c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800157e:	79fa      	ldrb	r2, [r7, #7]
 8001580:	493e      	ldr	r1, [pc, #248]	; (800167c <linkTimer+0x14c>)
 8001582:	4613      	mov	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4413      	add	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	440b      	add	r3, r1
 800158c:	3308      	adds	r3, #8
 800158e:	6819      	ldr	r1, [r3, #0]
 8001590:	89fb      	ldrh	r3, [r7, #14]
 8001592:	79fa      	ldrb	r2, [r7, #7]
 8001594:	4419      	add	r1, r3
 8001596:	4839      	ldr	r0, [pc, #228]	; (800167c <linkTimer+0x14c>)
 8001598:	4613      	mov	r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4413      	add	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	4403      	add	r3, r0
 80015a2:	3308      	adds	r3, #8
 80015a4:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80015a6:	79fa      	ldrb	r2, [r7, #7]
 80015a8:	4934      	ldr	r1, [pc, #208]	; (800167c <linkTimer+0x14c>)
 80015aa:	4613      	mov	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	4413      	add	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	440b      	add	r3, r1
 80015b4:	3308      	adds	r3, #8
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80015ba:	4b2e      	ldr	r3, [pc, #184]	; (8001674 <linkTimer+0x144>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	4619      	mov	r1, r3
 80015c2:	4a2e      	ldr	r2, [pc, #184]	; (800167c <linkTimer+0x14c>)
 80015c4:	460b      	mov	r3, r1
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	440b      	add	r3, r1
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	4413      	add	r3, r2
 80015ce:	3308      	adds	r3, #8
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d337      	bcc.n	8001648 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80015d8:	4b26      	ldr	r3, [pc, #152]	; (8001674 <linkTimer+0x144>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80015de:	7b7a      	ldrb	r2, [r7, #13]
 80015e0:	4926      	ldr	r1, [pc, #152]	; (800167c <linkTimer+0x14c>)
 80015e2:	4613      	mov	r3, r2
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	4413      	add	r3, r2
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	440b      	add	r3, r1
 80015ec:	3315      	adds	r3, #21
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80015f2:	e013      	b.n	800161c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80015f4:	7b7a      	ldrb	r2, [r7, #13]
 80015f6:	4921      	ldr	r1, [pc, #132]	; (800167c <linkTimer+0x14c>)
 80015f8:	4613      	mov	r3, r2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	4413      	add	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	440b      	add	r3, r1
 8001602:	3315      	adds	r3, #21
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001608:	7b7a      	ldrb	r2, [r7, #13]
 800160a:	491c      	ldr	r1, [pc, #112]	; (800167c <linkTimer+0x14c>)
 800160c:	4613      	mov	r3, r2
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	4413      	add	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	440b      	add	r3, r1
 8001616:	3315      	adds	r3, #21
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800161c:	7b3b      	ldrb	r3, [r7, #12]
 800161e:	2b06      	cmp	r3, #6
 8001620:	d00b      	beq.n	800163a <linkTimer+0x10a>
 8001622:	7b3a      	ldrb	r2, [r7, #12]
 8001624:	4915      	ldr	r1, [pc, #84]	; (800167c <linkTimer+0x14c>)
 8001626:	4613      	mov	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	440b      	add	r3, r1
 8001630:	3308      	adds	r3, #8
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68ba      	ldr	r2, [r7, #8]
 8001636:	429a      	cmp	r2, r3
 8001638:	d2dc      	bcs.n	80015f4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800163a:	7b7a      	ldrb	r2, [r7, #13]
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fecf 	bl	80013e4 <LinkTimerAfter>
 8001646:	e00f      	b.n	8001668 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001648:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <linkTimer+0x144>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	b2da      	uxtb	r2, r3
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	4611      	mov	r1, r2
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ff0c 	bl	8001470 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <linkTimer+0x144>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	b2da      	uxtb	r2, r3
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <linkTimer+0x148>)
 8001660:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001662:	4a04      	ldr	r2, [pc, #16]	; (8001674 <linkTimer+0x144>)
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001668:	89fb      	ldrh	r3, [r7, #14]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200000ec 	.word	0x200000ec
 8001678:	200000ed 	.word	0x200000ed
 800167c:	2000005c 	.word	0x2000005c
 8001680:	200000f0 	.word	0x200000f0

08001684 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	460a      	mov	r2, r1
 800168e:	71fb      	strb	r3, [r7, #7]
 8001690:	4613      	mov	r3, r2
 8001692:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001694:	4b39      	ldr	r3, [pc, #228]	; (800177c <UnlinkTimer+0xf8>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	b2db      	uxtb	r3, r3
 800169a:	79fa      	ldrb	r2, [r7, #7]
 800169c:	429a      	cmp	r2, r3
 800169e:	d111      	bne.n	80016c4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80016a0:	4b36      	ldr	r3, [pc, #216]	; (800177c <UnlinkTimer+0xf8>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4b36      	ldr	r3, [pc, #216]	; (8001780 <UnlinkTimer+0xfc>)
 80016a8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80016aa:	79fa      	ldrb	r2, [r7, #7]
 80016ac:	4935      	ldr	r1, [pc, #212]	; (8001784 <UnlinkTimer+0x100>)
 80016ae:	4613      	mov	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4413      	add	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	440b      	add	r3, r1
 80016b8:	3315      	adds	r3, #21
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4b2f      	ldr	r3, [pc, #188]	; (800177c <UnlinkTimer+0xf8>)
 80016c0:	701a      	strb	r2, [r3, #0]
 80016c2:	e03e      	b.n	8001742 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80016c4:	79fa      	ldrb	r2, [r7, #7]
 80016c6:	492f      	ldr	r1, [pc, #188]	; (8001784 <UnlinkTimer+0x100>)
 80016c8:	4613      	mov	r3, r2
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	4413      	add	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	440b      	add	r3, r1
 80016d2:	3314      	adds	r3, #20
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80016d8:	79fa      	ldrb	r2, [r7, #7]
 80016da:	492a      	ldr	r1, [pc, #168]	; (8001784 <UnlinkTimer+0x100>)
 80016dc:	4613      	mov	r3, r2
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	4413      	add	r3, r2
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	440b      	add	r3, r1
 80016e6:	3315      	adds	r3, #21
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80016ec:	79f9      	ldrb	r1, [r7, #7]
 80016ee:	7bfa      	ldrb	r2, [r7, #15]
 80016f0:	4824      	ldr	r0, [pc, #144]	; (8001784 <UnlinkTimer+0x100>)
 80016f2:	460b      	mov	r3, r1
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	440b      	add	r3, r1
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	4403      	add	r3, r0
 80016fc:	3315      	adds	r3, #21
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	b2d8      	uxtb	r0, r3
 8001702:	4920      	ldr	r1, [pc, #128]	; (8001784 <UnlinkTimer+0x100>)
 8001704:	4613      	mov	r3, r2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	4413      	add	r3, r2
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	440b      	add	r3, r1
 800170e:	3315      	adds	r3, #21
 8001710:	4602      	mov	r2, r0
 8001712:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001714:	7bbb      	ldrb	r3, [r7, #14]
 8001716:	2b06      	cmp	r3, #6
 8001718:	d013      	beq.n	8001742 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800171a:	79f9      	ldrb	r1, [r7, #7]
 800171c:	7bba      	ldrb	r2, [r7, #14]
 800171e:	4819      	ldr	r0, [pc, #100]	; (8001784 <UnlinkTimer+0x100>)
 8001720:	460b      	mov	r3, r1
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	440b      	add	r3, r1
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	4403      	add	r3, r0
 800172a:	3314      	adds	r3, #20
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	b2d8      	uxtb	r0, r3
 8001730:	4914      	ldr	r1, [pc, #80]	; (8001784 <UnlinkTimer+0x100>)
 8001732:	4613      	mov	r3, r2
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	4413      	add	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	440b      	add	r3, r1
 800173c:	3314      	adds	r3, #20
 800173e:	4602      	mov	r2, r0
 8001740:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001742:	79fa      	ldrb	r2, [r7, #7]
 8001744:	490f      	ldr	r1, [pc, #60]	; (8001784 <UnlinkTimer+0x100>)
 8001746:	4613      	mov	r3, r2
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	4413      	add	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	440b      	add	r3, r1
 8001750:	330c      	adds	r3, #12
 8001752:	2201      	movs	r2, #1
 8001754:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <UnlinkTimer+0xf8>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b06      	cmp	r3, #6
 800175e:	d107      	bne.n	8001770 <UnlinkTimer+0xec>
 8001760:	79bb      	ldrb	r3, [r7, #6]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d104      	bne.n	8001770 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001766:	4b08      	ldr	r3, [pc, #32]	; (8001788 <UnlinkTimer+0x104>)
 8001768:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800176c:	601a      	str	r2, [r3, #0]
  }

  return;
 800176e:	bf00      	nop
 8001770:	bf00      	nop
}
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	200000ec 	.word	0x200000ec
 8001780:	200000ed 	.word	0x200000ed
 8001784:	2000005c 	.word	0x2000005c
 8001788:	200000f0 	.word	0x200000f0

0800178c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001792:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <ReturnTimeElapsed+0x70>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800179a:	d026      	beq.n	80017ea <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 800179c:	f7ff fe02 	bl	80013a4 <ReadRtcSsrValue>
 80017a0:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80017a2:	4b16      	ldr	r3, [pc, #88]	; (80017fc <ReturnTimeElapsed+0x70>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d805      	bhi.n	80017b8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80017ac:	4b13      	ldr	r3, [pc, #76]	; (80017fc <ReturnTimeElapsed+0x70>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	e00a      	b.n	80017ce <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <ReturnTimeElapsed+0x74>)
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	461a      	mov	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80017c4:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <ReturnTimeElapsed+0x70>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80017ce:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <ReturnTimeElapsed+0x78>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	fb02 f303 	mul.w	r3, r2, r3
 80017da:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80017dc:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <ReturnTimeElapsed+0x7c>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	461a      	mov	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	40d3      	lsrs	r3, r2
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	e001      	b.n	80017ee <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	b29b      	uxth	r3, r3
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200000f0 	.word	0x200000f0
 8001800:	2000025a 	.word	0x2000025a
 8001804:	20000259 	.word	0x20000259
 8001808:	20000258 	.word	0x20000258

0800180c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8001816:	88fb      	ldrh	r3, [r7, #6]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d108      	bne.n	800182e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800181c:	f7ff fdc2 	bl	80013a4 <ReadRtcSsrValue>
 8001820:	4602      	mov	r2, r0
 8001822:	4b24      	ldr	r3, [pc, #144]	; (80018b4 <RestartWakeupCounter+0xa8>)
 8001824:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001826:	2003      	movs	r0, #3
 8001828:	f002 fceb 	bl	8004202 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 800182c:	e03e      	b.n	80018ac <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d803      	bhi.n	800183c <RestartWakeupCounter+0x30>
 8001834:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <RestartWakeupCounter+0xac>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d002      	beq.n	8001842 <RestartWakeupCounter+0x36>
      Value -= 1;
 800183c:	88fb      	ldrh	r3, [r7, #6]
 800183e:	3b01      	subs	r3, #1
 8001840:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001842:	bf00      	nop
 8001844:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <RestartWakeupCounter+0xb0>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f7      	beq.n	8001844 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <RestartWakeupCounter+0xb0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4b17      	ldr	r3, [pc, #92]	; (80018bc <RestartWakeupCounter+0xb0>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001868:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <RestartWakeupCounter+0xb4>)
 800186c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001870:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001872:	2003      	movs	r0, #3
 8001874:	f002 fcd3 	bl	800421e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <RestartWakeupCounter+0xb8>)
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	0c1b      	lsrs	r3, r3, #16
 800187e:	041b      	lsls	r3, r3, #16
 8001880:	88fa      	ldrh	r2, [r7, #6]
 8001882:	4910      	ldr	r1, [pc, #64]	; (80018c4 <RestartWakeupCounter+0xb8>)
 8001884:	4313      	orrs	r3, r2
 8001886:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001888:	f7ff fd8c 	bl	80013a4 <ReadRtcSsrValue>
 800188c:	4602      	mov	r2, r0
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <RestartWakeupCounter+0xa8>)
 8001890:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <RestartWakeupCounter+0xb0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	4b08      	ldr	r3, [pc, #32]	; (80018bc <RestartWakeupCounter+0xb0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80018a4:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80018a6:	f3af 8000 	nop.w
  return ;
 80018aa:	bf00      	nop
}
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200000f0 	.word	0x200000f0
 80018b8:	20000258 	.word	0x20000258
 80018bc:	20000254 	.word	0x20000254
 80018c0:	58000800 	.word	0x58000800
 80018c4:	40002800 	.word	0x40002800

080018c8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80018ce:	4b47      	ldr	r3, [pc, #284]	; (80019ec <RescheduleTimerList+0x124>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018da:	d108      	bne.n	80018ee <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80018dc:	bf00      	nop
 80018de:	4b44      	ldr	r3, [pc, #272]	; (80019f0 <RescheduleTimerList+0x128>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f7      	bne.n	80018de <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80018ee:	4b40      	ldr	r3, [pc, #256]	; (80019f0 <RescheduleTimerList+0x128>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	4b3e      	ldr	r3, [pc, #248]	; (80019f0 <RescheduleTimerList+0x128>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001900:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001902:	4b3c      	ldr	r3, [pc, #240]	; (80019f4 <RescheduleTimerList+0x12c>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001908:	7bfa      	ldrb	r2, [r7, #15]
 800190a:	493b      	ldr	r1, [pc, #236]	; (80019f8 <RescheduleTimerList+0x130>)
 800190c:	4613      	mov	r3, r2
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4413      	add	r3, r2
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	440b      	add	r3, r1
 8001916:	3308      	adds	r3, #8
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800191c:	f7ff ff36 	bl	800178c <ReturnTimeElapsed>
 8001920:	4603      	mov	r3, r0
 8001922:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001924:	88fb      	ldrh	r3, [r7, #6]
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	429a      	cmp	r2, r3
 800192a:	d205      	bcs.n	8001938 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001930:	4b32      	ldr	r3, [pc, #200]	; (80019fc <RescheduleTimerList+0x134>)
 8001932:	2201      	movs	r2, #1
 8001934:	701a      	strb	r2, [r3, #0]
 8001936:	e04d      	b.n	80019d4 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	4a31      	ldr	r2, [pc, #196]	; (8001a00 <RescheduleTimerList+0x138>)
 800193c:	8812      	ldrh	r2, [r2, #0]
 800193e:	b292      	uxth	r2, r2
 8001940:	4413      	add	r3, r2
 8001942:	461a      	mov	r2, r3
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	4293      	cmp	r3, r2
 8001948:	d906      	bls.n	8001958 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800194a:	4b2d      	ldr	r3, [pc, #180]	; (8001a00 <RescheduleTimerList+0x138>)
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001950:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <RescheduleTimerList+0x134>)
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
 8001956:	e03d      	b.n	80019d4 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	b29a      	uxth	r2, r3
 800195c:	88fb      	ldrh	r3, [r7, #6]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001962:	4b26      	ldr	r3, [pc, #152]	; (80019fc <RescheduleTimerList+0x134>)
 8001964:	2201      	movs	r2, #1
 8001966:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001968:	e034      	b.n	80019d4 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800196a:	7bfa      	ldrb	r2, [r7, #15]
 800196c:	4922      	ldr	r1, [pc, #136]	; (80019f8 <RescheduleTimerList+0x130>)
 800196e:	4613      	mov	r3, r2
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	4413      	add	r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	440b      	add	r3, r1
 8001978:	3308      	adds	r3, #8
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	88fb      	ldrh	r3, [r7, #6]
 800197e:	429a      	cmp	r2, r3
 8001980:	d20a      	bcs.n	8001998 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001982:	7bfa      	ldrb	r2, [r7, #15]
 8001984:	491c      	ldr	r1, [pc, #112]	; (80019f8 <RescheduleTimerList+0x130>)
 8001986:	4613      	mov	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4413      	add	r3, r2
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	440b      	add	r3, r1
 8001990:	3308      	adds	r3, #8
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	e013      	b.n	80019c0 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001998:	7bfa      	ldrb	r2, [r7, #15]
 800199a:	4917      	ldr	r1, [pc, #92]	; (80019f8 <RescheduleTimerList+0x130>)
 800199c:	4613      	mov	r3, r2
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	4413      	add	r3, r2
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	440b      	add	r3, r1
 80019a6:	3308      	adds	r3, #8
 80019a8:	6819      	ldr	r1, [r3, #0]
 80019aa:	88fb      	ldrh	r3, [r7, #6]
 80019ac:	7bfa      	ldrb	r2, [r7, #15]
 80019ae:	1ac9      	subs	r1, r1, r3
 80019b0:	4811      	ldr	r0, [pc, #68]	; (80019f8 <RescheduleTimerList+0x130>)
 80019b2:	4613      	mov	r3, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4413      	add	r3, r2
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	4403      	add	r3, r0
 80019bc:	3308      	adds	r3, #8
 80019be:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80019c0:	7bfa      	ldrb	r2, [r7, #15]
 80019c2:	490d      	ldr	r1, [pc, #52]	; (80019f8 <RescheduleTimerList+0x130>)
 80019c4:	4613      	mov	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4413      	add	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	440b      	add	r3, r1
 80019ce:	3315      	adds	r3, #21
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	2b06      	cmp	r3, #6
 80019d8:	d1c7      	bne.n	800196a <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80019da:	89bb      	ldrh	r3, [r7, #12]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff15 	bl	800180c <RestartWakeupCounter>

  return ;
 80019e2:	bf00      	nop
}
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40002800 	.word	0x40002800
 80019f0:	20000254 	.word	0x20000254
 80019f4:	200000ec 	.word	0x200000ec
 80019f8:	2000005c 	.word	0x2000005c
 80019fc:	200000f4 	.word	0x200000f4
 8001a00:	2000025c 	.word	0x2000025c

08001a04 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08a      	sub	sp, #40	; 0x28
 8001a08:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8001a0e:	617b      	str	r3, [r7, #20]
  return(result);
 8001a10:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001a14:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001a16:	4b5e      	ldr	r3, [pc, #376]	; (8001b90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	22ca      	movs	r2, #202	; 0xca
 8001a1e:	625a      	str	r2, [r3, #36]	; 0x24
 8001a20:	4b5b      	ldr	r3, [pc, #364]	; (8001b90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2253      	movs	r2, #83	; 0x53
 8001a28:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8001a2a:	4b59      	ldr	r3, [pc, #356]	; (8001b90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	4b57      	ldr	r3, [pc, #348]	; (8001b90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a3c:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001a3e:	4b55      	ldr	r3, [pc, #340]	; (8001b94 <HW_TS_RTC_Wakeup_Handler+0x190>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001a46:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001a4a:	4953      	ldr	r1, [pc, #332]	; (8001b98 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	4413      	add	r3, r2
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	440b      	add	r3, r1
 8001a56:	330c      	adds	r3, #12
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d170      	bne.n	8001b42 <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001a60:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001a64:	494c      	ldr	r1, [pc, #304]	; (8001b98 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001a66:	4613      	mov	r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	4413      	add	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	440b      	add	r3, r1
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001a74:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001a78:	4947      	ldr	r1, [pc, #284]	; (8001b98 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4413      	add	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	440b      	add	r3, r1
 8001a84:	3310      	adds	r3, #16
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001a8a:	4b44      	ldr	r3, [pc, #272]	; (8001b9c <HW_TS_RTC_Wakeup_Handler+0x198>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d04e      	beq.n	8001b32 <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001a94:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001a98:	493f      	ldr	r1, [pc, #252]	; (8001b98 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4413      	add	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	440b      	add	r3, r1
 8001aa4:	330d      	adds	r3, #13
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d125      	bne.n	8001afa <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001aae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fde5 	bl	8001684 <UnlinkTimer>
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001ac4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001ac8:	4933      	ldr	r1, [pc, #204]	; (8001b98 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001aca:	4613      	mov	r3, r2
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	4413      	add	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	440b      	add	r3, r1
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001adc:	4611      	mov	r1, r2
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 fa40 	bl	8001f64 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001ae4:	4b2a      	ldr	r3, [pc, #168]	; (8001b90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	22ca      	movs	r2, #202	; 0xca
 8001aec:	625a      	str	r2, [r3, #36]	; 0x24
 8001aee:	4b28      	ldr	r3, [pc, #160]	; (8001b90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2253      	movs	r2, #83	; 0x53
 8001af6:	625a      	str	r2, [r3, #36]	; 0x24
 8001af8:	e013      	b.n	8001b22 <HW_TS_RTC_Wakeup_Handler+0x11e>
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001b04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 f9a1 	bl	8001e50 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001b0e:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	22ca      	movs	r2, #202	; 0xca
 8001b16:	625a      	str	r2, [r3, #36]	; 0x24
 8001b18:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2253      	movs	r2, #83	; 0x53
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001b22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b26:	69fa      	ldr	r2, [r7, #28]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	69b8      	ldr	r0, [r7, #24]
 8001b2c:	f000 faa0 	bl	8002070 <HW_TS_RTC_Int_AppNot>
 8001b30:	e024      	b.n	8001b7c <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8001b32:	f7ff fec9 	bl	80018c8 <RescheduleTimerList>
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	f383 8810 	msr	PRIMASK, r3
 8001b40:	e01c      	b.n	8001b7c <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001b42:	bf00      	nop
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0f7      	beq.n	8001b44 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001b54:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001b68:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001b6c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001b7c:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	22ff      	movs	r2, #255	; 0xff
 8001b84:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001b86:	bf00      	nop
}
 8001b88:	3728      	adds	r7, #40	; 0x28
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000254 	.word	0x20000254
 8001b94:	200000ec 	.word	0x200000ec
 8001b98:	2000005c 	.word	0x2000005c
 8001b9c:	200000f4 	.word	0x200000f4
 8001ba0:	58000800 	.word	0x58000800

08001ba4 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	6039      	str	r1, [r7, #0]
 8001bae:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001bb0:	4a61      	ldr	r2, [pc, #388]	; (8001d38 <HW_TS_Init+0x194>)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001bb6:	4b60      	ldr	r3, [pc, #384]	; (8001d38 <HW_TS_Init+0x194>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	22ca      	movs	r2, #202	; 0xca
 8001bbe:	625a      	str	r2, [r3, #36]	; 0x24
 8001bc0:	4b5d      	ldr	r3, [pc, #372]	; (8001d38 <HW_TS_Init+0x194>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2253      	movs	r2, #83	; 0x53
 8001bc8:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001bca:	4b5c      	ldr	r3, [pc, #368]	; (8001d3c <HW_TS_Init+0x198>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	4a5b      	ldr	r2, [pc, #364]	; (8001d3c <HW_TS_Init+0x198>)
 8001bd0:	f043 0320 	orr.w	r3, r3, #32
 8001bd4:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001bd6:	4b59      	ldr	r3, [pc, #356]	; (8001d3c <HW_TS_Init+0x198>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	f1c3 0304 	rsb	r3, r3, #4
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	4b55      	ldr	r3, [pc, #340]	; (8001d40 <HW_TS_Init+0x19c>)
 8001bea:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001bec:	4b53      	ldr	r3, [pc, #332]	; (8001d3c <HW_TS_Init+0x198>)
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001bf4:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001bf8:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	fa92 f2a2 	rbit	r2, r2
 8001c00:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	fab2 f282 	clz	r2, r2
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	40d3      	lsrs	r3, r2
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	3301      	adds	r3, #1
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	4b4c      	ldr	r3, [pc, #304]	; (8001d44 <HW_TS_Init+0x1a0>)
 8001c14:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001c16:	4b49      	ldr	r3, [pc, #292]	; (8001d3c <HW_TS_Init+0x198>)
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	3301      	adds	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	4b48      	ldr	r3, [pc, #288]	; (8001d48 <HW_TS_Init+0x1a4>)
 8001c28:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001c2a:	4b47      	ldr	r3, [pc, #284]	; (8001d48 <HW_TS_Init+0x1a4>)
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	4a44      	ldr	r2, [pc, #272]	; (8001d44 <HW_TS_Init+0x1a0>)
 8001c32:	7812      	ldrb	r2, [r2, #0]
 8001c34:	fb02 f303 	mul.w	r3, r2, r3
 8001c38:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001c3c:	4a40      	ldr	r2, [pc, #256]	; (8001d40 <HW_TS_Init+0x19c>)
 8001c3e:	7812      	ldrb	r2, [r2, #0]
 8001c40:	40d3      	lsrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d904      	bls.n	8001c58 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001c4e:	4b3f      	ldr	r3, [pc, #252]	; (8001d4c <HW_TS_Init+0x1a8>)
 8001c50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c54:	801a      	strh	r2, [r3, #0]
 8001c56:	e003      	b.n	8001c60 <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	4b3b      	ldr	r3, [pc, #236]	; (8001d4c <HW_TS_Init+0x1a8>)
 8001c5e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001c60:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001c64:	f7ff fb8c 	bl	8001380 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001c68:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001c6c:	f7ff fb74 	bl	8001358 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d143      	bne.n	8001cfe <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001c76:	4b36      	ldr	r3, [pc, #216]	; (8001d50 <HW_TS_Init+0x1ac>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001c7c:	4b35      	ldr	r3, [pc, #212]	; (8001d54 <HW_TS_Init+0x1b0>)
 8001c7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c82:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001c84:	2300      	movs	r3, #0
 8001c86:	75fb      	strb	r3, [r7, #23]
 8001c88:	e00c      	b.n	8001ca4 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001c8a:	7dfa      	ldrb	r2, [r7, #23]
 8001c8c:	4932      	ldr	r1, [pc, #200]	; (8001d58 <HW_TS_Init+0x1b4>)
 8001c8e:	4613      	mov	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	440b      	add	r3, r1
 8001c98:	330c      	adds	r3, #12
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001c9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	75fb      	strb	r3, [r7, #23]
 8001ca4:	7dfb      	ldrb	r3, [r7, #23]
 8001ca6:	2b05      	cmp	r3, #5
 8001ca8:	d9ef      	bls.n	8001c8a <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001caa:	4b2c      	ldr	r3, [pc, #176]	; (8001d5c <HW_TS_Init+0x1b8>)
 8001cac:	2206      	movs	r2, #6
 8001cae:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001cb0:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <HW_TS_Init+0x194>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	; (8001d38 <HW_TS_Init+0x194>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cc2:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001cc4:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <HW_TS_Init+0x194>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <HW_TS_Init+0x194>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001cd8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001cda:	4b21      	ldr	r3, [pc, #132]	; (8001d60 <HW_TS_Init+0x1bc>)
 8001cdc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ce0:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001ce2:	2003      	movs	r0, #3
 8001ce4:	f002 fa9b 	bl	800421e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001ce8:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <HW_TS_Init+0x194>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <HW_TS_Init+0x194>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	e00a      	b.n	8001d14 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <HW_TS_Init+0x194>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d002      	beq.n	8001d14 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001d0e:	2003      	movs	r0, #3
 8001d10:	f002 fa77 	bl	8004202 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <HW_TS_Init+0x194>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	22ff      	movs	r2, #255	; 0xff
 8001d1c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2103      	movs	r1, #3
 8001d22:	2003      	movs	r0, #3
 8001d24:	f002 fa2b 	bl	800417e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001d28:	2003      	movs	r0, #3
 8001d2a:	f002 fa42 	bl	80041b2 <HAL_NVIC_EnableIRQ>

  return;
 8001d2e:	bf00      	nop
}
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000254 	.word	0x20000254
 8001d3c:	40002800 	.word	0x40002800
 8001d40:	20000258 	.word	0x20000258
 8001d44:	20000259 	.word	0x20000259
 8001d48:	2000025a 	.word	0x2000025a
 8001d4c:	2000025c 	.word	0x2000025c
 8001d50:	200000f4 	.word	0x200000f4
 8001d54:	200000f0 	.word	0x200000f0
 8001d58:	2000005c 	.word	0x2000005c
 8001d5c:	200000ec 	.word	0x200000ec
 8001d60:	58000800 	.word	0x58000800

08001d64 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b08b      	sub	sp, #44	; 0x2c
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	603b      	str	r3, [r7, #0]
 8001d70:	4613      	mov	r3, r2
 8001d72:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d7a:	f3ef 8310 	mrs	r3, PRIMASK
 8001d7e:	61fb      	str	r3, [r7, #28]
  return(result);
 8001d80:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001d82:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d84:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001d86:	e004      	b.n	8001d92 <HW_TS_Create+0x2e>
  {
    loop++;
 8001d88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001d92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d96:	2b05      	cmp	r3, #5
 8001d98:	d80c      	bhi.n	8001db4 <HW_TS_Create+0x50>
 8001d9a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001d9e:	492b      	ldr	r1, [pc, #172]	; (8001e4c <HW_TS_Create+0xe8>)
 8001da0:	4613      	mov	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4413      	add	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	440b      	add	r3, r1
 8001daa:	330c      	adds	r3, #12
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1e9      	bne.n	8001d88 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001db4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001db8:	2b06      	cmp	r3, #6
 8001dba:	d037      	beq.n	8001e2c <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001dbc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001dc0:	4922      	ldr	r1, [pc, #136]	; (8001e4c <HW_TS_Create+0xe8>)
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4413      	add	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	440b      	add	r3, r1
 8001dcc:	330c      	adds	r3, #12
 8001dce:	2201      	movs	r2, #1
 8001dd0:	701a      	strb	r2, [r3, #0]
 8001dd2:	6a3b      	ldr	r3, [r7, #32]
 8001dd4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001ddc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001de0:	491a      	ldr	r1, [pc, #104]	; (8001e4c <HW_TS_Create+0xe8>)
 8001de2:	4613      	mov	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4413      	add	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	440b      	add	r3, r1
 8001dec:	3310      	adds	r3, #16
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001df2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001df6:	4915      	ldr	r1, [pc, #84]	; (8001e4c <HW_TS_Create+0xe8>)
 8001df8:	4613      	mov	r3, r2
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4413      	add	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	440b      	add	r3, r1
 8001e02:	330d      	adds	r3, #13
 8001e04:	79fa      	ldrb	r2, [r7, #7]
 8001e06:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001e08:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001e0c:	490f      	ldr	r1, [pc, #60]	; (8001e4c <HW_TS_Create+0xe8>)
 8001e0e:	4613      	mov	r3, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	4413      	add	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	440b      	add	r3, r1
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001e22:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001e24:	2300      	movs	r3, #0
 8001e26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e2a:	e007      	b.n	8001e3c <HW_TS_Create+0xd8>
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001e36:	2301      	movs	r3, #1
 8001e38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8001e3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	372c      	adds	r7, #44	; 0x2c
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	2000005c 	.word	0x2000005c

08001e50 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8001e5e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e60:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001e62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e64:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001e66:	2003      	movs	r0, #3
 8001e68:	f002 f9b1 	bl	80041ce <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001e6c:	4b37      	ldr	r3, [pc, #220]	; (8001f4c <HW_TS_Stop+0xfc>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	22ca      	movs	r2, #202	; 0xca
 8001e74:	625a      	str	r2, [r3, #36]	; 0x24
 8001e76:	4b35      	ldr	r3, [pc, #212]	; (8001f4c <HW_TS_Stop+0xfc>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2253      	movs	r2, #83	; 0x53
 8001e7e:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001e80:	79fa      	ldrb	r2, [r7, #7]
 8001e82:	4933      	ldr	r1, [pc, #204]	; (8001f50 <HW_TS_Stop+0x100>)
 8001e84:	4613      	mov	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4413      	add	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	440b      	add	r3, r1
 8001e8e:	330c      	adds	r3, #12
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d148      	bne.n	8001f2a <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff fbf1 	bl	8001684 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001ea2:	4b2c      	ldr	r3, [pc, #176]	; (8001f54 <HW_TS_Stop+0x104>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001ea8:	7cfb      	ldrb	r3, [r7, #19]
 8001eaa:	2b06      	cmp	r3, #6
 8001eac:	d135      	bne.n	8001f1a <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001eae:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <HW_TS_Stop+0x108>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eba:	d108      	bne.n	8001ece <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001ebc:	bf00      	nop
 8001ebe:	4b23      	ldr	r3, [pc, #140]	; (8001f4c <HW_TS_Stop+0xfc>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f7      	bne.n	8001ebe <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001ece:	4b1f      	ldr	r3, [pc, #124]	; (8001f4c <HW_TS_Stop+0xfc>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <HW_TS_Stop+0xfc>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ee0:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001ee2:	bf00      	nop
 8001ee4:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <HW_TS_Stop+0xfc>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f7      	beq.n	8001ee4 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001ef4:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <HW_TS_Stop+0xfc>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <HW_TS_Stop+0xfc>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001f08:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001f0a:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <HW_TS_Stop+0x10c>)
 8001f0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f10:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001f12:	2003      	movs	r0, #3
 8001f14:	f002 f983 	bl	800421e <HAL_NVIC_ClearPendingIRQ>
 8001f18:	e007      	b.n	8001f2a <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001f1a:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <HW_TS_Stop+0x110>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	7cfa      	ldrb	r2, [r7, #19]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d001      	beq.n	8001f2a <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8001f26:	f7ff fccf 	bl	80018c8 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <HW_TS_Stop+0xfc>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	22ff      	movs	r2, #255	; 0xff
 8001f32:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001f34:	2003      	movs	r0, #3
 8001f36:	f002 f93c 	bl	80041b2 <HAL_NVIC_EnableIRQ>
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001f44:	bf00      	nop
}
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20000254 	.word	0x20000254
 8001f50:	2000005c 	.word	0x2000005c
 8001f54:	200000ec 	.word	0x200000ec
 8001f58:	40002800 	.word	0x40002800
 8001f5c:	58000800 	.word	0x58000800
 8001f60:	200000ed 	.word	0x200000ed

08001f64 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	6039      	str	r1, [r7, #0]
 8001f6e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001f70:	79fa      	ldrb	r2, [r7, #7]
 8001f72:	493b      	ldr	r1, [pc, #236]	; (8002060 <HW_TS_Start+0xfc>)
 8001f74:	4613      	mov	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4413      	add	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	440b      	add	r3, r1
 8001f7e:	330c      	adds	r3, #12
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d103      	bne.n	8001f90 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff ff60 	bl	8001e50 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f90:	f3ef 8310 	mrs	r3, PRIMASK
 8001f94:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f96:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001f98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f9a:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001f9c:	2003      	movs	r0, #3
 8001f9e:	f002 f916 	bl	80041ce <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001fa2:	4b30      	ldr	r3, [pc, #192]	; (8002064 <HW_TS_Start+0x100>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	22ca      	movs	r2, #202	; 0xca
 8001faa:	625a      	str	r2, [r3, #36]	; 0x24
 8001fac:	4b2d      	ldr	r3, [pc, #180]	; (8002064 <HW_TS_Start+0x100>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2253      	movs	r2, #83	; 0x53
 8001fb4:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001fb6:	79fa      	ldrb	r2, [r7, #7]
 8001fb8:	4929      	ldr	r1, [pc, #164]	; (8002060 <HW_TS_Start+0xfc>)
 8001fba:	4613      	mov	r3, r2
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	4413      	add	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	440b      	add	r3, r1
 8001fc4:	330c      	adds	r3, #12
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001fca:	79fa      	ldrb	r2, [r7, #7]
 8001fcc:	4924      	ldr	r1, [pc, #144]	; (8002060 <HW_TS_Start+0xfc>)
 8001fce:	4613      	mov	r3, r2
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	4413      	add	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	440b      	add	r3, r1
 8001fd8:	3308      	adds	r3, #8
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001fde:	79fa      	ldrb	r2, [r7, #7]
 8001fe0:	491f      	ldr	r1, [pc, #124]	; (8002060 <HW_TS_Start+0xfc>)
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	440b      	add	r3, r1
 8001fec:	3304      	adds	r3, #4
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fa9b 	bl	8001530 <linkTimer>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <HW_TS_Start+0x104>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002004:	4b19      	ldr	r3, [pc, #100]	; (800206c <HW_TS_Start+0x108>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	7c7a      	ldrb	r2, [r7, #17]
 800200c:	429a      	cmp	r2, r3
 800200e:	d002      	beq.n	8002016 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8002010:	f7ff fc5a 	bl	80018c8 <RescheduleTimerList>
 8002014:	e013      	b.n	800203e <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002016:	79fa      	ldrb	r2, [r7, #7]
 8002018:	4911      	ldr	r1, [pc, #68]	; (8002060 <HW_TS_Start+0xfc>)
 800201a:	4613      	mov	r3, r2
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	4413      	add	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	440b      	add	r3, r1
 8002024:	3308      	adds	r3, #8
 8002026:	6819      	ldr	r1, [r3, #0]
 8002028:	8a7b      	ldrh	r3, [r7, #18]
 800202a:	79fa      	ldrb	r2, [r7, #7]
 800202c:	1ac9      	subs	r1, r1, r3
 800202e:	480c      	ldr	r0, [pc, #48]	; (8002060 <HW_TS_Start+0xfc>)
 8002030:	4613      	mov	r3, r2
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	4413      	add	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4403      	add	r3, r0
 800203a:	3308      	adds	r3, #8
 800203c:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <HW_TS_Start+0x100>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	22ff      	movs	r2, #255	; 0xff
 8002046:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002048:	2003      	movs	r0, #3
 800204a:	f002 f8b2 	bl	80041b2 <HAL_NVIC_EnableIRQ>
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002058:	bf00      	nop
}
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	2000005c 	.word	0x2000005c
 8002064:	20000254 	.word	0x20000254
 8002068:	200000ec 	.word	0x200000ec
 800206c:	200000ed 	.word	0x200000ed

08002070 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	460b      	mov	r3, r1
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4798      	blx	r3

  return;
 8002082:	bf00      	nop
}
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <LL_AHB2_GRP1_EnableClock>:
{
 800208a:	b480      	push	{r7}
 800208c:	b085      	sub	sp, #20
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002096:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002098:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4313      	orrs	r3, r2
 80020a0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4013      	ands	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020ae:	68fb      	ldr	r3, [r7, #12]
}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80020c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80020d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4013      	ands	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020e0:	68fb      	ldr	r3, [r7, #12]
}
 80020e2:	bf00      	nop
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80020f4:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <MX_I2C1_Init+0x74>)
 80020f6:	4a1c      	ldr	r2, [pc, #112]	; (8002168 <MX_I2C1_Init+0x78>)
 80020f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 80020fa:	4b1a      	ldr	r3, [pc, #104]	; (8002164 <MX_I2C1_Init+0x74>)
 80020fc:	4a1b      	ldr	r2, [pc, #108]	; (800216c <MX_I2C1_Init+0x7c>)
 80020fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002100:	4b18      	ldr	r3, [pc, #96]	; (8002164 <MX_I2C1_Init+0x74>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002106:	4b17      	ldr	r3, [pc, #92]	; (8002164 <MX_I2C1_Init+0x74>)
 8002108:	2201      	movs	r2, #1
 800210a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800210c:	4b15      	ldr	r3, [pc, #84]	; (8002164 <MX_I2C1_Init+0x74>)
 800210e:	2200      	movs	r2, #0
 8002110:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002112:	4b14      	ldr	r3, [pc, #80]	; (8002164 <MX_I2C1_Init+0x74>)
 8002114:	2200      	movs	r2, #0
 8002116:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002118:	4b12      	ldr	r3, [pc, #72]	; (8002164 <MX_I2C1_Init+0x74>)
 800211a:	2200      	movs	r2, #0
 800211c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800211e:	4b11      	ldr	r3, [pc, #68]	; (8002164 <MX_I2C1_Init+0x74>)
 8002120:	2200      	movs	r2, #0
 8002122:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002124:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <MX_I2C1_Init+0x74>)
 8002126:	2200      	movs	r2, #0
 8002128:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800212a:	480e      	ldr	r0, [pc, #56]	; (8002164 <MX_I2C1_Init+0x74>)
 800212c:	f002 fa4c 	bl	80045c8 <HAL_I2C_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002136:	f000 fead 	bl	8002e94 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800213a:	2100      	movs	r1, #0
 800213c:	4809      	ldr	r0, [pc, #36]	; (8002164 <MX_I2C1_Init+0x74>)
 800213e:	f002 fe9d 	bl	8004e7c <HAL_I2CEx_ConfigAnalogFilter>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002148:	f000 fea4 	bl	8002e94 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800214c:	2100      	movs	r1, #0
 800214e:	4805      	ldr	r0, [pc, #20]	; (8002164 <MX_I2C1_Init+0x74>)
 8002150:	f002 fedf 	bl	8004f12 <HAL_I2CEx_ConfigDigitalFilter>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800215a:	f000 fe9b 	bl	8002e94 <Error_Handler>
  }

}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	2000077c 	.word	0x2000077c
 8002168:	40005400 	.word	0x40005400
 800216c:	00300f38 	.word	0x00300f38

08002170 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8002174:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <MX_I2C3_Init+0x74>)
 8002176:	4a1c      	ldr	r2, [pc, #112]	; (80021e8 <MX_I2C3_Init+0x78>)
 8002178:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00300F38;
 800217a:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <MX_I2C3_Init+0x74>)
 800217c:	4a1b      	ldr	r2, [pc, #108]	; (80021ec <MX_I2C3_Init+0x7c>)
 800217e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002180:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <MX_I2C3_Init+0x74>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002186:	4b17      	ldr	r3, [pc, #92]	; (80021e4 <MX_I2C3_Init+0x74>)
 8002188:	2201      	movs	r2, #1
 800218a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800218c:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <MX_I2C3_Init+0x74>)
 800218e:	2200      	movs	r2, #0
 8002190:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002192:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <MX_I2C3_Init+0x74>)
 8002194:	2200      	movs	r2, #0
 8002196:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002198:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <MX_I2C3_Init+0x74>)
 800219a:	2200      	movs	r2, #0
 800219c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <MX_I2C3_Init+0x74>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021a4:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <MX_I2C3_Init+0x74>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80021aa:	480e      	ldr	r0, [pc, #56]	; (80021e4 <MX_I2C3_Init+0x74>)
 80021ac:	f002 fa0c 	bl	80045c8 <HAL_I2C_Init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80021b6:	f000 fe6d 	bl	8002e94 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021ba:	2100      	movs	r1, #0
 80021bc:	4809      	ldr	r0, [pc, #36]	; (80021e4 <MX_I2C3_Init+0x74>)
 80021be:	f002 fe5d 	bl	8004e7c <HAL_I2CEx_ConfigAnalogFilter>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80021c8:	f000 fe64 	bl	8002e94 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80021cc:	2100      	movs	r1, #0
 80021ce:	4805      	ldr	r0, [pc, #20]	; (80021e4 <MX_I2C3_Init+0x74>)
 80021d0:	f002 fe9f 	bl	8004f12 <HAL_I2CEx_ConfigDigitalFilter>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80021da:	f000 fe5b 	bl	8002e94 <Error_Handler>
  }

}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000730 	.word	0x20000730
 80021e8:	40005c00 	.word	0x40005c00
 80021ec:	00300f38 	.word	0x00300f38

080021f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 030c 	add.w	r3, r7, #12
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a1d      	ldr	r2, [pc, #116]	; (8002284 <HAL_I2C_MspInit+0x94>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d118      	bne.n	8002244 <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002212:	2002      	movs	r0, #2
 8002214:	f7ff ff39 	bl	800208a <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002218:	f44f 7340 	mov.w	r3, #768	; 0x300
 800221c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800221e:	2312      	movs	r3, #18
 8002220:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002222:	2301      	movs	r3, #1
 8002224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	2300      	movs	r3, #0
 8002228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800222a:	2304      	movs	r3, #4
 800222c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222e:	f107 030c 	add.w	r3, r7, #12
 8002232:	4619      	mov	r1, r3
 8002234:	4814      	ldr	r0, [pc, #80]	; (8002288 <HAL_I2C_MspInit+0x98>)
 8002236:	f002 f801 	bl	800423c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800223a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800223e:	f7ff ff3d 	bl	80020bc <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002242:	e01b      	b.n	800227c <HAL_I2C_MspInit+0x8c>
  else if(i2cHandle->Instance==I2C3)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a10      	ldr	r2, [pc, #64]	; (800228c <HAL_I2C_MspInit+0x9c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d116      	bne.n	800227c <HAL_I2C_MspInit+0x8c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800224e:	2004      	movs	r0, #4
 8002250:	f7ff ff1b 	bl	800208a <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002254:	2303      	movs	r3, #3
 8002256:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002258:	2312      	movs	r3, #18
 800225a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800225c:	2301      	movs	r3, #1
 800225e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	2300      	movs	r3, #0
 8002262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002264:	2304      	movs	r3, #4
 8002266:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002268:	f107 030c 	add.w	r3, r7, #12
 800226c:	4619      	mov	r1, r3
 800226e:	4808      	ldr	r0, [pc, #32]	; (8002290 <HAL_I2C_MspInit+0xa0>)
 8002270:	f001 ffe4 	bl	800423c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002274:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002278:	f7ff ff20 	bl	80020bc <LL_APB1_GRP1_EnableClock>
}
 800227c:	bf00      	nop
 800227e:	3720      	adds	r7, #32
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40005400 	.word	0x40005400
 8002288:	48000400 	.word	0x48000400
 800228c:	40005c00 	.word	0x40005c00
 8002290:	48000800 	.word	0x48000800

08002294 <LL_RCC_LSE_SetDriveCapability>:
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800229c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a4:	f023 0218 	bic.w	r2, r3, #24
 80022a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022c6:	f001 fd7b 	bl	8003dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022ca:	f000 f875 	bl	80023b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022ce:	f7fe ffbd 	bl	800124c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80022d2:	f001 fc37 	bl	8003b44 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80022d6:	f001 fce3 	bl	8003ca0 <MX_USB_PCD_Init>
  MX_RF_Init();
 80022da:	f000 fde2 	bl	8002ea2 <MX_RF_Init>
  MX_RTC_Init();
 80022de:	f000 fdf9 	bl	8002ed4 <MX_RTC_Init>
  MX_I2C3_Init();
 80022e2:	f7ff ff45 	bl	8002170 <MX_I2C3_Init>
  MX_SPI1_Init();
 80022e6:	f000 fe7b 	bl	8002fe0 <MX_SPI1_Init>
  MX_SPI2_Init();
 80022ea:	f000 feb7 	bl	800305c <MX_SPI2_Init>
  MX_TIM16_Init();
 80022ee:	f001 fbb3 	bl	8003a58 <MX_TIM16_Init>
  MX_I2C1_Init();
 80022f2:	f7ff fefd 	bl	80020f0 <MX_I2C1_Init>
  //ACC Config

  /*
   * LIS3DH
   * */
  LIS3DH_ReadIO(acc1_1, WHO_AM_I, &WAI_LIS3DH_1, 1);
 80022f6:	4a24      	ldr	r2, [pc, #144]	; (8002388 <main+0xc8>)
 80022f8:	2301      	movs	r3, #1
 80022fa:	9301      	str	r3, [sp, #4]
 80022fc:	4b23      	ldr	r3, [pc, #140]	; (800238c <main+0xcc>)
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	230f      	movs	r3, #15
 8002302:	ca07      	ldmia	r2, {r0, r1, r2}
 8002304:	f7fe f927 	bl	8000556 <LIS3DH_ReadIO>
  LIS3DH_Init(acc1_1, &myAccConfigDef);
 8002308:	4a1f      	ldr	r2, [pc, #124]	; (8002388 <main+0xc8>)
 800230a:	4b21      	ldr	r3, [pc, #132]	; (8002390 <main+0xd0>)
 800230c:	ca07      	ldmia	r2, {r0, r1, r2}
 800230e:	f7fe f957 	bl	80005c0 <LIS3DH_Init>

  LIS3DH_ReadIO(acc1_2, WHO_AM_I, &WAI_LIS3DH_2, 1);
 8002312:	4a20      	ldr	r2, [pc, #128]	; (8002394 <main+0xd4>)
 8002314:	2301      	movs	r3, #1
 8002316:	9301      	str	r3, [sp, #4]
 8002318:	4b1f      	ldr	r3, [pc, #124]	; (8002398 <main+0xd8>)
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	230f      	movs	r3, #15
 800231e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002320:	f7fe f919 	bl	8000556 <LIS3DH_ReadIO>
  LIS3DH_Init(acc1_2, &myAccConfigDef);
 8002324:	4a1b      	ldr	r2, [pc, #108]	; (8002394 <main+0xd4>)
 8002326:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <main+0xd0>)
 8002328:	ca07      	ldmia	r2, {r0, r1, r2}
 800232a:	f7fe f949 	bl	80005c0 <LIS3DH_Init>

  /*
   * MPU9250
   * */

   readByte(acc2_1, WHO_AM_I_MPU9250, &WAI_MPU9250, 1);
 800232e:	4a1b      	ldr	r2, [pc, #108]	; (800239c <main+0xdc>)
 8002330:	2301      	movs	r3, #1
 8002332:	9301      	str	r3, [sp, #4]
 8002334:	4b1a      	ldr	r3, [pc, #104]	; (80023a0 <main+0xe0>)
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	2375      	movs	r3, #117	; 0x75
 800233a:	ca07      	ldmia	r2, {r0, r1, r2}
 800233c:	f7fe fd63 	bl	8000e06 <readByte>

   initMPU9250(acc2_1);
 8002340:	4b16      	ldr	r3, [pc, #88]	; (800239c <main+0xdc>)
 8002342:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002346:	f7fe fdc3 	bl	8000ed0 <initMPU9250>

  /*
   * MAX30100
   * */

   read_byte(reg, &ID_MAX30100);
 800234a:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <main+0xe4>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	4916      	ldr	r1, [pc, #88]	; (80023a8 <main+0xe8>)
 8002350:	4618      	mov	r0, r3
 8002352:	f7fe fd15 	bl	8000d80 <read_byte>

   begin();
 8002356:	f7fe fb7f 	bl	8000a58 <begin>

   UTIL_SEQ_RegTask( 1<< READ_ACC_TASK, UTIL_SEQ_RFU, read_acc );
 800235a:	4a14      	ldr	r2, [pc, #80]	; (80023ac <main+0xec>)
 800235c:	2100      	movs	r1, #0
 800235e:	2010      	movs	r0, #16
 8002360:	f001 f89a 	bl	8003498 <UTIL_SEQ_RegTask>
   UTIL_SEQ_RegTask( 1<< READ_FSR_TASK, UTIL_SEQ_RFU, read_fsr );
 8002364:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <main+0xf0>)
 8002366:	2100      	movs	r1, #0
 8002368:	2020      	movs	r0, #32
 800236a:	f001 f895 	bl	8003498 <UTIL_SEQ_RegTask>
   UTIL_SEQ_RegTask( 1<< READ_PPG_TASK, UTIL_SEQ_RFU, read_ppg );
 800236e:	4a11      	ldr	r2, [pc, #68]	; (80023b4 <main+0xf4>)
 8002370:	2100      	movs	r1, #0
 8002372:	2040      	movs	r0, #64	; 0x40
 8002374:	f001 f890 	bl	8003498 <UTIL_SEQ_RegTask>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */  
  APPE_Init();
 8002378:	f7fe feb0 	bl	80010dc <APPE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800237c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002380:	f000 ffae 	bl	80032e0 <UTIL_SEQ_Run>
 8002384:	e7fa      	b.n	800237c <main+0xbc>
 8002386:	bf00      	nop
 8002388:	20000010 	.word	0x20000010
 800238c:	2000025e 	.word	0x2000025e
 8002390:	20000008 	.word	0x20000008
 8002394:	2000001c 	.word	0x2000001c
 8002398:	2000025f 	.word	0x2000025f
 800239c:	20000028 	.word	0x20000028
 80023a0:	20000260 	.word	0x20000260
 80023a4:	20000034 	.word	0x20000034
 80023a8:	20000261 	.word	0x20000261
 80023ac:	080025c5 	.word	0x080025c5
 80023b0:	08002519 	.word	0x08002519
 80023b4:	080027e5 	.word	0x080027e5

080023b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b0ae      	sub	sp, #184	; 0xb8
 80023bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80023c2:	2248      	movs	r2, #72	; 0x48
 80023c4:	2100      	movs	r1, #0
 80023c6:	4618      	mov	r0, r3
 80023c8:	f00a f8f1 	bl	800c5ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
 80023dc:	615a      	str	r2, [r3, #20]
 80023de:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023e0:	1d3b      	adds	r3, r7, #4
 80023e2:	2250      	movs	r2, #80	; 0x50
 80023e4:	2100      	movs	r1, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f00a f8e1 	bl	800c5ae <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80023ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023fa:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80023fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	f023 0303 	bic.w	r3, r3, #3
 8002406:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002410:	2000      	movs	r0, #0
 8002412:	f7ff ff3f 	bl	8002294 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002416:	4b3f      	ldr	r3, [pc, #252]	; (8002514 <SystemClock_Config+0x15c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800241e:	4a3d      	ldr	r2, [pc, #244]	; (8002514 <SystemClock_Config+0x15c>)
 8002420:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	4b3b      	ldr	r3, [pc, #236]	; (8002514 <SystemClock_Config+0x15c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800242e:	603b      	str	r3, [r7, #0]
 8002430:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002432:	2327      	movs	r3, #39	; 0x27
 8002434:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002436:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800243a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800243c:	2301      	movs	r3, #1
 800243e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002440:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002444:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002446:	2301      	movs	r3, #1
 8002448:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800244c:	2340      	movs	r3, #64	; 0x40
 800244e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002452:	2300      	movs	r3, #0
 8002454:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002458:	2360      	movs	r3, #96	; 0x60
 800245a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800245e:	2300      	movs	r3, #0
 8002460:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002464:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002468:	4618      	mov	r0, r3
 800246a:	f003 fa35 	bl	80058d8 <HAL_RCC_OscConfig>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002474:	f000 fd0e 	bl	8002e94 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002478:	236f      	movs	r3, #111	; 0x6f
 800247a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800247c:	2302      	movs	r3, #2
 800247e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002480:	2300      	movs	r3, #0
 8002482:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002484:	2300      	movs	r3, #0
 8002486:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002488:	2300      	movs	r3, #0
 800248a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800248c:	2300      	movs	r3, #0
 800248e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002490:	2300      	movs	r3, #0
 8002492:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002494:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002498:	2101      	movs	r1, #1
 800249a:	4618      	mov	r0, r3
 800249c:	f003 fd7a 	bl	8005f94 <HAL_RCC_ClockConfig>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80024a6:	f000 fcf5 	bl	8002e94 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80024aa:	f643 130d 	movw	r3, #14605	; 0x390d
 80024ae:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80024b0:	2318      	movs	r3, #24
 80024b2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80024b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024b8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80024ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024be:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80024c0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80024c4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80024c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024ca:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80024cc:	2300      	movs	r3, #0
 80024ce:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80024d0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80024d6:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80024da:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80024dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80024e0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80024e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024e6:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80024e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024ec:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80024ee:	2302      	movs	r3, #2
 80024f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024f6:	1d3b      	adds	r3, r7, #4
 80024f8:	4618      	mov	r0, r3
 80024fa:	f004 f995 	bl	8006828 <HAL_RCCEx_PeriphCLKConfig>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <SystemClock_Config+0x150>
  {
    Error_Handler();
 8002504:	f000 fcc6 	bl	8002e94 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002508:	f004 fb03 	bl	8006b12 <HAL_RCCEx_EnableMSIPLLMode>
}
 800250c:	bf00      	nop
 800250e:	37b8      	adds	r7, #184	; 0xb8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	58000400 	.word	0x58000400

08002518 <read_fsr>:

/* USER CODE BEGIN 4 */
void read_fsr(void){
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af02      	add	r7, sp, #8
	/*
	 * ADS1115
	 * */
	ADSwrite[0] = 0x01;
 800251e:	4b25      	ldr	r3, [pc, #148]	; (80025b4 <read_fsr+0x9c>)
 8002520:	2201      	movs	r2, #1
 8002522:	701a      	strb	r2, [r3, #0]
	ADSwrite[1] = 0xC1;// 11000001
 8002524:	4b23      	ldr	r3, [pc, #140]	; (80025b4 <read_fsr+0x9c>)
 8002526:	22c1      	movs	r2, #193	; 0xc1
 8002528:	705a      	strb	r2, [r3, #1]
	ADSwrite[2] = 0x83; // 10000011
 800252a:	4b22      	ldr	r3, [pc, #136]	; (80025b4 <read_fsr+0x9c>)
 800252c:	2283      	movs	r2, #131	; 0x83
 800252e:	709a      	strb	r2, [r3, #2]
	HAL_I2C_Master_Transmit(&hi2c3, ADS1115_ADDRESS<<1,ADSwrite,3,100);
 8002530:	2364      	movs	r3, #100	; 0x64
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	2303      	movs	r3, #3
 8002536:	4a1f      	ldr	r2, [pc, #124]	; (80025b4 <read_fsr+0x9c>)
 8002538:	2190      	movs	r1, #144	; 0x90
 800253a:	481f      	ldr	r0, [pc, #124]	; (80025b8 <read_fsr+0xa0>)
 800253c:	f002 f8d4 	bl	80046e8 <HAL_I2C_Master_Transmit>
	ADSwrite[0] = 0x00;
 8002540:	4b1c      	ldr	r3, [pc, #112]	; (80025b4 <read_fsr+0x9c>)
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c3, ADS1115_ADDRESS<<1,ADSwrite,1,100);
 8002546:	2364      	movs	r3, #100	; 0x64
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	2301      	movs	r3, #1
 800254c:	4a19      	ldr	r2, [pc, #100]	; (80025b4 <read_fsr+0x9c>)
 800254e:	2190      	movs	r1, #144	; 0x90
 8002550:	4819      	ldr	r0, [pc, #100]	; (80025b8 <read_fsr+0xa0>)
 8002552:	f002 f8c9 	bl	80046e8 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8002556:	2001      	movs	r0, #1
 8002558:	f001 fcb6 	bl	8003ec8 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c3, ADS1115_ADDRESS<<1,ADSwrite,2,100);
 800255c:	2364      	movs	r3, #100	; 0x64
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	2302      	movs	r3, #2
 8002562:	4a14      	ldr	r2, [pc, #80]	; (80025b4 <read_fsr+0x9c>)
 8002564:	2190      	movs	r1, #144	; 0x90
 8002566:	4814      	ldr	r0, [pc, #80]	; (80025b8 <read_fsr+0xa0>)
 8002568:	f002 f9b2 	bl	80048d0 <HAL_I2C_Master_Receive>

	ble_buff_FSR[0+counter_fsr] = ADSwrite[1];
 800256c:	4b13      	ldr	r3, [pc, #76]	; (80025bc <read_fsr+0xa4>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	461a      	mov	r2, r3
 8002572:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <read_fsr+0x9c>)
 8002574:	7859      	ldrb	r1, [r3, #1]
 8002576:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <read_fsr+0xa8>)
 8002578:	5499      	strb	r1, [r3, r2]
	ble_buff_FSR[1+counter_fsr] = ADSwrite[0];
 800257a:	4b10      	ldr	r3, [pc, #64]	; (80025bc <read_fsr+0xa4>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	3301      	adds	r3, #1
 8002580:	4a0c      	ldr	r2, [pc, #48]	; (80025b4 <read_fsr+0x9c>)
 8002582:	7811      	ldrb	r1, [r2, #0]
 8002584:	4a0e      	ldr	r2, [pc, #56]	; (80025c0 <read_fsr+0xa8>)
 8002586:	54d1      	strb	r1, [r2, r3]

	if(counter_fsr == 18){
 8002588:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <read_fsr+0xa4>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b12      	cmp	r3, #18
 800258e:	d108      	bne.n	80025a2 <read_fsr+0x8a>
		counter_fsr=0;
 8002590:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <read_fsr+0xa4>)
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << SEND_FSR_DATA_BLE_TASK, CFG_SCH_PRIO_1);
 8002596:	2101      	movs	r1, #1
 8002598:	f44f 7080 	mov.w	r0, #256	; 0x100
 800259c:	f000 ff9c 	bl	80034d8 <UTIL_SEQ_SetTask>
		counter_fsr+=2;
	/*
	 * BUFFER --> [0:19]
	 * */
	//HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
}
 80025a0:	e005      	b.n	80025ae <read_fsr+0x96>
		counter_fsr+=2;
 80025a2:	4b06      	ldr	r3, [pc, #24]	; (80025bc <read_fsr+0xa4>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	3302      	adds	r3, #2
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	4b04      	ldr	r3, [pc, #16]	; (80025bc <read_fsr+0xa4>)
 80025ac:	701a      	strb	r2, [r3, #0]
}
 80025ae:	bf00      	nop
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	200007e0 	.word	0x200007e0
 80025b8:	20000730 	.word	0x20000730
 80025bc:	200005f1 	.word	0x200005f1
 80025c0:	200005d8 	.word	0x200005d8

080025c4 <read_acc>:

void read_acc(void){
 80025c4:	b590      	push	{r4, r7, lr}
 80025c6:	b087      	sub	sp, #28
 80025c8:	af02      	add	r7, sp, #8

	acc_data_raw[0] = LIS3DH_GetDataRaw(acc1_1, HIGH_RESOLUTION);
 80025ca:	4c7f      	ldr	r4, [pc, #508]	; (80027c8 <read_acc+0x204>)
 80025cc:	4638      	mov	r0, r7
 80025ce:	4b7f      	ldr	r3, [pc, #508]	; (80027cc <read_acc+0x208>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	9200      	str	r2, [sp, #0]
 80025d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025d6:	f7fe f94b 	bl	8000870 <LIS3DH_GetDataRaw>
 80025da:	4622      	mov	r2, r4
 80025dc:	463b      	mov	r3, r7
 80025de:	6819      	ldr	r1, [r3, #0]
 80025e0:	6011      	str	r1, [r2, #0]
 80025e2:	889b      	ldrh	r3, [r3, #4]
 80025e4:	8093      	strh	r3, [r2, #4]
	acc_data_raw[1] = LIS3DH_GetDataRaw(acc1_2, HIGH_RESOLUTION);
 80025e6:	4c78      	ldr	r4, [pc, #480]	; (80027c8 <read_acc+0x204>)
 80025e8:	4638      	mov	r0, r7
 80025ea:	4b79      	ldr	r3, [pc, #484]	; (80027d0 <read_acc+0x20c>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	9200      	str	r2, [sp, #0]
 80025f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025f2:	f7fe f93d 	bl	8000870 <LIS3DH_GetDataRaw>
 80025f6:	1da3      	adds	r3, r4, #6
 80025f8:	463a      	mov	r2, r7
 80025fa:	6811      	ldr	r1, [r2, #0]
 80025fc:	6019      	str	r1, [r3, #0]
 80025fe:	8892      	ldrh	r2, [r2, #4]
 8002600:	809a      	strh	r2, [r3, #4]
	acc_data_raw[2] = readAccelData(acc2_1);
 8002602:	4c71      	ldr	r4, [pc, #452]	; (80027c8 <read_acc+0x204>)
 8002604:	4638      	mov	r0, r7
 8002606:	4b73      	ldr	r3, [pc, #460]	; (80027d4 <read_acc+0x210>)
 8002608:	cb0e      	ldmia	r3, {r1, r2, r3}
 800260a:	f7fe fc28 	bl	8000e5e <readAccelData>
 800260e:	f104 030c 	add.w	r3, r4, #12
 8002612:	463a      	mov	r2, r7
 8002614:	6811      	ldr	r1, [r2, #0]
 8002616:	6019      	str	r1, [r3, #0]
 8002618:	8892      	ldrh	r2, [r2, #4]
 800261a:	809a      	strh	r2, [r3, #4]

	for(int i=0;i<4;i++){
 800261c:	2300      	movs	r3, #0
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	e090      	b.n	8002744 <read_acc+0x180>
		//X
		ble_buff_ACC[i][0+counter_acc] = (acc_data_raw[i].x & 0x00FF);
 8002622:	4969      	ldr	r1, [pc, #420]	; (80027c8 <read_acc+0x204>)
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	4613      	mov	r3, r2
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	4413      	add	r3, r2
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	440b      	add	r3, r1
 8002630:	881a      	ldrh	r2, [r3, #0]
 8002632:	4b69      	ldr	r3, [pc, #420]	; (80027d8 <read_acc+0x214>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	461c      	mov	r4, r3
 8002638:	b2d0      	uxtb	r0, r2
 800263a:	4968      	ldr	r1, [pc, #416]	; (80027dc <read_acc+0x218>)
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	4613      	mov	r3, r2
 8002640:	011b      	lsls	r3, r3, #4
 8002642:	1a9b      	subs	r3, r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	440b      	add	r3, r1
 8002648:	4423      	add	r3, r4
 800264a:	4602      	mov	r2, r0
 800264c:	701a      	strb	r2, [r3, #0]
		ble_buff_ACC[i][1+counter_acc] = ((acc_data_raw[i].x >> 8) & 0x00FF);
 800264e:	495e      	ldr	r1, [pc, #376]	; (80027c8 <read_acc+0x204>)
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	4613      	mov	r3, r2
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	4413      	add	r3, r2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	440b      	add	r3, r1
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	0a1b      	lsrs	r3, r3, #8
 8002660:	b29a      	uxth	r2, r3
 8002662:	4b5d      	ldr	r3, [pc, #372]	; (80027d8 <read_acc+0x214>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	1c59      	adds	r1, r3, #1
 8002668:	b2d4      	uxtb	r4, r2
 800266a:	485c      	ldr	r0, [pc, #368]	; (80027dc <read_acc+0x218>)
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	4613      	mov	r3, r2
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	1a9b      	subs	r3, r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	4403      	add	r3, r0
 8002678:	440b      	add	r3, r1
 800267a:	4622      	mov	r2, r4
 800267c:	701a      	strb	r2, [r3, #0]
		//Y
		ble_buff_ACC[i][2+counter_acc] = (acc_data_raw[i].y & 0x00FF);
 800267e:	4952      	ldr	r1, [pc, #328]	; (80027c8 <read_acc+0x204>)
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	4613      	mov	r3, r2
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	4413      	add	r3, r2
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	440b      	add	r3, r1
 800268c:	3302      	adds	r3, #2
 800268e:	881a      	ldrh	r2, [r3, #0]
 8002690:	4b51      	ldr	r3, [pc, #324]	; (80027d8 <read_acc+0x214>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	1c99      	adds	r1, r3, #2
 8002696:	b2d4      	uxtb	r4, r2
 8002698:	4850      	ldr	r0, [pc, #320]	; (80027dc <read_acc+0x218>)
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	4613      	mov	r3, r2
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	1a9b      	subs	r3, r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	4403      	add	r3, r0
 80026a6:	440b      	add	r3, r1
 80026a8:	4622      	mov	r2, r4
 80026aa:	701a      	strb	r2, [r3, #0]
		ble_buff_ACC[i][3+counter_acc] = ((acc_data_raw[i].y >> 8) & 0x00FF);
 80026ac:	4946      	ldr	r1, [pc, #280]	; (80027c8 <read_acc+0x204>)
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4613      	mov	r3, r2
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	4413      	add	r3, r2
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	440b      	add	r3, r1
 80026ba:	3302      	adds	r3, #2
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	0a1b      	lsrs	r3, r3, #8
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	4b45      	ldr	r3, [pc, #276]	; (80027d8 <read_acc+0x214>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	1cd9      	adds	r1, r3, #3
 80026c8:	b2d4      	uxtb	r4, r2
 80026ca:	4844      	ldr	r0, [pc, #272]	; (80027dc <read_acc+0x218>)
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	4613      	mov	r3, r2
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	1a9b      	subs	r3, r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4403      	add	r3, r0
 80026d8:	440b      	add	r3, r1
 80026da:	4622      	mov	r2, r4
 80026dc:	701a      	strb	r2, [r3, #0]
		//Z
		ble_buff_ACC[i][4+counter_acc] = (acc_data_raw[i].z & 0x00FF);
 80026de:	493a      	ldr	r1, [pc, #232]	; (80027c8 <read_acc+0x204>)
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	440b      	add	r3, r1
 80026ec:	3304      	adds	r3, #4
 80026ee:	881a      	ldrh	r2, [r3, #0]
 80026f0:	4b39      	ldr	r3, [pc, #228]	; (80027d8 <read_acc+0x214>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	1d19      	adds	r1, r3, #4
 80026f6:	b2d4      	uxtb	r4, r2
 80026f8:	4838      	ldr	r0, [pc, #224]	; (80027dc <read_acc+0x218>)
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4613      	mov	r3, r2
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	4403      	add	r3, r0
 8002706:	440b      	add	r3, r1
 8002708:	4622      	mov	r2, r4
 800270a:	701a      	strb	r2, [r3, #0]
		ble_buff_ACC[i][5+counter_acc] = ((acc_data_raw[i].z >> 8) & 0x00FF);
 800270c:	492e      	ldr	r1, [pc, #184]	; (80027c8 <read_acc+0x204>)
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4613      	mov	r3, r2
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	4413      	add	r3, r2
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	440b      	add	r3, r1
 800271a:	3304      	adds	r3, #4
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	0a1b      	lsrs	r3, r3, #8
 8002720:	b29a      	uxth	r2, r3
 8002722:	4b2d      	ldr	r3, [pc, #180]	; (80027d8 <read_acc+0x214>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	1d59      	adds	r1, r3, #5
 8002728:	b2d4      	uxtb	r4, r2
 800272a:	482c      	ldr	r0, [pc, #176]	; (80027dc <read_acc+0x218>)
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	4613      	mov	r3, r2
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	1a9b      	subs	r3, r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4403      	add	r3, r0
 8002738:	440b      	add	r3, r1
 800273a:	4622      	mov	r2, r4
 800273c:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<4;i++){
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	3301      	adds	r3, #1
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2b03      	cmp	r3, #3
 8002748:	f77f af6b 	ble.w	8002622 <read_acc+0x5e>
	}
	counter_acc+=6;
 800274c:	4b22      	ldr	r3, [pc, #136]	; (80027d8 <read_acc+0x214>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	3306      	adds	r3, #6
 8002752:	b2da      	uxtb	r2, r3
 8002754:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <read_acc+0x214>)
 8002756:	701a      	strb	r2, [r3, #0]

	if(counter_acc == 30){
 8002758:	4b1f      	ldr	r3, [pc, #124]	; (80027d8 <read_acc+0x214>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b1e      	cmp	r3, #30
 800275e:	d106      	bne.n	800276e <read_acc+0x1aa>
		// send first pack
		acc_pack_number = 0x01;
 8002760:	4b1f      	ldr	r3, [pc, #124]	; (80027e0 <read_acc+0x21c>)
 8002762:	2201      	movs	r2, #1
 8002764:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << SEND_ACC_DATA_BLE_TASK, CFG_SCH_PRIO_1);
 8002766:	2101      	movs	r1, #1
 8002768:	2080      	movs	r0, #128	; 0x80
 800276a:	f000 feb5 	bl	80034d8 <UTIL_SEQ_SetTask>
	}
	if(counter_acc == 60){
 800276e:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <read_acc+0x214>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b3c      	cmp	r3, #60	; 0x3c
 8002774:	d106      	bne.n	8002784 <read_acc+0x1c0>
		// send second pack
		acc_pack_number = 0x02;
 8002776:	4b1a      	ldr	r3, [pc, #104]	; (80027e0 <read_acc+0x21c>)
 8002778:	2202      	movs	r2, #2
 800277a:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << SEND_ACC_DATA_BLE_TASK, CFG_SCH_PRIO_1);
 800277c:	2101      	movs	r1, #1
 800277e:	2080      	movs	r0, #128	; 0x80
 8002780:	f000 feaa 	bl	80034d8 <UTIL_SEQ_SetTask>
	}
	if(counter_acc == 90){
 8002784:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <read_acc+0x214>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b5a      	cmp	r3, #90	; 0x5a
 800278a:	d106      	bne.n	800279a <read_acc+0x1d6>
		// send third pack
		acc_pack_number = 0x03;
 800278c:	4b14      	ldr	r3, [pc, #80]	; (80027e0 <read_acc+0x21c>)
 800278e:	2203      	movs	r2, #3
 8002790:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << SEND_ACC_DATA_BLE_TASK, CFG_SCH_PRIO_1);
 8002792:	2101      	movs	r1, #1
 8002794:	2080      	movs	r0, #128	; 0x80
 8002796:	f000 fe9f 	bl	80034d8 <UTIL_SEQ_SetTask>
	}
	if(counter_acc == 120){
 800279a:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <read_acc+0x214>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b78      	cmp	r3, #120	; 0x78
 80027a0:	d106      	bne.n	80027b0 <read_acc+0x1ec>
		// send fourth pack
		acc_pack_number = 0x04;
 80027a2:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <read_acc+0x21c>)
 80027a4:	2204      	movs	r2, #4
 80027a6:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << SEND_ACC_DATA_BLE_TASK, CFG_SCH_PRIO_1);
 80027a8:	2101      	movs	r1, #1
 80027aa:	2080      	movs	r0, #128	; 0x80
 80027ac:	f000 fe94 	bl	80034d8 <UTIL_SEQ_SetTask>
	}

	if(counter_acc == 120)
 80027b0:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <read_acc+0x214>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b78      	cmp	r3, #120	; 0x78
 80027b6:	d102      	bne.n	80027be <read_acc+0x1fa>
		counter_acc = 0;
 80027b8:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <read_acc+0x214>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	701a      	strb	r2, [r3, #0]

}
 80027be:	bf00      	nop
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd90      	pop	{r4, r7, pc}
 80027c6:	bf00      	nop
 80027c8:	200007c8 	.word	0x200007c8
 80027cc:	20000010 	.word	0x20000010
 80027d0:	2000001c 	.word	0x2000001c
 80027d4:	20000028 	.word	0x20000028
 80027d8:	200005ef 	.word	0x200005ef
 80027dc:	200003f8 	.word	0x200003f8
 80027e0:	200005f2 	.word	0x200005f2

080027e4 <read_ppg>:


void read_ppg(void){
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
	/*
	 * MAX30100
	 * */
	readFIFO(&RED, &IR);
 80027e8:	4935      	ldr	r1, [pc, #212]	; (80028c0 <read_ppg+0xdc>)
 80027ea:	4836      	ldr	r0, [pc, #216]	; (80028c4 <read_ppg+0xe0>)
 80027ec:	f7fe fa78 	bl	8000ce0 <readFIFO>

	ble_buff_PPG[0][0+counter_ppg] = (RED & 0x00FF);
 80027f0:	4b34      	ldr	r3, [pc, #208]	; (80028c4 <read_ppg+0xe0>)
 80027f2:	8819      	ldrh	r1, [r3, #0]
 80027f4:	4b34      	ldr	r3, [pc, #208]	; (80028c8 <read_ppg+0xe4>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	461a      	mov	r2, r3
 80027fa:	b2c9      	uxtb	r1, r1
 80027fc:	4b33      	ldr	r3, [pc, #204]	; (80028cc <read_ppg+0xe8>)
 80027fe:	5499      	strb	r1, [r3, r2]
	ble_buff_PPG[0][1+counter_ppg] = ((RED >> 8) & 0x00FF);
 8002800:	4b30      	ldr	r3, [pc, #192]	; (80028c4 <read_ppg+0xe0>)
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	0a1b      	lsrs	r3, r3, #8
 8002806:	b29a      	uxth	r2, r3
 8002808:	4b2f      	ldr	r3, [pc, #188]	; (80028c8 <read_ppg+0xe4>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	3301      	adds	r3, #1
 800280e:	b2d1      	uxtb	r1, r2
 8002810:	4a2e      	ldr	r2, [pc, #184]	; (80028cc <read_ppg+0xe8>)
 8002812:	54d1      	strb	r1, [r2, r3]

	ble_buff_PPG[1][0+counter_ppg] = (IR & 0x00FF);
 8002814:	4b2a      	ldr	r3, [pc, #168]	; (80028c0 <read_ppg+0xdc>)
 8002816:	881a      	ldrh	r2, [r3, #0]
 8002818:	4b2b      	ldr	r3, [pc, #172]	; (80028c8 <read_ppg+0xe4>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	4619      	mov	r1, r3
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	4b2a      	ldr	r3, [pc, #168]	; (80028cc <read_ppg+0xe8>)
 8002822:	440b      	add	r3, r1
 8002824:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	ble_buff_PPG[1][1+counter_ppg] = ((IR >> 8) & 0x00FF);
 8002828:	4b25      	ldr	r3, [pc, #148]	; (80028c0 <read_ppg+0xdc>)
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	0a1b      	lsrs	r3, r3, #8
 800282e:	b29a      	uxth	r2, r3
 8002830:	4b25      	ldr	r3, [pc, #148]	; (80028c8 <read_ppg+0xe4>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	3301      	adds	r3, #1
 8002836:	b2d1      	uxtb	r1, r2
 8002838:	4a24      	ldr	r2, [pc, #144]	; (80028cc <read_ppg+0xe8>)
 800283a:	4413      	add	r3, r2
 800283c:	460a      	mov	r2, r1
 800283e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

	counter_ppg+=2;
 8002842:	4b21      	ldr	r3, [pc, #132]	; (80028c8 <read_ppg+0xe4>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	3302      	adds	r3, #2
 8002848:	b2da      	uxtb	r2, r3
 800284a:	4b1f      	ldr	r3, [pc, #124]	; (80028c8 <read_ppg+0xe4>)
 800284c:	701a      	strb	r2, [r3, #0]

	if(counter_ppg == 50){
 800284e:	4b1e      	ldr	r3, [pc, #120]	; (80028c8 <read_ppg+0xe4>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b32      	cmp	r3, #50	; 0x32
 8002854:	d107      	bne.n	8002866 <read_ppg+0x82>
		// send first pack
		ppg_pack_number = 0x01;
 8002856:	4b1e      	ldr	r3, [pc, #120]	; (80028d0 <read_ppg+0xec>)
 8002858:	2201      	movs	r2, #1
 800285a:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << SEND_PPG_DATA_BLE_TASK, CFG_SCH_PRIO_1);
 800285c:	2101      	movs	r1, #1
 800285e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002862:	f000 fe39 	bl	80034d8 <UTIL_SEQ_SetTask>
	}
	if(counter_ppg == 100){
 8002866:	4b18      	ldr	r3, [pc, #96]	; (80028c8 <read_ppg+0xe4>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b64      	cmp	r3, #100	; 0x64
 800286c:	d107      	bne.n	800287e <read_ppg+0x9a>
		// send second pack
		ppg_pack_number = 0x02;
 800286e:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <read_ppg+0xec>)
 8002870:	2202      	movs	r2, #2
 8002872:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << SEND_PPG_DATA_BLE_TASK, CFG_SCH_PRIO_1);
 8002874:	2101      	movs	r1, #1
 8002876:	f44f 7000 	mov.w	r0, #512	; 0x200
 800287a:	f000 fe2d 	bl	80034d8 <UTIL_SEQ_SetTask>
	}
	if(counter_ppg == 150){
 800287e:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <read_ppg+0xe4>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b96      	cmp	r3, #150	; 0x96
 8002884:	d107      	bne.n	8002896 <read_ppg+0xb2>
		// send third pack
		ppg_pack_number = 0x03;
 8002886:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <read_ppg+0xec>)
 8002888:	2203      	movs	r2, #3
 800288a:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << SEND_PPG_DATA_BLE_TASK, CFG_SCH_PRIO_1);
 800288c:	2101      	movs	r1, #1
 800288e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002892:	f000 fe21 	bl	80034d8 <UTIL_SEQ_SetTask>
	}
	if(counter_ppg == 200){
 8002896:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <read_ppg+0xe4>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2bc8      	cmp	r3, #200	; 0xc8
 800289c:	d107      	bne.n	80028ae <read_ppg+0xca>
		// send fourth pack
		ppg_pack_number = 0x04;
 800289e:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <read_ppg+0xec>)
 80028a0:	2204      	movs	r2, #4
 80028a2:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << SEND_PPG_DATA_BLE_TASK, CFG_SCH_PRIO_1);
 80028a4:	2101      	movs	r1, #1
 80028a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80028aa:	f000 fe15 	bl	80034d8 <UTIL_SEQ_SetTask>
	}

	if(counter_ppg == 200)
 80028ae:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <read_ppg+0xe4>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2bc8      	cmp	r3, #200	; 0xc8
 80028b4:	d102      	bne.n	80028bc <read_ppg+0xd8>
		counter_ppg = 0;
 80028b6:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <read_ppg+0xe4>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	701a      	strb	r2, [r3, #0]

}
 80028bc:	bf00      	nop
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	20000262 	.word	0x20000262
 80028c4:	20000264 	.word	0x20000264
 80028c8:	200005f0 	.word	0x200005f0
 80028cc:	20000268 	.word	0x20000268
 80028d0:	200005f3 	.word	0x200005f3

080028d4 <prepare_fsr_ble_pack>:

void prepare_fsr_ble_pack(uint8_t* buff){
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]

	buff[0] = BLE_PACK_ID;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2228      	movs	r2, #40	; 0x28
 80028e0:	701a      	strb	r2, [r3, #0]
	buff[1] = BLE_FSR_PACK;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3301      	adds	r3, #1
 80028e6:	2201      	movs	r2, #1
 80028e8:	701a      	strb	r2, [r3, #0]
	buff[2] = 0x01;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3302      	adds	r3, #2
 80028ee:	2201      	movs	r2, #1
 80028f0:	701a      	strb	r2, [r3, #0]
	for(int i=3;i<23;i++)
 80028f2:	2303      	movs	r3, #3
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	e00a      	b.n	800290e <prepare_fsr_ble_pack+0x3a>
		buff[i] = ble_buff_FSR[i-3];
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1eda      	subs	r2, r3, #3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	440b      	add	r3, r1
 8002902:	4907      	ldr	r1, [pc, #28]	; (8002920 <prepare_fsr_ble_pack+0x4c>)
 8002904:	5c8a      	ldrb	r2, [r1, r2]
 8002906:	701a      	strb	r2, [r3, #0]
	for(int i=3;i<23;i++)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	3301      	adds	r3, #1
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2b16      	cmp	r3, #22
 8002912:	ddf1      	ble.n	80028f8 <prepare_fsr_ble_pack+0x24>

}
 8002914:	bf00      	nop
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	200005d8 	.word	0x200005d8

08002924 <prepare_acc_ble_pack>:

void prepare_acc_ble_pack(uint8_t* buff){
 8002924:	b580      	push	{r7, lr}
 8002926:	b0a6      	sub	sp, #152	; 0x98
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]

	uint8_t acc_buffer[123] = {0};
 800292c:	f107 0308 	add.w	r3, r7, #8
 8002930:	227b      	movs	r2, #123	; 0x7b
 8002932:	2100      	movs	r1, #0
 8002934:	4618      	mov	r0, r3
 8002936:	f009 fe3a 	bl	800c5ae <memset>

	if(acc_pack_number != 0x00){
 800293a:	4bb7      	ldr	r3, [pc, #732]	; (8002c18 <prepare_acc_ble_pack+0x2f4>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 8165 	beq.w	8002c0e <prepare_acc_ble_pack+0x2ea>
		switch(acc_pack_number){
 8002944:	4bb4      	ldr	r3, [pc, #720]	; (8002c18 <prepare_acc_ble_pack+0x2f4>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	3b01      	subs	r3, #1
 800294a:	2b03      	cmp	r3, #3
 800294c:	f200 8140 	bhi.w	8002bd0 <prepare_acc_ble_pack+0x2ac>
 8002950:	a201      	add	r2, pc, #4	; (adr r2, 8002958 <prepare_acc_ble_pack+0x34>)
 8002952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002956:	bf00      	nop
 8002958:	08002969 	.word	0x08002969
 800295c:	08002a03 	.word	0x08002a03
 8002960:	08002a9d 	.word	0x08002a9d
 8002964:	08002b37 	.word	0x08002b37
			case 0x01:
				acc_buffer[0] = BLE_PACK_ID;
 8002968:	2328      	movs	r3, #40	; 0x28
 800296a:	723b      	strb	r3, [r7, #8]
				acc_buffer[1] = BLE_ACC_PACK;
 800296c:	2302      	movs	r3, #2
 800296e:	727b      	strb	r3, [r7, #9]
				acc_buffer[2] = acc_pack_number;
 8002970:	4ba9      	ldr	r3, [pc, #676]	; (8002c18 <prepare_acc_ble_pack+0x2f4>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	72bb      	strb	r3, [r7, #10]
				for(int i=0;i<30;i++){
 8002976:	2300      	movs	r3, #0
 8002978:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800297c:	e03c      	b.n	80029f8 <prepare_acc_ble_pack+0xd4>
					acc_buffer[3 + i] = ble_buff_ACC[0][i];
 800297e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002982:	3303      	adds	r3, #3
 8002984:	49a5      	ldr	r1, [pc, #660]	; (8002c1c <prepare_acc_ble_pack+0x2f8>)
 8002986:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800298a:	440a      	add	r2, r1
 800298c:	7812      	ldrb	r2, [r2, #0]
 800298e:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002992:	440b      	add	r3, r1
 8002994:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[33 + i] = ble_buff_ACC[1][i];
 8002998:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800299c:	3321      	adds	r3, #33	; 0x21
 800299e:	499f      	ldr	r1, [pc, #636]	; (8002c1c <prepare_acc_ble_pack+0x2f8>)
 80029a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80029a4:	440a      	add	r2, r1
 80029a6:	3278      	adds	r2, #120	; 0x78
 80029a8:	7812      	ldrb	r2, [r2, #0]
 80029aa:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80029ae:	440b      	add	r3, r1
 80029b0:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[63 + i] = ble_buff_ACC[2][i];
 80029b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029b8:	333f      	adds	r3, #63	; 0x3f
 80029ba:	4998      	ldr	r1, [pc, #608]	; (8002c1c <prepare_acc_ble_pack+0x2f8>)
 80029bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80029c0:	440a      	add	r2, r1
 80029c2:	32f0      	adds	r2, #240	; 0xf0
 80029c4:	7812      	ldrb	r2, [r2, #0]
 80029c6:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80029ca:	440b      	add	r3, r1
 80029cc:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[93 + i] = ble_buff_ACC[3][i];
 80029d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029d4:	335d      	adds	r3, #93	; 0x5d
 80029d6:	4991      	ldr	r1, [pc, #580]	; (8002c1c <prepare_acc_ble_pack+0x2f8>)
 80029d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80029dc:	440a      	add	r2, r1
 80029de:	f502 72b4 	add.w	r2, r2, #360	; 0x168
 80029e2:	7812      	ldrb	r2, [r2, #0]
 80029e4:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80029e8:	440b      	add	r3, r1
 80029ea:	f803 2c90 	strb.w	r2, [r3, #-144]
				for(int i=0;i<30;i++){
 80029ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029f2:	3301      	adds	r3, #1
 80029f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80029f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029fc:	2b1d      	cmp	r3, #29
 80029fe:	ddbe      	ble.n	800297e <prepare_acc_ble_pack+0x5a>
				}
				break;
 8002a00:	e0ea      	b.n	8002bd8 <prepare_acc_ble_pack+0x2b4>
			case 0x02:
				acc_buffer[0] = BLE_PACK_ID;
 8002a02:	2328      	movs	r3, #40	; 0x28
 8002a04:	723b      	strb	r3, [r7, #8]
				acc_buffer[1] = BLE_ACC_PACK;
 8002a06:	2302      	movs	r3, #2
 8002a08:	727b      	strb	r3, [r7, #9]
				acc_buffer[2] = acc_pack_number;
 8002a0a:	4b83      	ldr	r3, [pc, #524]	; (8002c18 <prepare_acc_ble_pack+0x2f4>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	72bb      	strb	r3, [r7, #10]
				for(int i=30;i<60;i++){
 8002a10:	231e      	movs	r3, #30
 8002a12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a16:	e03c      	b.n	8002a92 <prepare_acc_ble_pack+0x16e>
					acc_buffer[3 + i - 30] = ble_buff_ACC[0][i];
 8002a18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a1c:	3b1b      	subs	r3, #27
 8002a1e:	497f      	ldr	r1, [pc, #508]	; (8002c1c <prepare_acc_ble_pack+0x2f8>)
 8002a20:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002a24:	440a      	add	r2, r1
 8002a26:	7812      	ldrb	r2, [r2, #0]
 8002a28:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002a2c:	440b      	add	r3, r1
 8002a2e:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[33 + i- 30] = ble_buff_ACC[1][i];
 8002a32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a36:	3303      	adds	r3, #3
 8002a38:	4978      	ldr	r1, [pc, #480]	; (8002c1c <prepare_acc_ble_pack+0x2f8>)
 8002a3a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002a3e:	440a      	add	r2, r1
 8002a40:	3278      	adds	r2, #120	; 0x78
 8002a42:	7812      	ldrb	r2, [r2, #0]
 8002a44:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002a48:	440b      	add	r3, r1
 8002a4a:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[63 + i- 30] = ble_buff_ACC[2][i];
 8002a4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a52:	3321      	adds	r3, #33	; 0x21
 8002a54:	4971      	ldr	r1, [pc, #452]	; (8002c1c <prepare_acc_ble_pack+0x2f8>)
 8002a56:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002a5a:	440a      	add	r2, r1
 8002a5c:	32f0      	adds	r2, #240	; 0xf0
 8002a5e:	7812      	ldrb	r2, [r2, #0]
 8002a60:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002a64:	440b      	add	r3, r1
 8002a66:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[93 + i - 30] = ble_buff_ACC[3][i];
 8002a6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a6e:	333f      	adds	r3, #63	; 0x3f
 8002a70:	496a      	ldr	r1, [pc, #424]	; (8002c1c <prepare_acc_ble_pack+0x2f8>)
 8002a72:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002a76:	440a      	add	r2, r1
 8002a78:	f502 72b4 	add.w	r2, r2, #360	; 0x168
 8002a7c:	7812      	ldrb	r2, [r2, #0]
 8002a7e:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002a82:	440b      	add	r3, r1
 8002a84:	f803 2c90 	strb.w	r2, [r3, #-144]
				for(int i=30;i<60;i++){
 8002a88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a96:	2b3b      	cmp	r3, #59	; 0x3b
 8002a98:	ddbe      	ble.n	8002a18 <prepare_acc_ble_pack+0xf4>
				}
				break;
 8002a9a:	e09d      	b.n	8002bd8 <prepare_acc_ble_pack+0x2b4>
			case 0x03:
				acc_buffer[0] = BLE_PACK_ID;
 8002a9c:	2328      	movs	r3, #40	; 0x28
 8002a9e:	723b      	strb	r3, [r7, #8]
				acc_buffer[1] = BLE_ACC_PACK;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	727b      	strb	r3, [r7, #9]
				acc_buffer[2] = acc_pack_number;
 8002aa4:	4b5c      	ldr	r3, [pc, #368]	; (8002c18 <prepare_acc_ble_pack+0x2f4>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	72bb      	strb	r3, [r7, #10]
				for(int i=60;i<90;i++){
 8002aaa:	233c      	movs	r3, #60	; 0x3c
 8002aac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002ab0:	e03c      	b.n	8002b2c <prepare_acc_ble_pack+0x208>
					acc_buffer[3 + i - 60] = ble_buff_ACC[0][i];
 8002ab2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ab6:	3b39      	subs	r3, #57	; 0x39
 8002ab8:	4958      	ldr	r1, [pc, #352]	; (8002c1c <prepare_acc_ble_pack+0x2f8>)
 8002aba:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002abe:	440a      	add	r2, r1
 8002ac0:	7812      	ldrb	r2, [r2, #0]
 8002ac2:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002ac6:	440b      	add	r3, r1
 8002ac8:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[33 + i - 60] = ble_buff_ACC[1][i];
 8002acc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ad0:	3b1b      	subs	r3, #27
 8002ad2:	4952      	ldr	r1, [pc, #328]	; (8002c1c <prepare_acc_ble_pack+0x2f8>)
 8002ad4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002ad8:	440a      	add	r2, r1
 8002ada:	3278      	adds	r2, #120	; 0x78
 8002adc:	7812      	ldrb	r2, [r2, #0]
 8002ade:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002ae2:	440b      	add	r3, r1
 8002ae4:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[63 + i - 60] = ble_buff_ACC[2][i];
 8002ae8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002aec:	3303      	adds	r3, #3
 8002aee:	494b      	ldr	r1, [pc, #300]	; (8002c1c <prepare_acc_ble_pack+0x2f8>)
 8002af0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002af4:	440a      	add	r2, r1
 8002af6:	32f0      	adds	r2, #240	; 0xf0
 8002af8:	7812      	ldrb	r2, [r2, #0]
 8002afa:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002afe:	440b      	add	r3, r1
 8002b00:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[93 + i - 60] = ble_buff_ACC[3][i];
 8002b04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b08:	3321      	adds	r3, #33	; 0x21
 8002b0a:	4944      	ldr	r1, [pc, #272]	; (8002c1c <prepare_acc_ble_pack+0x2f8>)
 8002b0c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002b10:	440a      	add	r2, r1
 8002b12:	f502 72b4 	add.w	r2, r2, #360	; 0x168
 8002b16:	7812      	ldrb	r2, [r2, #0]
 8002b18:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002b1c:	440b      	add	r3, r1
 8002b1e:	f803 2c90 	strb.w	r2, [r3, #-144]
				for(int i=60;i<90;i++){
 8002b22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b26:	3301      	adds	r3, #1
 8002b28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002b2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b30:	2b59      	cmp	r3, #89	; 0x59
 8002b32:	ddbe      	ble.n	8002ab2 <prepare_acc_ble_pack+0x18e>
				}
				break;
 8002b34:	e050      	b.n	8002bd8 <prepare_acc_ble_pack+0x2b4>
			case 0x04:
				acc_buffer[0] = BLE_PACK_ID;
 8002b36:	2328      	movs	r3, #40	; 0x28
 8002b38:	723b      	strb	r3, [r7, #8]
				acc_buffer[1] = BLE_ACC_PACK;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	727b      	strb	r3, [r7, #9]
				acc_buffer[2] = acc_pack_number;
 8002b3e:	4b36      	ldr	r3, [pc, #216]	; (8002c18 <prepare_acc_ble_pack+0x2f4>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	72bb      	strb	r3, [r7, #10]
				for(int i=90;i<120;i++){
 8002b44:	235a      	movs	r3, #90	; 0x5a
 8002b46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b4a:	e03c      	b.n	8002bc6 <prepare_acc_ble_pack+0x2a2>
					acc_buffer[3 + i - 90] = ble_buff_ACC[0][i];
 8002b4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b50:	3b57      	subs	r3, #87	; 0x57
 8002b52:	4932      	ldr	r1, [pc, #200]	; (8002c1c <prepare_acc_ble_pack+0x2f8>)
 8002b54:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002b58:	440a      	add	r2, r1
 8002b5a:	7812      	ldrb	r2, [r2, #0]
 8002b5c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002b60:	440b      	add	r3, r1
 8002b62:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[33 + i - 90] = ble_buff_ACC[1][i];
 8002b66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b6a:	3b39      	subs	r3, #57	; 0x39
 8002b6c:	492b      	ldr	r1, [pc, #172]	; (8002c1c <prepare_acc_ble_pack+0x2f8>)
 8002b6e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002b72:	440a      	add	r2, r1
 8002b74:	3278      	adds	r2, #120	; 0x78
 8002b76:	7812      	ldrb	r2, [r2, #0]
 8002b78:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002b7c:	440b      	add	r3, r1
 8002b7e:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[63 + i - 90] = ble_buff_ACC[2][i];
 8002b82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b86:	3b1b      	subs	r3, #27
 8002b88:	4924      	ldr	r1, [pc, #144]	; (8002c1c <prepare_acc_ble_pack+0x2f8>)
 8002b8a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002b8e:	440a      	add	r2, r1
 8002b90:	32f0      	adds	r2, #240	; 0xf0
 8002b92:	7812      	ldrb	r2, [r2, #0]
 8002b94:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002b98:	440b      	add	r3, r1
 8002b9a:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[93 + i - 90] = ble_buff_ACC[3][i];
 8002b9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ba2:	3303      	adds	r3, #3
 8002ba4:	491d      	ldr	r1, [pc, #116]	; (8002c1c <prepare_acc_ble_pack+0x2f8>)
 8002ba6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002baa:	440a      	add	r2, r1
 8002bac:	f502 72b4 	add.w	r2, r2, #360	; 0x168
 8002bb0:	7812      	ldrb	r2, [r2, #0]
 8002bb2:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002bb6:	440b      	add	r3, r1
 8002bb8:	f803 2c90 	strb.w	r2, [r3, #-144]
				for(int i=90;i<120;i++){
 8002bbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002bc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bca:	2b77      	cmp	r3, #119	; 0x77
 8002bcc:	ddbe      	ble.n	8002b4c <prepare_acc_ble_pack+0x228>
				}
				break;
 8002bce:	e003      	b.n	8002bd8 <prepare_acc_ble_pack+0x2b4>
			default:
				acc_pack_number = 0x00;
 8002bd0:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <prepare_acc_ble_pack+0x2f4>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	701a      	strb	r2, [r3, #0]
				break;
 8002bd6:	bf00      	nop
		}
		acc_pack_number = 0x00;
 8002bd8:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <prepare_acc_ble_pack+0x2f4>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<123;i++)
 8002bde:	2300      	movs	r3, #0
 8002be0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002be4:	e00f      	b.n	8002c06 <prepare_acc_ble_pack+0x2e2>
			buff[i] = acc_buffer[i];
 8002be6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	f107 0108 	add.w	r1, r7, #8
 8002bf2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002bf6:	440a      	add	r2, r1
 8002bf8:	7812      	ldrb	r2, [r2, #0]
 8002bfa:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<123;i++)
 8002bfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c00:	3301      	adds	r3, #1
 8002c02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c0a:	2b7a      	cmp	r3, #122	; 0x7a
 8002c0c:	ddeb      	ble.n	8002be6 <prepare_acc_ble_pack+0x2c2>
	}
}
 8002c0e:	bf00      	nop
 8002c10:	3798      	adds	r7, #152	; 0x98
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	200005f2 	.word	0x200005f2
 8002c1c:	200003f8 	.word	0x200003f8

08002c20 <prepare_ppg_ble_pack>:
void prepare_ppg_ble_pack(uint8_t* buff){
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b0a2      	sub	sp, #136	; 0x88
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]

	uint8_t ppg_buffer[103] = {0};
 8002c28:	f107 030c 	add.w	r3, r7, #12
 8002c2c:	2267      	movs	r2, #103	; 0x67
 8002c2e:	2100      	movs	r1, #0
 8002c30:	4618      	mov	r0, r3
 8002c32:	f009 fcbc 	bl	800c5ae <memset>

	if(ppg_pack_number != 0x00){
 8002c36:	4b72      	ldr	r3, [pc, #456]	; (8002e00 <prepare_ppg_ble_pack+0x1e0>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 80db 	beq.w	8002df6 <prepare_ppg_ble_pack+0x1d6>
		switch(ppg_pack_number){
 8002c40:	4b6f      	ldr	r3, [pc, #444]	; (8002e00 <prepare_ppg_ble_pack+0x1e0>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	3b01      	subs	r3, #1
 8002c46:	2b03      	cmp	r3, #3
 8002c48:	f200 80bc 	bhi.w	8002dc4 <prepare_ppg_ble_pack+0x1a4>
 8002c4c:	a201      	add	r2, pc, #4	; (adr r2, 8002c54 <prepare_ppg_ble_pack+0x34>)
 8002c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c52:	bf00      	nop
 8002c54:	08002c65 	.word	0x08002c65
 8002c58:	08002cc5 	.word	0x08002cc5
 8002c5c:	08002d25 	.word	0x08002d25
 8002c60:	08002d75 	.word	0x08002d75
			case 0x01:
				ppg_buffer[0] = BLE_PACK_ID;
 8002c64:	2328      	movs	r3, #40	; 0x28
 8002c66:	733b      	strb	r3, [r7, #12]
				ppg_buffer[1] = BLE_PPG_PACK;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	737b      	strb	r3, [r7, #13]
				ppg_buffer[2] = ppg_pack_number;
 8002c6c:	4b64      	ldr	r3, [pc, #400]	; (8002e00 <prepare_ppg_ble_pack+0x1e0>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	73bb      	strb	r3, [r7, #14]
				for(int i=0;i<50;i++){
 8002c72:	2300      	movs	r3, #0
 8002c74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c78:	e01f      	b.n	8002cba <prepare_ppg_ble_pack+0x9a>
					ppg_buffer[3 + i] = ble_buff_PPG[0][i];
 8002c7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c7e:	3303      	adds	r3, #3
 8002c80:	4960      	ldr	r1, [pc, #384]	; (8002e04 <prepare_ppg_ble_pack+0x1e4>)
 8002c82:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002c86:	440a      	add	r2, r1
 8002c88:	7812      	ldrb	r2, [r2, #0]
 8002c8a:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002c8e:	440b      	add	r3, r1
 8002c90:	f803 2c7c 	strb.w	r2, [r3, #-124]
					ppg_buffer[53 + i] = ble_buff_PPG[1][i];
 8002c94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c98:	3335      	adds	r3, #53	; 0x35
 8002c9a:	495a      	ldr	r1, [pc, #360]	; (8002e04 <prepare_ppg_ble_pack+0x1e4>)
 8002c9c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002ca0:	440a      	add	r2, r1
 8002ca2:	32c8      	adds	r2, #200	; 0xc8
 8002ca4:	7812      	ldrb	r2, [r2, #0]
 8002ca6:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002caa:	440b      	add	r3, r1
 8002cac:	f803 2c7c 	strb.w	r2, [r3, #-124]
				for(int i=0;i<50;i++){
 8002cb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002cba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cbe:	2b31      	cmp	r3, #49	; 0x31
 8002cc0:	dddb      	ble.n	8002c7a <prepare_ppg_ble_pack+0x5a>
				}
				break;
 8002cc2:	e083      	b.n	8002dcc <prepare_ppg_ble_pack+0x1ac>
			case 0x02:
				ppg_buffer[0] = BLE_PACK_ID;
 8002cc4:	2328      	movs	r3, #40	; 0x28
 8002cc6:	733b      	strb	r3, [r7, #12]
				ppg_buffer[1] = BLE_PPG_PACK;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	737b      	strb	r3, [r7, #13]
				ppg_buffer[2] = ppg_pack_number;
 8002ccc:	4b4c      	ldr	r3, [pc, #304]	; (8002e00 <prepare_ppg_ble_pack+0x1e0>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	73bb      	strb	r3, [r7, #14]
				for(int i=50;i<100;i++){
 8002cd2:	2332      	movs	r3, #50	; 0x32
 8002cd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cd8:	e01f      	b.n	8002d1a <prepare_ppg_ble_pack+0xfa>
					ppg_buffer[3 + i - 50] = ble_buff_PPG[0][i];
 8002cda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cde:	3b2f      	subs	r3, #47	; 0x2f
 8002ce0:	4948      	ldr	r1, [pc, #288]	; (8002e04 <prepare_ppg_ble_pack+0x1e4>)
 8002ce2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ce6:	440a      	add	r2, r1
 8002ce8:	7812      	ldrb	r2, [r2, #0]
 8002cea:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002cee:	440b      	add	r3, r1
 8002cf0:	f803 2c7c 	strb.w	r2, [r3, #-124]
					ppg_buffer[53 + i - 50] = ble_buff_PPG[1][i];
 8002cf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cf8:	3303      	adds	r3, #3
 8002cfa:	4942      	ldr	r1, [pc, #264]	; (8002e04 <prepare_ppg_ble_pack+0x1e4>)
 8002cfc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d00:	440a      	add	r2, r1
 8002d02:	32c8      	adds	r2, #200	; 0xc8
 8002d04:	7812      	ldrb	r2, [r2, #0]
 8002d06:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002d0a:	440b      	add	r3, r1
 8002d0c:	f803 2c7c 	strb.w	r2, [r3, #-124]
				for(int i=50;i<100;i++){
 8002d10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d14:	3301      	adds	r3, #1
 8002d16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d1e:	2b63      	cmp	r3, #99	; 0x63
 8002d20:	dddb      	ble.n	8002cda <prepare_ppg_ble_pack+0xba>
				}
				break;
 8002d22:	e053      	b.n	8002dcc <prepare_ppg_ble_pack+0x1ac>
			case 0x03:
				ppg_buffer[0] = BLE_PACK_ID;
 8002d24:	2328      	movs	r3, #40	; 0x28
 8002d26:	733b      	strb	r3, [r7, #12]
				ppg_buffer[1] = BLE_PPG_PACK;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	737b      	strb	r3, [r7, #13]
				ppg_buffer[2] = ppg_pack_number;
 8002d2c:	4b34      	ldr	r3, [pc, #208]	; (8002e00 <prepare_ppg_ble_pack+0x1e0>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	73bb      	strb	r3, [r7, #14]
				for(int i=100;i<150;i++){
 8002d32:	2364      	movs	r3, #100	; 0x64
 8002d34:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d36:	e019      	b.n	8002d6c <prepare_ppg_ble_pack+0x14c>
					ppg_buffer[3 + i - 100] = ble_buff_PPG[0][i];
 8002d38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d3a:	3b61      	subs	r3, #97	; 0x61
 8002d3c:	4931      	ldr	r1, [pc, #196]	; (8002e04 <prepare_ppg_ble_pack+0x1e4>)
 8002d3e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002d40:	440a      	add	r2, r1
 8002d42:	7812      	ldrb	r2, [r2, #0]
 8002d44:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002d48:	440b      	add	r3, r1
 8002d4a:	f803 2c7c 	strb.w	r2, [r3, #-124]
					ppg_buffer[53 + i - 100] = ble_buff_PPG[1][i];
 8002d4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d50:	3b2f      	subs	r3, #47	; 0x2f
 8002d52:	492c      	ldr	r1, [pc, #176]	; (8002e04 <prepare_ppg_ble_pack+0x1e4>)
 8002d54:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002d56:	440a      	add	r2, r1
 8002d58:	32c8      	adds	r2, #200	; 0xc8
 8002d5a:	7812      	ldrb	r2, [r2, #0]
 8002d5c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002d60:	440b      	add	r3, r1
 8002d62:	f803 2c7c 	strb.w	r2, [r3, #-124]
				for(int i=100;i<150;i++){
 8002d66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d68:	3301      	adds	r3, #1
 8002d6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d6e:	2b95      	cmp	r3, #149	; 0x95
 8002d70:	dde2      	ble.n	8002d38 <prepare_ppg_ble_pack+0x118>
				}
				break;
 8002d72:	e02b      	b.n	8002dcc <prepare_ppg_ble_pack+0x1ac>
			case 0x04:
				ppg_buffer[0] = BLE_PACK_ID;
 8002d74:	2328      	movs	r3, #40	; 0x28
 8002d76:	733b      	strb	r3, [r7, #12]
				ppg_buffer[1] = BLE_PPG_PACK;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	737b      	strb	r3, [r7, #13]
				ppg_buffer[2] = ppg_pack_number;
 8002d7c:	4b20      	ldr	r3, [pc, #128]	; (8002e00 <prepare_ppg_ble_pack+0x1e0>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	73bb      	strb	r3, [r7, #14]
				for(int i=150;i<200;i++){
 8002d82:	2396      	movs	r3, #150	; 0x96
 8002d84:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d86:	e019      	b.n	8002dbc <prepare_ppg_ble_pack+0x19c>
					ppg_buffer[3 + i - 150] = ble_buff_PPG[0][i];
 8002d88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d8a:	3b93      	subs	r3, #147	; 0x93
 8002d8c:	491d      	ldr	r1, [pc, #116]	; (8002e04 <prepare_ppg_ble_pack+0x1e4>)
 8002d8e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002d90:	440a      	add	r2, r1
 8002d92:	7812      	ldrb	r2, [r2, #0]
 8002d94:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002d98:	440b      	add	r3, r1
 8002d9a:	f803 2c7c 	strb.w	r2, [r3, #-124]
					ppg_buffer[53 + i - 150] = ble_buff_PPG[1][i];
 8002d9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002da0:	3b61      	subs	r3, #97	; 0x61
 8002da2:	4918      	ldr	r1, [pc, #96]	; (8002e04 <prepare_ppg_ble_pack+0x1e4>)
 8002da4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002da6:	440a      	add	r2, r1
 8002da8:	32c8      	adds	r2, #200	; 0xc8
 8002daa:	7812      	ldrb	r2, [r2, #0]
 8002dac:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002db0:	440b      	add	r3, r1
 8002db2:	f803 2c7c 	strb.w	r2, [r3, #-124]
				for(int i=150;i<200;i++){
 8002db6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002db8:	3301      	adds	r3, #1
 8002dba:	67bb      	str	r3, [r7, #120]	; 0x78
 8002dbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dbe:	2bc7      	cmp	r3, #199	; 0xc7
 8002dc0:	dde2      	ble.n	8002d88 <prepare_ppg_ble_pack+0x168>
				}
				break;
 8002dc2:	e003      	b.n	8002dcc <prepare_ppg_ble_pack+0x1ac>
			default:
				ppg_pack_number = 0x00;
 8002dc4:	4b0e      	ldr	r3, [pc, #56]	; (8002e00 <prepare_ppg_ble_pack+0x1e0>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	701a      	strb	r2, [r3, #0]
				break;
 8002dca:	bf00      	nop
		}
		ppg_pack_number = 0x00;
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <prepare_ppg_ble_pack+0x1e0>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<103;i++)
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	677b      	str	r3, [r7, #116]	; 0x74
 8002dd6:	e00b      	b.n	8002df0 <prepare_ppg_ble_pack+0x1d0>
			buff[i] = ppg_buffer[i];
 8002dd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f107 010c 	add.w	r1, r7, #12
 8002de2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002de4:	440a      	add	r2, r1
 8002de6:	7812      	ldrb	r2, [r2, #0]
 8002de8:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<103;i++)
 8002dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dec:	3301      	adds	r3, #1
 8002dee:	677b      	str	r3, [r7, #116]	; 0x74
 8002df0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002df2:	2b66      	cmp	r3, #102	; 0x66
 8002df4:	ddf0      	ble.n	8002dd8 <prepare_ppg_ble_pack+0x1b8>
	}
}
 8002df6:	bf00      	nop
 8002df8:	3788      	adds	r7, #136	; 0x88
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	200005f3 	.word	0x200005f3
 8002e04:	20000268 	.word	0x20000268

08002e08 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  if(htim == &htim16){
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a1c      	ldr	r2, [pc, #112]	; (8002e84 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d130      	bne.n	8002e7a <HAL_TIM_PeriodElapsedCallback+0x72>
	  if(APP_BLE_Get_Server_Connection_Status() == APP_BLE_CONNECTED_SERVER){
 8002e18:	f008 fe86 	bl	800bb28 <APP_BLE_Get_Server_Connection_Status>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b05      	cmp	r3, #5
 8002e20:	d12b      	bne.n	8002e7a <HAL_TIM_PeriodElapsedCallback+0x72>
		  // Increment prescaler for fsr and acc
		  prescaler_fsr++;
 8002e22:	4b19      	ldr	r3, [pc, #100]	; (8002e88 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	3301      	adds	r3, #1
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002e2c:	701a      	strb	r2, [r3, #0]
		  prescaler_acc++;
 8002e2e:	4b17      	ldr	r3, [pc, #92]	; (8002e8c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	3301      	adds	r3, #1
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002e38:	701a      	strb	r2, [r3, #0]
		  prescaler_send_pack++;
 8002e3a:	4b15      	ldr	r3, [pc, #84]	; (8002e90 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	4b13      	ldr	r3, [pc, #76]	; (8002e90 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002e44:	701a      	strb	r2, [r3, #0]
		  // read ppg sensor - 100Hz
		  UTIL_SEQ_SetTask(1 << READ_PPG_TASK, CFG_SCH_PRIO_0);
 8002e46:	2100      	movs	r1, #0
 8002e48:	2040      	movs	r0, #64	; 0x40
 8002e4a:	f000 fb45 	bl	80034d8 <UTIL_SEQ_SetTask>
		  // read fsr sensor - 10Hz
		  if(prescaler_fsr == 10){
 8002e4e:	4b0e      	ldr	r3, [pc, #56]	; (8002e88 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	2b0a      	cmp	r3, #10
 8002e54:	d106      	bne.n	8002e64 <HAL_TIM_PeriodElapsedCallback+0x5c>
			  prescaler_fsr = 0;
 8002e56:	4b0c      	ldr	r3, [pc, #48]	; (8002e88 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	701a      	strb	r2, [r3, #0]
			  UTIL_SEQ_SetTask(1 << READ_FSR_TASK, CFG_SCH_PRIO_0);
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	2020      	movs	r0, #32
 8002e60:	f000 fb3a 	bl	80034d8 <UTIL_SEQ_SetTask>
		  }
		  // read acc sensor - 20Hz
		  if(prescaler_acc == 5){
 8002e64:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b05      	cmp	r3, #5
 8002e6a:	d106      	bne.n	8002e7a <HAL_TIM_PeriodElapsedCallback+0x72>
			  prescaler_acc = 0;
 8002e6c:	4b07      	ldr	r3, [pc, #28]	; (8002e8c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	701a      	strb	r2, [r3, #0]
			  UTIL_SEQ_SetTask(1 << READ_ACC_TASK, CFG_SCH_PRIO_0);
 8002e72:	2100      	movs	r1, #0
 8002e74:	2010      	movs	r0, #16
 8002e76:	f000 fb2f 	bl	80034d8 <UTIL_SEQ_SetTask>
  }

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e7a:	bf00      	nop
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	200008d0 	.word	0x200008d0
 8002e88:	200005ed 	.word	0x200005ed
 8002e8c:	200005ec 	.word	0x200005ec
 8002e90:	200005ee 	.word	0x200005ee

08002e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002e98:	bf00      	nop
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	af00      	add	r7, sp, #0

}
 8002ea6:	bf00      	nop
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ec0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ec8:	bf00      	nop
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
	...

08002ed4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8002ed8:	4b10      	ldr	r3, [pc, #64]	; (8002f1c <MX_RTC_Init+0x48>)
 8002eda:	4a11      	ldr	r2, [pc, #68]	; (8002f20 <MX_RTC_Init+0x4c>)
 8002edc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002ede:	4b0f      	ldr	r3, [pc, #60]	; (8002f1c <MX_RTC_Init+0x48>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002ee4:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <MX_RTC_Init+0x48>)
 8002ee6:	220f      	movs	r2, #15
 8002ee8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002eea:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <MX_RTC_Init+0x48>)
 8002eec:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002ef0:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002ef2:	480a      	ldr	r0, [pc, #40]	; (8002f1c <MX_RTC_Init+0x48>)
 8002ef4:	f003 ff24 	bl	8006d40 <HAL_RTC_Init>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 8002efe:	f7ff ffc9 	bl	8002e94 <Error_Handler>
  }
  /** Enable the WakeUp 
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002f02:	2200      	movs	r2, #0
 8002f04:	2100      	movs	r1, #0
 8002f06:	4805      	ldr	r0, [pc, #20]	; (8002f1c <MX_RTC_Init+0x48>)
 8002f08:	f004 f808 	bl	8006f1c <HAL_RTCEx_SetWakeUpTimer>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <MX_RTC_Init+0x42>
  {
    Error_Handler();
 8002f12:	f7ff ffbf 	bl	8002e94 <Error_Handler>
  }

}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	200007e4 	.word	0x200007e4
 8002f20:	40002800 	.word	0x40002800

08002f24 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a04      	ldr	r2, [pc, #16]	; (8002f44 <HAL_RTC_MspInit+0x20>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d101      	bne.n	8002f3a <HAL_RTC_MspInit+0x16>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002f36:	f7ff ffbb 	bl	8002eb0 <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40002800 	.word	0x40002800

08002f48 <LL_AHB2_GRP1_EnableClock>:
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
}
 8002f6e:	bf00      	nop
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <LL_APB1_GRP1_EnableClock>:
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b085      	sub	sp, #20
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f86:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f96:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
}
 8002fa0:	bf00      	nop
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
}
 8002fd2:	bf00      	nop
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
	...

08002fe0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002fe4:	4b1b      	ldr	r3, [pc, #108]	; (8003054 <MX_SPI1_Init+0x74>)
 8002fe6:	4a1c      	ldr	r2, [pc, #112]	; (8003058 <MX_SPI1_Init+0x78>)
 8002fe8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002fea:	4b1a      	ldr	r3, [pc, #104]	; (8003054 <MX_SPI1_Init+0x74>)
 8002fec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ff0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ff2:	4b18      	ldr	r3, [pc, #96]	; (8003054 <MX_SPI1_Init+0x74>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ff8:	4b16      	ldr	r3, [pc, #88]	; (8003054 <MX_SPI1_Init+0x74>)
 8002ffa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ffe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003000:	4b14      	ldr	r3, [pc, #80]	; (8003054 <MX_SPI1_Init+0x74>)
 8003002:	2202      	movs	r2, #2
 8003004:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003006:	4b13      	ldr	r3, [pc, #76]	; (8003054 <MX_SPI1_Init+0x74>)
 8003008:	2201      	movs	r2, #1
 800300a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800300c:	4b11      	ldr	r3, [pc, #68]	; (8003054 <MX_SPI1_Init+0x74>)
 800300e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003012:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003014:	4b0f      	ldr	r3, [pc, #60]	; (8003054 <MX_SPI1_Init+0x74>)
 8003016:	2228      	movs	r2, #40	; 0x28
 8003018:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800301a:	4b0e      	ldr	r3, [pc, #56]	; (8003054 <MX_SPI1_Init+0x74>)
 800301c:	2200      	movs	r2, #0
 800301e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003020:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <MX_SPI1_Init+0x74>)
 8003022:	2200      	movs	r2, #0
 8003024:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003026:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <MX_SPI1_Init+0x74>)
 8003028:	2200      	movs	r2, #0
 800302a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800302c:	4b09      	ldr	r3, [pc, #36]	; (8003054 <MX_SPI1_Init+0x74>)
 800302e:	2207      	movs	r2, #7
 8003030:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003032:	4b08      	ldr	r3, [pc, #32]	; (8003054 <MX_SPI1_Init+0x74>)
 8003034:	2200      	movs	r2, #0
 8003036:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003038:	4b06      	ldr	r3, [pc, #24]	; (8003054 <MX_SPI1_Init+0x74>)
 800303a:	2200      	movs	r2, #0
 800303c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800303e:	4805      	ldr	r0, [pc, #20]	; (8003054 <MX_SPI1_Init+0x74>)
 8003040:	f004 f807 	bl	8007052 <HAL_SPI_Init>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800304a:	f7ff ff23 	bl	8002e94 <Error_Handler>
  }

}
 800304e:	bf00      	nop
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	2000086c 	.word	0x2000086c
 8003058:	40013000 	.word	0x40013000

0800305c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8003060:	4b1b      	ldr	r3, [pc, #108]	; (80030d0 <MX_SPI2_Init+0x74>)
 8003062:	4a1c      	ldr	r2, [pc, #112]	; (80030d4 <MX_SPI2_Init+0x78>)
 8003064:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003066:	4b1a      	ldr	r3, [pc, #104]	; (80030d0 <MX_SPI2_Init+0x74>)
 8003068:	f44f 7282 	mov.w	r2, #260	; 0x104
 800306c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800306e:	4b18      	ldr	r3, [pc, #96]	; (80030d0 <MX_SPI2_Init+0x74>)
 8003070:	2200      	movs	r2, #0
 8003072:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003074:	4b16      	ldr	r3, [pc, #88]	; (80030d0 <MX_SPI2_Init+0x74>)
 8003076:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800307a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800307c:	4b14      	ldr	r3, [pc, #80]	; (80030d0 <MX_SPI2_Init+0x74>)
 800307e:	2202      	movs	r2, #2
 8003080:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003082:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <MX_SPI2_Init+0x74>)
 8003084:	2201      	movs	r2, #1
 8003086:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003088:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <MX_SPI2_Init+0x74>)
 800308a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800308e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003090:	4b0f      	ldr	r3, [pc, #60]	; (80030d0 <MX_SPI2_Init+0x74>)
 8003092:	2228      	movs	r2, #40	; 0x28
 8003094:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003096:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <MX_SPI2_Init+0x74>)
 8003098:	2200      	movs	r2, #0
 800309a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800309c:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <MX_SPI2_Init+0x74>)
 800309e:	2200      	movs	r2, #0
 80030a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030a2:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <MX_SPI2_Init+0x74>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80030a8:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <MX_SPI2_Init+0x74>)
 80030aa:	2207      	movs	r2, #7
 80030ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80030ae:	4b08      	ldr	r3, [pc, #32]	; (80030d0 <MX_SPI2_Init+0x74>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80030b4:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <MX_SPI2_Init+0x74>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80030ba:	4805      	ldr	r0, [pc, #20]	; (80030d0 <MX_SPI2_Init+0x74>)
 80030bc:	f003 ffc9 	bl	8007052 <HAL_SPI_Init>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80030c6:	f7ff fee5 	bl	8002e94 <Error_Handler>
  }

}
 80030ca:	bf00      	nop
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20000808 	.word	0x20000808
 80030d4:	40003800 	.word	0x40003800

080030d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b088      	sub	sp, #32
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e0:	f107 030c 	add.w	r3, r7, #12
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	609a      	str	r2, [r3, #8]
 80030ec:	60da      	str	r2, [r3, #12]
 80030ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a28      	ldr	r2, [pc, #160]	; (8003198 <HAL_SPI_MspInit+0xc0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d118      	bne.n	800312c <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030fa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80030fe:	f7ff ff55 	bl	8002fac <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003102:	2001      	movs	r0, #1
 8003104:	f7ff ff20 	bl	8002f48 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003108:	23e0      	movs	r3, #224	; 0xe0
 800310a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310c:	2302      	movs	r3, #2
 800310e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003110:	2301      	movs	r3, #1
 8003112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003114:	2302      	movs	r3, #2
 8003116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003118:	2305      	movs	r3, #5
 800311a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800311c:	f107 030c 	add.w	r3, r7, #12
 8003120:	4619      	mov	r1, r3
 8003122:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003126:	f001 f889 	bl	800423c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800312a:	e030      	b.n	800318e <HAL_SPI_MspInit+0xb6>
  else if(spiHandle->Instance==SPI2)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a1a      	ldr	r2, [pc, #104]	; (800319c <HAL_SPI_MspInit+0xc4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d12b      	bne.n	800318e <HAL_SPI_MspInit+0xb6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003136:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800313a:	f7ff ff1e 	bl	8002f7a <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800313e:	2004      	movs	r0, #4
 8003140:	f7ff ff02 	bl	8002f48 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003144:	2001      	movs	r0, #1
 8003146:	f7ff feff 	bl	8002f48 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800314a:	230c      	movs	r3, #12
 800314c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314e:	2302      	movs	r3, #2
 8003150:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003156:	2300      	movs	r3, #0
 8003158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800315a:	2305      	movs	r3, #5
 800315c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800315e:	f107 030c 	add.w	r3, r7, #12
 8003162:	4619      	mov	r1, r3
 8003164:	480e      	ldr	r0, [pc, #56]	; (80031a0 <HAL_SPI_MspInit+0xc8>)
 8003166:	f001 f869 	bl	800423c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800316a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800316e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003170:	2302      	movs	r3, #2
 8003172:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003174:	2300      	movs	r3, #0
 8003176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003178:	2300      	movs	r3, #0
 800317a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800317c:	2305      	movs	r3, #5
 800317e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003180:	f107 030c 	add.w	r3, r7, #12
 8003184:	4619      	mov	r1, r3
 8003186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800318a:	f001 f857 	bl	800423c <HAL_GPIO_Init>
}
 800318e:	bf00      	nop
 8003190:	3720      	adds	r7, #32
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40013000 	.word	0x40013000
 800319c:	40003800 	.word	0x40003800
 80031a0:	48000800 	.word	0x48000800

080031a4 <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80031a8:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <UTIL_LPM_Init+0x1c>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80031ae:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <UTIL_LPM_Init+0x20>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80031b4:	bf00      	nop
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	200005f4 	.word	0x200005f4
 80031c4:	200005f8 	.word	0x200005f8

080031c8 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80031c8:	b480      	push	{r7}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031d4:	f3ef 8310 	mrs	r3, PRIMASK
 80031d8:	613b      	str	r3, [r7, #16]
  return(result);
 80031da:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80031dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80031de:	b672      	cpsid	i
  
  switch(state)
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d009      	beq.n	80031fa <UTIL_LPM_SetOffMode+0x32>
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d000      	beq.n	80031ec <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 80031ea:	e00e      	b.n	800320a <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 80031ec:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <UTIL_LPM_SetOffMode+0x58>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	4a0a      	ldr	r2, [pc, #40]	; (8003220 <UTIL_LPM_SetOffMode+0x58>)
 80031f6:	6013      	str	r3, [r2, #0]
      break;
 80031f8:	e007      	b.n	800320a <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	43da      	mvns	r2, r3
 80031fe:	4b08      	ldr	r3, [pc, #32]	; (8003220 <UTIL_LPM_SetOffMode+0x58>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4013      	ands	r3, r2
 8003204:	4a06      	ldr	r2, [pc, #24]	; (8003220 <UTIL_LPM_SetOffMode+0x58>)
 8003206:	6013      	str	r3, [r2, #0]
      break;
 8003208:	bf00      	nop
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8003214:	bf00      	nop
 8003216:	371c      	adds	r7, #28
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	200005f8 	.word	0x200005f8

08003224 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800322a:	f3ef 8310 	mrs	r3, PRIMASK
 800322e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003230:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8003232:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8003234:	b672      	cpsid	i

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8003236:	4b12      	ldr	r3, [pc, #72]	; (8003280 <UTIL_LPM_EnterLowPower+0x5c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d006      	beq.n	800324c <UTIL_LPM_EnterLowPower+0x28>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800323e:	4b11      	ldr	r3, [pc, #68]	; (8003284 <UTIL_LPM_EnterLowPower+0x60>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8003244:	4b0f      	ldr	r3, [pc, #60]	; (8003284 <UTIL_LPM_EnterLowPower+0x60>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	4798      	blx	r3
 800324a:	e010      	b.n	800326e <UTIL_LPM_EnterLowPower+0x4a>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800324c:	4b0e      	ldr	r3, [pc, #56]	; (8003288 <UTIL_LPM_EnterLowPower+0x64>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d006      	beq.n	8003262 <UTIL_LPM_EnterLowPower+0x3e>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8003254:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <UTIL_LPM_EnterLowPower+0x60>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800325a:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <UTIL_LPM_EnterLowPower+0x60>)
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	4798      	blx	r3
 8003260:	e005      	b.n	800326e <UTIL_LPM_EnterLowPower+0x4a>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8003262:	4b08      	ldr	r3, [pc, #32]	; (8003284 <UTIL_LPM_EnterLowPower+0x60>)
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8003268:	4b06      	ldr	r3, [pc, #24]	; (8003284 <UTIL_LPM_EnterLowPower+0x60>)
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	4798      	blx	r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8003278:	bf00      	nop
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	200005f4 	.word	0x200005f4
 8003284:	0800c64c 	.word	0x0800c64c
 8003288:	200005f8 	.word	0x200005f8

0800328c <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode( void )
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterOffMode */

/* USER CODE END PWR_EnterOffMode */
}
 8003290:	bf00      	nop
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode( void )
{
 800329a:	b480      	push	{r7}
 800329c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode */

/* USER CODE END PWR_ExitOffMode */
}
 800329e:	bf00      	nop
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode( void )
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterStopMode */

/* USER CODE END PWR_EnterStopMode */
}
 80032ac:	bf00      	nop
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode( void )
{
 80032b6:	b480      	push	{r7}
 80032b8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitStopMode */

/* USER CODE END PWR_ExitStopMode */
}
 80032ba:	bf00      	nop
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode( void )
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode */

/* USER CODE END PWR_EnterSleepMode */
}
 80032c8:	bf00      	nop
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode( void )
{
 80032d2:	b480      	push	{r7}
 80032d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode */

/* USER CODE END PWR_ExitSleepMode */
}
 80032d6:	bf00      	nop
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t mask_bm )
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08c      	sub	sp, #48	; 0x30
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80032e8:	4b63      	ldr	r3, [pc, #396]	; (8003478 <UTIL_SEQ_Run+0x198>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= mask_bm;
 80032ee:	4b62      	ldr	r3, [pc, #392]	; (8003478 <UTIL_SEQ_Run+0x198>)
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4013      	ands	r3, r2
 80032f6:	4a60      	ldr	r2, [pc, #384]	; (8003478 <UTIL_SEQ_Run+0x198>)
 80032f8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 80032fa:	e082      	b.n	8003402 <UTIL_SEQ_Run+0x122>
  {
    counter = 0;
 80032fc:	2300      	movs	r3, #0
 80032fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 8003300:	e002      	b.n	8003308 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 8003302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003304:	3301      	adds	r3, #1
 8003306:	62fb      	str	r3, [r7, #44]	; 0x2c
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 8003308:	4a5c      	ldr	r2, [pc, #368]	; (800347c <UTIL_SEQ_Run+0x19c>)
 800330a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8003310:	4b5b      	ldr	r3, [pc, #364]	; (8003480 <UTIL_SEQ_Run+0x1a0>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	401a      	ands	r2, r3
 8003316:	4b58      	ldr	r3, [pc, #352]	; (8003478 <UTIL_SEQ_Run+0x198>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4013      	ands	r3, r2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f0      	beq.n	8003302 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 8003320:	4a56      	ldr	r2, [pc, #344]	; (800347c <UTIL_SEQ_Run+0x19c>)
 8003322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003324:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8003328:	4b55      	ldr	r3, [pc, #340]	; (8003480 <UTIL_SEQ_Run+0x1a0>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	401a      	ands	r2, r3
 800332e:	4b52      	ldr	r3, [pc, #328]	; (8003478 <UTIL_SEQ_Run+0x198>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4013      	ands	r3, r2
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if (!(TaskPrio[counter].round_robin & current_task_set))
 8003336:	4a51      	ldr	r2, [pc, #324]	; (800347c <UTIL_SEQ_Run+0x19c>)
 8003338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	4413      	add	r3, r2
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	4013      	ands	r3, r2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d106      	bne.n	8003356 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8003348:	4a4c      	ldr	r2, [pc, #304]	; (800347c <UTIL_SEQ_Run+0x19c>)
 800334a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	4413      	add	r3, r2
 8003350:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003354:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = bit_position(current_task_set & TaskPrio[counter].round_robin);
 8003356:	4a49      	ldr	r2, [pc, #292]	; (800347c <UTIL_SEQ_Run+0x19c>)
 8003358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4413      	add	r3, r2
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	4013      	ands	r3, r2
 8003364:	4618      	mov	r0, r3
 8003366:	f000 f97d 	bl	8003664 <bit_position>
 800336a:	4602      	mov	r2, r0
 800336c:	4b45      	ldr	r3, [pc, #276]	; (8003484 <UTIL_SEQ_Run+0x1a4>)
 800336e:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1 << (CurrentTaskIdx));
 8003370:	4a42      	ldr	r2, [pc, #264]	; (800347c <UTIL_SEQ_Run+0x19c>)
 8003372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	4413      	add	r3, r2
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	4a42      	ldr	r2, [pc, #264]	; (8003484 <UTIL_SEQ_Run+0x1a4>)
 800337c:	6812      	ldr	r2, [r2, #0]
 800337e:	2101      	movs	r1, #1
 8003380:	fa01 f202 	lsl.w	r2, r1, r2
 8003384:	43d2      	mvns	r2, r2
 8003386:	401a      	ands	r2, r3
 8003388:	493c      	ldr	r1, [pc, #240]	; (800347c <UTIL_SEQ_Run+0x19c>)
 800338a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	440b      	add	r3, r1
 8003390:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003392:	f3ef 8310 	mrs	r3, PRIMASK
 8003396:	61bb      	str	r3, [r7, #24]
  return(result);
 8003398:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800339a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800339c:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1 << (CurrentTaskIdx));
 800339e:	4b39      	ldr	r3, [pc, #228]	; (8003484 <UTIL_SEQ_Run+0x1a4>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2201      	movs	r2, #1
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	461a      	mov	r2, r3
 80033ac:	4b36      	ldr	r3, [pc, #216]	; (8003488 <UTIL_SEQ_Run+0x1a8>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4013      	ands	r3, r2
 80033b2:	4a35      	ldr	r2, [pc, #212]	; (8003488 <UTIL_SEQ_Run+0x1a8>)
 80033b4:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 80033b6:	2302      	movs	r3, #2
 80033b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033ba:	e014      	b.n	80033e6 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1].priority &= ~(1 << (CurrentTaskIdx));
 80033bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033be:	3b01      	subs	r3, #1
 80033c0:	4a2e      	ldr	r2, [pc, #184]	; (800347c <UTIL_SEQ_Run+0x19c>)
 80033c2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80033c6:	4b2f      	ldr	r3, [pc, #188]	; (8003484 <UTIL_SEQ_Run+0x1a4>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2101      	movs	r1, #1
 80033cc:	fa01 f303 	lsl.w	r3, r1, r3
 80033d0:	43db      	mvns	r3, r3
 80033d2:	4619      	mov	r1, r3
 80033d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d6:	3b01      	subs	r3, #1
 80033d8:	400a      	ands	r2, r1
 80033da:	4928      	ldr	r1, [pc, #160]	; (800347c <UTIL_SEQ_Run+0x19c>)
 80033dc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 80033e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e2:	3b01      	subs	r3, #1
 80033e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1e7      	bne.n	80033bc <UTIL_SEQ_Run+0xdc>
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80033f6:	4b23      	ldr	r3, [pc, #140]	; (8003484 <UTIL_SEQ_Run+0x1a4>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a24      	ldr	r2, [pc, #144]	; (800348c <UTIL_SEQ_Run+0x1ac>)
 80033fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003400:	4798      	blx	r3
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 8003402:	4b21      	ldr	r3, [pc, #132]	; (8003488 <UTIL_SEQ_Run+0x1a8>)
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	4b1e      	ldr	r3, [pc, #120]	; (8003480 <UTIL_SEQ_Run+0x1a0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	401a      	ands	r2, r3
 800340c:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <UTIL_SEQ_Run+0x198>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4013      	ands	r3, r2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d007      	beq.n	8003426 <UTIL_SEQ_Run+0x146>
 8003416:	4b1e      	ldr	r3, [pc, #120]	; (8003490 <UTIL_SEQ_Run+0x1b0>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	4b1e      	ldr	r3, [pc, #120]	; (8003494 <UTIL_SEQ_Run+0x1b4>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4013      	ands	r3, r2
 8003420:	2b00      	cmp	r3, #0
 8003422:	f43f af6b 	beq.w	80032fc <UTIL_SEQ_Run+0x1c>
  }

  UTIL_SEQ_PreIdle( );
 8003426:	f000 f90f 	bl	8003648 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800342a:	f3ef 8310 	mrs	r3, PRIMASK
 800342e:	613b      	str	r3, [r7, #16]
  return(result);
 8003430:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8003432:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8003434:	b672      	cpsid	i
  if (!((TaskSet & TaskMask & SuperMask) || (EvtSet & EvtWaited)))
 8003436:	4b14      	ldr	r3, [pc, #80]	; (8003488 <UTIL_SEQ_Run+0x1a8>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	4b11      	ldr	r3, [pc, #68]	; (8003480 <UTIL_SEQ_Run+0x1a0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	401a      	ands	r2, r3
 8003440:	4b0d      	ldr	r3, [pc, #52]	; (8003478 <UTIL_SEQ_Run+0x198>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4013      	ands	r3, r2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d108      	bne.n	800345c <UTIL_SEQ_Run+0x17c>
 800344a:	4b11      	ldr	r3, [pc, #68]	; (8003490 <UTIL_SEQ_Run+0x1b0>)
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	4b11      	ldr	r3, [pc, #68]	; (8003494 <UTIL_SEQ_Run+0x1b4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4013      	ands	r3, r2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <UTIL_SEQ_Run+0x17c>
  {
    UTIL_SEQ_Idle( );
 8003458:	f7fd fea9 	bl	80011ae <UTIL_SEQ_Idle>
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  
  UTIL_SEQ_PostIdle( );
 8003466:	f000 f8f6 	bl	8003656 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800346a:	4a03      	ldr	r2, [pc, #12]	; (8003478 <UTIL_SEQ_Run+0x198>)
 800346c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346e:	6013      	str	r3, [r2, #0]

  return;
 8003470:	bf00      	nop
}
 8003472:	3730      	adds	r7, #48	; 0x30
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	2000003c 	.word	0x2000003c
 800347c:	2000068c 	.word	0x2000068c
 8003480:	20000038 	.word	0x20000038
 8003484:	20000608 	.word	0x20000608
 8003488:	200005fc 	.word	0x200005fc
 800348c:	2000060c 	.word	0x2000060c
 8003490:	20000600 	.word	0x20000600
 8003494:	20000604 	.word	0x20000604

08003498 <UTIL_SEQ_RegTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_RegTask( UTIL_SEQ_bm_t task_id_bm , uint32_t flags, void (*task)( void ) )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b088      	sub	sp, #32
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034a4:	f3ef 8310 	mrs	r3, PRIMASK
 80034a8:	617b      	str	r3, [r7, #20]
  return(result);
 80034aa:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80034ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80034ae:	b672      	cpsid	i

  TaskCb[bit_position(task_id_bm)] = task;
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 f8d7 	bl	8003664 <bit_position>
 80034b6:	4601      	mov	r1, r0
 80034b8:	4a06      	ldr	r2, [pc, #24]	; (80034d4 <UTIL_SEQ_RegTask+0x3c>)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80034ca:	bf00      	nop
}
 80034cc:	3720      	adds	r7, #32
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	2000060c 	.word	0x2000060c

080034d8 <UTIL_SEQ_SetTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t task_id_bm , uint32_t task_prio )
{
 80034d8:	b480      	push	{r7}
 80034da:	b087      	sub	sp, #28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034e2:	f3ef 8310 	mrs	r3, PRIMASK
 80034e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80034e8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80034ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80034ec:	b672      	cpsid	i

  TaskSet |= task_id_bm;
 80034ee:	4b0d      	ldr	r3, [pc, #52]	; (8003524 <UTIL_SEQ_SetTask+0x4c>)
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	4a0b      	ldr	r2, [pc, #44]	; (8003524 <UTIL_SEQ_SetTask+0x4c>)
 80034f8:	6013      	str	r3, [r2, #0]
  TaskPrio[task_prio].priority |= task_id_bm;
 80034fa:	4a0b      	ldr	r2, [pc, #44]	; (8003528 <UTIL_SEQ_SetTask+0x50>)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	431a      	orrs	r2, r3
 8003506:	4908      	ldr	r1, [pc, #32]	; (8003528 <UTIL_SEQ_SetTask+0x50>)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8003518:	bf00      	nop
}
 800351a:	371c      	adds	r7, #28
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	200005fc 	.word	0x200005fc
 8003528:	2000068c 	.word	0x2000068c

0800352c <UTIL_SEQ_PauseTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t task_id_bm )
{
 800352c:	b480      	push	{r7}
 800352e:	b087      	sub	sp, #28
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003534:	f3ef 8310 	mrs	r3, PRIMASK
 8003538:	60fb      	str	r3, [r7, #12]
  return(result);
 800353a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800353c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800353e:	b672      	cpsid	i

  TaskMask &= (~task_id_bm);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	43da      	mvns	r2, r3
 8003544:	4b07      	ldr	r3, [pc, #28]	; (8003564 <UTIL_SEQ_PauseTask+0x38>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4013      	ands	r3, r2
 800354a:	4a06      	ldr	r2, [pc, #24]	; (8003564 <UTIL_SEQ_PauseTask+0x38>)
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8003558:	bf00      	nop
}
 800355a:	371c      	adds	r7, #28
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	20000038 	.word	0x20000038

08003568 <UTIL_SEQ_ResumeTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t task_id_bm )
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003570:	f3ef 8310 	mrs	r3, PRIMASK
 8003574:	60fb      	str	r3, [r7, #12]
  return(result);
 8003576:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8003578:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800357a:	b672      	cpsid	i

  TaskMask |= task_id_bm;
 800357c:	4b08      	ldr	r3, [pc, #32]	; (80035a0 <UTIL_SEQ_ResumeTask+0x38>)
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4313      	orrs	r3, r2
 8003584:	4a06      	ldr	r2, [pc, #24]	; (80035a0 <UTIL_SEQ_ResumeTask+0x38>)
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8003592:	bf00      	nop
}
 8003594:	371c      	adds	r7, #28
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	20000038 	.word	0x20000038

080035a4 <UTIL_SEQ_SetEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 80035a4:	b480      	push	{r7}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ac:	f3ef 8310 	mrs	r3, PRIMASK
 80035b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80035b2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80035b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80035b6:	b672      	cpsid	i

  EvtSet |= evt_id_bm;
 80035b8:	4b08      	ldr	r3, [pc, #32]	; (80035dc <UTIL_SEQ_SetEvt+0x38>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4313      	orrs	r3, r2
 80035c0:	4a06      	ldr	r2, [pc, #24]	; (80035dc <UTIL_SEQ_SetEvt+0x38>)
 80035c2:	6013      	str	r3, [r2, #0]
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80035ce:	bf00      	nop
}
 80035d0:	371c      	adds	r7, #28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	20000600 	.word	0x20000600

080035e0 <UTIL_SEQ_WaitEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_WaitEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_id_bm;

  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_id_bm = (1 << CurrentTaskIdx);
 80035e8:	4b14      	ldr	r3, [pc, #80]	; (800363c <UTIL_SEQ_WaitEvt+0x5c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2201      	movs	r2, #1
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	60fb      	str	r3, [r7, #12]

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80035f4:	4b12      	ldr	r3, [pc, #72]	; (8003640 <UTIL_SEQ_WaitEvt+0x60>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	60bb      	str	r3, [r7, #8]
  EvtWaited = evt_id_bm;
 80035fa:	4a11      	ldr	r2, [pc, #68]	; (8003640 <UTIL_SEQ_WaitEvt+0x60>)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again fro the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while((EvtSet & EvtWaited) == 0)
 8003600:	e005      	b.n	800360e <UTIL_SEQ_WaitEvt+0x2e>
  {
    UTIL_SEQ_EvtIdle(current_task_id_bm, EvtWaited);
 8003602:	4b0f      	ldr	r3, [pc, #60]	; (8003640 <UTIL_SEQ_WaitEvt+0x60>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4619      	mov	r1, r3
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f7fd fdd6 	bl	80011ba <UTIL_SEQ_EvtIdle>
  while((EvtSet & EvtWaited) == 0)
 800360e:	4b0d      	ldr	r3, [pc, #52]	; (8003644 <UTIL_SEQ_WaitEvt+0x64>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <UTIL_SEQ_WaitEvt+0x60>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4013      	ands	r3, r2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0f2      	beq.n	8003602 <UTIL_SEQ_WaitEvt+0x22>
  }
  EvtSet &= (~EvtWaited);
 800361c:	4b08      	ldr	r3, [pc, #32]	; (8003640 <UTIL_SEQ_WaitEvt+0x60>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	43da      	mvns	r2, r3
 8003622:	4b08      	ldr	r3, [pc, #32]	; (8003644 <UTIL_SEQ_WaitEvt+0x64>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4013      	ands	r3, r2
 8003628:	4a06      	ldr	r2, [pc, #24]	; (8003644 <UTIL_SEQ_WaitEvt+0x64>)
 800362a:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 800362c:	4a04      	ldr	r2, [pc, #16]	; (8003640 <UTIL_SEQ_WaitEvt+0x60>)
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	6013      	str	r3, [r2, #0]

  return;
 8003632:	bf00      	nop
}
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	20000608 	.word	0x20000608
 8003640:	20000604 	.word	0x20000604
 8003644:	20000600 	.word	0x20000600

08003648 <UTIL_SEQ_PreIdle>:
   */
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800364c:	bf00      	nop
}
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8003656:	b480      	push	{r7}
 8003658:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800365a:	bf00      	nop
}
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <bit_position>:

#if( __CORTEX_M == 0)
static const uint8_t clz_table_4bit[16] = { 4, 3, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };	
static uint32_t bit_position(uint32_t value)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]

  uint32_t n = 0;
 800366c:	2300      	movs	r3, #0
 800366e:	60fb      	str	r3, [r7, #12]

  if ((value & 0xFFFF0000) == 0)  { n  = 16; value <<= 16;  }
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	0c1b      	lsrs	r3, r3, #16
 8003674:	041b      	lsls	r3, r3, #16
 8003676:	2b00      	cmp	r3, #0
 8003678:	d104      	bne.n	8003684 <bit_position+0x20>
 800367a:	2310      	movs	r3, #16
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	041b      	lsls	r3, r3, #16
 8003682:	607b      	str	r3, [r7, #4]
  if ((value & 0xFF000000) == 0)  { n +=  8; value <<=  8;  }
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d105      	bne.n	800369a <bit_position+0x36>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	3308      	adds	r3, #8
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	021b      	lsls	r3, r3, #8
 8003698:	607b      	str	r3, [r7, #4]
  if ((value & 0xF0000000) == 0)  { n +=  4; value <<=  4;  }
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d105      	bne.n	80036b0 <bit_position+0x4c>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	3304      	adds	r3, #4
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	607b      	str	r3, [r7, #4]

  n += (uint32_t)clz_table_4bit[value >> (32-4)];
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	0f1b      	lsrs	r3, r3, #28
 80036b4:	4a07      	ldr	r2, [pc, #28]	; (80036d4 <bit_position+0x70>)
 80036b6:	5cd3      	ldrb	r3, [r2, r3]
 80036b8:	461a      	mov	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4413      	add	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]

  return (31-n);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f1c3 031f 	rsb	r3, r3, #31
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	0800c664 	.word	0x0800c664

080036d8 <LL_RCC_HSE_SetCapacitorTuning>:
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80036e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e4:	4a0a      	ldr	r2, [pc, #40]	; (8003710 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80036e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80036ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036f2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	021b      	lsls	r3, r3, #8
 80036fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	cafecafe 	.word	0xcafecafe

08003714 <LL_AHB3_GRP1_EnableClock>:
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800371c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003720:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003722:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4313      	orrs	r3, r2
 800372a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800372c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003730:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4013      	ands	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003738:	68fb      	ldr	r3, [r7, #12]
}
 800373a:	bf00      	nop
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b082      	sub	sp, #8
 800374a:	af00      	add	r7, sp, #0

	OTP_ID0_t * p_otp;
	/**
	* Read HSE_Tuning from OTP
	*/
	p_otp = (OTP_ID0_t *) OTP_Read(0);
 800374c:	2000      	movs	r0, #0
 800374e:	f007 fa8f 	bl	800ac70 <OTP_Read>
 8003752:	6078      	str	r0, [r7, #4]
	if (p_otp)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d004      	beq.n	8003764 <HAL_MspInit+0x1e>
	{
		LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	799b      	ldrb	r3, [r3, #6]
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff ffba 	bl	80036d8 <LL_RCC_HSE_SetCapacitorTuning>
	}
  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8003764:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003768:	f7ff ffd4 	bl	8003714 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800376c:	2200      	movs	r2, #0
 800376e:	2100      	movs	r1, #0
 8003770:	202e      	movs	r0, #46	; 0x2e
 8003772:	f000 fd04 	bl	800417e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8003776:	202e      	movs	r0, #46	; 0x2e
 8003778:	f000 fd1b 	bl	80041b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800377c:	bf00      	nop
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003788:	bf00      	nop
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
	...

08003794 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8003798:	2102      	movs	r1, #2
 800379a:	4802      	ldr	r0, [pc, #8]	; (80037a4 <HardFault_Handler+0x10>)
 800379c:	f000 fed6 	bl	800454c <HAL_GPIO_TogglePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037a0:	e7fe      	b.n	80037a0 <HardFault_Handler+0xc>
 80037a2:	bf00      	nop
 80037a4:	48000400 	.word	0x48000400

080037a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037ac:	e7fe      	b.n	80037ac <MemManage_Handler+0x4>

080037ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037ae:	b480      	push	{r7}
 80037b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037b2:	e7fe      	b.n	80037b2 <BusFault_Handler+0x4>

080037b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037b8:	e7fe      	b.n	80037b8 <UsageFault_Handler+0x4>

080037ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037ba:	b480      	push	{r7}
 80037bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037be:	bf00      	nop
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037cc:	bf00      	nop
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037d6:	b480      	push	{r7}
 80037d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037da:	bf00      	nop
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037e8:	f000 fb44 	bl	8003e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037ec:	bf00      	nop
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80037f4:	4802      	ldr	r0, [pc, #8]	; (8003800 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80037f6:	f004 fb21 	bl	8007e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80037fa:	bf00      	nop
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	200008d0 	.word	0x200008d0

08003804 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003808:	f000 feba 	bl	8004580 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800380c:	bf00      	nop
 800380e:	bd80      	pop	{r7, pc}

08003810 <RTC_WKUP_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
* @brief This function handles RTC wake-up interrupt through EXTI line 19.
*/
void RTC_WKUP_IRQHandler(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
	HW_TS_RTC_Wakeup_Handler();
 8003814:	f7fe f8f6 	bl	8001a04 <HW_TS_RTC_Wakeup_Handler>
}
 8003818:	bf00      	nop
 800381a:	bd80      	pop	{r7, pc}

0800381c <IPCC_C1_RX_IRQHandler>:
/**
* @brief This function handles IPCC RX occupied interrupt.
*/
void IPCC_C1_RX_IRQHandler(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
	HW_IPCC_Rx_Handler();
 8003820:	f008 fd4e 	bl	800c2c0 <HW_IPCC_Rx_Handler>
}
 8003824:	bf00      	nop
 8003826:	bd80      	pop	{r7, pc}

08003828 <IPCC_C1_TX_IRQHandler>:
/**
* @brief This function handles IPCC TX free interrupt.
*/
void IPCC_C1_TX_IRQHandler(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
	HW_IPCC_Tx_Handler();
 800382c:	f008 fd80 	bl	800c330 <HW_IPCC_Tx_Handler>
}
 8003830:	bf00      	nop
 8003832:	bd80      	pop	{r7, pc}

08003834 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003838:	4b26      	ldr	r3, [pc, #152]	; (80038d4 <SystemInit+0xa0>)
 800383a:	2200      	movs	r2, #0
 800383c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800383e:	4b25      	ldr	r3, [pc, #148]	; (80038d4 <SystemInit+0xa0>)
 8003840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003844:	4a23      	ldr	r2, [pc, #140]	; (80038d4 <SystemInit+0xa0>)
 8003846:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800384a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800384e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003858:	f043 0301 	orr.w	r3, r3, #1
 800385c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800385e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003862:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003866:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003872:	4b19      	ldr	r3, [pc, #100]	; (80038d8 <SystemInit+0xa4>)
 8003874:	4013      	ands	r3, r2
 8003876:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800387c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003880:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003884:	f023 0305 	bic.w	r3, r3, #5
 8003888:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800388c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003890:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003894:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003898:	f023 0301 	bic.w	r3, r3, #1
 800389c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80038a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a4:	4a0d      	ldr	r2, [pc, #52]	; (80038dc <SystemInit+0xa8>)
 80038a6:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80038a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ac:	4a0b      	ldr	r2, [pc, #44]	; (80038dc <SystemInit+0xa8>)
 80038ae:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80038b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80038c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c4:	2200      	movs	r2, #0
 80038c6:	619a      	str	r2, [r3, #24]
}
 80038c8:	bf00      	nop
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	e000ed00 	.word	0xe000ed00
 80038d8:	faf6fefb 	.word	0xfaf6fefb
 80038dc:	22041000 	.word	0x22041000

080038e0 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 80038e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	091b      	lsrs	r3, r3, #4
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	4a47      	ldr	r2, [pc, #284]	; (8003a10 <SystemCoreClockUpdate+0x130>)
 80038f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038f8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 030c 	and.w	r3, r3, #12
 8003904:	2b0c      	cmp	r3, #12
 8003906:	d867      	bhi.n	80039d8 <SystemCoreClockUpdate+0xf8>
 8003908:	a201      	add	r2, pc, #4	; (adr r2, 8003910 <SystemCoreClockUpdate+0x30>)
 800390a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390e:	bf00      	nop
 8003910:	08003945 	.word	0x08003945
 8003914:	080039d9 	.word	0x080039d9
 8003918:	080039d9 	.word	0x080039d9
 800391c:	080039d9 	.word	0x080039d9
 8003920:	0800394d 	.word	0x0800394d
 8003924:	080039d9 	.word	0x080039d9
 8003928:	080039d9 	.word	0x080039d9
 800392c:	080039d9 	.word	0x080039d9
 8003930:	08003955 	.word	0x08003955
 8003934:	080039d9 	.word	0x080039d9
 8003938:	080039d9 	.word	0x080039d9
 800393c:	080039d9 	.word	0x080039d9
 8003940:	0800395d 	.word	0x0800395d
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8003944:	4a33      	ldr	r2, [pc, #204]	; (8003a14 <SystemCoreClockUpdate+0x134>)
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	6013      	str	r3, [r2, #0]
      break;
 800394a:	e049      	b.n	80039e0 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 800394c:	4b31      	ldr	r3, [pc, #196]	; (8003a14 <SystemCoreClockUpdate+0x134>)
 800394e:	4a32      	ldr	r2, [pc, #200]	; (8003a18 <SystemCoreClockUpdate+0x138>)
 8003950:	601a      	str	r2, [r3, #0]
      break;
 8003952:	e045      	b.n	80039e0 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8003954:	4b2f      	ldr	r3, [pc, #188]	; (8003a14 <SystemCoreClockUpdate+0x134>)
 8003956:	4a31      	ldr	r2, [pc, #196]	; (8003a1c <SystemCoreClockUpdate+0x13c>)
 8003958:	601a      	str	r2, [r3, #0]
      break;
 800395a:	e041      	b.n	80039e0 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800395c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8003968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	091b      	lsrs	r3, r3, #4
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	3301      	adds	r3, #1
 8003976:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b02      	cmp	r3, #2
 800397c:	d105      	bne.n	800398a <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 800397e:	4a26      	ldr	r2, [pc, #152]	; (8003a18 <SystemCoreClockUpdate+0x138>)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	fbb2 f3f3 	udiv	r3, r2, r3
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	e00d      	b.n	80039a6 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2b03      	cmp	r3, #3
 800398e:	d105      	bne.n	800399c <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8003990:	4a22      	ldr	r2, [pc, #136]	; (8003a1c <SystemCoreClockUpdate+0x13c>)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	fbb2 f3f3 	udiv	r3, r2, r3
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	e004      	b.n	80039a6 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a4:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	0a1b      	lsrs	r3, r3, #8
 80039ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	fb02 f303 	mul.w	r3, r2, r3
 80039b8:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 80039ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	0f5b      	lsrs	r3, r3, #29
 80039c2:	f003 0307 	and.w	r3, r3, #7
 80039c6:	3301      	adds	r3, #1
 80039c8:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d2:	4a10      	ldr	r2, [pc, #64]	; (8003a14 <SystemCoreClockUpdate+0x134>)
 80039d4:	6013      	str	r3, [r2, #0]
      break;
 80039d6:	e003      	b.n	80039e0 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 80039d8:	4a0e      	ldr	r2, [pc, #56]	; (8003a14 <SystemCoreClockUpdate+0x134>)
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	6013      	str	r3, [r2, #0]
      break;
 80039de:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80039e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	091b      	lsrs	r3, r3, #4
 80039e8:	f003 030f 	and.w	r3, r3, #15
 80039ec:	4a0c      	ldr	r2, [pc, #48]	; (8003a20 <SystemCoreClockUpdate+0x140>)
 80039ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f2:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 80039f4:	4b07      	ldr	r3, [pc, #28]	; (8003a14 <SystemCoreClockUpdate+0x134>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fe:	4a05      	ldr	r2, [pc, #20]	; (8003a14 <SystemCoreClockUpdate+0x134>)
 8003a00:	6013      	str	r3, [r2, #0]

}
 8003a02:	bf00      	nop
 8003a04:	371c      	adds	r7, #28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	0800c6d4 	.word	0x0800c6d4
 8003a14:	20000040 	.word	0x20000040
 8003a18:	00f42400 	.word	0x00f42400
 8003a1c:	01e84800 	.word	0x01e84800
 8003a20:	0800c674 	.word	0x0800c674

08003a24 <LL_APB2_GRP1_EnableClock>:
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a40:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4013      	ands	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a48:	68fb      	ldr	r3, [r7, #12]
}
 8003a4a:	bf00      	nop
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
	...

08003a58 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8003a5c:	4b10      	ldr	r3, [pc, #64]	; (8003aa0 <MX_TIM16_Init+0x48>)
 8003a5e:	4a11      	ldr	r2, [pc, #68]	; (8003aa4 <MX_TIM16_Init+0x4c>)
 8003a60:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1000;
 8003a62:	4b0f      	ldr	r3, [pc, #60]	; (8003aa0 <MX_TIM16_Init+0x48>)
 8003a64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a68:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a6a:	4b0d      	ldr	r3, [pc, #52]	; (8003aa0 <MX_TIM16_Init+0x48>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 320;
 8003a70:	4b0b      	ldr	r3, [pc, #44]	; (8003aa0 <MX_TIM16_Init+0x48>)
 8003a72:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a76:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a78:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <MX_TIM16_Init+0x48>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003a7e:	4b08      	ldr	r3, [pc, #32]	; (8003aa0 <MX_TIM16_Init+0x48>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a84:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <MX_TIM16_Init+0x48>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003a8a:	4805      	ldr	r0, [pc, #20]	; (8003aa0 <MX_TIM16_Init+0x48>)
 8003a8c:	f004 f981 	bl	8007d92 <HAL_TIM_Base_Init>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8003a96:	f7ff f9fd 	bl	8002e94 <Error_Handler>
  }

}
 8003a9a:	bf00      	nop
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	200008d0 	.word	0x200008d0
 8003aa4:	40014400 	.word	0x40014400

08003aa8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a09      	ldr	r2, [pc, #36]	; (8003adc <HAL_TIM_Base_MspInit+0x34>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d10b      	bne.n	8003ad2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003aba:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003abe:	f7ff ffb1 	bl	8003a24 <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	2019      	movs	r0, #25
 8003ac8:	f000 fb59 	bl	800417e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003acc:	2019      	movs	r0, #25
 8003ace:	f000 fb70 	bl	80041b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40014400 	.word	0x40014400

08003ae0 <LL_AHB2_GRP1_EnableClock>:
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003aee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003afc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4013      	ands	r3, r2
 8003b02:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b04:	68fb      	ldr	r3, [r7, #12]
}
 8003b06:	bf00      	nop
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <LL_APB2_GRP1_EnableClock>:
{
 8003b12:	b480      	push	{r7}
 8003b14:	b085      	sub	sp, #20
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b2e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4013      	ands	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b36:	68fb      	ldr	r3, [r7, #12]
}
 8003b38:	bf00      	nop
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003b48:	4b22      	ldr	r3, [pc, #136]	; (8003bd4 <MX_USART1_UART_Init+0x90>)
 8003b4a:	4a23      	ldr	r2, [pc, #140]	; (8003bd8 <MX_USART1_UART_Init+0x94>)
 8003b4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003b4e:	4b21      	ldr	r3, [pc, #132]	; (8003bd4 <MX_USART1_UART_Init+0x90>)
 8003b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b56:	4b1f      	ldr	r3, [pc, #124]	; (8003bd4 <MX_USART1_UART_Init+0x90>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b5c:	4b1d      	ldr	r3, [pc, #116]	; (8003bd4 <MX_USART1_UART_Init+0x90>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b62:	4b1c      	ldr	r3, [pc, #112]	; (8003bd4 <MX_USART1_UART_Init+0x90>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b68:	4b1a      	ldr	r3, [pc, #104]	; (8003bd4 <MX_USART1_UART_Init+0x90>)
 8003b6a:	220c      	movs	r2, #12
 8003b6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b6e:	4b19      	ldr	r3, [pc, #100]	; (8003bd4 <MX_USART1_UART_Init+0x90>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b74:	4b17      	ldr	r3, [pc, #92]	; (8003bd4 <MX_USART1_UART_Init+0x90>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b7a:	4b16      	ldr	r3, [pc, #88]	; (8003bd4 <MX_USART1_UART_Init+0x90>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003b80:	4b14      	ldr	r3, [pc, #80]	; (8003bd4 <MX_USART1_UART_Init+0x90>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b86:	4b13      	ldr	r3, [pc, #76]	; (8003bd4 <MX_USART1_UART_Init+0x90>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b8c:	4811      	ldr	r0, [pc, #68]	; (8003bd4 <MX_USART1_UART_Init+0x90>)
 8003b8e:	f004 fb3f 	bl	8008210 <HAL_UART_Init>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003b98:	f7ff f97c 	bl	8002e94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	480d      	ldr	r0, [pc, #52]	; (8003bd4 <MX_USART1_UART_Init+0x90>)
 8003ba0:	f005 fd8d 	bl	80096be <HAL_UARTEx_SetTxFifoThreshold>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003baa:	f7ff f973 	bl	8002e94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003bae:	2100      	movs	r1, #0
 8003bb0:	4808      	ldr	r0, [pc, #32]	; (8003bd4 <MX_USART1_UART_Init+0x90>)
 8003bb2:	f005 fdc2 	bl	800973a <HAL_UARTEx_SetRxFifoThreshold>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003bbc:	f7ff f96a 	bl	8002e94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003bc0:	4804      	ldr	r0, [pc, #16]	; (8003bd4 <MX_USART1_UART_Init+0x90>)
 8003bc2:	f005 fd43 	bl	800964c <HAL_UARTEx_DisableFifoMode>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003bcc:	f7ff f962 	bl	8002e94 <Error_Handler>
  }

}
 8003bd0:	bf00      	nop
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	20000910 	.word	0x20000910
 8003bd8:	40013800 	.word	0x40013800

08003bdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be4:	f107 030c 	add.w	r3, r7, #12
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	605a      	str	r2, [r3, #4]
 8003bee:	609a      	str	r2, [r3, #8]
 8003bf0:	60da      	str	r2, [r3, #12]
 8003bf2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a0e      	ldr	r2, [pc, #56]	; (8003c34 <HAL_UART_MspInit+0x58>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d116      	bne.n	8003c2c <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bfe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003c02:	f7ff ff86 	bl	8003b12 <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c06:	2002      	movs	r0, #2
 8003c08:	f7ff ff6a 	bl	8003ae0 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003c0c:	23c0      	movs	r3, #192	; 0xc0
 8003c0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c10:	2302      	movs	r3, #2
 8003c12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c1c:	2307      	movs	r3, #7
 8003c1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c20:	f107 030c 	add.w	r3, r7, #12
 8003c24:	4619      	mov	r1, r3
 8003c26:	4804      	ldr	r0, [pc, #16]	; (8003c38 <HAL_UART_MspInit+0x5c>)
 8003c28:	f000 fb08 	bl	800423c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003c2c:	bf00      	nop
 8003c2e:	3720      	adds	r7, #32
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40013800 	.word	0x40013800
 8003c38:	48000400 	.word	0x48000400

08003c3c <LL_AHB2_GRP1_EnableClock>:
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003c60:	68fb      	ldr	r3, [r7, #12]
}
 8003c62:	bf00      	nop
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <LL_APB1_GRP1_EnableClock>:
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b085      	sub	sp, #20
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c7a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003c92:	68fb      	ldr	r3, [r7, #12]
}
 8003c94:	bf00      	nop
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0

  hpcd_USB_FS.Instance = USB;
 8003ca4:	4b10      	ldr	r3, [pc, #64]	; (8003ce8 <MX_USB_PCD_Init+0x48>)
 8003ca6:	4a11      	ldr	r2, [pc, #68]	; (8003cec <MX_USB_PCD_Init+0x4c>)
 8003ca8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003caa:	4b0f      	ldr	r3, [pc, #60]	; (8003ce8 <MX_USB_PCD_Init+0x48>)
 8003cac:	2208      	movs	r2, #8
 8003cae:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003cb0:	4b0d      	ldr	r3, [pc, #52]	; (8003ce8 <MX_USB_PCD_Init+0x48>)
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003cb6:	4b0c      	ldr	r3, [pc, #48]	; (8003ce8 <MX_USB_PCD_Init+0x48>)
 8003cb8:	2202      	movs	r2, #2
 8003cba:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8003cbc:	4b0a      	ldr	r3, [pc, #40]	; (8003ce8 <MX_USB_PCD_Init+0x48>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003cc2:	4b09      	ldr	r3, [pc, #36]	; (8003ce8 <MX_USB_PCD_Init+0x48>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003cc8:	4b07      	ldr	r3, [pc, #28]	; (8003ce8 <MX_USB_PCD_Init+0x48>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003cce:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <MX_USB_PCD_Init+0x48>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003cd4:	4804      	ldr	r0, [pc, #16]	; (8003ce8 <MX_USB_PCD_Init+0x48>)
 8003cd6:	f001 f968 	bl	8004faa <HAL_PCD_Init>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8003ce0:	f7ff f8d8 	bl	8002e94 <Error_Handler>
  }

}
 8003ce4:	bf00      	nop
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	2000099c 	.word	0x2000099c
 8003cec:	40006800 	.word	0x40006800

08003cf0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf8:	f107 030c 	add.w	r3, r7, #12
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	605a      	str	r2, [r3, #4]
 8003d02:	609a      	str	r2, [r3, #8]
 8003d04:	60da      	str	r2, [r3, #12]
 8003d06:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a0f      	ldr	r2, [pc, #60]	; (8003d4c <HAL_PCD_MspInit+0x5c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d118      	bne.n	8003d44 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d12:	2001      	movs	r0, #1
 8003d14:	f7ff ff92 	bl	8003c3c <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003d18:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003d1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d1e:	2302      	movs	r3, #2
 8003d20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d26:	2300      	movs	r3, #0
 8003d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8003d2a:	230a      	movs	r3, #10
 8003d2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d2e:	f107 030c 	add.w	r3, r7, #12
 8003d32:	4619      	mov	r1, r3
 8003d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d38:	f000 fa80 	bl	800423c <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003d3c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003d40:	f7ff ff95 	bl	8003c6e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8003d44:	bf00      	nop
 8003d46:	3720      	adds	r7, #32
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40006800 	.word	0x40006800

08003d50 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003d50:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d52:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d54:	3304      	adds	r3, #4

08003d56 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d56:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d58:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003d5a:	d3f9      	bcc.n	8003d50 <CopyDataInit>
  bx lr
 8003d5c:	4770      	bx	lr

08003d5e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003d5e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003d60:	3004      	adds	r0, #4

08003d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003d62:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003d64:	d3fb      	bcc.n	8003d5e <FillZerobss>
  bx lr
 8003d66:	4770      	bx	lr

08003d68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003d68:	480c      	ldr	r0, [pc, #48]	; (8003d9c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8003d6a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003d6c:	480c      	ldr	r0, [pc, #48]	; (8003da0 <LoopForever+0x8>)
 8003d6e:	490d      	ldr	r1, [pc, #52]	; (8003da4 <LoopForever+0xc>)
 8003d70:	4a0d      	ldr	r2, [pc, #52]	; (8003da8 <LoopForever+0x10>)
 8003d72:	2300      	movs	r3, #0
 8003d74:	f7ff ffef 	bl	8003d56 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003d78:	480c      	ldr	r0, [pc, #48]	; (8003dac <LoopForever+0x14>)
 8003d7a:	490d      	ldr	r1, [pc, #52]	; (8003db0 <LoopForever+0x18>)
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f7ff fff0 	bl	8003d62 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003d82:	480c      	ldr	r0, [pc, #48]	; (8003db4 <LoopForever+0x1c>)
 8003d84:	490c      	ldr	r1, [pc, #48]	; (8003db8 <LoopForever+0x20>)
 8003d86:	2300      	movs	r3, #0
 8003d88:	f7ff ffeb 	bl	8003d62 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003d8c:	f7ff fd52 	bl	8003834 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003d90:	f008 fbde 	bl	800c550 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8003d94:	f7fe fa94 	bl	80022c0 <main>

08003d98 <LoopForever>:

LoopForever:
  b LoopForever
 8003d98:	e7fe      	b.n	8003d98 <LoopForever>
 8003d9a:	0000      	.short	0x0000
  ldr   r0, =_estack
 8003d9c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003da0:	20000004 	.word	0x20000004
 8003da4:	2000005c 	.word	0x2000005c
 8003da8:	0800c754 	.word	0x0800c754
  INIT_BSS _sbss, _ebss
 8003dac:	200001f4 	.word	0x200001f4
 8003db0:	20000c18 	.word	0x20000c18
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003db4:	200301c4 	.word	0x200301c4
 8003db8:	20030a44 	.word	0x20030a44

08003dbc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003dbc:	e7fe      	b.n	8003dbc <ADC1_IRQHandler>
	...

08003dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dca:	4b0c      	ldr	r3, [pc, #48]	; (8003dfc <HAL_Init+0x3c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a0b      	ldr	r2, [pc, #44]	; (8003dfc <HAL_Init+0x3c>)
 8003dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dd6:	2003      	movs	r0, #3
 8003dd8:	f000 f9c6 	bl	8004168 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ddc:	2000      	movs	r0, #0
 8003dde:	f000 f80f 	bl	8003e00 <HAL_InitTick>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d002      	beq.n	8003dee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	71fb      	strb	r3, [r7, #7]
 8003dec:	e001      	b.n	8003df2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003dee:	f7ff fcaa 	bl	8003746 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003df2:	79fb      	ldrb	r3, [r7, #7]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	58004000 	.word	0x58004000

08003e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003e0c:	4b17      	ldr	r3, [pc, #92]	; (8003e6c <HAL_InitTick+0x6c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d023      	beq.n	8003e5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 8003e14:	f002 fa64 	bl	80062e0 <HAL_RCC_GetHCLKFreq>
 8003e18:	4601      	mov	r1, r0
 8003e1a:	4b14      	ldr	r3, [pc, #80]	; (8003e6c <HAL_InitTick+0x6c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e26:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 f9dd 	bl	80041ea <HAL_SYSTICK_Config>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10f      	bne.n	8003e56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b0f      	cmp	r3, #15
 8003e3a:	d809      	bhi.n	8003e50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e44:	f000 f99b 	bl	800417e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003e48:	4a09      	ldr	r2, [pc, #36]	; (8003e70 <HAL_InitTick+0x70>)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	e007      	b.n	8003e60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	73fb      	strb	r3, [r7, #15]
 8003e54:	e004      	b.n	8003e60 <HAL_InitTick+0x60>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	73fb      	strb	r3, [r7, #15]
 8003e5a:	e001      	b.n	8003e60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	20000048 	.word	0x20000048
 8003e70:	20000044 	.word	0x20000044

08003e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e78:	4b05      	ldr	r3, [pc, #20]	; (8003e90 <HAL_IncTick+0x1c>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <HAL_IncTick+0x20>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4413      	add	r3, r2
 8003e82:	4a03      	ldr	r2, [pc, #12]	; (8003e90 <HAL_IncTick+0x1c>)
 8003e84:	6013      	str	r3, [r2, #0]
}
 8003e86:	bf00      	nop
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	20000c10 	.word	0x20000c10
 8003e94:	20000048 	.word	0x20000048

08003e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8003e9c:	4b03      	ldr	r3, [pc, #12]	; (8003eac <HAL_GetTick+0x14>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	20000c10 	.word	0x20000c10

08003eb0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003eb4:	4b03      	ldr	r3, [pc, #12]	; (8003ec4 <HAL_GetTickPrio+0x14>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	20000044 	.word	0x20000044

08003ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8003ed0:	f7ff ffe2 	bl	8003e98 <HAL_GetTick>
 8003ed4:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ee0:	d004      	beq.n	8003eec <HAL_Delay+0x24>
    {
      wait += (uint32_t)(uwTickFreq);
 8003ee2:	4b09      	ldr	r3, [pc, #36]	; (8003f08 <HAL_Delay+0x40>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4413      	add	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8003eec:	bf00      	nop
 8003eee:	f7ff ffd3 	bl	8003e98 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d8f7      	bhi.n	8003eee <HAL_Delay+0x26>
    {
    }
  }
 8003efe:	bf00      	nop
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20000048 	.word	0x20000048

08003f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f003 0307 	and.w	r3, r3, #7
 8003f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f1c:	4b0c      	ldr	r3, [pc, #48]	; (8003f50 <__NVIC_SetPriorityGrouping+0x44>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f28:	4013      	ands	r3, r2
 8003f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f3e:	4a04      	ldr	r2, [pc, #16]	; (8003f50 <__NVIC_SetPriorityGrouping+0x44>)
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	60d3      	str	r3, [r2, #12]
}
 8003f44:	bf00      	nop
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	e000ed00 	.word	0xe000ed00

08003f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f58:	4b04      	ldr	r3, [pc, #16]	; (8003f6c <__NVIC_GetPriorityGrouping+0x18>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	0a1b      	lsrs	r3, r3, #8
 8003f5e:	f003 0307 	and.w	r3, r3, #7
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	e000ed00 	.word	0xe000ed00

08003f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	4603      	mov	r3, r0
 8003f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	db0b      	blt.n	8003f9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f82:	79fb      	ldrb	r3, [r7, #7]
 8003f84:	f003 021f 	and.w	r2, r3, #31
 8003f88:	4907      	ldr	r1, [pc, #28]	; (8003fa8 <__NVIC_EnableIRQ+0x38>)
 8003f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f8e:	095b      	lsrs	r3, r3, #5
 8003f90:	2001      	movs	r0, #1
 8003f92:	fa00 f202 	lsl.w	r2, r0, r2
 8003f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	e000e100 	.word	0xe000e100

08003fac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	db10      	blt.n	8003fe0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fbe:	79fb      	ldrb	r3, [r7, #7]
 8003fc0:	f003 021f 	and.w	r2, r3, #31
 8003fc4:	4909      	ldr	r1, [pc, #36]	; (8003fec <__NVIC_DisableIRQ+0x40>)
 8003fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fca:	095b      	lsrs	r3, r3, #5
 8003fcc:	2001      	movs	r0, #1
 8003fce:	fa00 f202 	lsl.w	r2, r0, r2
 8003fd2:	3320      	adds	r3, #32
 8003fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003fd8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003fdc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	e000e100 	.word	0xe000e100

08003ff0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	db0c      	blt.n	800401c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004002:	79fb      	ldrb	r3, [r7, #7]
 8004004:	f003 021f 	and.w	r2, r3, #31
 8004008:	4907      	ldr	r1, [pc, #28]	; (8004028 <__NVIC_SetPendingIRQ+0x38>)
 800400a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400e:	095b      	lsrs	r3, r3, #5
 8004010:	2001      	movs	r0, #1
 8004012:	fa00 f202 	lsl.w	r2, r0, r2
 8004016:	3340      	adds	r3, #64	; 0x40
 8004018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	e000e100 	.word	0xe000e100

0800402c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	4603      	mov	r3, r0
 8004034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403a:	2b00      	cmp	r3, #0
 800403c:	db0c      	blt.n	8004058 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800403e:	79fb      	ldrb	r3, [r7, #7]
 8004040:	f003 021f 	and.w	r2, r3, #31
 8004044:	4907      	ldr	r1, [pc, #28]	; (8004064 <__NVIC_ClearPendingIRQ+0x38>)
 8004046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	2001      	movs	r0, #1
 800404e:	fa00 f202 	lsl.w	r2, r0, r2
 8004052:	3360      	adds	r3, #96	; 0x60
 8004054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	e000e100 	.word	0xe000e100

08004068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	4603      	mov	r3, r0
 8004070:	6039      	str	r1, [r7, #0]
 8004072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004078:	2b00      	cmp	r3, #0
 800407a:	db0a      	blt.n	8004092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	b2da      	uxtb	r2, r3
 8004080:	490c      	ldr	r1, [pc, #48]	; (80040b4 <__NVIC_SetPriority+0x4c>)
 8004082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004086:	0112      	lsls	r2, r2, #4
 8004088:	b2d2      	uxtb	r2, r2
 800408a:	440b      	add	r3, r1
 800408c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004090:	e00a      	b.n	80040a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	b2da      	uxtb	r2, r3
 8004096:	4908      	ldr	r1, [pc, #32]	; (80040b8 <__NVIC_SetPriority+0x50>)
 8004098:	79fb      	ldrb	r3, [r7, #7]
 800409a:	f003 030f 	and.w	r3, r3, #15
 800409e:	3b04      	subs	r3, #4
 80040a0:	0112      	lsls	r2, r2, #4
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	440b      	add	r3, r1
 80040a6:	761a      	strb	r2, [r3, #24]
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	e000e100 	.word	0xe000e100
 80040b8:	e000ed00 	.word	0xe000ed00

080040bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040bc:	b480      	push	{r7}
 80040be:	b089      	sub	sp, #36	; 0x24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	f1c3 0307 	rsb	r3, r3, #7
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	bf28      	it	cs
 80040da:	2304      	movcs	r3, #4
 80040dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	3304      	adds	r3, #4
 80040e2:	2b06      	cmp	r3, #6
 80040e4:	d902      	bls.n	80040ec <NVIC_EncodePriority+0x30>
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	3b03      	subs	r3, #3
 80040ea:	e000      	b.n	80040ee <NVIC_EncodePriority+0x32>
 80040ec:	2300      	movs	r3, #0
 80040ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	43da      	mvns	r2, r3
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	401a      	ands	r2, r3
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004104:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	fa01 f303 	lsl.w	r3, r1, r3
 800410e:	43d9      	mvns	r1, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004114:	4313      	orrs	r3, r2
         );
}
 8004116:	4618      	mov	r0, r3
 8004118:	3724      	adds	r7, #36	; 0x24
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
	...

08004124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3b01      	subs	r3, #1
 8004130:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004134:	d301      	bcc.n	800413a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004136:	2301      	movs	r3, #1
 8004138:	e00f      	b.n	800415a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800413a:	4a0a      	ldr	r2, [pc, #40]	; (8004164 <SysTick_Config+0x40>)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3b01      	subs	r3, #1
 8004140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004142:	210f      	movs	r1, #15
 8004144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004148:	f7ff ff8e 	bl	8004068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800414c:	4b05      	ldr	r3, [pc, #20]	; (8004164 <SysTick_Config+0x40>)
 800414e:	2200      	movs	r2, #0
 8004150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004152:	4b04      	ldr	r3, [pc, #16]	; (8004164 <SysTick_Config+0x40>)
 8004154:	2207      	movs	r2, #7
 8004156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	e000e010 	.word	0xe000e010

08004168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7ff fecb 	bl	8003f0c <__NVIC_SetPriorityGrouping>
}
 8004176:	bf00      	nop
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b086      	sub	sp, #24
 8004182:	af00      	add	r7, sp, #0
 8004184:	4603      	mov	r3, r0
 8004186:	60b9      	str	r1, [r7, #8]
 8004188:	607a      	str	r2, [r7, #4]
 800418a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800418c:	f7ff fee2 	bl	8003f54 <__NVIC_GetPriorityGrouping>
 8004190:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	68b9      	ldr	r1, [r7, #8]
 8004196:	6978      	ldr	r0, [r7, #20]
 8004198:	f7ff ff90 	bl	80040bc <NVIC_EncodePriority>
 800419c:	4602      	mov	r2, r0
 800419e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041a2:	4611      	mov	r1, r2
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff ff5f 	bl	8004068 <__NVIC_SetPriority>
}
 80041aa:	bf00      	nop
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b082      	sub	sp, #8
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	4603      	mov	r3, r0
 80041ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff fed5 	bl	8003f70 <__NVIC_EnableIRQ>
}
 80041c6:	bf00      	nop
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b082      	sub	sp, #8
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	4603      	mov	r3, r0
 80041d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80041d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041dc:	4618      	mov	r0, r3
 80041de:	f7ff fee5 	bl	8003fac <__NVIC_DisableIRQ>
}
 80041e2:	bf00      	nop
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b082      	sub	sp, #8
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7ff ff96 	bl	8004124 <SysTick_Config>
 80041f8:	4603      	mov	r3, r0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b082      	sub	sp, #8
 8004206:	af00      	add	r7, sp, #0
 8004208:	4603      	mov	r3, r0
 800420a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800420c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff feed 	bl	8003ff0 <__NVIC_SetPendingIRQ>
}
 8004216:	bf00      	nop
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b082      	sub	sp, #8
 8004222:	af00      	add	r7, sp, #0
 8004224:	4603      	mov	r3, r0
 8004226:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff fefd 	bl	800402c <__NVIC_ClearPendingIRQ>
}
 8004232:	bf00      	nop
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800424a:	e14c      	b.n	80044e6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	2101      	movs	r1, #1
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	fa01 f303 	lsl.w	r3, r1, r3
 8004258:	4013      	ands	r3, r2
 800425a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 813e 	beq.w	80044e0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	2b02      	cmp	r3, #2
 800426a:	d003      	beq.n	8004274 <HAL_GPIO_Init+0x38>
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	2b12      	cmp	r3, #18
 8004272:	d123      	bne.n	80042bc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	08da      	lsrs	r2, r3, #3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3208      	adds	r2, #8
 800427c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004280:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	220f      	movs	r2, #15
 800428c:	fa02 f303 	lsl.w	r3, r2, r3
 8004290:	43db      	mvns	r3, r3
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4013      	ands	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	691a      	ldr	r2, [r3, #16]
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f003 0307 	and.w	r3, r3, #7
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	08da      	lsrs	r2, r3, #3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	3208      	adds	r2, #8
 80042b6:	6939      	ldr	r1, [r7, #16]
 80042b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	2203      	movs	r2, #3
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	43db      	mvns	r3, r3
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4013      	ands	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f003 0203 	and.w	r2, r3, #3
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d00b      	beq.n	8004310 <HAL_GPIO_Init+0xd4>
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d007      	beq.n	8004310 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004304:	2b11      	cmp	r3, #17
 8004306:	d003      	beq.n	8004310 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	2b12      	cmp	r3, #18
 800430e:	d130      	bne.n	8004372 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	2203      	movs	r2, #3
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	43db      	mvns	r3, r3
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4013      	ands	r3, r2
 8004326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004346:	2201      	movs	r2, #1
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	43db      	mvns	r3, r3
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4013      	ands	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	091b      	lsrs	r3, r3, #4
 800435c:	f003 0201 	and.w	r2, r3, #1
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4313      	orrs	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	2203      	movs	r2, #3
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	43db      	mvns	r3, r3
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	4013      	ands	r3, r2
 8004388:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	689a      	ldr	r2, [r3, #8]
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	4313      	orrs	r3, r2
 800439a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 8098 	beq.w	80044e0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80043b0:	4a54      	ldr	r2, [pc, #336]	; (8004504 <HAL_GPIO_Init+0x2c8>)
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	089b      	lsrs	r3, r3, #2
 80043b6:	3302      	adds	r3, #2
 80043b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f003 0303 	and.w	r3, r3, #3
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	220f      	movs	r2, #15
 80043c8:	fa02 f303 	lsl.w	r3, r2, r3
 80043cc:	43db      	mvns	r3, r3
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4013      	ands	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80043da:	d019      	beq.n	8004410 <HAL_GPIO_Init+0x1d4>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a4a      	ldr	r2, [pc, #296]	; (8004508 <HAL_GPIO_Init+0x2cc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d013      	beq.n	800440c <HAL_GPIO_Init+0x1d0>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a49      	ldr	r2, [pc, #292]	; (800450c <HAL_GPIO_Init+0x2d0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d00d      	beq.n	8004408 <HAL_GPIO_Init+0x1cc>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a48      	ldr	r2, [pc, #288]	; (8004510 <HAL_GPIO_Init+0x2d4>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d007      	beq.n	8004404 <HAL_GPIO_Init+0x1c8>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a47      	ldr	r2, [pc, #284]	; (8004514 <HAL_GPIO_Init+0x2d8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d101      	bne.n	8004400 <HAL_GPIO_Init+0x1c4>
 80043fc:	2304      	movs	r3, #4
 80043fe:	e008      	b.n	8004412 <HAL_GPIO_Init+0x1d6>
 8004400:	2307      	movs	r3, #7
 8004402:	e006      	b.n	8004412 <HAL_GPIO_Init+0x1d6>
 8004404:	2303      	movs	r3, #3
 8004406:	e004      	b.n	8004412 <HAL_GPIO_Init+0x1d6>
 8004408:	2302      	movs	r3, #2
 800440a:	e002      	b.n	8004412 <HAL_GPIO_Init+0x1d6>
 800440c:	2301      	movs	r3, #1
 800440e:	e000      	b.n	8004412 <HAL_GPIO_Init+0x1d6>
 8004410:	2300      	movs	r3, #0
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	f002 0203 	and.w	r2, r2, #3
 8004418:	0092      	lsls	r2, r2, #2
 800441a:	4093      	lsls	r3, r2
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	4313      	orrs	r3, r2
 8004420:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004422:	4938      	ldr	r1, [pc, #224]	; (8004504 <HAL_GPIO_Init+0x2c8>)
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	089b      	lsrs	r3, r3, #2
 8004428:	3302      	adds	r3, #2
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004430:	4b39      	ldr	r3, [pc, #228]	; (8004518 <HAL_GPIO_Init+0x2dc>)
 8004432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	43db      	mvns	r3, r3
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4013      	ands	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4313      	orrs	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004456:	4a30      	ldr	r2, [pc, #192]	; (8004518 <HAL_GPIO_Init+0x2dc>)
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800445e:	4b2e      	ldr	r3, [pc, #184]	; (8004518 <HAL_GPIO_Init+0x2dc>)
 8004460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004464:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	43db      	mvns	r3, r3
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	4013      	ands	r3, r2
 800446e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	4313      	orrs	r3, r2
 8004482:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004484:	4a24      	ldr	r2, [pc, #144]	; (8004518 <HAL_GPIO_Init+0x2dc>)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800448c:	4b22      	ldr	r3, [pc, #136]	; (8004518 <HAL_GPIO_Init+0x2dc>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	43db      	mvns	r3, r3
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	4013      	ands	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80044b0:	4a19      	ldr	r2, [pc, #100]	; (8004518 <HAL_GPIO_Init+0x2dc>)
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80044b6:	4b18      	ldr	r3, [pc, #96]	; (8004518 <HAL_GPIO_Init+0x2dc>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	43db      	mvns	r3, r3
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	4013      	ands	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80044da:	4a0f      	ldr	r2, [pc, #60]	; (8004518 <HAL_GPIO_Init+0x2dc>)
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	3301      	adds	r3, #1
 80044e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	fa22 f303 	lsr.w	r3, r2, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f47f aeab 	bne.w	800424c <HAL_GPIO_Init+0x10>
  }
}
 80044f6:	bf00      	nop
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40010000 	.word	0x40010000
 8004508:	48000400 	.word	0x48000400
 800450c:	48000800 	.word	0x48000800
 8004510:	48000c00 	.word	0x48000c00
 8004514:	48001000 	.word	0x48001000
 8004518:	58000800 	.word	0x58000800

0800451c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	460b      	mov	r3, r1
 8004526:	807b      	strh	r3, [r7, #2]
 8004528:	4613      	mov	r3, r2
 800452a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800452c:	787b      	ldrb	r3, [r7, #1]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004532:	887a      	ldrh	r2, [r7, #2]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004538:	e002      	b.n	8004540 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800453a:	887a      	ldrh	r2, [r7, #2]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	460b      	mov	r3, r1
 8004556:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	695a      	ldr	r2, [r3, #20]
 800455c:	887b      	ldrh	r3, [r7, #2]
 800455e:	4013      	ands	r3, r2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004564:	887a      	ldrh	r2, [r7, #2]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800456a:	e002      	b.n	8004572 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800456c:	887a      	ldrh	r2, [r7, #2]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	619a      	str	r2, [r3, #24]
}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
	...

08004580 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004586:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <HAL_HSEM_IRQHandler+0x30>)
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800458c:	4b08      	ldr	r3, [pc, #32]	; (80045b0 <HAL_HSEM_IRQHandler+0x30>)
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	43db      	mvns	r3, r3
 8004594:	4906      	ldr	r1, [pc, #24]	; (80045b0 <HAL_HSEM_IRQHandler+0x30>)
 8004596:	4013      	ands	r3, r2
 8004598:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800459a:	4a05      	ldr	r2, [pc, #20]	; (80045b0 <HAL_HSEM_IRQHandler+0x30>)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f807 	bl	80045b4 <HAL_HSEM_FreeCallback>
}
 80045a6:	bf00      	nop
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	58001500 	.word	0x58001500

080045b4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e081      	b.n	80046de <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d106      	bne.n	80045f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7fd fdfe 	bl	80021f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2224      	movs	r2, #36	; 0x24
 80045f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0201 	bic.w	r2, r2, #1
 800460a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004618:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004628:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d107      	bne.n	8004642 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689a      	ldr	r2, [r3, #8]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800463e:	609a      	str	r2, [r3, #8]
 8004640:	e006      	b.n	8004650 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800464e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	2b02      	cmp	r3, #2
 8004656:	d104      	bne.n	8004662 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004660:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	6812      	ldr	r2, [r2, #0]
 800466c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004674:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004684:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691a      	ldr	r2, [r3, #16]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	ea42 0103 	orr.w	r1, r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	021a      	lsls	r2, r3, #8
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	69d9      	ldr	r1, [r3, #28]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a1a      	ldr	r2, [r3, #32]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0201 	orr.w	r2, r2, #1
 80046be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2220      	movs	r2, #32
 80046ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b088      	sub	sp, #32
 80046ec:	af02      	add	r7, sp, #8
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	607a      	str	r2, [r7, #4]
 80046f2:	461a      	mov	r2, r3
 80046f4:	460b      	mov	r3, r1
 80046f6:	817b      	strh	r3, [r7, #10]
 80046f8:	4613      	mov	r3, r2
 80046fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b20      	cmp	r3, #32
 8004706:	f040 80da 	bne.w	80048be <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_I2C_Master_Transmit+0x30>
 8004714:	2302      	movs	r3, #2
 8004716:	e0d3      	b.n	80048c0 <HAL_I2C_Master_Transmit+0x1d8>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004720:	f7ff fbba 	bl	8003e98 <HAL_GetTick>
 8004724:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	2319      	movs	r3, #25
 800472c:	2201      	movs	r2, #1
 800472e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 f9e6 	bl	8004b04 <I2C_WaitOnFlagUntilTimeout>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e0be      	b.n	80048c0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2221      	movs	r2, #33	; 0x21
 8004746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2210      	movs	r2, #16
 800474e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	893a      	ldrh	r2, [r7, #8]
 8004762:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476e:	b29b      	uxth	r3, r3
 8004770:	2bff      	cmp	r3, #255	; 0xff
 8004772:	d90e      	bls.n	8004792 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	22ff      	movs	r2, #255	; 0xff
 8004778:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800477e:	b2da      	uxtb	r2, r3
 8004780:	8979      	ldrh	r1, [r7, #10]
 8004782:	4b51      	ldr	r3, [pc, #324]	; (80048c8 <HAL_I2C_Master_Transmit+0x1e0>)
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 fb48 	bl	8004e20 <I2C_TransferConfig>
 8004790:	e06c      	b.n	800486c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004796:	b29a      	uxth	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	8979      	ldrh	r1, [r7, #10]
 80047a4:	4b48      	ldr	r3, [pc, #288]	; (80048c8 <HAL_I2C_Master_Transmit+0x1e0>)
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f000 fb37 	bl	8004e20 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80047b2:	e05b      	b.n	800486c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	6a39      	ldr	r1, [r7, #32]
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 f9e3 	bl	8004b84 <I2C_WaitOnTXISFlagUntilTimeout>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e07b      	b.n	80048c0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	781a      	ldrb	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	1c5a      	adds	r2, r3, #1
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	3b01      	subs	r3, #1
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d034      	beq.n	800486c <HAL_I2C_Master_Transmit+0x184>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004806:	2b00      	cmp	r3, #0
 8004808:	d130      	bne.n	800486c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	2200      	movs	r2, #0
 8004812:	2180      	movs	r1, #128	; 0x80
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 f975 	bl	8004b04 <I2C_WaitOnFlagUntilTimeout>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e04d      	b.n	80048c0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004828:	b29b      	uxth	r3, r3
 800482a:	2bff      	cmp	r3, #255	; 0xff
 800482c:	d90e      	bls.n	800484c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	22ff      	movs	r2, #255	; 0xff
 8004832:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004838:	b2da      	uxtb	r2, r3
 800483a:	8979      	ldrh	r1, [r7, #10]
 800483c:	2300      	movs	r3, #0
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 faeb 	bl	8004e20 <I2C_TransferConfig>
 800484a:	e00f      	b.n	800486c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004850:	b29a      	uxth	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485a:	b2da      	uxtb	r2, r3
 800485c:	8979      	ldrh	r1, [r7, #10]
 800485e:	2300      	movs	r3, #0
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 fada 	bl	8004e20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004870:	b29b      	uxth	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d19e      	bne.n	80047b4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	6a39      	ldr	r1, [r7, #32]
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 f9c2 	bl	8004c04 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e01a      	b.n	80048c0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2220      	movs	r2, #32
 8004890:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6859      	ldr	r1, [r3, #4]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	4b0b      	ldr	r3, [pc, #44]	; (80048cc <HAL_I2C_Master_Transmit+0x1e4>)
 800489e:	400b      	ands	r3, r1
 80048a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048ba:	2300      	movs	r3, #0
 80048bc:	e000      	b.n	80048c0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80048be:	2302      	movs	r3, #2
  }
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3718      	adds	r7, #24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	80002000 	.word	0x80002000
 80048cc:	fe00e800 	.word	0xfe00e800

080048d0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b088      	sub	sp, #32
 80048d4:	af02      	add	r7, sp, #8
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	607a      	str	r2, [r7, #4]
 80048da:	461a      	mov	r2, r3
 80048dc:	460b      	mov	r3, r1
 80048de:	817b      	strh	r3, [r7, #10]
 80048e0:	4613      	mov	r3, r2
 80048e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b20      	cmp	r3, #32
 80048ee:	f040 80db 	bne.w	8004aa8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d101      	bne.n	8004900 <HAL_I2C_Master_Receive+0x30>
 80048fc:	2302      	movs	r3, #2
 80048fe:	e0d4      	b.n	8004aaa <HAL_I2C_Master_Receive+0x1da>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004908:	f7ff fac6 	bl	8003e98 <HAL_GetTick>
 800490c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	2319      	movs	r3, #25
 8004914:	2201      	movs	r2, #1
 8004916:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f000 f8f2 	bl	8004b04 <I2C_WaitOnFlagUntilTimeout>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e0bf      	b.n	8004aaa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2222      	movs	r2, #34	; 0x22
 800492e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2210      	movs	r2, #16
 8004936:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	893a      	ldrh	r2, [r7, #8]
 800494a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004956:	b29b      	uxth	r3, r3
 8004958:	2bff      	cmp	r3, #255	; 0xff
 800495a:	d90e      	bls.n	800497a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	22ff      	movs	r2, #255	; 0xff
 8004960:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004966:	b2da      	uxtb	r2, r3
 8004968:	8979      	ldrh	r1, [r7, #10]
 800496a:	4b52      	ldr	r3, [pc, #328]	; (8004ab4 <HAL_I2C_Master_Receive+0x1e4>)
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 fa54 	bl	8004e20 <I2C_TransferConfig>
 8004978:	e06d      	b.n	8004a56 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004988:	b2da      	uxtb	r2, r3
 800498a:	8979      	ldrh	r1, [r7, #10]
 800498c:	4b49      	ldr	r3, [pc, #292]	; (8004ab4 <HAL_I2C_Master_Receive+0x1e4>)
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 fa43 	bl	8004e20 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800499a:	e05c      	b.n	8004a56 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	6a39      	ldr	r1, [r7, #32]
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 f96b 	bl	8004c7c <I2C_WaitOnRXNEFlagUntilTimeout>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e07c      	b.n	8004aaa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	1c5a      	adds	r2, r3, #1
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d8:	b29b      	uxth	r3, r3
 80049da:	3b01      	subs	r3, #1
 80049dc:	b29a      	uxth	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d034      	beq.n	8004a56 <HAL_I2C_Master_Receive+0x186>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d130      	bne.n	8004a56 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	6a3b      	ldr	r3, [r7, #32]
 80049fa:	2200      	movs	r2, #0
 80049fc:	2180      	movs	r1, #128	; 0x80
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 f880 	bl	8004b04 <I2C_WaitOnFlagUntilTimeout>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e04d      	b.n	8004aaa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	2bff      	cmp	r3, #255	; 0xff
 8004a16:	d90e      	bls.n	8004a36 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	22ff      	movs	r2, #255	; 0xff
 8004a1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	8979      	ldrh	r1, [r7, #10]
 8004a26:	2300      	movs	r3, #0
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 f9f6 	bl	8004e20 <I2C_TransferConfig>
 8004a34:	e00f      	b.n	8004a56 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	8979      	ldrh	r1, [r7, #10]
 8004a48:	2300      	movs	r3, #0
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 f9e5 	bl	8004e20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d19d      	bne.n	800499c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	6a39      	ldr	r1, [r7, #32]
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 f8cd 	bl	8004c04 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e01a      	b.n	8004aaa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6859      	ldr	r1, [r3, #4]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <HAL_I2C_Master_Receive+0x1e8>)
 8004a88:	400b      	ands	r3, r1
 8004a8a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	e000      	b.n	8004aaa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004aa8:	2302      	movs	r3, #2
  }
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	80002400 	.word	0x80002400
 8004ab8:	fe00e800 	.word	0xfe00e800

08004abc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d103      	bne.n	8004ada <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d007      	beq.n	8004af8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699a      	ldr	r2, [r3, #24]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0201 	orr.w	r2, r2, #1
 8004af6:	619a      	str	r2, [r3, #24]
  }
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	603b      	str	r3, [r7, #0]
 8004b10:	4613      	mov	r3, r2
 8004b12:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b14:	e022      	b.n	8004b5c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b1c:	d01e      	beq.n	8004b5c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b1e:	f7ff f9bb 	bl	8003e98 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d302      	bcc.n	8004b34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d113      	bne.n	8004b5c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b38:	f043 0220 	orr.w	r2, r3, #32
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2220      	movs	r2, #32
 8004b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e00f      	b.n	8004b7c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	699a      	ldr	r2, [r3, #24]
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	4013      	ands	r3, r2
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	bf0c      	ite	eq
 8004b6c:	2301      	moveq	r3, #1
 8004b6e:	2300      	movne	r3, #0
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	461a      	mov	r2, r3
 8004b74:	79fb      	ldrb	r3, [r7, #7]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d0cd      	beq.n	8004b16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b90:	e02c      	b.n	8004bec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	68b9      	ldr	r1, [r7, #8]
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 f8dc 	bl	8004d54 <I2C_IsAcknowledgeFailed>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e02a      	b.n	8004bfc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bac:	d01e      	beq.n	8004bec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bae:	f7ff f973 	bl	8003e98 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d302      	bcc.n	8004bc4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d113      	bne.n	8004bec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc8:	f043 0220 	orr.w	r2, r3, #32
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e007      	b.n	8004bfc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d1cb      	bne.n	8004b92 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c10:	e028      	b.n	8004c64 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	68b9      	ldr	r1, [r7, #8]
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 f89c 	bl	8004d54 <I2C_IsAcknowledgeFailed>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e026      	b.n	8004c74 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c26:	f7ff f937 	bl	8003e98 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d302      	bcc.n	8004c3c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d113      	bne.n	8004c64 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c40:	f043 0220 	orr.w	r2, r3, #32
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e007      	b.n	8004c74 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	f003 0320 	and.w	r3, r3, #32
 8004c6e:	2b20      	cmp	r3, #32
 8004c70:	d1cf      	bne.n	8004c12 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c88:	e055      	b.n	8004d36 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	68b9      	ldr	r1, [r7, #8]
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 f860 	bl	8004d54 <I2C_IsAcknowledgeFailed>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e053      	b.n	8004d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	f003 0320 	and.w	r3, r3, #32
 8004ca8:	2b20      	cmp	r3, #32
 8004caa:	d129      	bne.n	8004d00 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	f003 0304 	and.w	r3, r3, #4
 8004cb6:	2b04      	cmp	r3, #4
 8004cb8:	d105      	bne.n	8004cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	e03f      	b.n	8004d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6859      	ldr	r1, [r3, #4]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	4b1d      	ldr	r3, [pc, #116]	; (8004d50 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8004cda:	400b      	ands	r3, r1
 8004cdc:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e022      	b.n	8004d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d00:	f7ff f8ca 	bl	8003e98 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d302      	bcc.n	8004d16 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10f      	bne.n	8004d36 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1a:	f043 0220 	orr.w	r2, r3, #32
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2220      	movs	r2, #32
 8004d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e007      	b.n	8004d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	2b04      	cmp	r3, #4
 8004d42:	d1a2      	bne.n	8004c8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	fe00e800 	.word	0xfe00e800

08004d54 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	f003 0310 	and.w	r3, r3, #16
 8004d6a:	2b10      	cmp	r3, #16
 8004d6c:	d151      	bne.n	8004e12 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d6e:	e022      	b.n	8004db6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d76:	d01e      	beq.n	8004db6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d78:	f7ff f88e 	bl	8003e98 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d302      	bcc.n	8004d8e <I2C_IsAcknowledgeFailed+0x3a>
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d113      	bne.n	8004db6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d92:	f043 0220 	orr.w	r2, r3, #32
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e02e      	b.n	8004e14 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	f003 0320 	and.w	r3, r3, #32
 8004dc0:	2b20      	cmp	r3, #32
 8004dc2:	d1d5      	bne.n	8004d70 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2210      	movs	r2, #16
 8004dca:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f7ff fe71 	bl	8004abc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6859      	ldr	r1, [r3, #4]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	4b0d      	ldr	r3, [pc, #52]	; (8004e1c <I2C_IsAcknowledgeFailed+0xc8>)
 8004de6:	400b      	ands	r3, r1
 8004de8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dee:	f043 0204 	orr.w	r2, r3, #4
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e000      	b.n	8004e14 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	fe00e800 	.word	0xfe00e800

08004e20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	607b      	str	r3, [r7, #4]
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	817b      	strh	r3, [r7, #10]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	0d5b      	lsrs	r3, r3, #21
 8004e3c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004e40:	4b0d      	ldr	r3, [pc, #52]	; (8004e78 <I2C_TransferConfig+0x58>)
 8004e42:	430b      	orrs	r3, r1
 8004e44:	43db      	mvns	r3, r3
 8004e46:	ea02 0103 	and.w	r1, r2, r3
 8004e4a:	897b      	ldrh	r3, [r7, #10]
 8004e4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e50:	7a7b      	ldrb	r3, [r7, #9]
 8004e52:	041b      	lsls	r3, r3, #16
 8004e54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	431a      	orrs	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004e6a:	bf00      	nop
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	03ff63ff 	.word	0x03ff63ff

08004e7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b20      	cmp	r3, #32
 8004e90:	d138      	bne.n	8004f04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e032      	b.n	8004f06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2224      	movs	r2, #36	; 0x24
 8004eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 0201 	bic.w	r2, r2, #1
 8004ebe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ece:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6819      	ldr	r1, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0201 	orr.w	r2, r2, #1
 8004eee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f00:	2300      	movs	r3, #0
 8004f02:	e000      	b.n	8004f06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f04:	2302      	movs	r3, #2
  }
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b085      	sub	sp, #20
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
 8004f1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b20      	cmp	r3, #32
 8004f26:	d139      	bne.n	8004f9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d101      	bne.n	8004f36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f32:	2302      	movs	r3, #2
 8004f34:	e033      	b.n	8004f9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2224      	movs	r2, #36	; 0x24
 8004f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 0201 	bic.w	r2, r2, #1
 8004f54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	021b      	lsls	r3, r3, #8
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f042 0201 	orr.w	r2, r2, #1
 8004f86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	e000      	b.n	8004f9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f9c:	2302      	movs	r3, #2
  }
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004faa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fac:	b08b      	sub	sp, #44	; 0x2c
 8004fae:	af06      	add	r7, sp, #24
 8004fb0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e0ad      	b.n	8005118 <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d106      	bne.n	8004fd6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7fe fe8d 	bl	8003cf0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2203      	movs	r2, #3
 8004fda:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f004 fc68 	bl	80098b8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fe8:	2300      	movs	r3, #0
 8004fea:	73fb      	strb	r3, [r7, #15]
 8004fec:	e035      	b.n	800505a <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	015b      	lsls	r3, r3, #5
 8004ff4:	4413      	add	r3, r2
 8004ff6:	3329      	adds	r3, #41	; 0x29
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	015b      	lsls	r3, r3, #5
 8005002:	4413      	add	r3, r2
 8005004:	3328      	adds	r3, #40	; 0x28
 8005006:	7bfa      	ldrb	r2, [r7, #15]
 8005008:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800500a:	7bfb      	ldrb	r3, [r7, #15]
 800500c:	7bfa      	ldrb	r2, [r7, #15]
 800500e:	b291      	uxth	r1, r2
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	015b      	lsls	r3, r3, #5
 8005014:	4413      	add	r3, r2
 8005016:	3336      	adds	r3, #54	; 0x36
 8005018:	460a      	mov	r2, r1
 800501a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800501c:	7bfb      	ldrb	r3, [r7, #15]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	015b      	lsls	r3, r3, #5
 8005022:	4413      	add	r3, r2
 8005024:	332b      	adds	r3, #43	; 0x2b
 8005026:	2200      	movs	r2, #0
 8005028:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800502a:	7bfb      	ldrb	r3, [r7, #15]
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	015b      	lsls	r3, r3, #5
 8005030:	4413      	add	r3, r2
 8005032:	3338      	adds	r3, #56	; 0x38
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005038:	7bfb      	ldrb	r3, [r7, #15]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	015b      	lsls	r3, r3, #5
 800503e:	4413      	add	r3, r2
 8005040:	333c      	adds	r3, #60	; 0x3c
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005046:	7bfb      	ldrb	r3, [r7, #15]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	3302      	adds	r3, #2
 800504c:	015b      	lsls	r3, r3, #5
 800504e:	4413      	add	r3, r2
 8005050:	2200      	movs	r2, #0
 8005052:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005054:	7bfb      	ldrb	r3, [r7, #15]
 8005056:	3301      	adds	r3, #1
 8005058:	73fb      	strb	r3, [r7, #15]
 800505a:	7bfa      	ldrb	r2, [r7, #15]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	429a      	cmp	r2, r3
 8005062:	d3c4      	bcc.n	8004fee <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005064:	2300      	movs	r3, #0
 8005066:	73fb      	strb	r3, [r7, #15]
 8005068:	e031      	b.n	80050ce <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800506a:	7bfb      	ldrb	r3, [r7, #15]
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	015b      	lsls	r3, r3, #5
 8005070:	4413      	add	r3, r2
 8005072:	f203 1329 	addw	r3, r3, #297	; 0x129
 8005076:	2200      	movs	r2, #0
 8005078:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800507a:	7bfb      	ldrb	r3, [r7, #15]
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	015b      	lsls	r3, r3, #5
 8005080:	4413      	add	r3, r2
 8005082:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005086:	7bfa      	ldrb	r2, [r7, #15]
 8005088:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800508a:	7bfb      	ldrb	r3, [r7, #15]
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	015b      	lsls	r3, r3, #5
 8005090:	4413      	add	r3, r2
 8005092:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8005096:	2200      	movs	r2, #0
 8005098:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800509a:	7bfb      	ldrb	r3, [r7, #15]
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	015b      	lsls	r3, r3, #5
 80050a0:	4413      	add	r3, r2
 80050a2:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80050a6:	2200      	movs	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80050aa:	7bfb      	ldrb	r3, [r7, #15]
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	015b      	lsls	r3, r3, #5
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80050b6:	2200      	movs	r2, #0
 80050b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80050ba:	7bfb      	ldrb	r3, [r7, #15]
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	330a      	adds	r3, #10
 80050c0:	015b      	lsls	r3, r3, #5
 80050c2:	4413      	add	r3, r2
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050c8:	7bfb      	ldrb	r3, [r7, #15]
 80050ca:	3301      	adds	r3, #1
 80050cc:	73fb      	strb	r3, [r7, #15]
 80050ce:	7bfa      	ldrb	r2, [r7, #15]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d3c8      	bcc.n	800506a <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	603b      	str	r3, [r7, #0]
 80050de:	687e      	ldr	r6, [r7, #4]
 80050e0:	466d      	mov	r5, sp
 80050e2:	f106 0410 	add.w	r4, r6, #16
 80050e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	602b      	str	r3, [r5, #0]
 80050ee:	1d33      	adds	r3, r6, #4
 80050f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050f2:	6838      	ldr	r0, [r7, #0]
 80050f4:	f004 fbfd 	bl	80098f2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	69db      	ldr	r3, [r3, #28]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d102      	bne.n	8005116 <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f805 	bl	8005120 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005120 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005144:	b29b      	uxth	r3, r3
 8005146:	f043 0301 	orr.w	r3, r3, #1
 800514a:	b29a      	uxth	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005158:	b29b      	uxth	r3, r3
 800515a:	f043 0302 	orr.w	r3, r3, #2
 800515e:	b29a      	uxth	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005174:	b480      	push	{r7}
 8005176:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005178:	4b05      	ldr	r3, [pc, #20]	; (8005190 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a04      	ldr	r2, [pc, #16]	; (8005190 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800517e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005182:	6013      	str	r3, [r2, #0]
}
 8005184:	bf00      	nop
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	58000400 	.word	0x58000400

08005194 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005198:	4b04      	ldr	r3, [pc, #16]	; (80051ac <HAL_PWREx_GetVoltageRange+0x18>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	58000400 	.word	0x58000400

080051b0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80051b0:	b480      	push	{r7}
 80051b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80051b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051c2:	d101      	bne.n	80051c8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80051c4:	2301      	movs	r3, #1
 80051c6:	e000      	b.n	80051ca <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <LL_RCC_HSE_EnableBypass>:
{
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80051d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051e6:	6013      	str	r3, [r2, #0]
}
 80051e8:	bf00      	nop
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <LL_RCC_HSE_DisableBypass>:
{
 80051f2:	b480      	push	{r7}
 80051f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80051f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005200:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005204:	6013      	str	r3, [r2, #0]
}
 8005206:	bf00      	nop
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <LL_RCC_HSE_Enable>:
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800521e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005222:	6013      	str	r3, [r2, #0]
}
 8005224:	bf00      	nop
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <LL_RCC_HSE_Disable>:
{
 800522e:	b480      	push	{r7}
 8005230:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800523c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005240:	6013      	str	r3, [r2, #0]
}
 8005242:	bf00      	nop
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <LL_RCC_HSE_IsReady>:
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800525a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800525e:	d101      	bne.n	8005264 <LL_RCC_HSE_IsReady+0x18>
 8005260:	2301      	movs	r3, #1
 8005262:	e000      	b.n	8005266 <LL_RCC_HSE_IsReady+0x1a>
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <LL_RCC_HSI_Enable>:
{
 8005270:	b480      	push	{r7}
 8005272:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800527e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005282:	6013      	str	r3, [r2, #0]
}
 8005284:	bf00      	nop
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <LL_RCC_HSI_Disable>:
{
 800528e:	b480      	push	{r7}
 8005290:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800529c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052a0:	6013      	str	r3, [r2, #0]
}
 80052a2:	bf00      	nop
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <LL_RCC_HSI_IsReady>:
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80052b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052be:	d101      	bne.n	80052c4 <LL_RCC_HSI_IsReady+0x18>
 80052c0:	2301      	movs	r3, #1
 80052c2:	e000      	b.n	80052c6 <LL_RCC_HSI_IsReady+0x1a>
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <LL_RCC_HSI_SetCalibTrimming>:
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80052d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	061b      	lsls	r3, r3, #24
 80052e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052ea:	4313      	orrs	r3, r2
 80052ec:	604b      	str	r3, [r1, #4]
}
 80052ee:	bf00      	nop
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <LL_RCC_HSI48_Enable>:
{
 80052fa:	b480      	push	{r7}
 80052fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80052fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005302:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005306:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800530a:	f043 0301 	orr.w	r3, r3, #1
 800530e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005312:	bf00      	nop
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <LL_RCC_HSI48_Disable>:
{
 800531c:	b480      	push	{r7}
 800531e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005324:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005328:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800532c:	f023 0301 	bic.w	r3, r3, #1
 8005330:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005334:	bf00      	nop
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <LL_RCC_HSI48_IsReady>:
{
 800533e:	b480      	push	{r7}
 8005340:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005346:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b02      	cmp	r3, #2
 8005350:	d101      	bne.n	8005356 <LL_RCC_HSI48_IsReady+0x18>
 8005352:	2301      	movs	r3, #1
 8005354:	e000      	b.n	8005358 <LL_RCC_HSI48_IsReady+0x1a>
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <LL_RCC_LSE_Enable>:
{
 8005362:	b480      	push	{r7}
 8005364:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800536a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005372:	f043 0301 	orr.w	r3, r3, #1
 8005376:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800537a:	bf00      	nop
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <LL_RCC_LSE_Disable>:
{
 8005384:	b480      	push	{r7}
 8005386:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800538c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005390:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005394:	f023 0301 	bic.w	r3, r3, #1
 8005398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800539c:	bf00      	nop
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <LL_RCC_LSE_EnableBypass>:
{
 80053a6:	b480      	push	{r7}
 80053a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80053aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053b6:	f043 0304 	orr.w	r3, r3, #4
 80053ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80053be:	bf00      	nop
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <LL_RCC_LSE_DisableBypass>:
{
 80053c8:	b480      	push	{r7}
 80053ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80053cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053d8:	f023 0304 	bic.w	r3, r3, #4
 80053dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80053e0:	bf00      	nop
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <LL_RCC_LSE_IsReady>:
{
 80053ea:	b480      	push	{r7}
 80053ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80053ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d101      	bne.n	8005402 <LL_RCC_LSE_IsReady+0x18>
 80053fe:	2301      	movs	r3, #1
 8005400:	e000      	b.n	8005404 <LL_RCC_LSE_IsReady+0x1a>
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <LL_RCC_LSI1_Enable>:
{
 800540e:	b480      	push	{r7}
 8005410:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800541a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800541e:	f043 0301 	orr.w	r3, r3, #1
 8005422:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005426:	bf00      	nop
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <LL_RCC_LSI1_Disable>:
{
 8005430:	b480      	push	{r7}
 8005432:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005438:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800543c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005440:	f023 0301 	bic.w	r3, r3, #1
 8005444:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005448:	bf00      	nop
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <LL_RCC_LSI1_IsReady>:
{
 8005452:	b480      	push	{r7}
 8005454:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800545a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b02      	cmp	r3, #2
 8005464:	d101      	bne.n	800546a <LL_RCC_LSI1_IsReady+0x18>
 8005466:	2301      	movs	r3, #1
 8005468:	e000      	b.n	800546c <LL_RCC_LSI1_IsReady+0x1a>
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <LL_RCC_LSI2_Enable>:
{
 8005476:	b480      	push	{r7}
 8005478:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800547a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800547e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005482:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005486:	f043 0304 	orr.w	r3, r3, #4
 800548a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800548e:	bf00      	nop
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <LL_RCC_LSI2_Disable>:
{
 8005498:	b480      	push	{r7}
 800549a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800549c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054a8:	f023 0304 	bic.w	r3, r3, #4
 80054ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80054b0:	bf00      	nop
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <LL_RCC_LSI2_IsReady>:
{
 80054ba:	b480      	push	{r7}
 80054bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80054be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b08      	cmp	r3, #8
 80054cc:	d101      	bne.n	80054d2 <LL_RCC_LSI2_IsReady+0x18>
 80054ce:	2301      	movs	r3, #1
 80054d0:	e000      	b.n	80054d4 <LL_RCC_LSI2_IsReady+0x1a>
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <LL_RCC_LSI2_SetTrimming>:
{
 80054de:	b480      	push	{r7}
 80054e0:	b083      	sub	sp, #12
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80054e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054ee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	021b      	lsls	r3, r3, #8
 80054f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054fa:	4313      	orrs	r3, r2
 80054fc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <LL_RCC_MSI_Enable>:
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800551a:	f043 0301 	orr.w	r3, r3, #1
 800551e:	6013      	str	r3, [r2, #0]
}
 8005520:	bf00      	nop
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <LL_RCC_MSI_Disable>:
{
 800552a:	b480      	push	{r7}
 800552c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800552e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005538:	f023 0301 	bic.w	r3, r3, #1
 800553c:	6013      	str	r3, [r2, #0]
}
 800553e:	bf00      	nop
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <LL_RCC_MSI_IsReady>:
{
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800554c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b02      	cmp	r3, #2
 8005558:	d101      	bne.n	800555e <LL_RCC_MSI_IsReady+0x16>
 800555a:	2301      	movs	r3, #1
 800555c:	e000      	b.n	8005560 <LL_RCC_MSI_IsReady+0x18>
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <LL_RCC_MSI_SetRange>:
{
 800556a:	b480      	push	{r7}
 800556c:	b083      	sub	sp, #12
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800557c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4313      	orrs	r3, r2
 8005584:	600b      	str	r3, [r1, #0]
}
 8005586:	bf00      	nop
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <LL_RCC_MSI_GetRange>:
{
 8005592:	b480      	push	{r7}
 8005594:	b083      	sub	sp, #12
 8005596:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055a2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2bb0      	cmp	r3, #176	; 0xb0
 80055a8:	d901      	bls.n	80055ae <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80055aa:	23b0      	movs	r3, #176	; 0xb0
 80055ac:	607b      	str	r3, [r7, #4]
  return msiRange;
 80055ae:	687b      	ldr	r3, [r7, #4]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <LL_RCC_MSI_SetCalibTrimming>:
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80055c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	021b      	lsls	r3, r3, #8
 80055d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055d6:	4313      	orrs	r3, r2
 80055d8:	604b      	str	r3, [r1, #4]
}
 80055da:	bf00      	nop
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <LL_RCC_SetSysClkSource>:
{
 80055e6:	b480      	push	{r7}
 80055e8:	b083      	sub	sp, #12
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80055ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f023 0203 	bic.w	r2, r3, #3
 80055f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4313      	orrs	r3, r2
 8005600:	608b      	str	r3, [r1, #8]
}
 8005602:	bf00      	nop
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <LL_RCC_GetSysClkSource>:
{
 800560e:	b480      	push	{r7}
 8005610:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f003 030c 	and.w	r3, r3, #12
}
 800561c:	4618      	mov	r0, r3
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <LL_RCC_SetAHBPrescaler>:
{
 8005626:	b480      	push	{r7}
 8005628:	b083      	sub	sp, #12
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800562e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005638:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4313      	orrs	r3, r2
 8005640:	608b      	str	r3, [r1, #8]
}
 8005642:	bf00      	nop
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <LL_C2_RCC_SetAHBPrescaler>:
{
 800564e:	b480      	push	{r7}
 8005650:	b083      	sub	sp, #12
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800565a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800565e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005662:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4313      	orrs	r3, r2
 800566a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800566e:	bf00      	nop
 8005670:	370c      	adds	r7, #12
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <LL_RCC_SetAHB4Prescaler>:
{
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005686:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800568a:	f023 020f 	bic.w	r2, r3, #15
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	091b      	lsrs	r3, r3, #4
 8005692:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005696:	4313      	orrs	r3, r2
 8005698:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <LL_RCC_SetAPB1Prescaler>:
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80056b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	608b      	str	r3, [r1, #8]
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <LL_RCC_SetAPB2Prescaler>:
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80056d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80056e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	608b      	str	r3, [r1, #8]
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <LL_RCC_GetAHBPrescaler>:
{
 80056f8:	b480      	push	{r7}
 80056fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80056fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005706:	4618      	mov	r0, r3
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <LL_RCC_GetAHB4Prescaler>:
{
 8005710:	b480      	push	{r7}
 8005712:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005718:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800571c:	011b      	lsls	r3, r3, #4
 800571e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005722:	4618      	mov	r0, r3
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <LL_RCC_GetAPB1Prescaler>:
{
 800572c:	b480      	push	{r7}
 800572e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800573a:	4618      	mov	r0, r3
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <LL_RCC_GetAPB2Prescaler>:
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005752:	4618      	mov	r0, r3
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800576a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800576e:	6013      	str	r3, [r2, #0]
}
 8005770:	bf00      	nop
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800577a:	b480      	push	{r7}
 800577c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800577e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005788:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800578c:	6013      	str	r3, [r2, #0]
}
 800578e:	bf00      	nop
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005798:	b480      	push	{r7}
 800579a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800579c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057aa:	d101      	bne.n	80057b0 <LL_RCC_PLL_IsReady+0x18>
 80057ac:	2301      	movs	r3, #1
 80057ae:	e000      	b.n	80057b2 <LL_RCC_PLL_IsReady+0x1a>
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80057bc:	b480      	push	{r7}
 80057be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80057c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	0a1b      	lsrs	r3, r3, #8
 80057c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80057d6:	b480      	push	{r7}
 80057d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80057da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80057ee:	b480      	push	{r7}
 80057f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80057f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005806:	b480      	push	{r7}
 8005808:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800580a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f003 0303 	and.w	r3, r3, #3
}
 8005814:	4618      	mov	r0, r3
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800581e:	b480      	push	{r7}
 8005820:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800582c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005830:	d101      	bne.n	8005836 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005832:	2301      	movs	r3, #1
 8005834:	e000      	b.n	8005838 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8005842:	b480      	push	{r7}
 8005844:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800584a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800584e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005852:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005856:	d101      	bne.n	800585c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005858:	2301      	movs	r3, #1
 800585a:	e000      	b.n	800585e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005868:	b480      	push	{r7}
 800586a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800586c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005870:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800587c:	d101      	bne.n	8005882 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800587e:	2301      	movs	r3, #1
 8005880:	e000      	b.n	8005884 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800588e:	b480      	push	{r7}
 8005890:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800589c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058a0:	d101      	bne.n	80058a6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80058a2:	2301      	movs	r3, #1
 80058a4:	e000      	b.n	80058a8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80058b2:	b480      	push	{r7}
 80058b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80058b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058c4:	d101      	bne.n	80058ca <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80058c6:	2301      	movs	r3, #1
 80058c8:	e000      	b.n	80058cc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
	...

080058d8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058d8:	b590      	push	{r4, r7, lr}
 80058da:	b08b      	sub	sp, #44	; 0x2c
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e34b      	b.n	8005f82 <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0320 	and.w	r3, r3, #32
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f000 808f 	beq.w	8005a16 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058f8:	f7ff fe89 	bl	800560e <LL_RCC_GetSysClkSource>
 80058fc:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058fe:	f7ff ff82 	bl	8005806 <LL_RCC_PLL_GetMainSource>
 8005902:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005906:	2b00      	cmp	r3, #0
 8005908:	d005      	beq.n	8005916 <HAL_RCC_OscConfig+0x3e>
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	2b0c      	cmp	r3, #12
 800590e:	d149      	bne.n	80059a4 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005910:	6a3b      	ldr	r3, [r7, #32]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d146      	bne.n	80059a4 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005916:	f7ff fe17 	bl	8005548 <LL_RCC_MSI_IsReady>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d005      	beq.n	800592c <HAL_RCC_OscConfig+0x54>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	69db      	ldr	r3, [r3, #28]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e32a      	b.n	8005f82 <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005930:	f7ff fe2f 	bl	8005592 <LL_RCC_MSI_GetRange>
 8005934:	4603      	mov	r3, r0
 8005936:	429c      	cmp	r4, r3
 8005938:	d914      	bls.n	8005964 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593e:	4618      	mov	r0, r3
 8005940:	f000 fd0e 	bl	8006360 <RCC_SetFlashLatencyFromMSIRange>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e319      	b.n	8005f82 <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	4618      	mov	r0, r3
 8005954:	f7ff fe09 	bl	800556a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	4618      	mov	r0, r3
 800595e:	f7ff fe2d 	bl	80055bc <LL_RCC_MSI_SetCalibTrimming>
 8005962:	e013      	b.n	800598c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	4618      	mov	r0, r3
 800596a:	f7ff fdfe 	bl	800556a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	4618      	mov	r0, r3
 8005974:	f7ff fe22 	bl	80055bc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	4618      	mov	r0, r3
 800597e:	f000 fcef 	bl	8006360 <RCC_SetFlashLatencyFromMSIRange>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e2fa      	b.n	8005f82 <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 800598c:	f7fd ffa8 	bl	80038e0 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005990:	4bb4      	ldr	r3, [pc, #720]	; (8005c64 <HAL_RCC_OscConfig+0x38c>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4618      	mov	r0, r3
 8005996:	f7fe fa33 	bl	8003e00 <HAL_InitTick>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d039      	beq.n	8005a14 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e2ee      	b.n	8005f82 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	69db      	ldr	r3, [r3, #28]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01e      	beq.n	80059ea <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80059ac:	f7ff fdae 	bl	800550c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80059b0:	f7fe fa72 	bl	8003e98 <HAL_GetTick>
 80059b4:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80059b6:	e008      	b.n	80059ca <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80059b8:	f7fe fa6e 	bl	8003e98 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d901      	bls.n	80059ca <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e2db      	b.n	8005f82 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 80059ca:	f7ff fdbd 	bl	8005548 <LL_RCC_MSI_IsReady>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d0f1      	beq.n	80059b8 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	4618      	mov	r0, r3
 80059da:	f7ff fdc6 	bl	800556a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7ff fdea 	bl	80055bc <LL_RCC_MSI_SetCalibTrimming>
 80059e8:	e015      	b.n	8005a16 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80059ea:	f7ff fd9e 	bl	800552a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80059ee:	f7fe fa53 	bl	8003e98 <HAL_GetTick>
 80059f2:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80059f4:	e008      	b.n	8005a08 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80059f6:	f7fe fa4f 	bl	8003e98 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d901      	bls.n	8005a08 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e2bc      	b.n	8005f82 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005a08:	f7ff fd9e 	bl	8005548 <LL_RCC_MSI_IsReady>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1f1      	bne.n	80059f6 <HAL_RCC_OscConfig+0x11e>
 8005a12:	e000      	b.n	8005a16 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005a14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d05a      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a22:	f7ff fdf4 	bl	800560e <LL_RCC_GetSysClkSource>
 8005a26:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a28:	f7ff feed 	bl	8005806 <LL_RCC_PLL_GetMainSource>
 8005a2c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	2b08      	cmp	r3, #8
 8005a32:	d005      	beq.n	8005a40 <HAL_RCC_OscConfig+0x168>
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	2b0c      	cmp	r3, #12
 8005a38:	d10d      	bne.n	8005a56 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2b03      	cmp	r3, #3
 8005a3e:	d10a      	bne.n	8005a56 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a40:	f7ff fc04 	bl	800524c <LL_RCC_HSE_IsReady>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d045      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x1fe>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d141      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e295      	b.n	8005f82 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a5e:	d102      	bne.n	8005a66 <HAL_RCC_OscConfig+0x18e>
 8005a60:	f7ff fbd6 	bl	8005210 <LL_RCC_HSE_Enable>
 8005a64:	e00d      	b.n	8005a82 <HAL_RCC_OscConfig+0x1aa>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a6e:	d104      	bne.n	8005a7a <HAL_RCC_OscConfig+0x1a2>
 8005a70:	f7ff fbb0 	bl	80051d4 <LL_RCC_HSE_EnableBypass>
 8005a74:	f7ff fbcc 	bl	8005210 <LL_RCC_HSE_Enable>
 8005a78:	e003      	b.n	8005a82 <HAL_RCC_OscConfig+0x1aa>
 8005a7a:	f7ff fbd8 	bl	800522e <LL_RCC_HSE_Disable>
 8005a7e:	f7ff fbb8 	bl	80051f2 <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d012      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a8a:	f7fe fa05 	bl	8003e98 <HAL_GetTick>
 8005a8e:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005a90:	e008      	b.n	8005aa4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a92:	f7fe fa01 	bl	8003e98 <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	2b64      	cmp	r3, #100	; 0x64
 8005a9e:	d901      	bls.n	8005aa4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e26e      	b.n	8005f82 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005aa4:	f7ff fbd2 	bl	800524c <LL_RCC_HSE_IsReady>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d0f1      	beq.n	8005a92 <HAL_RCC_OscConfig+0x1ba>
 8005aae:	e013      	b.n	8005ad8 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab0:	f7fe f9f2 	bl	8003e98 <HAL_GetTick>
 8005ab4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005ab6:	e008      	b.n	8005aca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ab8:	f7fe f9ee 	bl	8003e98 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	2b64      	cmp	r3, #100	; 0x64
 8005ac4:	d901      	bls.n	8005aca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e25b      	b.n	8005f82 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005aca:	f7ff fbbf 	bl	800524c <LL_RCC_HSE_IsReady>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1f1      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x1e0>
 8005ad4:	e000      	b.n	8005ad8 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ad6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0302 	and.w	r3, r3, #2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d051      	beq.n	8005b88 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ae4:	f7ff fd93 	bl	800560e <LL_RCC_GetSysClkSource>
 8005ae8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005aea:	f7ff fe8c 	bl	8005806 <LL_RCC_PLL_GetMainSource>
 8005aee:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d005      	beq.n	8005b02 <HAL_RCC_OscConfig+0x22a>
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	2b0c      	cmp	r3, #12
 8005afa:	d113      	bne.n	8005b24 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d110      	bne.n	8005b24 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b02:	f7ff fbd3 	bl	80052ac <LL_RCC_HSI_IsReady>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d005      	beq.n	8005b18 <HAL_RCC_OscConfig+0x240>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e234      	b.n	8005f82 <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7ff fbd7 	bl	80052d0 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b22:	e031      	b.n	8005b88 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d019      	beq.n	8005b60 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b2c:	f7ff fba0 	bl	8005270 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b30:	f7fe f9b2 	bl	8003e98 <HAL_GetTick>
 8005b34:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005b36:	e008      	b.n	8005b4a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b38:	f7fe f9ae 	bl	8003e98 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e21b      	b.n	8005f82 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005b4a:	f7ff fbaf 	bl	80052ac <LL_RCC_HSI_IsReady>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d0f1      	beq.n	8005b38 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7ff fbb9 	bl	80052d0 <LL_RCC_HSI_SetCalibTrimming>
 8005b5e:	e013      	b.n	8005b88 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b60:	f7ff fb95 	bl	800528e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b64:	f7fe f998 	bl	8003e98 <HAL_GetTick>
 8005b68:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005b6a:	e008      	b.n	8005b7e <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b6c:	f7fe f994 	bl	8003e98 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e201      	b.n	8005f82 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005b7e:	f7ff fb95 	bl	80052ac <LL_RCC_HSI_IsReady>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1f1      	bne.n	8005b6c <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0308 	and.w	r3, r3, #8
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d106      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f000 80a2 	beq.w	8005ce6 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d075      	beq.n	8005c96 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0310 	and.w	r3, r3, #16
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d046      	beq.n	8005c44 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005bb6:	f7ff fc4c 	bl	8005452 <LL_RCC_LSI1_IsReady>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d113      	bne.n	8005be8 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005bc0:	f7ff fc25 	bl	800540e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005bc4:	f7fe f968 	bl	8003e98 <HAL_GetTick>
 8005bc8:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005bca:	e008      	b.n	8005bde <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005bcc:	f7fe f964 	bl	8003e98 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d901      	bls.n	8005bde <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e1d1      	b.n	8005f82 <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005bde:	f7ff fc38 	bl	8005452 <LL_RCC_LSI1_IsReady>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d0f1      	beq.n	8005bcc <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005be8:	f7ff fc45 	bl	8005476 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bec:	f7fe f954 	bl	8003e98 <HAL_GetTick>
 8005bf0:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005bf4:	f7fe f950 	bl	8003e98 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b03      	cmp	r3, #3
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e1bd      	b.n	8005f82 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005c06:	f7ff fc58 	bl	80054ba <LL_RCC_LSI2_IsReady>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d0f1      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7ff fc62 	bl	80054de <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005c1a:	f7ff fc09 	bl	8005430 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1e:	f7fe f93b 	bl	8003e98 <HAL_GetTick>
 8005c22:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005c24:	e008      	b.n	8005c38 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005c26:	f7fe f937 	bl	8003e98 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d901      	bls.n	8005c38 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e1a4      	b.n	8005f82 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005c38:	f7ff fc0b 	bl	8005452 <LL_RCC_LSI1_IsReady>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1f1      	bne.n	8005c26 <HAL_RCC_OscConfig+0x34e>
 8005c42:	e050      	b.n	8005ce6 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005c44:	f7ff fbe3 	bl	800540e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c48:	f7fe f926 	bl	8003e98 <HAL_GetTick>
 8005c4c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005c4e:	e00b      	b.n	8005c68 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005c50:	f7fe f922 	bl	8003e98 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d904      	bls.n	8005c68 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e18f      	b.n	8005f82 <HAL_RCC_OscConfig+0x6aa>
 8005c62:	bf00      	nop
 8005c64:	20000044 	.word	0x20000044
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005c68:	f7ff fbf3 	bl	8005452 <LL_RCC_LSI1_IsReady>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d0ee      	beq.n	8005c50 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005c72:	f7ff fc11 	bl	8005498 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005c76:	e008      	b.n	8005c8a <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005c78:	f7fe f90e 	bl	8003e98 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	2b03      	cmp	r3, #3
 8005c84:	d901      	bls.n	8005c8a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e17b      	b.n	8005f82 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005c8a:	f7ff fc16 	bl	80054ba <LL_RCC_LSI2_IsReady>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1f1      	bne.n	8005c78 <HAL_RCC_OscConfig+0x3a0>
 8005c94:	e027      	b.n	8005ce6 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005c96:	f7ff fbff 	bl	8005498 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c9a:	f7fe f8fd 	bl	8003e98 <HAL_GetTick>
 8005c9e:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005ca0:	e008      	b.n	8005cb4 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005ca2:	f7fe f8f9 	bl	8003e98 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b03      	cmp	r3, #3
 8005cae:	d901      	bls.n	8005cb4 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e166      	b.n	8005f82 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005cb4:	f7ff fc01 	bl	80054ba <LL_RCC_LSI2_IsReady>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1f1      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005cbe:	f7ff fbb7 	bl	8005430 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cc2:	f7fe f8e9 	bl	8003e98 <HAL_GetTick>
 8005cc6:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005cc8:	e008      	b.n	8005cdc <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005cca:	f7fe f8e5 	bl	8003e98 <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d901      	bls.n	8005cdc <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e152      	b.n	8005f82 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005cdc:	f7ff fbb9 	bl	8005452 <LL_RCC_LSI1_IsReady>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1f1      	bne.n	8005cca <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0304 	and.w	r3, r3, #4
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d05b      	beq.n	8005daa <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cf2:	4ba6      	ldr	r3, [pc, #664]	; (8005f8c <HAL_RCC_OscConfig+0x6b4>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d114      	bne.n	8005d28 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005cfe:	f7ff fa39 	bl	8005174 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d02:	f7fe f8c9 	bl	8003e98 <HAL_GetTick>
 8005d06:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d08:	e008      	b.n	8005d1c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d0a:	f7fe f8c5 	bl	8003e98 <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d901      	bls.n	8005d1c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e132      	b.n	8005f82 <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d1c:	4b9b      	ldr	r3, [pc, #620]	; (8005f8c <HAL_RCC_OscConfig+0x6b4>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d0f0      	beq.n	8005d0a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d102      	bne.n	8005d36 <HAL_RCC_OscConfig+0x45e>
 8005d30:	f7ff fb17 	bl	8005362 <LL_RCC_LSE_Enable>
 8005d34:	e00c      	b.n	8005d50 <HAL_RCC_OscConfig+0x478>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	2b05      	cmp	r3, #5
 8005d3c:	d104      	bne.n	8005d48 <HAL_RCC_OscConfig+0x470>
 8005d3e:	f7ff fb32 	bl	80053a6 <LL_RCC_LSE_EnableBypass>
 8005d42:	f7ff fb0e 	bl	8005362 <LL_RCC_LSE_Enable>
 8005d46:	e003      	b.n	8005d50 <HAL_RCC_OscConfig+0x478>
 8005d48:	f7ff fb1c 	bl	8005384 <LL_RCC_LSE_Disable>
 8005d4c:	f7ff fb3c 	bl	80053c8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d014      	beq.n	8005d82 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d58:	f7fe f89e 	bl	8003e98 <HAL_GetTick>
 8005d5c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005d5e:	e00a      	b.n	8005d76 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d60:	f7fe f89a 	bl	8003e98 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e105      	b.n	8005f82 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005d76:	f7ff fb38 	bl	80053ea <LL_RCC_LSE_IsReady>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d0ef      	beq.n	8005d60 <HAL_RCC_OscConfig+0x488>
 8005d80:	e013      	b.n	8005daa <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d82:	f7fe f889 	bl	8003e98 <HAL_GetTick>
 8005d86:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005d88:	e00a      	b.n	8005da0 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d8a:	f7fe f885 	bl	8003e98 <HAL_GetTick>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d901      	bls.n	8005da0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e0f0      	b.n	8005f82 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005da0:	f7ff fb23 	bl	80053ea <LL_RCC_LSE_IsReady>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1ef      	bne.n	8005d8a <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d02c      	beq.n	8005e10 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d014      	beq.n	8005de8 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005dbe:	f7ff fa9c 	bl	80052fa <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dc2:	f7fe f869 	bl	8003e98 <HAL_GetTick>
 8005dc6:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005dc8:	e008      	b.n	8005ddc <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005dca:	f7fe f865 	bl	8003e98 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d901      	bls.n	8005ddc <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e0d2      	b.n	8005f82 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005ddc:	f7ff faaf 	bl	800533e <LL_RCC_HSI48_IsReady>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0f1      	beq.n	8005dca <HAL_RCC_OscConfig+0x4f2>
 8005de6:	e013      	b.n	8005e10 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005de8:	f7ff fa98 	bl	800531c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dec:	f7fe f854 	bl	8003e98 <HAL_GetTick>
 8005df0:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005df2:	e008      	b.n	8005e06 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005df4:	f7fe f850 	bl	8003e98 <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d901      	bls.n	8005e06 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e0bd      	b.n	8005f82 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005e06:	f7ff fa9a 	bl	800533e <LL_RCC_HSI48_IsReady>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1f1      	bne.n	8005df4 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 80b3 	beq.w	8005f80 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e1a:	f7ff fbf8 	bl	800560e <LL_RCC_GetSysClkSource>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b0c      	cmp	r3, #12
 8005e22:	d076      	beq.n	8005f12 <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d14b      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e2c:	f7ff fca5 	bl	800577a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e30:	f7fe f832 	bl	8003e98 <HAL_GetTick>
 8005e34:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005e36:	e008      	b.n	8005e4a <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e38:	f7fe f82e 	bl	8003e98 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e09b      	b.n	8005f82 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005e4a:	f7ff fca5 	bl	8005798 <LL_RCC_PLL_IsReady>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1f1      	bne.n	8005e38 <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e58:	68da      	ldr	r2, [r3, #12]
 8005e5a:	4b4d      	ldr	r3, [pc, #308]	; (8005f90 <HAL_RCC_OscConfig+0x6b8>)
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e66:	4311      	orrs	r1, r2
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e6c:	0212      	lsls	r2, r2, #8
 8005e6e:	4311      	orrs	r1, r2
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005e74:	4311      	orrs	r1, r2
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005e7a:	4311      	orrs	r1, r2
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005e80:	430a      	orrs	r2, r1
 8005e82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e8a:	f7ff fc67 	bl	800575c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e9c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e9e:	f7fd fffb 	bl	8003e98 <HAL_GetTick>
 8005ea2:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005ea4:	e008      	b.n	8005eb8 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ea6:	f7fd fff7 	bl	8003e98 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d901      	bls.n	8005eb8 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e064      	b.n	8005f82 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 8005eb8:	f7ff fc6e 	bl	8005798 <LL_RCC_PLL_IsReady>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d0f1      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x5ce>
 8005ec2:	e05d      	b.n	8005f80 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ec4:	f7ff fc59 	bl	800577a <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ed2:	f023 0303 	bic.w	r3, r3, #3
 8005ed6:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8005ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ee2:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eea:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eec:	f7fd ffd4 	bl	8003e98 <HAL_GetTick>
 8005ef0:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005ef2:	e008      	b.n	8005f06 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ef4:	f7fd ffd0 	bl	8003e98 <HAL_GetTick>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d901      	bls.n	8005f06 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e03d      	b.n	8005f82 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005f06:	f7ff fc47 	bl	8005798 <LL_RCC_PLL_IsReady>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1f1      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x61c>
 8005f10:	e036      	b.n	8005f80 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d101      	bne.n	8005f1e <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e031      	b.n	8005f82 <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8005f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	f003 0203 	and.w	r2, r3, #3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d123      	bne.n	8005f7c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d11c      	bne.n	8005f7c <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	0a1b      	lsrs	r3, r3, #8
 8005f46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d114      	bne.n	8005f7c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d10d      	bne.n	8005f7c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d106      	bne.n	8005f7c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d001      	beq.n	8005f80 <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e000      	b.n	8005f82 <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	372c      	adds	r7, #44	; 0x2c
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd90      	pop	{r4, r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	58000400 	.word	0x58000400
 8005f90:	11c1808c 	.word	0x11c1808c

08005f94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e12a      	b.n	80061fe <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fa8:	4b97      	ldr	r3, [pc, #604]	; (8006208 <HAL_RCC_ClockConfig+0x274>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0307 	and.w	r3, r3, #7
 8005fb0:	683a      	ldr	r2, [r7, #0]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d91b      	bls.n	8005fee <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fb6:	4b94      	ldr	r3, [pc, #592]	; (8006208 <HAL_RCC_ClockConfig+0x274>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f023 0207 	bic.w	r2, r3, #7
 8005fbe:	4992      	ldr	r1, [pc, #584]	; (8006208 <HAL_RCC_ClockConfig+0x274>)
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fc6:	f7fd ff67 	bl	8003e98 <HAL_GetTick>
 8005fca:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fcc:	e008      	b.n	8005fe0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005fce:	f7fd ff63 	bl	8003e98 <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d901      	bls.n	8005fe0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e10e      	b.n	80061fe <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fe0:	4b89      	ldr	r3, [pc, #548]	; (8006208 <HAL_RCC_ClockConfig+0x274>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0307 	and.w	r3, r3, #7
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d1ef      	bne.n	8005fce <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d016      	beq.n	8006028 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7ff fb11 	bl	8005626 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006004:	f7fd ff48 	bl	8003e98 <HAL_GetTick>
 8006008:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800600a:	e008      	b.n	800601e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800600c:	f7fd ff44 	bl	8003e98 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b02      	cmp	r3, #2
 8006018:	d901      	bls.n	800601e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e0ef      	b.n	80061fe <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800601e:	f7ff fbfe 	bl	800581e <LL_RCC_IsActiveFlag_HPRE>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d0f1      	beq.n	800600c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0320 	and.w	r3, r3, #32
 8006030:	2b00      	cmp	r3, #0
 8006032:	d016      	beq.n	8006062 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	4618      	mov	r0, r3
 800603a:	f7ff fb08 	bl	800564e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800603e:	f7fd ff2b 	bl	8003e98 <HAL_GetTick>
 8006042:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006044:	e008      	b.n	8006058 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006046:	f7fd ff27 	bl	8003e98 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	2b02      	cmp	r3, #2
 8006052:	d901      	bls.n	8006058 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e0d2      	b.n	80061fe <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006058:	f7ff fbf3 	bl	8005842 <LL_RCC_IsActiveFlag_C2HPRE>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d0f1      	beq.n	8006046 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606a:	2b00      	cmp	r3, #0
 800606c:	d016      	beq.n	800609c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	4618      	mov	r0, r3
 8006074:	f7ff fb01 	bl	800567a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006078:	f7fd ff0e 	bl	8003e98 <HAL_GetTick>
 800607c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800607e:	e008      	b.n	8006092 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006080:	f7fd ff0a 	bl	8003e98 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b02      	cmp	r3, #2
 800608c:	d901      	bls.n	8006092 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e0b5      	b.n	80061fe <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006092:	f7ff fbe9 	bl	8005868 <LL_RCC_IsActiveFlag_SHDHPRE>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d0f1      	beq.n	8006080 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0304 	and.w	r3, r3, #4
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d016      	beq.n	80060d6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7ff fafb 	bl	80056a8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80060b2:	f7fd fef1 	bl	8003e98 <HAL_GetTick>
 80060b6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80060b8:	e008      	b.n	80060cc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80060ba:	f7fd feed 	bl	8003e98 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d901      	bls.n	80060cc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e098      	b.n	80061fe <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80060cc:	f7ff fbdf 	bl	800588e <LL_RCC_IsActiveFlag_PPRE1>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0f1      	beq.n	80060ba <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0308 	and.w	r3, r3, #8
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d017      	beq.n	8006112 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7ff faf1 	bl	80056d0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80060ee:	f7fd fed3 	bl	8003e98 <HAL_GetTick>
 80060f2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80060f4:	e008      	b.n	8006108 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80060f6:	f7fd fecf 	bl	8003e98 <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	2b02      	cmp	r3, #2
 8006102:	d901      	bls.n	8006108 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e07a      	b.n	80061fe <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006108:	f7ff fbd3 	bl	80058b2 <LL_RCC_IsActiveFlag_PPRE2>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d0f1      	beq.n	80060f6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b00      	cmp	r3, #0
 800611c:	d043      	beq.n	80061a6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	2b02      	cmp	r3, #2
 8006124:	d106      	bne.n	8006134 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006126:	f7ff f891 	bl	800524c <LL_RCC_HSE_IsReady>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d11e      	bne.n	800616e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e064      	b.n	80061fe <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	2b03      	cmp	r3, #3
 800613a:	d106      	bne.n	800614a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800613c:	f7ff fb2c 	bl	8005798 <LL_RCC_PLL_IsReady>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d113      	bne.n	800616e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e059      	b.n	80061fe <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d106      	bne.n	8006160 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006152:	f7ff f9f9 	bl	8005548 <LL_RCC_MSI_IsReady>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d108      	bne.n	800616e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e04e      	b.n	80061fe <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006160:	f7ff f8a4 	bl	80052ac <LL_RCC_HSI_IsReady>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e047      	b.n	80061fe <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	4618      	mov	r0, r3
 8006174:	f7ff fa37 	bl	80055e6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006178:	f7fd fe8e 	bl	8003e98 <HAL_GetTick>
 800617c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800617e:	e00a      	b.n	8006196 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006180:	f7fd fe8a 	bl	8003e98 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	f241 3288 	movw	r2, #5000	; 0x1388
 800618e:	4293      	cmp	r3, r2
 8006190:	d901      	bls.n	8006196 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e033      	b.n	80061fe <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006196:	f7ff fa3a 	bl	800560e <LL_RCC_GetSysClkSource>
 800619a:	4602      	mov	r2, r0
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d1ec      	bne.n	8006180 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061a6:	4b18      	ldr	r3, [pc, #96]	; (8006208 <HAL_RCC_ClockConfig+0x274>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0307 	and.w	r3, r3, #7
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d21b      	bcs.n	80061ec <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061b4:	4b14      	ldr	r3, [pc, #80]	; (8006208 <HAL_RCC_ClockConfig+0x274>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f023 0207 	bic.w	r2, r3, #7
 80061bc:	4912      	ldr	r1, [pc, #72]	; (8006208 <HAL_RCC_ClockConfig+0x274>)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061c4:	f7fd fe68 	bl	8003e98 <HAL_GetTick>
 80061c8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ca:	e008      	b.n	80061de <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80061cc:	f7fd fe64 	bl	8003e98 <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d901      	bls.n	80061de <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e00f      	b.n	80061fe <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061de:	4b0a      	ldr	r3, [pc, #40]	; (8006208 <HAL_RCC_ClockConfig+0x274>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0307 	and.w	r3, r3, #7
 80061e6:	683a      	ldr	r2, [r7, #0]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d1ef      	bne.n	80061cc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 80061ec:	f7fd fb78 	bl	80038e0 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80061f0:	f7fd fe5e 	bl	8003eb0 <HAL_GetTickPrio>
 80061f4:	4603      	mov	r3, r0
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7fd fe02 	bl	8003e00 <HAL_InitTick>
 80061fc:	4603      	mov	r3, r0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	58004000 	.word	0x58004000

0800620c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800620c:	b590      	push	{r4, r7, lr}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006212:	f7ff f9fc 	bl	800560e <LL_RCC_GetSysClkSource>
 8006216:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10a      	bne.n	8006234 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800621e:	f7ff f9b8 	bl	8005592 <LL_RCC_MSI_GetRange>
 8006222:	4603      	mov	r3, r0
 8006224:	091b      	lsrs	r3, r3, #4
 8006226:	f003 030f 	and.w	r3, r3, #15
 800622a:	4a2a      	ldr	r2, [pc, #168]	; (80062d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800622c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006230:	60fb      	str	r3, [r7, #12]
 8006232:	e04a      	b.n	80062ca <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b04      	cmp	r3, #4
 8006238:	d102      	bne.n	8006240 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800623a:	4b27      	ldr	r3, [pc, #156]	; (80062d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800623c:	60fb      	str	r3, [r7, #12]
 800623e:	e044      	b.n	80062ca <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b08      	cmp	r3, #8
 8006244:	d10a      	bne.n	800625c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006246:	f7fe ffb3 	bl	80051b0 <LL_RCC_HSE_IsEnabledDiv2>
 800624a:	4603      	mov	r3, r0
 800624c:	2b01      	cmp	r3, #1
 800624e:	d102      	bne.n	8006256 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006250:	4b21      	ldr	r3, [pc, #132]	; (80062d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006252:	60fb      	str	r3, [r7, #12]
 8006254:	e039      	b.n	80062ca <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006256:	4b21      	ldr	r3, [pc, #132]	; (80062dc <HAL_RCC_GetSysClockFreq+0xd0>)
 8006258:	60fb      	str	r3, [r7, #12]
 800625a:	e036      	b.n	80062ca <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800625c:	f7ff fad3 	bl	8005806 <LL_RCC_PLL_GetMainSource>
 8006260:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b02      	cmp	r3, #2
 8006266:	d002      	beq.n	800626e <HAL_RCC_GetSysClockFreq+0x62>
 8006268:	2b03      	cmp	r3, #3
 800626a:	d003      	beq.n	8006274 <HAL_RCC_GetSysClockFreq+0x68>
 800626c:	e00d      	b.n	800628a <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800626e:	4b1a      	ldr	r3, [pc, #104]	; (80062d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006270:	60bb      	str	r3, [r7, #8]
        break;
 8006272:	e015      	b.n	80062a0 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006274:	f7fe ff9c 	bl	80051b0 <LL_RCC_HSE_IsEnabledDiv2>
 8006278:	4603      	mov	r3, r0
 800627a:	2b01      	cmp	r3, #1
 800627c:	d102      	bne.n	8006284 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800627e:	4b16      	ldr	r3, [pc, #88]	; (80062d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006280:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006282:	e00d      	b.n	80062a0 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8006284:	4b15      	ldr	r3, [pc, #84]	; (80062dc <HAL_RCC_GetSysClockFreq+0xd0>)
 8006286:	60bb      	str	r3, [r7, #8]
        break;
 8006288:	e00a      	b.n	80062a0 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800628a:	f7ff f982 	bl	8005592 <LL_RCC_MSI_GetRange>
 800628e:	4603      	mov	r3, r0
 8006290:	091b      	lsrs	r3, r3, #4
 8006292:	f003 030f 	and.w	r3, r3, #15
 8006296:	4a0f      	ldr	r2, [pc, #60]	; (80062d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800629c:	60bb      	str	r3, [r7, #8]
        break;
 800629e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80062a0:	f7ff fa8c 	bl	80057bc <LL_RCC_PLL_GetN>
 80062a4:	4602      	mov	r2, r0
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	fb03 f402 	mul.w	r4, r3, r2
 80062ac:	f7ff fa9f 	bl	80057ee <LL_RCC_PLL_GetDivider>
 80062b0:	4603      	mov	r3, r0
 80062b2:	091b      	lsrs	r3, r3, #4
 80062b4:	3301      	adds	r3, #1
 80062b6:	fbb4 f4f3 	udiv	r4, r4, r3
 80062ba:	f7ff fa8c 	bl	80057d6 <LL_RCC_PLL_GetR>
 80062be:	4603      	mov	r3, r0
 80062c0:	0f5b      	lsrs	r3, r3, #29
 80062c2:	3301      	adds	r3, #1
 80062c4:	fbb4 f3f3 	udiv	r3, r4, r3
 80062c8:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80062ca:	68fb      	ldr	r3, [r7, #12]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3714      	adds	r7, #20
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd90      	pop	{r4, r7, pc}
 80062d4:	0800c6d4 	.word	0x0800c6d4
 80062d8:	00f42400 	.word	0x00f42400
 80062dc:	01e84800 	.word	0x01e84800

080062e0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062e0:	b598      	push	{r3, r4, r7, lr}
 80062e2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80062e4:	f7ff ff92 	bl	800620c <HAL_RCC_GetSysClockFreq>
 80062e8:	4604      	mov	r4, r0
 80062ea:	f7ff fa05 	bl	80056f8 <LL_RCC_GetAHBPrescaler>
 80062ee:	4603      	mov	r3, r0
 80062f0:	091b      	lsrs	r3, r3, #4
 80062f2:	f003 030f 	and.w	r3, r3, #15
 80062f6:	4a03      	ldr	r2, [pc, #12]	; (8006304 <HAL_RCC_GetHCLKFreq+0x24>)
 80062f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062fc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006300:	4618      	mov	r0, r3
 8006302:	bd98      	pop	{r3, r4, r7, pc}
 8006304:	0800c674 	.word	0x0800c674

08006308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006308:	b598      	push	{r3, r4, r7, lr}
 800630a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800630c:	f7ff ffe8 	bl	80062e0 <HAL_RCC_GetHCLKFreq>
 8006310:	4604      	mov	r4, r0
 8006312:	f7ff fa0b 	bl	800572c <LL_RCC_GetAPB1Prescaler>
 8006316:	4603      	mov	r3, r0
 8006318:	0a1b      	lsrs	r3, r3, #8
 800631a:	f003 0307 	and.w	r3, r3, #7
 800631e:	4a04      	ldr	r2, [pc, #16]	; (8006330 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006324:	f003 031f 	and.w	r3, r3, #31
 8006328:	fa24 f303 	lsr.w	r3, r4, r3
}
 800632c:	4618      	mov	r0, r3
 800632e:	bd98      	pop	{r3, r4, r7, pc}
 8006330:	0800c6b4 	.word	0x0800c6b4

08006334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006334:	b598      	push	{r3, r4, r7, lr}
 8006336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006338:	f7ff ffd2 	bl	80062e0 <HAL_RCC_GetHCLKFreq>
 800633c:	4604      	mov	r4, r0
 800633e:	f7ff fa01 	bl	8005744 <LL_RCC_GetAPB2Prescaler>
 8006342:	4603      	mov	r3, r0
 8006344:	0adb      	lsrs	r3, r3, #11
 8006346:	f003 0307 	and.w	r3, r3, #7
 800634a:	4a04      	ldr	r2, [pc, #16]	; (800635c <HAL_RCC_GetPCLK2Freq+0x28>)
 800634c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006350:	f003 031f 	and.w	r3, r3, #31
 8006354:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006358:	4618      	mov	r0, r3
 800635a:	bd98      	pop	{r3, r4, r7, pc}
 800635c:	0800c6b4 	.word	0x0800c6b4

08006360 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006360:	b590      	push	{r4, r7, lr}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2bb0      	cmp	r3, #176	; 0xb0
 800636c:	d903      	bls.n	8006376 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800636e:	4b15      	ldr	r3, [pc, #84]	; (80063c4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006372:	60fb      	str	r3, [r7, #12]
 8006374:	e007      	b.n	8006386 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	091b      	lsrs	r3, r3, #4
 800637a:	f003 030f 	and.w	r3, r3, #15
 800637e:	4a11      	ldr	r2, [pc, #68]	; (80063c4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006384:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006386:	f7ff f9c3 	bl	8005710 <LL_RCC_GetAHB4Prescaler>
 800638a:	4603      	mov	r3, r0
 800638c:	091b      	lsrs	r3, r3, #4
 800638e:	f003 030f 	and.w	r3, r3, #15
 8006392:	4a0d      	ldr	r2, [pc, #52]	; (80063c8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	fbb2 f3f3 	udiv	r3, r2, r3
 800639e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	4a0a      	ldr	r2, [pc, #40]	; (80063cc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80063a4:	fba2 2303 	umull	r2, r3, r2, r3
 80063a8:	0c9c      	lsrs	r4, r3, #18
 80063aa:	f7fe fef3 	bl	8005194 <HAL_PWREx_GetVoltageRange>
 80063ae:	4603      	mov	r3, r0
 80063b0:	4619      	mov	r1, r3
 80063b2:	4620      	mov	r0, r4
 80063b4:	f000 f80c 	bl	80063d0 <RCC_SetFlashLatency>
 80063b8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd90      	pop	{r4, r7, pc}
 80063c2:	bf00      	nop
 80063c4:	0800c6d4 	.word	0x0800c6d4
 80063c8:	0800c674 	.word	0x0800c674
 80063cc:	431bde83 	.word	0x431bde83

080063d0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80063d0:	b590      	push	{r4, r7, lr}
 80063d2:	b093      	sub	sp, #76	; 0x4c
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80063da:	4b39      	ldr	r3, [pc, #228]	; (80064c0 <RCC_SetFlashLatency+0xf0>)
 80063dc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80063e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80063e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80063e6:	4a37      	ldr	r2, [pc, #220]	; (80064c4 <RCC_SetFlashLatency+0xf4>)
 80063e8:	f107 031c 	add.w	r3, r7, #28
 80063ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80063ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80063f2:	4b35      	ldr	r3, [pc, #212]	; (80064c8 <RCC_SetFlashLatency+0xf8>)
 80063f4:	f107 040c 	add.w	r4, r7, #12
 80063f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80063fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80063fe:	2300      	movs	r3, #0
 8006400:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006408:	d11c      	bne.n	8006444 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800640a:	2300      	movs	r3, #0
 800640c:	643b      	str	r3, [r7, #64]	; 0x40
 800640e:	e015      	b.n	800643c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006418:	4413      	add	r3, r2
 800641a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	429a      	cmp	r2, r3
 8006422:	d808      	bhi.n	8006436 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800642c:	4413      	add	r3, r2
 800642e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006432:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006434:	e022      	b.n	800647c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006438:	3301      	adds	r3, #1
 800643a:	643b      	str	r3, [r7, #64]	; 0x40
 800643c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800643e:	2b03      	cmp	r3, #3
 8006440:	d9e6      	bls.n	8006410 <RCC_SetFlashLatency+0x40>
 8006442:	e01b      	b.n	800647c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006444:	2300      	movs	r3, #0
 8006446:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006448:	e015      	b.n	8006476 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800644a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006452:	4413      	add	r3, r2
 8006454:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	429a      	cmp	r2, r3
 800645c:	d808      	bhi.n	8006470 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800645e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006466:	4413      	add	r3, r2
 8006468:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800646c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800646e:	e005      	b.n	800647c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006472:	3301      	adds	r3, #1
 8006474:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006478:	2b02      	cmp	r3, #2
 800647a:	d9e6      	bls.n	800644a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800647c:	4b13      	ldr	r3, [pc, #76]	; (80064cc <RCC_SetFlashLatency+0xfc>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f023 0207 	bic.w	r2, r3, #7
 8006484:	4911      	ldr	r1, [pc, #68]	; (80064cc <RCC_SetFlashLatency+0xfc>)
 8006486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006488:	4313      	orrs	r3, r2
 800648a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800648c:	f7fd fd04 	bl	8003e98 <HAL_GetTick>
 8006490:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006492:	e008      	b.n	80064a6 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006494:	f7fd fd00 	bl	8003e98 <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d901      	bls.n	80064a6 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e007      	b.n	80064b6 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80064a6:	4b09      	ldr	r3, [pc, #36]	; (80064cc <RCC_SetFlashLatency+0xfc>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0307 	and.w	r3, r3, #7
 80064ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d1ef      	bne.n	8006494 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	374c      	adds	r7, #76	; 0x4c
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd90      	pop	{r4, r7, pc}
 80064be:	bf00      	nop
 80064c0:	0800c5d8 	.word	0x0800c5d8
 80064c4:	0800c5e8 	.word	0x0800c5e8
 80064c8:	0800c5f4 	.word	0x0800c5f4
 80064cc:	58004000 	.word	0x58004000

080064d0 <LL_RCC_LSE_IsEnabled>:
{
 80064d0:	b480      	push	{r7}
 80064d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80064d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064dc:	f003 0301 	and.w	r3, r3, #1
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d101      	bne.n	80064e8 <LL_RCC_LSE_IsEnabled+0x18>
 80064e4:	2301      	movs	r3, #1
 80064e6:	e000      	b.n	80064ea <LL_RCC_LSE_IsEnabled+0x1a>
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <LL_RCC_LSE_IsReady>:
{
 80064f4:	b480      	push	{r7}
 80064f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80064f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006500:	f003 0302 	and.w	r3, r3, #2
 8006504:	2b02      	cmp	r3, #2
 8006506:	d101      	bne.n	800650c <LL_RCC_LSE_IsReady+0x18>
 8006508:	2301      	movs	r3, #1
 800650a:	e000      	b.n	800650e <LL_RCC_LSE_IsReady+0x1a>
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <LL_RCC_MSI_EnablePLLMode>:
{
 8006518:	b480      	push	{r7}
 800651a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800651c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006526:	f043 0304 	orr.w	r3, r3, #4
 800652a:	6013      	str	r3, [r2, #0]
}
 800652c:	bf00      	nop
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <LL_RCC_SetRFWKPClockSource>:
{
 8006536:	b480      	push	{r7}
 8006538:	b083      	sub	sp, #12
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800653e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006546:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800654a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4313      	orrs	r3, r2
 8006552:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006556:	bf00      	nop
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <LL_RCC_SetSMPSClockSource>:
{
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800656a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800656e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006570:	f023 0203 	bic.w	r2, r3, #3
 8006574:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4313      	orrs	r3, r2
 800657c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800657e:	bf00      	nop
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <LL_RCC_SetSMPSPrescaler>:
{
 800658a:	b480      	push	{r7}
 800658c:	b083      	sub	sp, #12
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800659c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80065a6:	bf00      	nop
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <LL_RCC_SetUSARTClockSource>:
{
 80065b2:	b480      	push	{r7}
 80065b4:	b083      	sub	sp, #12
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80065ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c2:	f023 0203 	bic.w	r2, r3, #3
 80065c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80065d2:	bf00      	nop
 80065d4:	370c      	adds	r7, #12
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <LL_RCC_SetLPUARTClockSource>:
{
 80065de:	b480      	push	{r7}
 80065e0:	b083      	sub	sp, #12
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80065e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80065f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80065fe:	bf00      	nop
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr

0800660a <LL_RCC_SetI2CClockSource>:
{
 800660a:	b480      	push	{r7}
 800660c:	b083      	sub	sp, #12
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006616:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	091b      	lsrs	r3, r3, #4
 800661e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006622:	43db      	mvns	r3, r3
 8006624:	401a      	ands	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	011b      	lsls	r3, r3, #4
 800662a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800662e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006632:	4313      	orrs	r3, r2
 8006634:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006638:	bf00      	nop
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <LL_RCC_SetLPTIMClockSource>:
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800664c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006650:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	0c1b      	lsrs	r3, r3, #16
 8006658:	041b      	lsls	r3, r3, #16
 800665a:	43db      	mvns	r3, r3
 800665c:	401a      	ands	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	041b      	lsls	r3, r3, #16
 8006662:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006666:	4313      	orrs	r3, r2
 8006668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <LL_RCC_SetSAIClockSource>:
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006688:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800668c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4313      	orrs	r3, r2
 8006694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <LL_RCC_SetRNGClockSource>:
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80066ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80066b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4313      	orrs	r3, r2
 80066c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <LL_RCC_SetCLK48ClockSource>:
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80066d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80066e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <LL_RCC_SetUSBClockSource>:
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f7ff ffe3 	bl	80066d0 <LL_RCC_SetCLK48ClockSource>
}
 800670a:	bf00      	nop
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <LL_RCC_SetADCClockSource>:
{
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800671a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800671e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006722:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006726:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4313      	orrs	r3, r2
 800672e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006732:	bf00      	nop
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <LL_RCC_SetRTCClockSource>:
{
 800673e:	b480      	push	{r7}
 8006740:	b083      	sub	sp, #12
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800674a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800674e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006752:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4313      	orrs	r3, r2
 800675a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800675e:	bf00      	nop
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <LL_RCC_GetRTCClockSource>:
{
 800676a:	b480      	push	{r7}
 800676c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800676e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006776:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800677a:	4618      	mov	r0, r3
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <LL_RCC_ForceBackupDomainReset>:
{
 8006784:	b480      	push	{r7}
 8006786:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800678c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006790:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800679c:	bf00      	nop
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80067a6:	b480      	push	{r7}
 80067a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80067aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80067b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80067be:	bf00      	nop
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <LL_RCC_PLLSAI1_Enable>:
{
 80067c8:	b480      	push	{r7}
 80067ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80067cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80067d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80067da:	6013      	str	r3, [r2, #0]
}
 80067dc:	bf00      	nop
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <LL_RCC_PLLSAI1_Disable>:
{
 80067e6:	b480      	push	{r7}
 80067e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80067ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80067f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80067f8:	6013      	str	r3, [r2, #0]
}
 80067fa:	bf00      	nop
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <LL_RCC_PLLSAI1_IsReady>:
{
 8006804:	b480      	push	{r7}
 8006806:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006812:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006816:	d101      	bne.n	800681c <LL_RCC_PLLSAI1_IsReady+0x18>
 8006818:	2301      	movs	r3, #1
 800681a:	e000      	b.n	800681e <LL_RCC_PLLSAI1_IsReady+0x1a>
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b088      	sub	sp, #32
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006830:	2300      	movs	r3, #0
 8006832:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006834:	2300      	movs	r3, #0
 8006836:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006840:	2b00      	cmp	r3, #0
 8006842:	d033      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006848:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800684c:	d00c      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800684e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006852:	d802      	bhi.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006854:	2b00      	cmp	r3, #0
 8006856:	d010      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006858:	e017      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x62>
 800685a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800685e:	d017      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8006860:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006864:	d016      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8006866:	e010      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006876:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006878:	e00d      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	3304      	adds	r3, #4
 800687e:	4618      	mov	r0, r3
 8006880:	f000 f94d 	bl	8006b1e <RCCEx_PLLSAI1_ConfigNP>
 8006884:	4603      	mov	r3, r0
 8006886:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006888:	e005      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	77fb      	strb	r3, [r7, #31]
        break;
 800688e:	e002      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8006890:	bf00      	nop
 8006892:	e000      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8006894:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006896:	7ffb      	ldrb	r3, [r7, #31]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d105      	bne.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7ff fee9 	bl	8006678 <LL_RCC_SetSAIClockSource>
 80068a6:	e001      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a8:	7ffb      	ldrb	r3, [r7, #31]
 80068aa:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d046      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80068b8:	f7ff ff57 	bl	800676a <LL_RCC_GetRTCClockSource>
 80068bc:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c2:	69ba      	ldr	r2, [r7, #24]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d03c      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80068c8:	f7fe fc54 	bl	8005174 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d105      	bne.n	80068de <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7ff ff31 	bl	800673e <LL_RCC_SetRTCClockSource>
 80068dc:	e02e      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80068de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068e6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80068e8:	f7ff ff4c 	bl	8006784 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80068ec:	f7ff ff5b 	bl	80067a6 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fa:	4313      	orrs	r3, r2
 80068fc:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80068fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006908:	f7ff fde2 	bl	80064d0 <LL_RCC_LSE_IsEnabled>
 800690c:	4603      	mov	r3, r0
 800690e:	2b01      	cmp	r3, #1
 8006910:	d114      	bne.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006912:	f7fd fac1 	bl	8003e98 <HAL_GetTick>
 8006916:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006918:	e00b      	b.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800691a:	f7fd fabd 	bl	8003e98 <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	f241 3288 	movw	r2, #5000	; 0x1388
 8006928:	4293      	cmp	r3, r2
 800692a:	d902      	bls.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	77fb      	strb	r3, [r7, #31]
              break;
 8006930:	e004      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006932:	f7ff fddf 	bl	80064f4 <LL_RCC_LSE_IsReady>
 8006936:	4603      	mov	r3, r0
 8006938:	2b01      	cmp	r3, #1
 800693a:	d1ee      	bne.n	800691a <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800693c:	7ffb      	ldrb	r3, [r7, #31]
 800693e:	77bb      	strb	r3, [r7, #30]
 8006940:	e001      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006942:	7ffb      	ldrb	r3, [r7, #31]
 8006944:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b00      	cmp	r3, #0
 8006950:	d004      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	4618      	mov	r0, r3
 8006958:	f7ff fe2b 	bl	80065b2 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0302 	and.w	r3, r3, #2
 8006964:	2b00      	cmp	r3, #0
 8006966:	d004      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	69db      	ldr	r3, [r3, #28]
 800696c:	4618      	mov	r0, r3
 800696e:	f7ff fe36 	bl	80065de <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0310 	and.w	r3, r3, #16
 800697a:	2b00      	cmp	r3, #0
 800697c:	d004      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006982:	4618      	mov	r0, r3
 8006984:	f7ff fe5e 	bl	8006644 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0320 	and.w	r3, r3, #32
 8006990:	2b00      	cmp	r3, #0
 8006992:	d004      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006998:	4618      	mov	r0, r3
 800699a:	f7ff fe53 	bl	8006644 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0304 	and.w	r3, r3, #4
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d004      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7ff fe2b 	bl	800660a <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0308 	and.w	r3, r3, #8
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d004      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7ff fe20 	bl	800660a <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d022      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069da:	4618      	mov	r0, r3
 80069dc:	f7ff fe8e 	bl	80066fc <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069e8:	d107      	bne.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80069ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069f8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a02:	d10b      	bne.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	3304      	adds	r3, #4
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f000 f8e3 	bl	8006bd4 <RCCEx_PLLSAI1_ConfigNQ>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006a12:	7ffb      	ldrb	r3, [r7, #31]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 8006a18:	7ffb      	ldrb	r3, [r7, #31]
 8006a1a:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d02b      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a30:	d008      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a3a:	d003      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d105      	bne.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7ff fe2b 	bl	80066a4 <LL_RCC_SetRNGClockSource>
 8006a4e:	e00a      	b.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a58:	60fb      	str	r3, [r7, #12]
 8006a5a:	2000      	movs	r0, #0
 8006a5c:	f7ff fe22 	bl	80066a4 <LL_RCC_SetRNGClockSource>
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f7ff fe35 	bl	80066d0 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006a6e:	d107      	bne.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a7e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d022      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7ff fe3e 	bl	8006712 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a9e:	d107      	bne.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006aaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aae:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ab8:	d10b      	bne.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	3304      	adds	r3, #4
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 f8e3 	bl	8006c8a <RCCEx_PLLSAI1_ConfigNR>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006ac8:	7ffb      	ldrb	r3, [r7, #31]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d001      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 8006ace:	7ffb      	ldrb	r3, [r7, #31]
 8006ad0:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d004      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7ff fd27 	bl	8006536 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d009      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7ff fd46 	bl	800658a <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7ff fd2d 	bl	8006562 <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 8006b08:	7fbb      	ldrb	r3, [r7, #30]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3720      	adds	r7, #32
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8006b16:	f7ff fcff 	bl	8006518 <LL_RCC_MSI_EnablePLLMode>
}
 8006b1a:	bf00      	nop
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b084      	sub	sp, #16
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b26:	2300      	movs	r3, #0
 8006b28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006b2a:	f7ff fe5c 	bl	80067e6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006b2e:	f7fd f9b3 	bl	8003e98 <HAL_GetTick>
 8006b32:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006b34:	e009      	b.n	8006b4a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b36:	f7fd f9af 	bl	8003e98 <HAL_GetTick>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d902      	bls.n	8006b4a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	73fb      	strb	r3, [r7, #15]
      break;
 8006b48:	e004      	b.n	8006b54 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006b4a:	f7ff fe5b 	bl	8006804 <LL_RCC_PLLSAI1_IsReady>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1f0      	bne.n	8006b36 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d137      	bne.n	8006bca <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	021b      	lsls	r3, r3, #8
 8006b6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b84:	4313      	orrs	r3, r2
 8006b86:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006b88:	f7ff fe1e 	bl	80067c8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b8c:	f7fd f984 	bl	8003e98 <HAL_GetTick>
 8006b90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006b92:	e009      	b.n	8006ba8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b94:	f7fd f980 	bl	8003e98 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d902      	bls.n	8006ba8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	73fb      	strb	r3, [r7, #15]
        break;
 8006ba6:	e004      	b.n	8006bb2 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006ba8:	f7ff fe2c 	bl	8006804 <LL_RCC_PLLSAI1_IsReady>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d1f0      	bne.n	8006b94 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006bb2:	7bfb      	ldrb	r3, [r7, #15]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d108      	bne.n	8006bca <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bbc:	691a      	ldr	r2, [r3, #16]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006be0:	f7ff fe01 	bl	80067e6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006be4:	f7fd f958 	bl	8003e98 <HAL_GetTick>
 8006be8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006bea:	e009      	b.n	8006c00 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006bec:	f7fd f954 	bl	8003e98 <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d902      	bls.n	8006c00 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	73fb      	strb	r3, [r7, #15]
      break;
 8006bfe:	e004      	b.n	8006c0a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006c00:	f7ff fe00 	bl	8006804 <LL_RCC_PLLSAI1_IsReady>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1f0      	bne.n	8006bec <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006c0a:	7bfb      	ldrb	r3, [r7, #15]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d137      	bne.n	8006c80 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	021b      	lsls	r3, r3, #8
 8006c20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c24:	4313      	orrs	r3, r2
 8006c26:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006c3e:	f7ff fdc3 	bl	80067c8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c42:	f7fd f929 	bl	8003e98 <HAL_GetTick>
 8006c46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006c48:	e009      	b.n	8006c5e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c4a:	f7fd f925 	bl	8003e98 <HAL_GetTick>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d902      	bls.n	8006c5e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	73fb      	strb	r3, [r7, #15]
        break;
 8006c5c:	e004      	b.n	8006c68 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006c5e:	f7ff fdd1 	bl	8006804 <LL_RCC_PLLSAI1_IsReady>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d1f0      	bne.n	8006c4a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006c68:	7bfb      	ldrb	r3, [r7, #15]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d108      	bne.n	8006c80 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c72:	691a      	ldr	r2, [r3, #16]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b084      	sub	sp, #16
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006c96:	f7ff fda6 	bl	80067e6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006c9a:	f7fd f8fd 	bl	8003e98 <HAL_GetTick>
 8006c9e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006ca0:	e009      	b.n	8006cb6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ca2:	f7fd f8f9 	bl	8003e98 <HAL_GetTick>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d902      	bls.n	8006cb6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8006cb4:	e004      	b.n	8006cc0 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006cb6:	f7ff fda5 	bl	8006804 <LL_RCC_PLLSAI1_IsReady>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1f0      	bne.n	8006ca2 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006cc0:	7bfb      	ldrb	r3, [r7, #15]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d137      	bne.n	8006d36 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	021b      	lsls	r3, r3, #8
 8006cd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006cf4:	f7ff fd68 	bl	80067c8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cf8:	f7fd f8ce 	bl	8003e98 <HAL_GetTick>
 8006cfc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006cfe:	e009      	b.n	8006d14 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d00:	f7fd f8ca 	bl	8003e98 <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d902      	bls.n	8006d14 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	73fb      	strb	r3, [r7, #15]
        break;
 8006d12:	e004      	b.n	8006d1e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006d14:	f7ff fd76 	bl	8006804 <LL_RCC_PLLSAI1_IsReady>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d1f0      	bne.n	8006d00 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d108      	bne.n	8006d36 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d28:	691a      	ldr	r2, [r3, #16]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d32:	4313      	orrs	r3, r2
 8006d34:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d101      	bne.n	8006d52 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e090      	b.n	8006e74 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d106      	bne.n	8006d6c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f7fc f8dc 	bl	8002f24 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2202      	movs	r2, #2
 8006d70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	22ca      	movs	r2, #202	; 0xca
 8006d7a:	625a      	str	r2, [r3, #36]	; 0x24
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2253      	movs	r2, #83	; 0x53
 8006d82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f89f 	bl	8006ec8 <RTC_EnterInitMode>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d009      	beq.n	8006da4 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	22ff      	movs	r2, #255	; 0xff
 8006d96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2204      	movs	r2, #4
 8006d9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e067      	b.n	8006e74 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	6812      	ldr	r2, [r2, #0]
 8006dae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006db2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006db6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6899      	ldr	r1, [r3, #8]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685a      	ldr	r2, [r3, #4]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	431a      	orrs	r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	68d2      	ldr	r2, [r2, #12]
 8006dde:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6919      	ldr	r1, [r3, #16]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	041a      	lsls	r2, r3, #16
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	430a      	orrs	r2, r1
 8006df2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68da      	ldr	r2, [r3, #12]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e02:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 0203 	bic.w	r2, r2, #3
 8006e12:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	69da      	ldr	r2, [r3, #28]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	431a      	orrs	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f003 0320 	and.w	r3, r3, #32
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d113      	bne.n	8006e62 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f81e 	bl	8006e7c <HAL_RTC_WaitForSynchro>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00d      	beq.n	8006e62 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	22ff      	movs	r2, #255	; 0xff
 8006e4c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2204      	movs	r2, #4
 8006e52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e008      	b.n	8006e74 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	22ff      	movs	r2, #255	; 0xff
 8006e68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8006e72:	2300      	movs	r3, #0
  }
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3708      	adds	r7, #8
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68da      	ldr	r2, [r3, #12]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006e92:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006e94:	f7fd f800 	bl	8003e98 <HAL_GetTick>
 8006e98:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006e9a:	e009      	b.n	8006eb0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006e9c:	f7fc fffc 	bl	8003e98 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006eaa:	d901      	bls.n	8006eb0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e007      	b.n	8006ec0 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	f003 0320 	and.w	r3, r3, #32
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d0ee      	beq.n	8006e9c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d119      	bne.n	8006f12 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ee6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006ee8:	f7fc ffd6 	bl	8003e98 <HAL_GetTick>
 8006eec:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006eee:	e009      	b.n	8006f04 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8006ef0:	f7fc ffd2 	bl	8003e98 <HAL_GetTick>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006efe:	d901      	bls.n	8006f04 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e007      	b.n	8006f14 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d0ee      	beq.n	8006ef0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b086      	sub	sp, #24
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d101      	bne.n	8006f36 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8006f32:	2302      	movs	r3, #2
 8006f34:	e089      	b.n	800704a <HAL_RTCEx_SetWakeUpTimer+0x12e>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2202      	movs	r2, #2
 8006f42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	22ca      	movs	r2, #202	; 0xca
 8006f4c:	625a      	str	r2, [r3, #36]	; 0x24
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2253      	movs	r2, #83	; 0x53
 8006f54:	625a      	str	r2, [r3, #36]	; 0x24
 
  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != 0U){
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d020      	beq.n	8006fa6 <HAL_RTCEx_SetWakeUpTimer+0x8a>
    tickstart = HAL_GetTick();
 8006f64:	f7fc ff98 	bl	8003e98 <HAL_GetTick>
 8006f68:	6178      	str	r0, [r7, #20]

   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006f6a:	e015      	b.n	8006f98 <HAL_RTCEx_SetWakeUpTimer+0x7c>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006f6c:	f7fc ff94 	bl	8003e98 <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f7a:	d90d      	bls.n	8006f98 <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	22ff      	movs	r2, #255	; 0xff
 8006f82:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2203      	movs	r2, #3
 8006f88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 2020 	strb.w	r2, [r3, #32]

       return HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e058      	b.n	800704a <HAL_RTCEx_SetWakeUpTimer+0x12e>
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	f003 0304 	and.w	r3, r3, #4
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1e2      	bne.n	8006f6c <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	689a      	ldr	r2, [r3, #8]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fb4:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8006fb6:	f7fc ff6f 	bl	8003e98 <HAL_GetTick>
 8006fba:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006fbc:	e015      	b.n	8006fea <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006fbe:	f7fc ff6b 	bl	8003e98 <HAL_GetTick>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fcc:	d90d      	bls.n	8006fea <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	22ff      	movs	r2, #255	; 0xff
 8006fd4:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2203      	movs	r2, #3
 8006fda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e02f      	b.n	800704a <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	f003 0304 	and.w	r3, r3, #4
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d0e2      	beq.n	8006fbe <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	689a      	ldr	r2, [r3, #8]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f022 0207 	bic.w	r2, r2, #7
 8007006:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6899      	ldr	r1, [r3, #8]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	430a      	orrs	r2, r1
 8007016:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	615a      	str	r2, [r3, #20]

   /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	689a      	ldr	r2, [r3, #8]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800702e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	22ff      	movs	r2, #255	; 0xff
 8007036:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3718      	adds	r7, #24
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b084      	sub	sp, #16
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e07c      	b.n	800715e <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d106      	bne.n	8007084 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f7fc f82a 	bl	80030d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2202      	movs	r2, #2
 8007088:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800709a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070a4:	d902      	bls.n	80070ac <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80070a6:	2300      	movs	r3, #0
 80070a8:	60fb      	str	r3, [r7, #12]
 80070aa:	e002      	b.n	80070b2 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80070ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80070ba:	d007      	beq.n	80070cc <HAL_SPI_Init+0x7a>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070c4:	d002      	beq.n	80070cc <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10b      	bne.n	80070ec <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070dc:	d903      	bls.n	80070e6 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2202      	movs	r2, #2
 80070e2:	631a      	str	r2, [r3, #48]	; 0x30
 80070e4:	e002      	b.n	80070ec <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685a      	ldr	r2, [r3, #4]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	431a      	orrs	r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	431a      	orrs	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	695b      	ldr	r3, [r3, #20]
 8007100:	431a      	orrs	r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800710a:	431a      	orrs	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	69db      	ldr	r3, [r3, #28]
 8007110:	431a      	orrs	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	ea42 0103 	orr.w	r1, r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	430a      	orrs	r2, r1
 8007124:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	0c1b      	lsrs	r3, r3, #16
 800712c:	f003 0204 	and.w	r2, r3, #4
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007134:	431a      	orrs	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800713a:	431a      	orrs	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	ea42 0103 	orr.w	r1, r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	430a      	orrs	r2, r1
 800714c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b088      	sub	sp, #32
 800716a:	af00      	add	r7, sp, #0
 800716c:	60f8      	str	r0, [r7, #12]
 800716e:	60b9      	str	r1, [r7, #8]
 8007170:	603b      	str	r3, [r7, #0]
 8007172:	4613      	mov	r3, r2
 8007174:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007176:	2300      	movs	r3, #0
 8007178:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007180:	2b01      	cmp	r3, #1
 8007182:	d101      	bne.n	8007188 <HAL_SPI_Transmit+0x22>
 8007184:	2302      	movs	r3, #2
 8007186:	e150      	b.n	800742a <HAL_SPI_Transmit+0x2c4>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007190:	f7fc fe82 	bl	8003e98 <HAL_GetTick>
 8007194:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007196:	88fb      	ldrh	r3, [r7, #6]
 8007198:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d002      	beq.n	80071ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80071a6:	2302      	movs	r3, #2
 80071a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80071aa:	e135      	b.n	8007418 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d002      	beq.n	80071b8 <HAL_SPI_Transmit+0x52>
 80071b2:	88fb      	ldrh	r3, [r7, #6]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d102      	bne.n	80071be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80071bc:	e12c      	b.n	8007418 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2203      	movs	r2, #3
 80071c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	88fa      	ldrh	r2, [r7, #6]
 80071d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	88fa      	ldrh	r2, [r7, #6]
 80071dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007208:	d107      	bne.n	800721a <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007218:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007224:	2b40      	cmp	r3, #64	; 0x40
 8007226:	d007      	beq.n	8007238 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007236:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007240:	d94b      	bls.n	80072da <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d002      	beq.n	8007250 <HAL_SPI_Transmit+0xea>
 800724a:	8afb      	ldrh	r3, [r7, #22]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d13e      	bne.n	80072ce <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007254:	881a      	ldrh	r2, [r3, #0]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007260:	1c9a      	adds	r2, r3, #2
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800726a:	b29b      	uxth	r3, r3
 800726c:	3b01      	subs	r3, #1
 800726e:	b29a      	uxth	r2, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007274:	e02b      	b.n	80072ce <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f003 0302 	and.w	r3, r3, #2
 8007280:	2b02      	cmp	r3, #2
 8007282:	d112      	bne.n	80072aa <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007288:	881a      	ldrh	r2, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007294:	1c9a      	adds	r2, r3, #2
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800729e:	b29b      	uxth	r3, r3
 80072a0:	3b01      	subs	r3, #1
 80072a2:	b29a      	uxth	r2, r3
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80072a8:	e011      	b.n	80072ce <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072aa:	f7fc fdf5 	bl	8003e98 <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	683a      	ldr	r2, [r7, #0]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d803      	bhi.n	80072c2 <HAL_SPI_Transmit+0x15c>
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072c0:	d102      	bne.n	80072c8 <HAL_SPI_Transmit+0x162>
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d102      	bne.n	80072ce <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80072c8:	2303      	movs	r3, #3
 80072ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80072cc:	e0a4      	b.n	8007418 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1ce      	bne.n	8007276 <HAL_SPI_Transmit+0x110>
 80072d8:	e07c      	b.n	80073d4 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d002      	beq.n	80072e8 <HAL_SPI_Transmit+0x182>
 80072e2:	8afb      	ldrh	r3, [r7, #22]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d170      	bne.n	80073ca <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d912      	bls.n	8007318 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f6:	881a      	ldrh	r2, [r3, #0]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007302:	1c9a      	adds	r2, r3, #2
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800730c:	b29b      	uxth	r3, r3
 800730e:	3b02      	subs	r3, #2
 8007310:	b29a      	uxth	r2, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007316:	e058      	b.n	80073ca <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	330c      	adds	r3, #12
 8007322:	7812      	ldrb	r2, [r2, #0]
 8007324:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732a:	1c5a      	adds	r2, r3, #1
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007334:	b29b      	uxth	r3, r3
 8007336:	3b01      	subs	r3, #1
 8007338:	b29a      	uxth	r2, r3
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800733e:	e044      	b.n	80073ca <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f003 0302 	and.w	r3, r3, #2
 800734a:	2b02      	cmp	r3, #2
 800734c:	d12b      	bne.n	80073a6 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007352:	b29b      	uxth	r3, r3
 8007354:	2b01      	cmp	r3, #1
 8007356:	d912      	bls.n	800737e <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735c:	881a      	ldrh	r2, [r3, #0]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007368:	1c9a      	adds	r2, r3, #2
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007372:	b29b      	uxth	r3, r3
 8007374:	3b02      	subs	r3, #2
 8007376:	b29a      	uxth	r2, r3
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800737c:	e025      	b.n	80073ca <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	330c      	adds	r3, #12
 8007388:	7812      	ldrb	r2, [r2, #0]
 800738a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007390:	1c5a      	adds	r2, r3, #1
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800739a:	b29b      	uxth	r3, r3
 800739c:	3b01      	subs	r3, #1
 800739e:	b29a      	uxth	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80073a4:	e011      	b.n	80073ca <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073a6:	f7fc fd77 	bl	8003e98 <HAL_GetTick>
 80073aa:	4602      	mov	r2, r0
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d803      	bhi.n	80073be <HAL_SPI_Transmit+0x258>
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073bc:	d102      	bne.n	80073c4 <HAL_SPI_Transmit+0x25e>
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d102      	bne.n	80073ca <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80073c4:	2303      	movs	r3, #3
 80073c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80073c8:	e026      	b.n	8007418 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1b5      	bne.n	8007340 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073d4:	69ba      	ldr	r2, [r7, #24]
 80073d6:	6839      	ldr	r1, [r7, #0]
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f000 fc94 	bl	8007d06 <SPI_EndRxTxTransaction>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2220      	movs	r2, #32
 80073e8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10a      	bne.n	8007408 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073f2:	2300      	movs	r3, #0
 80073f4:	613b      	str	r3, [r7, #16]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	613b      	str	r3, [r7, #16]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	613b      	str	r3, [r7, #16]
 8007406:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800740c:	2b00      	cmp	r3, #0
 800740e:	d002      	beq.n	8007416 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	77fb      	strb	r3, [r7, #31]
 8007414:	e000      	b.n	8007418 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8007416:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007428:	7ffb      	ldrb	r3, [r7, #31]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3720      	adds	r7, #32
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b088      	sub	sp, #32
 8007436:	af02      	add	r7, sp, #8
 8007438:	60f8      	str	r0, [r7, #12]
 800743a:	60b9      	str	r1, [r7, #8]
 800743c:	603b      	str	r3, [r7, #0]
 800743e:	4613      	mov	r3, r2
 8007440:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007442:	2300      	movs	r3, #0
 8007444:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800744e:	d112      	bne.n	8007476 <HAL_SPI_Receive+0x44>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10e      	bne.n	8007476 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2204      	movs	r2, #4
 800745c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007460:	88fa      	ldrh	r2, [r7, #6]
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	4613      	mov	r3, r2
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	68b9      	ldr	r1, [r7, #8]
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f000 f908 	bl	8007682 <HAL_SPI_TransmitReceive>
 8007472:	4603      	mov	r3, r0
 8007474:	e101      	b.n	800767a <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800747c:	2b01      	cmp	r3, #1
 800747e:	d101      	bne.n	8007484 <HAL_SPI_Receive+0x52>
 8007480:	2302      	movs	r3, #2
 8007482:	e0fa      	b.n	800767a <HAL_SPI_Receive+0x248>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800748c:	f7fc fd04 	bl	8003e98 <HAL_GetTick>
 8007490:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b01      	cmp	r3, #1
 800749c:	d002      	beq.n	80074a4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800749e:	2302      	movs	r3, #2
 80074a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80074a2:	e0e1      	b.n	8007668 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d002      	beq.n	80074b0 <HAL_SPI_Receive+0x7e>
 80074aa:	88fb      	ldrh	r3, [r7, #6]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d102      	bne.n	80074b6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80074b4:	e0d8      	b.n	8007668 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2204      	movs	r2, #4
 80074ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	88fa      	ldrh	r2, [r7, #6]
 80074ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	88fa      	ldrh	r2, [r7, #6]
 80074d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007500:	d908      	bls.n	8007514 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007510:	605a      	str	r2, [r3, #4]
 8007512:	e007      	b.n	8007524 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007522:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800752c:	d107      	bne.n	800753e <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800753c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007548:	2b40      	cmp	r3, #64	; 0x40
 800754a:	d007      	beq.n	800755c <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800755a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007564:	d867      	bhi.n	8007636 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007566:	e030      	b.n	80075ca <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	f003 0301 	and.w	r3, r3, #1
 8007572:	2b01      	cmp	r3, #1
 8007574:	d117      	bne.n	80075a6 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f103 020c 	add.w	r2, r3, #12
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007582:	7812      	ldrb	r2, [r2, #0]
 8007584:	b2d2      	uxtb	r2, r2
 8007586:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758c:	1c5a      	adds	r2, r3, #1
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007598:	b29b      	uxth	r3, r3
 800759a:	3b01      	subs	r3, #1
 800759c:	b29a      	uxth	r2, r3
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80075a4:	e011      	b.n	80075ca <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075a6:	f7fc fc77 	bl	8003e98 <HAL_GetTick>
 80075aa:	4602      	mov	r2, r0
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	683a      	ldr	r2, [r7, #0]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d803      	bhi.n	80075be <HAL_SPI_Receive+0x18c>
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075bc:	d102      	bne.n	80075c4 <HAL_SPI_Receive+0x192>
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d102      	bne.n	80075ca <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80075c8:	e04e      	b.n	8007668 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1c8      	bne.n	8007568 <HAL_SPI_Receive+0x136>
 80075d6:	e034      	b.n	8007642 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f003 0301 	and.w	r3, r3, #1
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d115      	bne.n	8007612 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68da      	ldr	r2, [r3, #12]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f0:	b292      	uxth	r2, r2
 80075f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f8:	1c9a      	adds	r2, r3, #2
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007604:	b29b      	uxth	r3, r3
 8007606:	3b01      	subs	r3, #1
 8007608:	b29a      	uxth	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007610:	e011      	b.n	8007636 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007612:	f7fc fc41 	bl	8003e98 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	429a      	cmp	r2, r3
 8007620:	d803      	bhi.n	800762a <HAL_SPI_Receive+0x1f8>
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007628:	d102      	bne.n	8007630 <HAL_SPI_Receive+0x1fe>
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d102      	bne.n	8007636 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8007630:	2303      	movs	r3, #3
 8007632:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007634:	e018      	b.n	8007668 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800763c:	b29b      	uxth	r3, r3
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1ca      	bne.n	80075d8 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007642:	693a      	ldr	r2, [r7, #16]
 8007644:	6839      	ldr	r1, [r7, #0]
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f000 fb05 	bl	8007c56 <SPI_EndRxTransaction>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d002      	beq.n	8007658 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2220      	movs	r2, #32
 8007656:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800765c:	2b00      	cmp	r3, #0
 800765e:	d002      	beq.n	8007666 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	75fb      	strb	r3, [r7, #23]
 8007664:	e000      	b.n	8007668 <HAL_SPI_Receive+0x236>
  }

error :
 8007666:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2200      	movs	r2, #0
 8007674:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007678:	7dfb      	ldrb	r3, [r7, #23]
}
 800767a:	4618      	mov	r0, r3
 800767c:	3718      	adds	r7, #24
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b08a      	sub	sp, #40	; 0x28
 8007686:	af00      	add	r7, sp, #0
 8007688:	60f8      	str	r0, [r7, #12]
 800768a:	60b9      	str	r1, [r7, #8]
 800768c:	607a      	str	r2, [r7, #4]
 800768e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007690:	2301      	movs	r3, #1
 8007692:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007694:	2300      	movs	r3, #0
 8007696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d101      	bne.n	80076a8 <HAL_SPI_TransmitReceive+0x26>
 80076a4:	2302      	movs	r3, #2
 80076a6:	e1fb      	b.n	8007aa0 <HAL_SPI_TransmitReceive+0x41e>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076b0:	f7fc fbf2 	bl	8003e98 <HAL_GetTick>
 80076b4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80076bc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80076c4:	887b      	ldrh	r3, [r7, #2]
 80076c6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80076c8:	887b      	ldrh	r3, [r7, #2]
 80076ca:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80076cc:	7efb      	ldrb	r3, [r7, #27]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d00e      	beq.n	80076f0 <HAL_SPI_TransmitReceive+0x6e>
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076d8:	d106      	bne.n	80076e8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d102      	bne.n	80076e8 <HAL_SPI_TransmitReceive+0x66>
 80076e2:	7efb      	ldrb	r3, [r7, #27]
 80076e4:	2b04      	cmp	r3, #4
 80076e6:	d003      	beq.n	80076f0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80076e8:	2302      	movs	r3, #2
 80076ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80076ee:	e1cd      	b.n	8007a8c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d005      	beq.n	8007702 <HAL_SPI_TransmitReceive+0x80>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d002      	beq.n	8007702 <HAL_SPI_TransmitReceive+0x80>
 80076fc:	887b      	ldrh	r3, [r7, #2]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d103      	bne.n	800770a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007708:	e1c0      	b.n	8007a8c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b04      	cmp	r3, #4
 8007714:	d003      	beq.n	800771e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2205      	movs	r2, #5
 800771a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	887a      	ldrh	r2, [r7, #2]
 800772e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	887a      	ldrh	r2, [r7, #2]
 8007736:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	887a      	ldrh	r2, [r7, #2]
 8007744:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	887a      	ldrh	r2, [r7, #2]
 800774a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007760:	d802      	bhi.n	8007768 <HAL_SPI_TransmitReceive+0xe6>
 8007762:	8a3b      	ldrh	r3, [r7, #16]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d908      	bls.n	800777a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	685a      	ldr	r2, [r3, #4]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007776:	605a      	str	r2, [r3, #4]
 8007778:	e007      	b.n	800778a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	685a      	ldr	r2, [r3, #4]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007788:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007794:	2b40      	cmp	r3, #64	; 0x40
 8007796:	d007      	beq.n	80077a8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80077b0:	d97c      	bls.n	80078ac <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d002      	beq.n	80077c0 <HAL_SPI_TransmitReceive+0x13e>
 80077ba:	8a7b      	ldrh	r3, [r7, #18]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d169      	bne.n	8007894 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c4:	881a      	ldrh	r2, [r3, #0]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d0:	1c9a      	adds	r2, r3, #2
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077da:	b29b      	uxth	r3, r3
 80077dc:	3b01      	subs	r3, #1
 80077de:	b29a      	uxth	r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077e4:	e056      	b.n	8007894 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	f003 0302 	and.w	r3, r3, #2
 80077f0:	2b02      	cmp	r3, #2
 80077f2:	d11b      	bne.n	800782c <HAL_SPI_TransmitReceive+0x1aa>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d016      	beq.n	800782c <HAL_SPI_TransmitReceive+0x1aa>
 80077fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007800:	2b01      	cmp	r3, #1
 8007802:	d113      	bne.n	800782c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007808:	881a      	ldrh	r2, [r3, #0]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007814:	1c9a      	adds	r2, r3, #2
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800781e:	b29b      	uxth	r3, r3
 8007820:	3b01      	subs	r3, #1
 8007822:	b29a      	uxth	r2, r3
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007828:	2300      	movs	r3, #0
 800782a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f003 0301 	and.w	r3, r3, #1
 8007836:	2b01      	cmp	r3, #1
 8007838:	d11c      	bne.n	8007874 <HAL_SPI_TransmitReceive+0x1f2>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007840:	b29b      	uxth	r3, r3
 8007842:	2b00      	cmp	r3, #0
 8007844:	d016      	beq.n	8007874 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68da      	ldr	r2, [r3, #12]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007850:	b292      	uxth	r2, r2
 8007852:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007858:	1c9a      	adds	r2, r3, #2
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007864:	b29b      	uxth	r3, r3
 8007866:	3b01      	subs	r3, #1
 8007868:	b29a      	uxth	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007870:	2301      	movs	r3, #1
 8007872:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007874:	f7fc fb10 	bl	8003e98 <HAL_GetTick>
 8007878:	4602      	mov	r2, r0
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007880:	429a      	cmp	r2, r3
 8007882:	d807      	bhi.n	8007894 <HAL_SPI_TransmitReceive+0x212>
 8007884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007886:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800788a:	d003      	beq.n	8007894 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007892:	e0fb      	b.n	8007a8c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007898:	b29b      	uxth	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1a3      	bne.n	80077e6 <HAL_SPI_TransmitReceive+0x164>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d19d      	bne.n	80077e6 <HAL_SPI_TransmitReceive+0x164>
 80078aa:	e0df      	b.n	8007a6c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d003      	beq.n	80078bc <HAL_SPI_TransmitReceive+0x23a>
 80078b4:	8a7b      	ldrh	r3, [r7, #18]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	f040 80cb 	bne.w	8007a52 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d912      	bls.n	80078ec <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ca:	881a      	ldrh	r2, [r3, #0]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d6:	1c9a      	adds	r2, r3, #2
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	3b02      	subs	r3, #2
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80078ea:	e0b2      	b.n	8007a52 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	330c      	adds	r3, #12
 80078f6:	7812      	ldrb	r2, [r2, #0]
 80078f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fe:	1c5a      	adds	r2, r3, #1
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007908:	b29b      	uxth	r3, r3
 800790a:	3b01      	subs	r3, #1
 800790c:	b29a      	uxth	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007912:	e09e      	b.n	8007a52 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	f003 0302 	and.w	r3, r3, #2
 800791e:	2b02      	cmp	r3, #2
 8007920:	d134      	bne.n	800798c <HAL_SPI_TransmitReceive+0x30a>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007926:	b29b      	uxth	r3, r3
 8007928:	2b00      	cmp	r3, #0
 800792a:	d02f      	beq.n	800798c <HAL_SPI_TransmitReceive+0x30a>
 800792c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792e:	2b01      	cmp	r3, #1
 8007930:	d12c      	bne.n	800798c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007936:	b29b      	uxth	r3, r3
 8007938:	2b01      	cmp	r3, #1
 800793a:	d912      	bls.n	8007962 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007940:	881a      	ldrh	r2, [r3, #0]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794c:	1c9a      	adds	r2, r3, #2
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007956:	b29b      	uxth	r3, r3
 8007958:	3b02      	subs	r3, #2
 800795a:	b29a      	uxth	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007960:	e012      	b.n	8007988 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	330c      	adds	r3, #12
 800796c:	7812      	ldrb	r2, [r2, #0]
 800796e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007974:	1c5a      	adds	r2, r3, #1
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800797e:	b29b      	uxth	r3, r3
 8007980:	3b01      	subs	r3, #1
 8007982:	b29a      	uxth	r2, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007988:	2300      	movs	r3, #0
 800798a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f003 0301 	and.w	r3, r3, #1
 8007996:	2b01      	cmp	r3, #1
 8007998:	d148      	bne.n	8007a2c <HAL_SPI_TransmitReceive+0x3aa>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d042      	beq.n	8007a2c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d923      	bls.n	80079fa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68da      	ldr	r2, [r3, #12]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079bc:	b292      	uxth	r2, r2
 80079be:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c4:	1c9a      	adds	r2, r3, #2
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	3b02      	subs	r3, #2
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d81f      	bhi.n	8007a28 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	685a      	ldr	r2, [r3, #4]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80079f6:	605a      	str	r2, [r3, #4]
 80079f8:	e016      	b.n	8007a28 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f103 020c 	add.w	r2, r3, #12
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a06:	7812      	ldrb	r2, [r2, #0]
 8007a08:	b2d2      	uxtb	r2, r2
 8007a0a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a10:	1c5a      	adds	r2, r3, #1
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007a2c:	f7fc fa34 	bl	8003e98 <HAL_GetTick>
 8007a30:	4602      	mov	r2, r0
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d803      	bhi.n	8007a44 <HAL_SPI_TransmitReceive+0x3c2>
 8007a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a42:	d102      	bne.n	8007a4a <HAL_SPI_TransmitReceive+0x3c8>
 8007a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d103      	bne.n	8007a52 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007a50:	e01c      	b.n	8007a8c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f47f af5b 	bne.w	8007914 <HAL_SPI_TransmitReceive+0x292>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f47f af54 	bne.w	8007914 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a6c:	69fa      	ldr	r2, [r7, #28]
 8007a6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f000 f948 	bl	8007d06 <SPI_EndRxTxTransaction>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d006      	beq.n	8007a8a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2220      	movs	r2, #32
 8007a86:	661a      	str	r2, [r3, #96]	; 0x60
 8007a88:	e000      	b.n	8007a8c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007a8a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007a9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3728      	adds	r7, #40	; 0x28
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	603b      	str	r3, [r7, #0]
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ab8:	e04c      	b.n	8007b54 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ac0:	d048      	beq.n	8007b54 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007ac2:	f7fc f9e9 	bl	8003e98 <HAL_GetTick>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	1ad3      	subs	r3, r2, r3
 8007acc:	683a      	ldr	r2, [r7, #0]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d902      	bls.n	8007ad8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d13d      	bne.n	8007b54 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	685a      	ldr	r2, [r3, #4]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ae6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007af0:	d111      	bne.n	8007b16 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007afa:	d004      	beq.n	8007b06 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b04:	d107      	bne.n	8007b16 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b14:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b1e:	d10f      	bne.n	8007b40 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b2e:	601a      	str	r2, [r3, #0]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b3e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007b50:	2303      	movs	r3, #3
 8007b52:	e00f      	b.n	8007b74 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	689a      	ldr	r2, [r3, #8]
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	bf0c      	ite	eq
 8007b64:	2301      	moveq	r3, #1
 8007b66:	2300      	movne	r3, #0
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	79fb      	ldrb	r3, [r7, #7]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d1a3      	bne.n	8007aba <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
 8007b88:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8007b8a:	e057      	b.n	8007c3c <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007b92:	d106      	bne.n	8007ba2 <SPI_WaitFifoStateUntilTimeout+0x26>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d103      	bne.n	8007ba2 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	330c      	adds	r3, #12
 8007ba0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ba8:	d048      	beq.n	8007c3c <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007baa:	f7fc f975 	bl	8003e98 <HAL_GetTick>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	683a      	ldr	r2, [r7, #0]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d902      	bls.n	8007bc0 <SPI_WaitFifoStateUntilTimeout+0x44>
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d13d      	bne.n	8007c3c <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	685a      	ldr	r2, [r3, #4]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007bce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bd8:	d111      	bne.n	8007bfe <SPI_WaitFifoStateUntilTimeout+0x82>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007be2:	d004      	beq.n	8007bee <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bec:	d107      	bne.n	8007bfe <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bfc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c06:	d10f      	bne.n	8007c28 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c16:	601a      	str	r2, [r3, #0]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e008      	b.n	8007c4e <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	689a      	ldr	r2, [r3, #8]
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	4013      	ands	r3, r2
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d19f      	bne.n	8007b8c <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b086      	sub	sp, #24
 8007c5a:	af02      	add	r7, sp, #8
 8007c5c:	60f8      	str	r0, [r7, #12]
 8007c5e:	60b9      	str	r1, [r7, #8]
 8007c60:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c6a:	d111      	bne.n	8007c90 <SPI_EndRxTransaction+0x3a>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c74:	d004      	beq.n	8007c80 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c7e:	d107      	bne.n	8007c90 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c8e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	9300      	str	r3, [sp, #0]
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	2200      	movs	r2, #0
 8007c98:	2180      	movs	r1, #128	; 0x80
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f7ff ff04 	bl	8007aa8 <SPI_WaitFlagStateUntilTimeout>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d007      	beq.n	8007cb6 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007caa:	f043 0220 	orr.w	r2, r3, #32
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	e023      	b.n	8007cfe <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cbe:	d11d      	bne.n	8007cfc <SPI_EndRxTransaction+0xa6>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cc8:	d004      	beq.n	8007cd4 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cd2:	d113      	bne.n	8007cfc <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f7ff ff4b 	bl	8007b7c <SPI_WaitFifoStateUntilTimeout>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d007      	beq.n	8007cfc <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cf0:	f043 0220 	orr.w	r2, r3, #32
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e000      	b.n	8007cfe <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b086      	sub	sp, #24
 8007d0a:	af02      	add	r7, sp, #8
 8007d0c:	60f8      	str	r0, [r7, #12]
 8007d0e:	60b9      	str	r1, [r7, #8]
 8007d10:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	9300      	str	r3, [sp, #0]
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f7ff ff2c 	bl	8007b7c <SPI_WaitFifoStateUntilTimeout>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d007      	beq.n	8007d3a <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d2e:	f043 0220 	orr.w	r2, r3, #32
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007d36:	2303      	movs	r3, #3
 8007d38:	e027      	b.n	8007d8a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	2200      	movs	r2, #0
 8007d42:	2180      	movs	r1, #128	; 0x80
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f7ff feaf 	bl	8007aa8 <SPI_WaitFlagStateUntilTimeout>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d007      	beq.n	8007d60 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d54:	f043 0220 	orr.w	r2, r3, #32
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	e014      	b.n	8007d8a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	f7ff ff05 	bl	8007b7c <SPI_WaitFifoStateUntilTimeout>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d007      	beq.n	8007d88 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d7c:	f043 0220 	orr.w	r2, r3, #32
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007d84:	2303      	movs	r3, #3
 8007d86:	e000      	b.n	8007d8a <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b082      	sub	sp, #8
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d101      	bne.n	8007da4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	e01d      	b.n	8007de0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d106      	bne.n	8007dbe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f7fb fe75 	bl	8003aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2202      	movs	r2, #2
 8007dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	3304      	adds	r3, #4
 8007dce:	4619      	mov	r1, r3
 8007dd0:	4610      	mov	r0, r2
 8007dd2:	f000 f97b 	bl	80080cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3708      	adds	r7, #8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68da      	ldr	r2, [r3, #12]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f042 0201 	orr.w	r2, r2, #1
 8007dfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	689a      	ldr	r2, [r3, #8]
 8007e06:	4b0c      	ldr	r3, [pc, #48]	; (8007e38 <HAL_TIM_Base_Start_IT+0x50>)
 8007e08:	4013      	ands	r3, r2
 8007e0a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2b06      	cmp	r3, #6
 8007e10:	d00b      	beq.n	8007e2a <HAL_TIM_Base_Start_IT+0x42>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e18:	d007      	beq.n	8007e2a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f042 0201 	orr.w	r2, r2, #1
 8007e28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3714      	adds	r7, #20
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr
 8007e38:	00010007 	.word	0x00010007

08007e3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	f003 0302 	and.w	r3, r3, #2
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d122      	bne.n	8007e98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	f003 0302 	and.w	r3, r3, #2
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d11b      	bne.n	8007e98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f06f 0202 	mvn.w	r2, #2
 8007e68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	f003 0303 	and.w	r3, r3, #3
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d003      	beq.n	8007e86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f905 	bl	800808e <HAL_TIM_IC_CaptureCallback>
 8007e84:	e005      	b.n	8007e92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f8f7 	bl	800807a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 f908 	bl	80080a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	f003 0304 	and.w	r3, r3, #4
 8007ea2:	2b04      	cmp	r3, #4
 8007ea4:	d122      	bne.n	8007eec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	f003 0304 	and.w	r3, r3, #4
 8007eb0:	2b04      	cmp	r3, #4
 8007eb2:	d11b      	bne.n	8007eec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f06f 0204 	mvn.w	r2, #4
 8007ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2202      	movs	r2, #2
 8007ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	699b      	ldr	r3, [r3, #24]
 8007eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d003      	beq.n	8007eda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f8db 	bl	800808e <HAL_TIM_IC_CaptureCallback>
 8007ed8:	e005      	b.n	8007ee6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f8cd 	bl	800807a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 f8de 	bl	80080a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	f003 0308 	and.w	r3, r3, #8
 8007ef6:	2b08      	cmp	r3, #8
 8007ef8:	d122      	bne.n	8007f40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	f003 0308 	and.w	r3, r3, #8
 8007f04:	2b08      	cmp	r3, #8
 8007f06:	d11b      	bne.n	8007f40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f06f 0208 	mvn.w	r2, #8
 8007f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2204      	movs	r2, #4
 8007f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	69db      	ldr	r3, [r3, #28]
 8007f1e:	f003 0303 	and.w	r3, r3, #3
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d003      	beq.n	8007f2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f8b1 	bl	800808e <HAL_TIM_IC_CaptureCallback>
 8007f2c:	e005      	b.n	8007f3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f8a3 	bl	800807a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f8b4 	bl	80080a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	f003 0310 	and.w	r3, r3, #16
 8007f4a:	2b10      	cmp	r3, #16
 8007f4c:	d122      	bne.n	8007f94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	f003 0310 	and.w	r3, r3, #16
 8007f58:	2b10      	cmp	r3, #16
 8007f5a:	d11b      	bne.n	8007f94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f06f 0210 	mvn.w	r2, #16
 8007f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2208      	movs	r2, #8
 8007f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	69db      	ldr	r3, [r3, #28]
 8007f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d003      	beq.n	8007f82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f887 	bl	800808e <HAL_TIM_IC_CaptureCallback>
 8007f80:	e005      	b.n	8007f8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f879 	bl	800807a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f88a 	bl	80080a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	f003 0301 	and.w	r3, r3, #1
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d10e      	bne.n	8007fc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	f003 0301 	and.w	r3, r3, #1
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d107      	bne.n	8007fc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f06f 0201 	mvn.w	r2, #1
 8007fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7fa ff24 	bl	8002e08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fca:	2b80      	cmp	r3, #128	; 0x80
 8007fcc:	d10e      	bne.n	8007fec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fd8:	2b80      	cmp	r3, #128	; 0x80
 8007fda:	d107      	bne.n	8007fec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f8de 	bl	80081a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ffa:	d10e      	bne.n	800801a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008006:	2b80      	cmp	r3, #128	; 0x80
 8008008:	d107      	bne.n	800801a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 f8d1 	bl	80081bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008024:	2b40      	cmp	r3, #64	; 0x40
 8008026:	d10e      	bne.n	8008046 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008032:	2b40      	cmp	r3, #64	; 0x40
 8008034:	d107      	bne.n	8008046 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800803e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f838 	bl	80080b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	f003 0320 	and.w	r3, r3, #32
 8008050:	2b20      	cmp	r3, #32
 8008052:	d10e      	bne.n	8008072 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	f003 0320 	and.w	r3, r3, #32
 800805e:	2b20      	cmp	r3, #32
 8008060:	d107      	bne.n	8008072 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f06f 0220 	mvn.w	r2, #32
 800806a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 f891 	bl	8008194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008072:	bf00      	nop
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800807a:	b480      	push	{r7}
 800807c:	b083      	sub	sp, #12
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008082:	bf00      	nop
 8008084:	370c      	adds	r7, #12
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr

0800808e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800808e:	b480      	push	{r7}
 8008090:	b083      	sub	sp, #12
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008096:	bf00      	nop
 8008098:	370c      	adds	r7, #12
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr

080080a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080a2:	b480      	push	{r7}
 80080a4:	b083      	sub	sp, #12
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080aa:	bf00      	nop
 80080ac:	370c      	adds	r7, #12
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr

080080b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080b6:	b480      	push	{r7}
 80080b8:	b083      	sub	sp, #12
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080be:	bf00      	nop
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr
	...

080080cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a2a      	ldr	r2, [pc, #168]	; (8008188 <TIM_Base_SetConfig+0xbc>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d003      	beq.n	80080ec <TIM_Base_SetConfig+0x20>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080ea:	d108      	bne.n	80080fe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a21      	ldr	r2, [pc, #132]	; (8008188 <TIM_Base_SetConfig+0xbc>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d00b      	beq.n	800811e <TIM_Base_SetConfig+0x52>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800810c:	d007      	beq.n	800811e <TIM_Base_SetConfig+0x52>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a1e      	ldr	r2, [pc, #120]	; (800818c <TIM_Base_SetConfig+0xc0>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d003      	beq.n	800811e <TIM_Base_SetConfig+0x52>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a1d      	ldr	r2, [pc, #116]	; (8008190 <TIM_Base_SetConfig+0xc4>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d108      	bne.n	8008130 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	4313      	orrs	r3, r2
 800812e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	4313      	orrs	r3, r2
 800813c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	689a      	ldr	r2, [r3, #8]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a0c      	ldr	r2, [pc, #48]	; (8008188 <TIM_Base_SetConfig+0xbc>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d007      	beq.n	800816c <TIM_Base_SetConfig+0xa0>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a0b      	ldr	r2, [pc, #44]	; (800818c <TIM_Base_SetConfig+0xc0>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d003      	beq.n	800816c <TIM_Base_SetConfig+0xa0>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a0a      	ldr	r2, [pc, #40]	; (8008190 <TIM_Base_SetConfig+0xc4>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d103      	bne.n	8008174 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	691a      	ldr	r2, [r3, #16]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	615a      	str	r2, [r3, #20]
}
 800817a:	bf00      	nop
 800817c:	3714      	adds	r7, #20
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop
 8008188:	40012c00 	.word	0x40012c00
 800818c:	40014400 	.word	0x40014400
 8008190:	40014800 	.word	0x40014800

08008194 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800819c:	bf00      	nop
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <LL_RCC_GetUSARTClockSource>:
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80081d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4013      	ands	r3, r2
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <LL_RCC_GetLPUARTClockSource>:
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80081f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4013      	ands	r3, r2
}
 8008204:	4618      	mov	r0, r3
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d101      	bne.n	8008222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e042      	b.n	80082a8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008228:	2b00      	cmp	r3, #0
 800822a:	d106      	bne.n	800823a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f7fb fcd1 	bl	8003bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2224      	movs	r2, #36	; 0x24
 800823e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f022 0201 	bic.w	r2, r2, #1
 8008250:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f82c 	bl	80082b0 <UART_SetConfig>
 8008258:	4603      	mov	r3, r0
 800825a:	2b01      	cmp	r3, #1
 800825c:	d101      	bne.n	8008262 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e022      	b.n	80082a8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008266:	2b00      	cmp	r3, #0
 8008268:	d002      	beq.n	8008270 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f001 f884 	bl	8009378 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	685a      	ldr	r2, [r3, #4]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800827e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	689a      	ldr	r2, [r3, #8]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800828e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f042 0201 	orr.w	r2, r2, #1
 800829e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f001 f90b 	bl	80094bc <UART_CheckIdleState>
 80082a6:	4603      	mov	r3, r0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3708      	adds	r7, #8
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082b0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80082b4:	b08a      	sub	sp, #40	; 0x28
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80082ba:	2300      	movs	r3, #0
 80082bc:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80082be:	2300      	movs	r3, #0
 80082c0:	76fb      	strb	r3, [r7, #27]
#if defined(LPUART1)
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80082c2:	2300      	movs	r3, #0
 80082c4:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	689a      	ldr	r2, [r3, #8]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	431a      	orrs	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	695b      	ldr	r3, [r3, #20]
 80082d4:	431a      	orrs	r2, r3
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	69db      	ldr	r3, [r3, #28]
 80082da:	4313      	orrs	r3, r2
 80082dc:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082e4:	4313      	orrs	r3, r2
 80082e6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	4ba4      	ldr	r3, [pc, #656]	; (8008580 <UART_SetConfig+0x2d0>)
 80082f0:	4013      	ands	r3, r2
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	6812      	ldr	r2, [r2, #0]
 80082f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082f8:	430b      	orrs	r3, r1
 80082fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	68da      	ldr	r2, [r3, #12]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	430a      	orrs	r2, r1
 8008310:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a99      	ldr	r2, [pc, #612]	; (8008584 <UART_SetConfig+0x2d4>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d004      	beq.n	800832c <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a1b      	ldr	r3, [r3, #32]
 8008326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008328:	4313      	orrs	r3, r2
 800832a:	627b      	str	r3, [r7, #36]	; 0x24
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008336:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	6812      	ldr	r2, [r2, #0]
 800833e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008340:	430b      	orrs	r3, r1
 8008342:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834a:	f023 010f 	bic.w	r1, r3, #15
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	430a      	orrs	r2, r1
 8008358:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a8a      	ldr	r2, [pc, #552]	; (8008588 <UART_SetConfig+0x2d8>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d126      	bne.n	80083b2 <UART_SetConfig+0x102>
 8008364:	2003      	movs	r0, #3
 8008366:	f7ff ff33 	bl	80081d0 <LL_RCC_GetUSARTClockSource>
 800836a:	4603      	mov	r3, r0
 800836c:	2b03      	cmp	r3, #3
 800836e:	d81b      	bhi.n	80083a8 <UART_SetConfig+0xf8>
 8008370:	a201      	add	r2, pc, #4	; (adr r2, 8008378 <UART_SetConfig+0xc8>)
 8008372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008376:	bf00      	nop
 8008378:	08008389 	.word	0x08008389
 800837c:	08008399 	.word	0x08008399
 8008380:	08008391 	.word	0x08008391
 8008384:	080083a1 	.word	0x080083a1
 8008388:	2301      	movs	r3, #1
 800838a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800838e:	e042      	b.n	8008416 <UART_SetConfig+0x166>
 8008390:	2302      	movs	r3, #2
 8008392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008396:	e03e      	b.n	8008416 <UART_SetConfig+0x166>
 8008398:	2304      	movs	r3, #4
 800839a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800839e:	e03a      	b.n	8008416 <UART_SetConfig+0x166>
 80083a0:	2308      	movs	r3, #8
 80083a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083a6:	e036      	b.n	8008416 <UART_SetConfig+0x166>
 80083a8:	2310      	movs	r3, #16
 80083aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083ae:	bf00      	nop
 80083b0:	e031      	b.n	8008416 <UART_SetConfig+0x166>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a73      	ldr	r2, [pc, #460]	; (8008584 <UART_SetConfig+0x2d4>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d129      	bne.n	8008410 <UART_SetConfig+0x160>
 80083bc:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80083c0:	f7ff ff16 	bl	80081f0 <LL_RCC_GetLPUARTClockSource>
 80083c4:	4603      	mov	r3, r0
 80083c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083ca:	d014      	beq.n	80083f6 <UART_SetConfig+0x146>
 80083cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083d0:	d802      	bhi.n	80083d8 <UART_SetConfig+0x128>
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d007      	beq.n	80083e6 <UART_SetConfig+0x136>
 80083d6:	e016      	b.n	8008406 <UART_SetConfig+0x156>
 80083d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083dc:	d007      	beq.n	80083ee <UART_SetConfig+0x13e>
 80083de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083e2:	d00c      	beq.n	80083fe <UART_SetConfig+0x14e>
 80083e4:	e00f      	b.n	8008406 <UART_SetConfig+0x156>
 80083e6:	2300      	movs	r3, #0
 80083e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083ec:	e013      	b.n	8008416 <UART_SetConfig+0x166>
 80083ee:	2302      	movs	r3, #2
 80083f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083f4:	e00f      	b.n	8008416 <UART_SetConfig+0x166>
 80083f6:	2304      	movs	r3, #4
 80083f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083fc:	e00b      	b.n	8008416 <UART_SetConfig+0x166>
 80083fe:	2308      	movs	r3, #8
 8008400:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008404:	e007      	b.n	8008416 <UART_SetConfig+0x166>
 8008406:	2310      	movs	r3, #16
 8008408:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800840c:	bf00      	nop
 800840e:	e002      	b.n	8008416 <UART_SetConfig+0x166>
 8008410:	2310      	movs	r3, #16
 8008412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a5a      	ldr	r2, [pc, #360]	; (8008584 <UART_SetConfig+0x2d4>)
 800841c:	4293      	cmp	r3, r2
 800841e:	f040 8428 	bne.w	8008c72 <UART_SetConfig+0x9c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008422:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008426:	2b08      	cmp	r3, #8
 8008428:	f200 8171 	bhi.w	800870e <UART_SetConfig+0x45e>
 800842c:	a201      	add	r2, pc, #4	; (adr r2, 8008434 <UART_SetConfig+0x184>)
 800842e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008432:	bf00      	nop
 8008434:	08008459 	.word	0x08008459
 8008438:	0800870f 	.word	0x0800870f
 800843c:	080084fb 	.word	0x080084fb
 8008440:	0800870f 	.word	0x0800870f
 8008444:	080085bf 	.word	0x080085bf
 8008448:	0800870f 	.word	0x0800870f
 800844c:	0800870f 	.word	0x0800870f
 8008450:	0800870f 	.word	0x0800870f
 8008454:	08008661 	.word	0x08008661
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008458:	f7fd ff56 	bl	8006308 <HAL_RCC_GetPCLK1Freq>
 800845c:	4602      	mov	r2, r0
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008462:	2b00      	cmp	r3, #0
 8008464:	d044      	beq.n	80084f0 <UART_SetConfig+0x240>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846a:	2b01      	cmp	r3, #1
 800846c:	d03e      	beq.n	80084ec <UART_SetConfig+0x23c>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008472:	2b02      	cmp	r3, #2
 8008474:	d038      	beq.n	80084e8 <UART_SetConfig+0x238>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847a:	2b03      	cmp	r3, #3
 800847c:	d032      	beq.n	80084e4 <UART_SetConfig+0x234>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008482:	2b04      	cmp	r3, #4
 8008484:	d02c      	beq.n	80084e0 <UART_SetConfig+0x230>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848a:	2b05      	cmp	r3, #5
 800848c:	d026      	beq.n	80084dc <UART_SetConfig+0x22c>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008492:	2b06      	cmp	r3, #6
 8008494:	d020      	beq.n	80084d8 <UART_SetConfig+0x228>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849a:	2b07      	cmp	r3, #7
 800849c:	d01a      	beq.n	80084d4 <UART_SetConfig+0x224>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a2:	2b08      	cmp	r3, #8
 80084a4:	d014      	beq.n	80084d0 <UART_SetConfig+0x220>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084aa:	2b09      	cmp	r3, #9
 80084ac:	d00e      	beq.n	80084cc <UART_SetConfig+0x21c>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b2:	2b0a      	cmp	r3, #10
 80084b4:	d008      	beq.n	80084c8 <UART_SetConfig+0x218>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ba:	2b0b      	cmp	r3, #11
 80084bc:	d102      	bne.n	80084c4 <UART_SetConfig+0x214>
 80084be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084c2:	e016      	b.n	80084f2 <UART_SetConfig+0x242>
 80084c4:	2301      	movs	r3, #1
 80084c6:	e014      	b.n	80084f2 <UART_SetConfig+0x242>
 80084c8:	2380      	movs	r3, #128	; 0x80
 80084ca:	e012      	b.n	80084f2 <UART_SetConfig+0x242>
 80084cc:	2340      	movs	r3, #64	; 0x40
 80084ce:	e010      	b.n	80084f2 <UART_SetConfig+0x242>
 80084d0:	2320      	movs	r3, #32
 80084d2:	e00e      	b.n	80084f2 <UART_SetConfig+0x242>
 80084d4:	2310      	movs	r3, #16
 80084d6:	e00c      	b.n	80084f2 <UART_SetConfig+0x242>
 80084d8:	230c      	movs	r3, #12
 80084da:	e00a      	b.n	80084f2 <UART_SetConfig+0x242>
 80084dc:	230a      	movs	r3, #10
 80084de:	e008      	b.n	80084f2 <UART_SetConfig+0x242>
 80084e0:	2308      	movs	r3, #8
 80084e2:	e006      	b.n	80084f2 <UART_SetConfig+0x242>
 80084e4:	2306      	movs	r3, #6
 80084e6:	e004      	b.n	80084f2 <UART_SetConfig+0x242>
 80084e8:	2304      	movs	r3, #4
 80084ea:	e002      	b.n	80084f2 <UART_SetConfig+0x242>
 80084ec:	2302      	movs	r3, #2
 80084ee:	e000      	b.n	80084f2 <UART_SetConfig+0x242>
 80084f0:	2301      	movs	r3, #1
 80084f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80084f6:	617b      	str	r3, [r7, #20]
        break;
 80084f8:	e10c      	b.n	8008714 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d05a      	beq.n	80085b8 <UART_SetConfig+0x308>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008506:	2b01      	cmp	r3, #1
 8008508:	d054      	beq.n	80085b4 <UART_SetConfig+0x304>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850e:	2b02      	cmp	r3, #2
 8008510:	d04e      	beq.n	80085b0 <UART_SetConfig+0x300>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008516:	2b03      	cmp	r3, #3
 8008518:	d048      	beq.n	80085ac <UART_SetConfig+0x2fc>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851e:	2b04      	cmp	r3, #4
 8008520:	d02c      	beq.n	800857c <UART_SetConfig+0x2cc>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008526:	2b05      	cmp	r3, #5
 8008528:	d026      	beq.n	8008578 <UART_SetConfig+0x2c8>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852e:	2b06      	cmp	r3, #6
 8008530:	d020      	beq.n	8008574 <UART_SetConfig+0x2c4>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008536:	2b07      	cmp	r3, #7
 8008538:	d01a      	beq.n	8008570 <UART_SetConfig+0x2c0>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853e:	2b08      	cmp	r3, #8
 8008540:	d014      	beq.n	800856c <UART_SetConfig+0x2bc>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008546:	2b09      	cmp	r3, #9
 8008548:	d00e      	beq.n	8008568 <UART_SetConfig+0x2b8>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854e:	2b0a      	cmp	r3, #10
 8008550:	d008      	beq.n	8008564 <UART_SetConfig+0x2b4>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008556:	2b0b      	cmp	r3, #11
 8008558:	d102      	bne.n	8008560 <UART_SetConfig+0x2b0>
 800855a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800855e:	e02c      	b.n	80085ba <UART_SetConfig+0x30a>
 8008560:	4b0a      	ldr	r3, [pc, #40]	; (800858c <UART_SetConfig+0x2dc>)
 8008562:	e02a      	b.n	80085ba <UART_SetConfig+0x30a>
 8008564:	4b0a      	ldr	r3, [pc, #40]	; (8008590 <UART_SetConfig+0x2e0>)
 8008566:	e028      	b.n	80085ba <UART_SetConfig+0x30a>
 8008568:	4b0a      	ldr	r3, [pc, #40]	; (8008594 <UART_SetConfig+0x2e4>)
 800856a:	e026      	b.n	80085ba <UART_SetConfig+0x30a>
 800856c:	4b0a      	ldr	r3, [pc, #40]	; (8008598 <UART_SetConfig+0x2e8>)
 800856e:	e024      	b.n	80085ba <UART_SetConfig+0x30a>
 8008570:	4b0a      	ldr	r3, [pc, #40]	; (800859c <UART_SetConfig+0x2ec>)
 8008572:	e022      	b.n	80085ba <UART_SetConfig+0x30a>
 8008574:	4b0a      	ldr	r3, [pc, #40]	; (80085a0 <UART_SetConfig+0x2f0>)
 8008576:	e020      	b.n	80085ba <UART_SetConfig+0x30a>
 8008578:	4b0a      	ldr	r3, [pc, #40]	; (80085a4 <UART_SetConfig+0x2f4>)
 800857a:	e01e      	b.n	80085ba <UART_SetConfig+0x30a>
 800857c:	4b0a      	ldr	r3, [pc, #40]	; (80085a8 <UART_SetConfig+0x2f8>)
 800857e:	e01c      	b.n	80085ba <UART_SetConfig+0x30a>
 8008580:	cfff69f3 	.word	0xcfff69f3
 8008584:	40008000 	.word	0x40008000
 8008588:	40013800 	.word	0x40013800
 800858c:	00f42400 	.word	0x00f42400
 8008590:	0001e848 	.word	0x0001e848
 8008594:	0003d090 	.word	0x0003d090
 8008598:	0007a120 	.word	0x0007a120
 800859c:	000f4240 	.word	0x000f4240
 80085a0:	00145855 	.word	0x00145855
 80085a4:	00186a00 	.word	0x00186a00
 80085a8:	001e8480 	.word	0x001e8480
 80085ac:	4ba6      	ldr	r3, [pc, #664]	; (8008848 <UART_SetConfig+0x598>)
 80085ae:	e004      	b.n	80085ba <UART_SetConfig+0x30a>
 80085b0:	4ba6      	ldr	r3, [pc, #664]	; (800884c <UART_SetConfig+0x59c>)
 80085b2:	e002      	b.n	80085ba <UART_SetConfig+0x30a>
 80085b4:	4ba6      	ldr	r3, [pc, #664]	; (8008850 <UART_SetConfig+0x5a0>)
 80085b6:	e000      	b.n	80085ba <UART_SetConfig+0x30a>
 80085b8:	4ba6      	ldr	r3, [pc, #664]	; (8008854 <UART_SetConfig+0x5a4>)
 80085ba:	617b      	str	r3, [r7, #20]
        break;
 80085bc:	e0aa      	b.n	8008714 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80085be:	f7fd fe25 	bl	800620c <HAL_RCC_GetSysClockFreq>
 80085c2:	4602      	mov	r2, r0
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d044      	beq.n	8008656 <UART_SetConfig+0x3a6>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d03e      	beq.n	8008652 <UART_SetConfig+0x3a2>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d8:	2b02      	cmp	r3, #2
 80085da:	d038      	beq.n	800864e <UART_SetConfig+0x39e>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e0:	2b03      	cmp	r3, #3
 80085e2:	d032      	beq.n	800864a <UART_SetConfig+0x39a>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e8:	2b04      	cmp	r3, #4
 80085ea:	d02c      	beq.n	8008646 <UART_SetConfig+0x396>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f0:	2b05      	cmp	r3, #5
 80085f2:	d026      	beq.n	8008642 <UART_SetConfig+0x392>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f8:	2b06      	cmp	r3, #6
 80085fa:	d020      	beq.n	800863e <UART_SetConfig+0x38e>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008600:	2b07      	cmp	r3, #7
 8008602:	d01a      	beq.n	800863a <UART_SetConfig+0x38a>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008608:	2b08      	cmp	r3, #8
 800860a:	d014      	beq.n	8008636 <UART_SetConfig+0x386>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008610:	2b09      	cmp	r3, #9
 8008612:	d00e      	beq.n	8008632 <UART_SetConfig+0x382>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008618:	2b0a      	cmp	r3, #10
 800861a:	d008      	beq.n	800862e <UART_SetConfig+0x37e>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008620:	2b0b      	cmp	r3, #11
 8008622:	d102      	bne.n	800862a <UART_SetConfig+0x37a>
 8008624:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008628:	e016      	b.n	8008658 <UART_SetConfig+0x3a8>
 800862a:	2301      	movs	r3, #1
 800862c:	e014      	b.n	8008658 <UART_SetConfig+0x3a8>
 800862e:	2380      	movs	r3, #128	; 0x80
 8008630:	e012      	b.n	8008658 <UART_SetConfig+0x3a8>
 8008632:	2340      	movs	r3, #64	; 0x40
 8008634:	e010      	b.n	8008658 <UART_SetConfig+0x3a8>
 8008636:	2320      	movs	r3, #32
 8008638:	e00e      	b.n	8008658 <UART_SetConfig+0x3a8>
 800863a:	2310      	movs	r3, #16
 800863c:	e00c      	b.n	8008658 <UART_SetConfig+0x3a8>
 800863e:	230c      	movs	r3, #12
 8008640:	e00a      	b.n	8008658 <UART_SetConfig+0x3a8>
 8008642:	230a      	movs	r3, #10
 8008644:	e008      	b.n	8008658 <UART_SetConfig+0x3a8>
 8008646:	2308      	movs	r3, #8
 8008648:	e006      	b.n	8008658 <UART_SetConfig+0x3a8>
 800864a:	2306      	movs	r3, #6
 800864c:	e004      	b.n	8008658 <UART_SetConfig+0x3a8>
 800864e:	2304      	movs	r3, #4
 8008650:	e002      	b.n	8008658 <UART_SetConfig+0x3a8>
 8008652:	2302      	movs	r3, #2
 8008654:	e000      	b.n	8008658 <UART_SetConfig+0x3a8>
 8008656:	2301      	movs	r3, #1
 8008658:	fbb2 f3f3 	udiv	r3, r2, r3
 800865c:	617b      	str	r3, [r7, #20]
        break;
 800865e:	e059      	b.n	8008714 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008664:	2b00      	cmp	r3, #0
 8008666:	d04e      	beq.n	8008706 <UART_SetConfig+0x456>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866c:	2b01      	cmp	r3, #1
 800866e:	d047      	beq.n	8008700 <UART_SetConfig+0x450>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008674:	2b02      	cmp	r3, #2
 8008676:	d040      	beq.n	80086fa <UART_SetConfig+0x44a>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867c:	2b03      	cmp	r3, #3
 800867e:	d039      	beq.n	80086f4 <UART_SetConfig+0x444>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008684:	2b04      	cmp	r3, #4
 8008686:	d032      	beq.n	80086ee <UART_SetConfig+0x43e>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868c:	2b05      	cmp	r3, #5
 800868e:	d02b      	beq.n	80086e8 <UART_SetConfig+0x438>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008694:	2b06      	cmp	r3, #6
 8008696:	d024      	beq.n	80086e2 <UART_SetConfig+0x432>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869c:	2b07      	cmp	r3, #7
 800869e:	d01d      	beq.n	80086dc <UART_SetConfig+0x42c>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a4:	2b08      	cmp	r3, #8
 80086a6:	d016      	beq.n	80086d6 <UART_SetConfig+0x426>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ac:	2b09      	cmp	r3, #9
 80086ae:	d00f      	beq.n	80086d0 <UART_SetConfig+0x420>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b4:	2b0a      	cmp	r3, #10
 80086b6:	d008      	beq.n	80086ca <UART_SetConfig+0x41a>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086bc:	2b0b      	cmp	r3, #11
 80086be:	d101      	bne.n	80086c4 <UART_SetConfig+0x414>
 80086c0:	2380      	movs	r3, #128	; 0x80
 80086c2:	e022      	b.n	800870a <UART_SetConfig+0x45a>
 80086c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086c8:	e01f      	b.n	800870a <UART_SetConfig+0x45a>
 80086ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086ce:	e01c      	b.n	800870a <UART_SetConfig+0x45a>
 80086d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086d4:	e019      	b.n	800870a <UART_SetConfig+0x45a>
 80086d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086da:	e016      	b.n	800870a <UART_SetConfig+0x45a>
 80086dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80086e0:	e013      	b.n	800870a <UART_SetConfig+0x45a>
 80086e2:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80086e6:	e010      	b.n	800870a <UART_SetConfig+0x45a>
 80086e8:	f640 43cc 	movw	r3, #3276	; 0xccc
 80086ec:	e00d      	b.n	800870a <UART_SetConfig+0x45a>
 80086ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086f2:	e00a      	b.n	800870a <UART_SetConfig+0x45a>
 80086f4:	f241 5355 	movw	r3, #5461	; 0x1555
 80086f8:	e007      	b.n	800870a <UART_SetConfig+0x45a>
 80086fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80086fe:	e004      	b.n	800870a <UART_SetConfig+0x45a>
 8008700:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008704:	e001      	b.n	800870a <UART_SetConfig+0x45a>
 8008706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800870a:	617b      	str	r3, [r7, #20]
        break;
 800870c:	e002      	b.n	8008714 <UART_SetConfig+0x464>
      default:
        ret = HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	76fb      	strb	r3, [r7, #27]
        break;
 8008712:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	2b00      	cmp	r3, #0
 8008718:	f000 8604 	beq.w	8009324 <UART_SetConfig+0x1074>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	685a      	ldr	r2, [r3, #4]
 8008720:	4613      	mov	r3, r2
 8008722:	005b      	lsls	r3, r3, #1
 8008724:	4413      	add	r3, r2
 8008726:	697a      	ldr	r2, [r7, #20]
 8008728:	429a      	cmp	r2, r3
 800872a:	d305      	bcc.n	8008738 <UART_SetConfig+0x488>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008732:	697a      	ldr	r2, [r7, #20]
 8008734:	429a      	cmp	r2, r3
 8008736:	d903      	bls.n	8008740 <UART_SetConfig+0x490>
      {
        ret = HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	76fb      	strb	r3, [r7, #27]
 800873c:	f000 bdf2 	b.w	8009324 <UART_SetConfig+0x1074>
      }
      else
      {
        switch (clocksource)
 8008740:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008744:	2b08      	cmp	r3, #8
 8008746:	f200 8281 	bhi.w	8008c4c <UART_SetConfig+0x99c>
 800874a:	a201      	add	r2, pc, #4	; (adr r2, 8008750 <UART_SetConfig+0x4a0>)
 800874c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008750:	08008775 	.word	0x08008775
 8008754:	08008c4d 	.word	0x08008c4d
 8008758:	080088c5 	.word	0x080088c5
 800875c:	08008c4d 	.word	0x08008c4d
 8008760:	080089bb 	.word	0x080089bb
 8008764:	08008c4d 	.word	0x08008c4d
 8008768:	08008c4d 	.word	0x08008c4d
 800876c:	08008c4d 	.word	0x08008c4d
 8008770:	08008af9 	.word	0x08008af9
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8008774:	f7fd fdc8 	bl	8006308 <HAL_RCC_GetPCLK1Freq>
 8008778:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	4618      	mov	r0, r3
 800877e:	f04f 0100 	mov.w	r1, #0
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008786:	2b00      	cmp	r3, #0
 8008788:	d070      	beq.n	800886c <UART_SetConfig+0x5bc>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878e:	2b01      	cmp	r3, #1
 8008790:	d067      	beq.n	8008862 <UART_SetConfig+0x5b2>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008796:	2b02      	cmp	r3, #2
 8008798:	d05e      	beq.n	8008858 <UART_SetConfig+0x5a8>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879e:	2b03      	cmp	r3, #3
 80087a0:	d04c      	beq.n	800883c <UART_SetConfig+0x58c>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a6:	2b04      	cmp	r3, #4
 80087a8:	d043      	beq.n	8008832 <UART_SetConfig+0x582>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ae:	2b05      	cmp	r3, #5
 80087b0:	d03a      	beq.n	8008828 <UART_SetConfig+0x578>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b6:	2b06      	cmp	r3, #6
 80087b8:	d031      	beq.n	800881e <UART_SetConfig+0x56e>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087be:	2b07      	cmp	r3, #7
 80087c0:	d028      	beq.n	8008814 <UART_SetConfig+0x564>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c6:	2b08      	cmp	r3, #8
 80087c8:	d01f      	beq.n	800880a <UART_SetConfig+0x55a>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ce:	2b09      	cmp	r3, #9
 80087d0:	d016      	beq.n	8008800 <UART_SetConfig+0x550>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d6:	2b0a      	cmp	r3, #10
 80087d8:	d00d      	beq.n	80087f6 <UART_SetConfig+0x546>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087de:	2b0b      	cmp	r3, #11
 80087e0:	d104      	bne.n	80087ec <UART_SetConfig+0x53c>
 80087e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087e6:	f04f 0400 	mov.w	r4, #0
 80087ea:	e043      	b.n	8008874 <UART_SetConfig+0x5c4>
 80087ec:	f04f 0301 	mov.w	r3, #1
 80087f0:	f04f 0400 	mov.w	r4, #0
 80087f4:	e03e      	b.n	8008874 <UART_SetConfig+0x5c4>
 80087f6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80087fa:	f04f 0400 	mov.w	r4, #0
 80087fe:	e039      	b.n	8008874 <UART_SetConfig+0x5c4>
 8008800:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008804:	f04f 0400 	mov.w	r4, #0
 8008808:	e034      	b.n	8008874 <UART_SetConfig+0x5c4>
 800880a:	f04f 0320 	mov.w	r3, #32
 800880e:	f04f 0400 	mov.w	r4, #0
 8008812:	e02f      	b.n	8008874 <UART_SetConfig+0x5c4>
 8008814:	f04f 0310 	mov.w	r3, #16
 8008818:	f04f 0400 	mov.w	r4, #0
 800881c:	e02a      	b.n	8008874 <UART_SetConfig+0x5c4>
 800881e:	f04f 030c 	mov.w	r3, #12
 8008822:	f04f 0400 	mov.w	r4, #0
 8008826:	e025      	b.n	8008874 <UART_SetConfig+0x5c4>
 8008828:	f04f 030a 	mov.w	r3, #10
 800882c:	f04f 0400 	mov.w	r4, #0
 8008830:	e020      	b.n	8008874 <UART_SetConfig+0x5c4>
 8008832:	f04f 0308 	mov.w	r3, #8
 8008836:	f04f 0400 	mov.w	r4, #0
 800883a:	e01b      	b.n	8008874 <UART_SetConfig+0x5c4>
 800883c:	f04f 0306 	mov.w	r3, #6
 8008840:	f04f 0400 	mov.w	r4, #0
 8008844:	e016      	b.n	8008874 <UART_SetConfig+0x5c4>
 8008846:	bf00      	nop
 8008848:	0028b0aa 	.word	0x0028b0aa
 800884c:	003d0900 	.word	0x003d0900
 8008850:	007a1200 	.word	0x007a1200
 8008854:	00f42400 	.word	0x00f42400
 8008858:	f04f 0304 	mov.w	r3, #4
 800885c:	f04f 0400 	mov.w	r4, #0
 8008860:	e008      	b.n	8008874 <UART_SetConfig+0x5c4>
 8008862:	f04f 0302 	mov.w	r3, #2
 8008866:	f04f 0400 	mov.w	r4, #0
 800886a:	e003      	b.n	8008874 <UART_SetConfig+0x5c4>
 800886c:	f04f 0301 	mov.w	r3, #1
 8008870:	f04f 0400 	mov.w	r4, #0
 8008874:	461a      	mov	r2, r3
 8008876:	4623      	mov	r3, r4
 8008878:	f7f7 fc8a 	bl	8000190 <__aeabi_uldivmod>
 800887c:	4603      	mov	r3, r0
 800887e:	460c      	mov	r4, r1
 8008880:	4619      	mov	r1, r3
 8008882:	4622      	mov	r2, r4
 8008884:	f04f 0300 	mov.w	r3, #0
 8008888:	f04f 0400 	mov.w	r4, #0
 800888c:	0214      	lsls	r4, r2, #8
 800888e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008892:	020b      	lsls	r3, r1, #8
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	6852      	ldr	r2, [r2, #4]
 8008898:	0852      	lsrs	r2, r2, #1
 800889a:	4611      	mov	r1, r2
 800889c:	f04f 0200 	mov.w	r2, #0
 80088a0:	eb13 0b01 	adds.w	fp, r3, r1
 80088a4:	eb44 0c02 	adc.w	ip, r4, r2
 80088a8:	4658      	mov	r0, fp
 80088aa:	4661      	mov	r1, ip
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	f04f 0400 	mov.w	r4, #0
 80088b4:	461a      	mov	r2, r3
 80088b6:	4623      	mov	r3, r4
 80088b8:	f7f7 fc6a 	bl	8000190 <__aeabi_uldivmod>
 80088bc:	4603      	mov	r3, r0
 80088be:	460c      	mov	r4, r1
 80088c0:	61fb      	str	r3, [r7, #28]
            break;
 80088c2:	e1c6      	b.n	8008c52 <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d05b      	beq.n	8008984 <UART_SetConfig+0x6d4>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d053      	beq.n	800897c <UART_SetConfig+0x6cc>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d8:	2b02      	cmp	r3, #2
 80088da:	d04b      	beq.n	8008974 <UART_SetConfig+0x6c4>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e0:	2b03      	cmp	r3, #3
 80088e2:	d043      	beq.n	800896c <UART_SetConfig+0x6bc>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e8:	2b04      	cmp	r3, #4
 80088ea:	d03b      	beq.n	8008964 <UART_SetConfig+0x6b4>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f0:	2b05      	cmp	r3, #5
 80088f2:	d033      	beq.n	800895c <UART_SetConfig+0x6ac>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f8:	2b06      	cmp	r3, #6
 80088fa:	d02b      	beq.n	8008954 <UART_SetConfig+0x6a4>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008900:	2b07      	cmp	r3, #7
 8008902:	d023      	beq.n	800894c <UART_SetConfig+0x69c>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008908:	2b08      	cmp	r3, #8
 800890a:	d01b      	beq.n	8008944 <UART_SetConfig+0x694>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008910:	2b09      	cmp	r3, #9
 8008912:	d013      	beq.n	800893c <UART_SetConfig+0x68c>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008918:	2b0a      	cmp	r3, #10
 800891a:	d00b      	beq.n	8008934 <UART_SetConfig+0x684>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008920:	2b0b      	cmp	r3, #11
 8008922:	d103      	bne.n	800892c <UART_SetConfig+0x67c>
 8008924:	4bae      	ldr	r3, [pc, #696]	; (8008be0 <UART_SetConfig+0x930>)
 8008926:	f04f 0400 	mov.w	r4, #0
 800892a:	e02e      	b.n	800898a <UART_SetConfig+0x6da>
 800892c:	4bad      	ldr	r3, [pc, #692]	; (8008be4 <UART_SetConfig+0x934>)
 800892e:	f04f 0400 	mov.w	r4, #0
 8008932:	e02a      	b.n	800898a <UART_SetConfig+0x6da>
 8008934:	4bac      	ldr	r3, [pc, #688]	; (8008be8 <UART_SetConfig+0x938>)
 8008936:	f04f 0400 	mov.w	r4, #0
 800893a:	e026      	b.n	800898a <UART_SetConfig+0x6da>
 800893c:	4bab      	ldr	r3, [pc, #684]	; (8008bec <UART_SetConfig+0x93c>)
 800893e:	f04f 0400 	mov.w	r4, #0
 8008942:	e022      	b.n	800898a <UART_SetConfig+0x6da>
 8008944:	4baa      	ldr	r3, [pc, #680]	; (8008bf0 <UART_SetConfig+0x940>)
 8008946:	f04f 0400 	mov.w	r4, #0
 800894a:	e01e      	b.n	800898a <UART_SetConfig+0x6da>
 800894c:	4ba9      	ldr	r3, [pc, #676]	; (8008bf4 <UART_SetConfig+0x944>)
 800894e:	f04f 0400 	mov.w	r4, #0
 8008952:	e01a      	b.n	800898a <UART_SetConfig+0x6da>
 8008954:	a49e      	add	r4, pc, #632	; (adr r4, 8008bd0 <UART_SetConfig+0x920>)
 8008956:	e9d4 3400 	ldrd	r3, r4, [r4]
 800895a:	e016      	b.n	800898a <UART_SetConfig+0x6da>
 800895c:	4ba6      	ldr	r3, [pc, #664]	; (8008bf8 <UART_SetConfig+0x948>)
 800895e:	f04f 0400 	mov.w	r4, #0
 8008962:	e012      	b.n	800898a <UART_SetConfig+0x6da>
 8008964:	4ba5      	ldr	r3, [pc, #660]	; (8008bfc <UART_SetConfig+0x94c>)
 8008966:	f04f 0400 	mov.w	r4, #0
 800896a:	e00e      	b.n	800898a <UART_SetConfig+0x6da>
 800896c:	a49a      	add	r4, pc, #616	; (adr r4, 8008bd8 <UART_SetConfig+0x928>)
 800896e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008972:	e00a      	b.n	800898a <UART_SetConfig+0x6da>
 8008974:	4ba2      	ldr	r3, [pc, #648]	; (8008c00 <UART_SetConfig+0x950>)
 8008976:	f04f 0400 	mov.w	r4, #0
 800897a:	e006      	b.n	800898a <UART_SetConfig+0x6da>
 800897c:	4ba1      	ldr	r3, [pc, #644]	; (8008c04 <UART_SetConfig+0x954>)
 800897e:	f04f 0400 	mov.w	r4, #0
 8008982:	e002      	b.n	800898a <UART_SetConfig+0x6da>
 8008984:	4b97      	ldr	r3, [pc, #604]	; (8008be4 <UART_SetConfig+0x934>)
 8008986:	f04f 0400 	mov.w	r4, #0
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	6852      	ldr	r2, [r2, #4]
 800898e:	0852      	lsrs	r2, r2, #1
 8008990:	4611      	mov	r1, r2
 8008992:	f04f 0200 	mov.w	r2, #0
 8008996:	eb13 0b01 	adds.w	fp, r3, r1
 800899a:	eb44 0c02 	adc.w	ip, r4, r2
 800899e:	4658      	mov	r0, fp
 80089a0:	4661      	mov	r1, ip
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	f04f 0400 	mov.w	r4, #0
 80089aa:	461a      	mov	r2, r3
 80089ac:	4623      	mov	r3, r4
 80089ae:	f7f7 fbef 	bl	8000190 <__aeabi_uldivmod>
 80089b2:	4603      	mov	r3, r0
 80089b4:	460c      	mov	r4, r1
 80089b6:	61fb      	str	r3, [r7, #28]
            break;
 80089b8:	e14b      	b.n	8008c52 <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80089ba:	f7fd fc27 	bl	800620c <HAL_RCC_GetSysClockFreq>
 80089be:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f04f 0100 	mov.w	r1, #0
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d067      	beq.n	8008aa0 <UART_SetConfig+0x7f0>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d05e      	beq.n	8008a96 <UART_SetConfig+0x7e6>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089dc:	2b02      	cmp	r3, #2
 80089de:	d055      	beq.n	8008a8c <UART_SetConfig+0x7dc>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e4:	2b03      	cmp	r3, #3
 80089e6:	d04c      	beq.n	8008a82 <UART_SetConfig+0x7d2>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ec:	2b04      	cmp	r3, #4
 80089ee:	d043      	beq.n	8008a78 <UART_SetConfig+0x7c8>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f4:	2b05      	cmp	r3, #5
 80089f6:	d03a      	beq.n	8008a6e <UART_SetConfig+0x7be>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fc:	2b06      	cmp	r3, #6
 80089fe:	d031      	beq.n	8008a64 <UART_SetConfig+0x7b4>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a04:	2b07      	cmp	r3, #7
 8008a06:	d028      	beq.n	8008a5a <UART_SetConfig+0x7aa>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0c:	2b08      	cmp	r3, #8
 8008a0e:	d01f      	beq.n	8008a50 <UART_SetConfig+0x7a0>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a14:	2b09      	cmp	r3, #9
 8008a16:	d016      	beq.n	8008a46 <UART_SetConfig+0x796>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1c:	2b0a      	cmp	r3, #10
 8008a1e:	d00d      	beq.n	8008a3c <UART_SetConfig+0x78c>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a24:	2b0b      	cmp	r3, #11
 8008a26:	d104      	bne.n	8008a32 <UART_SetConfig+0x782>
 8008a28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a2c:	f04f 0400 	mov.w	r4, #0
 8008a30:	e03a      	b.n	8008aa8 <UART_SetConfig+0x7f8>
 8008a32:	f04f 0301 	mov.w	r3, #1
 8008a36:	f04f 0400 	mov.w	r4, #0
 8008a3a:	e035      	b.n	8008aa8 <UART_SetConfig+0x7f8>
 8008a3c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008a40:	f04f 0400 	mov.w	r4, #0
 8008a44:	e030      	b.n	8008aa8 <UART_SetConfig+0x7f8>
 8008a46:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008a4a:	f04f 0400 	mov.w	r4, #0
 8008a4e:	e02b      	b.n	8008aa8 <UART_SetConfig+0x7f8>
 8008a50:	f04f 0320 	mov.w	r3, #32
 8008a54:	f04f 0400 	mov.w	r4, #0
 8008a58:	e026      	b.n	8008aa8 <UART_SetConfig+0x7f8>
 8008a5a:	f04f 0310 	mov.w	r3, #16
 8008a5e:	f04f 0400 	mov.w	r4, #0
 8008a62:	e021      	b.n	8008aa8 <UART_SetConfig+0x7f8>
 8008a64:	f04f 030c 	mov.w	r3, #12
 8008a68:	f04f 0400 	mov.w	r4, #0
 8008a6c:	e01c      	b.n	8008aa8 <UART_SetConfig+0x7f8>
 8008a6e:	f04f 030a 	mov.w	r3, #10
 8008a72:	f04f 0400 	mov.w	r4, #0
 8008a76:	e017      	b.n	8008aa8 <UART_SetConfig+0x7f8>
 8008a78:	f04f 0308 	mov.w	r3, #8
 8008a7c:	f04f 0400 	mov.w	r4, #0
 8008a80:	e012      	b.n	8008aa8 <UART_SetConfig+0x7f8>
 8008a82:	f04f 0306 	mov.w	r3, #6
 8008a86:	f04f 0400 	mov.w	r4, #0
 8008a8a:	e00d      	b.n	8008aa8 <UART_SetConfig+0x7f8>
 8008a8c:	f04f 0304 	mov.w	r3, #4
 8008a90:	f04f 0400 	mov.w	r4, #0
 8008a94:	e008      	b.n	8008aa8 <UART_SetConfig+0x7f8>
 8008a96:	f04f 0302 	mov.w	r3, #2
 8008a9a:	f04f 0400 	mov.w	r4, #0
 8008a9e:	e003      	b.n	8008aa8 <UART_SetConfig+0x7f8>
 8008aa0:	f04f 0301 	mov.w	r3, #1
 8008aa4:	f04f 0400 	mov.w	r4, #0
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	4623      	mov	r3, r4
 8008aac:	f7f7 fb70 	bl	8000190 <__aeabi_uldivmod>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	460c      	mov	r4, r1
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	4622      	mov	r2, r4
 8008ab8:	f04f 0300 	mov.w	r3, #0
 8008abc:	f04f 0400 	mov.w	r4, #0
 8008ac0:	0214      	lsls	r4, r2, #8
 8008ac2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008ac6:	020b      	lsls	r3, r1, #8
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	6852      	ldr	r2, [r2, #4]
 8008acc:	0852      	lsrs	r2, r2, #1
 8008ace:	4611      	mov	r1, r2
 8008ad0:	f04f 0200 	mov.w	r2, #0
 8008ad4:	eb13 0b01 	adds.w	fp, r3, r1
 8008ad8:	eb44 0c02 	adc.w	ip, r4, r2
 8008adc:	4658      	mov	r0, fp
 8008ade:	4661      	mov	r1, ip
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	f04f 0400 	mov.w	r4, #0
 8008ae8:	461a      	mov	r2, r3
 8008aea:	4623      	mov	r3, r4
 8008aec:	f7f7 fb50 	bl	8000190 <__aeabi_uldivmod>
 8008af0:	4603      	mov	r3, r0
 8008af2:	460c      	mov	r4, r1
 8008af4:	61fb      	str	r3, [r7, #28]
            break;
 8008af6:	e0ac      	b.n	8008c52 <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f000 8089 	beq.w	8008c14 <UART_SetConfig+0x964>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d05b      	beq.n	8008bc2 <UART_SetConfig+0x912>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d052      	beq.n	8008bb8 <UART_SetConfig+0x908>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b16:	2b03      	cmp	r3, #3
 8008b18:	d04a      	beq.n	8008bb0 <UART_SetConfig+0x900>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1e:	2b04      	cmp	r3, #4
 8008b20:	d041      	beq.n	8008ba6 <UART_SetConfig+0x8f6>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b26:	2b05      	cmp	r3, #5
 8008b28:	d039      	beq.n	8008b9e <UART_SetConfig+0x8ee>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2e:	2b06      	cmp	r3, #6
 8008b30:	d031      	beq.n	8008b96 <UART_SetConfig+0x8e6>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b36:	2b07      	cmp	r3, #7
 8008b38:	d028      	beq.n	8008b8c <UART_SetConfig+0x8dc>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3e:	2b08      	cmp	r3, #8
 8008b40:	d01f      	beq.n	8008b82 <UART_SetConfig+0x8d2>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b46:	2b09      	cmp	r3, #9
 8008b48:	d016      	beq.n	8008b78 <UART_SetConfig+0x8c8>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4e:	2b0a      	cmp	r3, #10
 8008b50:	d00d      	beq.n	8008b6e <UART_SetConfig+0x8be>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b56:	2b0b      	cmp	r3, #11
 8008b58:	d104      	bne.n	8008b64 <UART_SetConfig+0x8b4>
 8008b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b5e:	f04f 0400 	mov.w	r4, #0
 8008b62:	e05b      	b.n	8008c1c <UART_SetConfig+0x96c>
 8008b64:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008b68:	f04f 0400 	mov.w	r4, #0
 8008b6c:	e056      	b.n	8008c1c <UART_SetConfig+0x96c>
 8008b6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b72:	f04f 0400 	mov.w	r4, #0
 8008b76:	e051      	b.n	8008c1c <UART_SetConfig+0x96c>
 8008b78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008b7c:	f04f 0400 	mov.w	r4, #0
 8008b80:	e04c      	b.n	8008c1c <UART_SetConfig+0x96c>
 8008b82:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008b86:	f04f 0400 	mov.w	r4, #0
 8008b8a:	e047      	b.n	8008c1c <UART_SetConfig+0x96c>
 8008b8c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008b90:	f04f 0400 	mov.w	r4, #0
 8008b94:	e042      	b.n	8008c1c <UART_SetConfig+0x96c>
 8008b96:	4b1c      	ldr	r3, [pc, #112]	; (8008c08 <UART_SetConfig+0x958>)
 8008b98:	f04f 0400 	mov.w	r4, #0
 8008b9c:	e03e      	b.n	8008c1c <UART_SetConfig+0x96c>
 8008b9e:	4b1b      	ldr	r3, [pc, #108]	; (8008c0c <UART_SetConfig+0x95c>)
 8008ba0:	f04f 0400 	mov.w	r4, #0
 8008ba4:	e03a      	b.n	8008c1c <UART_SetConfig+0x96c>
 8008ba6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008baa:	f04f 0400 	mov.w	r4, #0
 8008bae:	e035      	b.n	8008c1c <UART_SetConfig+0x96c>
 8008bb0:	4b17      	ldr	r3, [pc, #92]	; (8008c10 <UART_SetConfig+0x960>)
 8008bb2:	f04f 0400 	mov.w	r4, #0
 8008bb6:	e031      	b.n	8008c1c <UART_SetConfig+0x96c>
 8008bb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008bbc:	f04f 0400 	mov.w	r4, #0
 8008bc0:	e02c      	b.n	8008c1c <UART_SetConfig+0x96c>
 8008bc2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008bc6:	f04f 0400 	mov.w	r4, #0
 8008bca:	e027      	b.n	8008c1c <UART_SetConfig+0x96c>
 8008bcc:	f3af 8000 	nop.w
 8008bd0:	14585500 	.word	0x14585500
 8008bd4:	00000000 	.word	0x00000000
 8008bd8:	28b0aa00 	.word	0x28b0aa00
 8008bdc:	00000000 	.word	0x00000000
 8008be0:	00f42400 	.word	0x00f42400
 8008be4:	f4240000 	.word	0xf4240000
 8008be8:	01e84800 	.word	0x01e84800
 8008bec:	03d09000 	.word	0x03d09000
 8008bf0:	07a12000 	.word	0x07a12000
 8008bf4:	0f424000 	.word	0x0f424000
 8008bf8:	186a0000 	.word	0x186a0000
 8008bfc:	1e848000 	.word	0x1e848000
 8008c00:	3d090000 	.word	0x3d090000
 8008c04:	7a120000 	.word	0x7a120000
 8008c08:	000aaa00 	.word	0x000aaa00
 8008c0c:	000ccc00 	.word	0x000ccc00
 8008c10:	00155500 	.word	0x00155500
 8008c14:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008c18:	f04f 0400 	mov.w	r4, #0
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	6852      	ldr	r2, [r2, #4]
 8008c20:	0852      	lsrs	r2, r2, #1
 8008c22:	4611      	mov	r1, r2
 8008c24:	f04f 0200 	mov.w	r2, #0
 8008c28:	eb13 0b01 	adds.w	fp, r3, r1
 8008c2c:	eb44 0c02 	adc.w	ip, r4, r2
 8008c30:	4658      	mov	r0, fp
 8008c32:	4661      	mov	r1, ip
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	f04f 0400 	mov.w	r4, #0
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	4623      	mov	r3, r4
 8008c40:	f7f7 faa6 	bl	8000190 <__aeabi_uldivmod>
 8008c44:	4603      	mov	r3, r0
 8008c46:	460c      	mov	r4, r1
 8008c48:	61fb      	str	r3, [r7, #28]
            break;
 8008c4a:	e002      	b.n	8008c52 <UART_SetConfig+0x9a2>
          default:
            ret = HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	76fb      	strb	r3, [r7, #27]
            break;
 8008c50:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c58:	d308      	bcc.n	8008c6c <UART_SetConfig+0x9bc>
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c60:	d204      	bcs.n	8008c6c <UART_SetConfig+0x9bc>
        {
          huart->Instance->BRR = usartdiv;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	69fa      	ldr	r2, [r7, #28]
 8008c68:	60da      	str	r2, [r3, #12]
 8008c6a:	e35b      	b.n	8009324 <UART_SetConfig+0x1074>
        }
        else
        {
          ret = HAL_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	76fb      	strb	r3, [r7, #27]
 8008c70:	e358      	b.n	8009324 <UART_SetConfig+0x1074>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	69db      	ldr	r3, [r3, #28]
 8008c76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c7a:	f040 81a6 	bne.w	8008fca <UART_SetConfig+0xd1a>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8008c7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c82:	3b01      	subs	r3, #1
 8008c84:	2b07      	cmp	r3, #7
 8008c86:	f200 8180 	bhi.w	8008f8a <UART_SetConfig+0xcda>
 8008c8a:	a201      	add	r2, pc, #4	; (adr r2, 8008c90 <UART_SetConfig+0x9e0>)
 8008c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c90:	08008cb1 	.word	0x08008cb1
 8008c94:	08008d69 	.word	0x08008d69
 8008c98:	08008f8b 	.word	0x08008f8b
 8008c9c:	08008e11 	.word	0x08008e11
 8008ca0:	08008f8b 	.word	0x08008f8b
 8008ca4:	08008f8b 	.word	0x08008f8b
 8008ca8:	08008f8b 	.word	0x08008f8b
 8008cac:	08008ec9 	.word	0x08008ec9
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008cb0:	f7fd fb40 	bl	8006334 <HAL_RCC_GetPCLK2Freq>
 8008cb4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d044      	beq.n	8008d48 <UART_SetConfig+0xa98>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d03e      	beq.n	8008d44 <UART_SetConfig+0xa94>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	d038      	beq.n	8008d40 <UART_SetConfig+0xa90>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd2:	2b03      	cmp	r3, #3
 8008cd4:	d032      	beq.n	8008d3c <UART_SetConfig+0xa8c>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cda:	2b04      	cmp	r3, #4
 8008cdc:	d02c      	beq.n	8008d38 <UART_SetConfig+0xa88>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce2:	2b05      	cmp	r3, #5
 8008ce4:	d026      	beq.n	8008d34 <UART_SetConfig+0xa84>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cea:	2b06      	cmp	r3, #6
 8008cec:	d020      	beq.n	8008d30 <UART_SetConfig+0xa80>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf2:	2b07      	cmp	r3, #7
 8008cf4:	d01a      	beq.n	8008d2c <UART_SetConfig+0xa7c>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfa:	2b08      	cmp	r3, #8
 8008cfc:	d014      	beq.n	8008d28 <UART_SetConfig+0xa78>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d02:	2b09      	cmp	r3, #9
 8008d04:	d00e      	beq.n	8008d24 <UART_SetConfig+0xa74>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0a:	2b0a      	cmp	r3, #10
 8008d0c:	d008      	beq.n	8008d20 <UART_SetConfig+0xa70>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d12:	2b0b      	cmp	r3, #11
 8008d14:	d102      	bne.n	8008d1c <UART_SetConfig+0xa6c>
 8008d16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d1a:	e016      	b.n	8008d4a <UART_SetConfig+0xa9a>
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e014      	b.n	8008d4a <UART_SetConfig+0xa9a>
 8008d20:	2380      	movs	r3, #128	; 0x80
 8008d22:	e012      	b.n	8008d4a <UART_SetConfig+0xa9a>
 8008d24:	2340      	movs	r3, #64	; 0x40
 8008d26:	e010      	b.n	8008d4a <UART_SetConfig+0xa9a>
 8008d28:	2320      	movs	r3, #32
 8008d2a:	e00e      	b.n	8008d4a <UART_SetConfig+0xa9a>
 8008d2c:	2310      	movs	r3, #16
 8008d2e:	e00c      	b.n	8008d4a <UART_SetConfig+0xa9a>
 8008d30:	230c      	movs	r3, #12
 8008d32:	e00a      	b.n	8008d4a <UART_SetConfig+0xa9a>
 8008d34:	230a      	movs	r3, #10
 8008d36:	e008      	b.n	8008d4a <UART_SetConfig+0xa9a>
 8008d38:	2308      	movs	r3, #8
 8008d3a:	e006      	b.n	8008d4a <UART_SetConfig+0xa9a>
 8008d3c:	2306      	movs	r3, #6
 8008d3e:	e004      	b.n	8008d4a <UART_SetConfig+0xa9a>
 8008d40:	2304      	movs	r3, #4
 8008d42:	e002      	b.n	8008d4a <UART_SetConfig+0xa9a>
 8008d44:	2302      	movs	r3, #2
 8008d46:	e000      	b.n	8008d4a <UART_SetConfig+0xa9a>
 8008d48:	2301      	movs	r3, #1
 8008d4a:	693a      	ldr	r2, [r7, #16]
 8008d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d50:	005a      	lsls	r2, r3, #1
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	085b      	lsrs	r3, r3, #1
 8008d58:	441a      	add	r2, r3
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	61fb      	str	r3, [r7, #28]
        break;
 8008d66:	e113      	b.n	8008f90 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d043      	beq.n	8008df8 <UART_SetConfig+0xb48>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d03d      	beq.n	8008df4 <UART_SetConfig+0xb44>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	d037      	beq.n	8008df0 <UART_SetConfig+0xb40>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d84:	2b03      	cmp	r3, #3
 8008d86:	d031      	beq.n	8008dec <UART_SetConfig+0xb3c>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8c:	2b04      	cmp	r3, #4
 8008d8e:	d02b      	beq.n	8008de8 <UART_SetConfig+0xb38>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d94:	2b05      	cmp	r3, #5
 8008d96:	d025      	beq.n	8008de4 <UART_SetConfig+0xb34>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9c:	2b06      	cmp	r3, #6
 8008d9e:	d01f      	beq.n	8008de0 <UART_SetConfig+0xb30>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da4:	2b07      	cmp	r3, #7
 8008da6:	d019      	beq.n	8008ddc <UART_SetConfig+0xb2c>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dac:	2b08      	cmp	r3, #8
 8008dae:	d013      	beq.n	8008dd8 <UART_SetConfig+0xb28>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db4:	2b09      	cmp	r3, #9
 8008db6:	d00d      	beq.n	8008dd4 <UART_SetConfig+0xb24>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dbc:	2b0a      	cmp	r3, #10
 8008dbe:	d007      	beq.n	8008dd0 <UART_SetConfig+0xb20>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc4:	2b0b      	cmp	r3, #11
 8008dc6:	d101      	bne.n	8008dcc <UART_SetConfig+0xb1c>
 8008dc8:	4b8c      	ldr	r3, [pc, #560]	; (8008ffc <UART_SetConfig+0xd4c>)
 8008dca:	e016      	b.n	8008dfa <UART_SetConfig+0xb4a>
 8008dcc:	4b8c      	ldr	r3, [pc, #560]	; (8009000 <UART_SetConfig+0xd50>)
 8008dce:	e014      	b.n	8008dfa <UART_SetConfig+0xb4a>
 8008dd0:	4b8c      	ldr	r3, [pc, #560]	; (8009004 <UART_SetConfig+0xd54>)
 8008dd2:	e012      	b.n	8008dfa <UART_SetConfig+0xb4a>
 8008dd4:	4b8c      	ldr	r3, [pc, #560]	; (8009008 <UART_SetConfig+0xd58>)
 8008dd6:	e010      	b.n	8008dfa <UART_SetConfig+0xb4a>
 8008dd8:	4b8c      	ldr	r3, [pc, #560]	; (800900c <UART_SetConfig+0xd5c>)
 8008dda:	e00e      	b.n	8008dfa <UART_SetConfig+0xb4a>
 8008ddc:	4b8c      	ldr	r3, [pc, #560]	; (8009010 <UART_SetConfig+0xd60>)
 8008dde:	e00c      	b.n	8008dfa <UART_SetConfig+0xb4a>
 8008de0:	4b8c      	ldr	r3, [pc, #560]	; (8009014 <UART_SetConfig+0xd64>)
 8008de2:	e00a      	b.n	8008dfa <UART_SetConfig+0xb4a>
 8008de4:	4b8c      	ldr	r3, [pc, #560]	; (8009018 <UART_SetConfig+0xd68>)
 8008de6:	e008      	b.n	8008dfa <UART_SetConfig+0xb4a>
 8008de8:	4b8c      	ldr	r3, [pc, #560]	; (800901c <UART_SetConfig+0xd6c>)
 8008dea:	e006      	b.n	8008dfa <UART_SetConfig+0xb4a>
 8008dec:	4b8c      	ldr	r3, [pc, #560]	; (8009020 <UART_SetConfig+0xd70>)
 8008dee:	e004      	b.n	8008dfa <UART_SetConfig+0xb4a>
 8008df0:	4b8c      	ldr	r3, [pc, #560]	; (8009024 <UART_SetConfig+0xd74>)
 8008df2:	e002      	b.n	8008dfa <UART_SetConfig+0xb4a>
 8008df4:	4b8c      	ldr	r3, [pc, #560]	; (8009028 <UART_SetConfig+0xd78>)
 8008df6:	e000      	b.n	8008dfa <UART_SetConfig+0xb4a>
 8008df8:	4b81      	ldr	r3, [pc, #516]	; (8009000 <UART_SetConfig+0xd50>)
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	6852      	ldr	r2, [r2, #4]
 8008dfe:	0852      	lsrs	r2, r2, #1
 8008e00:	441a      	add	r2, r3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	61fb      	str	r3, [r7, #28]
        break;
 8008e0e:	e0bf      	b.n	8008f90 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e10:	f7fd f9fc 	bl	800620c <HAL_RCC_GetSysClockFreq>
 8008e14:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d044      	beq.n	8008ea8 <UART_SetConfig+0xbf8>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d03e      	beq.n	8008ea4 <UART_SetConfig+0xbf4>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	d038      	beq.n	8008ea0 <UART_SetConfig+0xbf0>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e32:	2b03      	cmp	r3, #3
 8008e34:	d032      	beq.n	8008e9c <UART_SetConfig+0xbec>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3a:	2b04      	cmp	r3, #4
 8008e3c:	d02c      	beq.n	8008e98 <UART_SetConfig+0xbe8>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e42:	2b05      	cmp	r3, #5
 8008e44:	d026      	beq.n	8008e94 <UART_SetConfig+0xbe4>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4a:	2b06      	cmp	r3, #6
 8008e4c:	d020      	beq.n	8008e90 <UART_SetConfig+0xbe0>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e52:	2b07      	cmp	r3, #7
 8008e54:	d01a      	beq.n	8008e8c <UART_SetConfig+0xbdc>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5a:	2b08      	cmp	r3, #8
 8008e5c:	d014      	beq.n	8008e88 <UART_SetConfig+0xbd8>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e62:	2b09      	cmp	r3, #9
 8008e64:	d00e      	beq.n	8008e84 <UART_SetConfig+0xbd4>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6a:	2b0a      	cmp	r3, #10
 8008e6c:	d008      	beq.n	8008e80 <UART_SetConfig+0xbd0>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e72:	2b0b      	cmp	r3, #11
 8008e74:	d102      	bne.n	8008e7c <UART_SetConfig+0xbcc>
 8008e76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e7a:	e016      	b.n	8008eaa <UART_SetConfig+0xbfa>
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e014      	b.n	8008eaa <UART_SetConfig+0xbfa>
 8008e80:	2380      	movs	r3, #128	; 0x80
 8008e82:	e012      	b.n	8008eaa <UART_SetConfig+0xbfa>
 8008e84:	2340      	movs	r3, #64	; 0x40
 8008e86:	e010      	b.n	8008eaa <UART_SetConfig+0xbfa>
 8008e88:	2320      	movs	r3, #32
 8008e8a:	e00e      	b.n	8008eaa <UART_SetConfig+0xbfa>
 8008e8c:	2310      	movs	r3, #16
 8008e8e:	e00c      	b.n	8008eaa <UART_SetConfig+0xbfa>
 8008e90:	230c      	movs	r3, #12
 8008e92:	e00a      	b.n	8008eaa <UART_SetConfig+0xbfa>
 8008e94:	230a      	movs	r3, #10
 8008e96:	e008      	b.n	8008eaa <UART_SetConfig+0xbfa>
 8008e98:	2308      	movs	r3, #8
 8008e9a:	e006      	b.n	8008eaa <UART_SetConfig+0xbfa>
 8008e9c:	2306      	movs	r3, #6
 8008e9e:	e004      	b.n	8008eaa <UART_SetConfig+0xbfa>
 8008ea0:	2304      	movs	r3, #4
 8008ea2:	e002      	b.n	8008eaa <UART_SetConfig+0xbfa>
 8008ea4:	2302      	movs	r3, #2
 8008ea6:	e000      	b.n	8008eaa <UART_SetConfig+0xbfa>
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	693a      	ldr	r2, [r7, #16]
 8008eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eb0:	005a      	lsls	r2, r3, #1
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	085b      	lsrs	r3, r3, #1
 8008eb8:	441a      	add	r2, r3
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	61fb      	str	r3, [r7, #28]
        break;
 8008ec6:	e063      	b.n	8008f90 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d04f      	beq.n	8008f70 <UART_SetConfig+0xcc0>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d048      	beq.n	8008f6a <UART_SetConfig+0xcba>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008edc:	2b02      	cmp	r3, #2
 8008ede:	d041      	beq.n	8008f64 <UART_SetConfig+0xcb4>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee4:	2b03      	cmp	r3, #3
 8008ee6:	d03a      	beq.n	8008f5e <UART_SetConfig+0xcae>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eec:	2b04      	cmp	r3, #4
 8008eee:	d033      	beq.n	8008f58 <UART_SetConfig+0xca8>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef4:	2b05      	cmp	r3, #5
 8008ef6:	d02c      	beq.n	8008f52 <UART_SetConfig+0xca2>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efc:	2b06      	cmp	r3, #6
 8008efe:	d025      	beq.n	8008f4c <UART_SetConfig+0xc9c>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f04:	2b07      	cmp	r3, #7
 8008f06:	d01e      	beq.n	8008f46 <UART_SetConfig+0xc96>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0c:	2b08      	cmp	r3, #8
 8008f0e:	d017      	beq.n	8008f40 <UART_SetConfig+0xc90>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f14:	2b09      	cmp	r3, #9
 8008f16:	d010      	beq.n	8008f3a <UART_SetConfig+0xc8a>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1c:	2b0a      	cmp	r3, #10
 8008f1e:	d009      	beq.n	8008f34 <UART_SetConfig+0xc84>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f24:	2b0b      	cmp	r3, #11
 8008f26:	d102      	bne.n	8008f2e <UART_SetConfig+0xc7e>
 8008f28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f2c:	e022      	b.n	8008f74 <UART_SetConfig+0xcc4>
 8008f2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008f32:	e01f      	b.n	8008f74 <UART_SetConfig+0xcc4>
 8008f34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f38:	e01c      	b.n	8008f74 <UART_SetConfig+0xcc4>
 8008f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f3e:	e019      	b.n	8008f74 <UART_SetConfig+0xcc4>
 8008f40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f44:	e016      	b.n	8008f74 <UART_SetConfig+0xcc4>
 8008f46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f4a:	e013      	b.n	8008f74 <UART_SetConfig+0xcc4>
 8008f4c:	f241 5354 	movw	r3, #5460	; 0x1554
 8008f50:	e010      	b.n	8008f74 <UART_SetConfig+0xcc4>
 8008f52:	f641 1398 	movw	r3, #6552	; 0x1998
 8008f56:	e00d      	b.n	8008f74 <UART_SetConfig+0xcc4>
 8008f58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f5c:	e00a      	b.n	8008f74 <UART_SetConfig+0xcc4>
 8008f5e:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8008f62:	e007      	b.n	8008f74 <UART_SetConfig+0xcc4>
 8008f64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008f68:	e004      	b.n	8008f74 <UART_SetConfig+0xcc4>
 8008f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f6e:	e001      	b.n	8008f74 <UART_SetConfig+0xcc4>
 8008f70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	6852      	ldr	r2, [r2, #4]
 8008f78:	0852      	lsrs	r2, r2, #1
 8008f7a:	441a      	add	r2, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	61fb      	str	r3, [r7, #28]
        break;
 8008f88:	e002      	b.n	8008f90 <UART_SetConfig+0xce0>
      default:
        ret = HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	76fb      	strb	r3, [r7, #27]
        break;
 8008f8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	2b0f      	cmp	r3, #15
 8008f94:	d916      	bls.n	8008fc4 <UART_SetConfig+0xd14>
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f9c:	d212      	bcs.n	8008fc4 <UART_SetConfig+0xd14>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	f023 030f 	bic.w	r3, r3, #15
 8008fa6:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	085b      	lsrs	r3, r3, #1
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	f003 0307 	and.w	r3, r3, #7
 8008fb2:	b29a      	uxth	r2, r3
 8008fb4:	89fb      	ldrh	r3, [r7, #14]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	89fa      	ldrh	r2, [r7, #14]
 8008fc0:	60da      	str	r2, [r3, #12]
 8008fc2:	e1af      	b.n	8009324 <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	76fb      	strb	r3, [r7, #27]
 8008fc8:	e1ac      	b.n	8009324 <UART_SetConfig+0x1074>
    }
  }
  else
  {
    switch (clocksource)
 8008fca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	2b07      	cmp	r3, #7
 8008fd2:	f200 8196 	bhi.w	8009302 <UART_SetConfig+0x1052>
 8008fd6:	a201      	add	r2, pc, #4	; (adr r2, 8008fdc <UART_SetConfig+0xd2c>)
 8008fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fdc:	0800902d 	.word	0x0800902d
 8008fe0:	080090e3 	.word	0x080090e3
 8008fe4:	08009303 	.word	0x08009303
 8008fe8:	0800918d 	.word	0x0800918d
 8008fec:	08009303 	.word	0x08009303
 8008ff0:	08009303 	.word	0x08009303
 8008ff4:	08009303 	.word	0x08009303
 8008ff8:	08009243 	.word	0x08009243
 8008ffc:	0001e848 	.word	0x0001e848
 8009000:	01e84800 	.word	0x01e84800
 8009004:	0003d090 	.word	0x0003d090
 8009008:	0007a120 	.word	0x0007a120
 800900c:	000f4240 	.word	0x000f4240
 8009010:	001e8480 	.word	0x001e8480
 8009014:	0028b0aa 	.word	0x0028b0aa
 8009018:	0030d400 	.word	0x0030d400
 800901c:	003d0900 	.word	0x003d0900
 8009020:	00516154 	.word	0x00516154
 8009024:	007a1200 	.word	0x007a1200
 8009028:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800902c:	f7fd f982 	bl	8006334 <HAL_RCC_GetPCLK2Freq>
 8009030:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009036:	2b00      	cmp	r3, #0
 8009038:	d044      	beq.n	80090c4 <UART_SetConfig+0xe14>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903e:	2b01      	cmp	r3, #1
 8009040:	d03e      	beq.n	80090c0 <UART_SetConfig+0xe10>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009046:	2b02      	cmp	r3, #2
 8009048:	d038      	beq.n	80090bc <UART_SetConfig+0xe0c>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904e:	2b03      	cmp	r3, #3
 8009050:	d032      	beq.n	80090b8 <UART_SetConfig+0xe08>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009056:	2b04      	cmp	r3, #4
 8009058:	d02c      	beq.n	80090b4 <UART_SetConfig+0xe04>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905e:	2b05      	cmp	r3, #5
 8009060:	d026      	beq.n	80090b0 <UART_SetConfig+0xe00>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009066:	2b06      	cmp	r3, #6
 8009068:	d020      	beq.n	80090ac <UART_SetConfig+0xdfc>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906e:	2b07      	cmp	r3, #7
 8009070:	d01a      	beq.n	80090a8 <UART_SetConfig+0xdf8>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009076:	2b08      	cmp	r3, #8
 8009078:	d014      	beq.n	80090a4 <UART_SetConfig+0xdf4>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907e:	2b09      	cmp	r3, #9
 8009080:	d00e      	beq.n	80090a0 <UART_SetConfig+0xdf0>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009086:	2b0a      	cmp	r3, #10
 8009088:	d008      	beq.n	800909c <UART_SetConfig+0xdec>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908e:	2b0b      	cmp	r3, #11
 8009090:	d102      	bne.n	8009098 <UART_SetConfig+0xde8>
 8009092:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009096:	e016      	b.n	80090c6 <UART_SetConfig+0xe16>
 8009098:	2301      	movs	r3, #1
 800909a:	e014      	b.n	80090c6 <UART_SetConfig+0xe16>
 800909c:	2380      	movs	r3, #128	; 0x80
 800909e:	e012      	b.n	80090c6 <UART_SetConfig+0xe16>
 80090a0:	2340      	movs	r3, #64	; 0x40
 80090a2:	e010      	b.n	80090c6 <UART_SetConfig+0xe16>
 80090a4:	2320      	movs	r3, #32
 80090a6:	e00e      	b.n	80090c6 <UART_SetConfig+0xe16>
 80090a8:	2310      	movs	r3, #16
 80090aa:	e00c      	b.n	80090c6 <UART_SetConfig+0xe16>
 80090ac:	230c      	movs	r3, #12
 80090ae:	e00a      	b.n	80090c6 <UART_SetConfig+0xe16>
 80090b0:	230a      	movs	r3, #10
 80090b2:	e008      	b.n	80090c6 <UART_SetConfig+0xe16>
 80090b4:	2308      	movs	r3, #8
 80090b6:	e006      	b.n	80090c6 <UART_SetConfig+0xe16>
 80090b8:	2306      	movs	r3, #6
 80090ba:	e004      	b.n	80090c6 <UART_SetConfig+0xe16>
 80090bc:	2304      	movs	r3, #4
 80090be:	e002      	b.n	80090c6 <UART_SetConfig+0xe16>
 80090c0:	2302      	movs	r3, #2
 80090c2:	e000      	b.n	80090c6 <UART_SetConfig+0xe16>
 80090c4:	2301      	movs	r3, #1
 80090c6:	693a      	ldr	r2, [r7, #16]
 80090c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	085b      	lsrs	r3, r3, #1
 80090d2:	441a      	add	r2, r3
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80090dc:	b29b      	uxth	r3, r3
 80090de:	61fb      	str	r3, [r7, #28]
        break;
 80090e0:	e112      	b.n	8009308 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d044      	beq.n	8009174 <UART_SetConfig+0xec4>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d03e      	beq.n	8009170 <UART_SetConfig+0xec0>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	d038      	beq.n	800916c <UART_SetConfig+0xebc>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fe:	2b03      	cmp	r3, #3
 8009100:	d032      	beq.n	8009168 <UART_SetConfig+0xeb8>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009106:	2b04      	cmp	r3, #4
 8009108:	d02c      	beq.n	8009164 <UART_SetConfig+0xeb4>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910e:	2b05      	cmp	r3, #5
 8009110:	d026      	beq.n	8009160 <UART_SetConfig+0xeb0>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009116:	2b06      	cmp	r3, #6
 8009118:	d020      	beq.n	800915c <UART_SetConfig+0xeac>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911e:	2b07      	cmp	r3, #7
 8009120:	d01a      	beq.n	8009158 <UART_SetConfig+0xea8>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009126:	2b08      	cmp	r3, #8
 8009128:	d014      	beq.n	8009154 <UART_SetConfig+0xea4>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912e:	2b09      	cmp	r3, #9
 8009130:	d00e      	beq.n	8009150 <UART_SetConfig+0xea0>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009136:	2b0a      	cmp	r3, #10
 8009138:	d008      	beq.n	800914c <UART_SetConfig+0xe9c>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913e:	2b0b      	cmp	r3, #11
 8009140:	d102      	bne.n	8009148 <UART_SetConfig+0xe98>
 8009142:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009146:	e016      	b.n	8009176 <UART_SetConfig+0xec6>
 8009148:	4b80      	ldr	r3, [pc, #512]	; (800934c <UART_SetConfig+0x109c>)
 800914a:	e014      	b.n	8009176 <UART_SetConfig+0xec6>
 800914c:	4b80      	ldr	r3, [pc, #512]	; (8009350 <UART_SetConfig+0x10a0>)
 800914e:	e012      	b.n	8009176 <UART_SetConfig+0xec6>
 8009150:	4b80      	ldr	r3, [pc, #512]	; (8009354 <UART_SetConfig+0x10a4>)
 8009152:	e010      	b.n	8009176 <UART_SetConfig+0xec6>
 8009154:	4b80      	ldr	r3, [pc, #512]	; (8009358 <UART_SetConfig+0x10a8>)
 8009156:	e00e      	b.n	8009176 <UART_SetConfig+0xec6>
 8009158:	4b80      	ldr	r3, [pc, #512]	; (800935c <UART_SetConfig+0x10ac>)
 800915a:	e00c      	b.n	8009176 <UART_SetConfig+0xec6>
 800915c:	4b80      	ldr	r3, [pc, #512]	; (8009360 <UART_SetConfig+0x10b0>)
 800915e:	e00a      	b.n	8009176 <UART_SetConfig+0xec6>
 8009160:	4b80      	ldr	r3, [pc, #512]	; (8009364 <UART_SetConfig+0x10b4>)
 8009162:	e008      	b.n	8009176 <UART_SetConfig+0xec6>
 8009164:	4b80      	ldr	r3, [pc, #512]	; (8009368 <UART_SetConfig+0x10b8>)
 8009166:	e006      	b.n	8009176 <UART_SetConfig+0xec6>
 8009168:	4b80      	ldr	r3, [pc, #512]	; (800936c <UART_SetConfig+0x10bc>)
 800916a:	e004      	b.n	8009176 <UART_SetConfig+0xec6>
 800916c:	4b80      	ldr	r3, [pc, #512]	; (8009370 <UART_SetConfig+0x10c0>)
 800916e:	e002      	b.n	8009176 <UART_SetConfig+0xec6>
 8009170:	4b80      	ldr	r3, [pc, #512]	; (8009374 <UART_SetConfig+0x10c4>)
 8009172:	e000      	b.n	8009176 <UART_SetConfig+0xec6>
 8009174:	4b75      	ldr	r3, [pc, #468]	; (800934c <UART_SetConfig+0x109c>)
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	6852      	ldr	r2, [r2, #4]
 800917a:	0852      	lsrs	r2, r2, #1
 800917c:	441a      	add	r2, r3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	fbb2 f3f3 	udiv	r3, r2, r3
 8009186:	b29b      	uxth	r3, r3
 8009188:	61fb      	str	r3, [r7, #28]
        break;
 800918a:	e0bd      	b.n	8009308 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800918c:	f7fd f83e 	bl	800620c <HAL_RCC_GetSysClockFreq>
 8009190:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009196:	2b00      	cmp	r3, #0
 8009198:	d044      	beq.n	8009224 <UART_SetConfig+0xf74>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d03e      	beq.n	8009220 <UART_SetConfig+0xf70>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d038      	beq.n	800921c <UART_SetConfig+0xf6c>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ae:	2b03      	cmp	r3, #3
 80091b0:	d032      	beq.n	8009218 <UART_SetConfig+0xf68>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b6:	2b04      	cmp	r3, #4
 80091b8:	d02c      	beq.n	8009214 <UART_SetConfig+0xf64>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091be:	2b05      	cmp	r3, #5
 80091c0:	d026      	beq.n	8009210 <UART_SetConfig+0xf60>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c6:	2b06      	cmp	r3, #6
 80091c8:	d020      	beq.n	800920c <UART_SetConfig+0xf5c>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ce:	2b07      	cmp	r3, #7
 80091d0:	d01a      	beq.n	8009208 <UART_SetConfig+0xf58>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d6:	2b08      	cmp	r3, #8
 80091d8:	d014      	beq.n	8009204 <UART_SetConfig+0xf54>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091de:	2b09      	cmp	r3, #9
 80091e0:	d00e      	beq.n	8009200 <UART_SetConfig+0xf50>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e6:	2b0a      	cmp	r3, #10
 80091e8:	d008      	beq.n	80091fc <UART_SetConfig+0xf4c>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ee:	2b0b      	cmp	r3, #11
 80091f0:	d102      	bne.n	80091f8 <UART_SetConfig+0xf48>
 80091f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091f6:	e016      	b.n	8009226 <UART_SetConfig+0xf76>
 80091f8:	2301      	movs	r3, #1
 80091fa:	e014      	b.n	8009226 <UART_SetConfig+0xf76>
 80091fc:	2380      	movs	r3, #128	; 0x80
 80091fe:	e012      	b.n	8009226 <UART_SetConfig+0xf76>
 8009200:	2340      	movs	r3, #64	; 0x40
 8009202:	e010      	b.n	8009226 <UART_SetConfig+0xf76>
 8009204:	2320      	movs	r3, #32
 8009206:	e00e      	b.n	8009226 <UART_SetConfig+0xf76>
 8009208:	2310      	movs	r3, #16
 800920a:	e00c      	b.n	8009226 <UART_SetConfig+0xf76>
 800920c:	230c      	movs	r3, #12
 800920e:	e00a      	b.n	8009226 <UART_SetConfig+0xf76>
 8009210:	230a      	movs	r3, #10
 8009212:	e008      	b.n	8009226 <UART_SetConfig+0xf76>
 8009214:	2308      	movs	r3, #8
 8009216:	e006      	b.n	8009226 <UART_SetConfig+0xf76>
 8009218:	2306      	movs	r3, #6
 800921a:	e004      	b.n	8009226 <UART_SetConfig+0xf76>
 800921c:	2304      	movs	r3, #4
 800921e:	e002      	b.n	8009226 <UART_SetConfig+0xf76>
 8009220:	2302      	movs	r3, #2
 8009222:	e000      	b.n	8009226 <UART_SetConfig+0xf76>
 8009224:	2301      	movs	r3, #1
 8009226:	693a      	ldr	r2, [r7, #16]
 8009228:	fbb2 f2f3 	udiv	r2, r2, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	085b      	lsrs	r3, r3, #1
 8009232:	441a      	add	r2, r3
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	fbb2 f3f3 	udiv	r3, r2, r3
 800923c:	b29b      	uxth	r3, r3
 800923e:	61fb      	str	r3, [r7, #28]
        break;
 8009240:	e062      	b.n	8009308 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009246:	2b00      	cmp	r3, #0
 8009248:	d04e      	beq.n	80092e8 <UART_SetConfig+0x1038>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924e:	2b01      	cmp	r3, #1
 8009250:	d047      	beq.n	80092e2 <UART_SetConfig+0x1032>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009256:	2b02      	cmp	r3, #2
 8009258:	d040      	beq.n	80092dc <UART_SetConfig+0x102c>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925e:	2b03      	cmp	r3, #3
 8009260:	d039      	beq.n	80092d6 <UART_SetConfig+0x1026>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009266:	2b04      	cmp	r3, #4
 8009268:	d032      	beq.n	80092d0 <UART_SetConfig+0x1020>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926e:	2b05      	cmp	r3, #5
 8009270:	d02b      	beq.n	80092ca <UART_SetConfig+0x101a>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009276:	2b06      	cmp	r3, #6
 8009278:	d024      	beq.n	80092c4 <UART_SetConfig+0x1014>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927e:	2b07      	cmp	r3, #7
 8009280:	d01d      	beq.n	80092be <UART_SetConfig+0x100e>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009286:	2b08      	cmp	r3, #8
 8009288:	d016      	beq.n	80092b8 <UART_SetConfig+0x1008>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800928e:	2b09      	cmp	r3, #9
 8009290:	d00f      	beq.n	80092b2 <UART_SetConfig+0x1002>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009296:	2b0a      	cmp	r3, #10
 8009298:	d008      	beq.n	80092ac <UART_SetConfig+0xffc>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929e:	2b0b      	cmp	r3, #11
 80092a0:	d101      	bne.n	80092a6 <UART_SetConfig+0xff6>
 80092a2:	2380      	movs	r3, #128	; 0x80
 80092a4:	e022      	b.n	80092ec <UART_SetConfig+0x103c>
 80092a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092aa:	e01f      	b.n	80092ec <UART_SetConfig+0x103c>
 80092ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092b0:	e01c      	b.n	80092ec <UART_SetConfig+0x103c>
 80092b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092b6:	e019      	b.n	80092ec <UART_SetConfig+0x103c>
 80092b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092bc:	e016      	b.n	80092ec <UART_SetConfig+0x103c>
 80092be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092c2:	e013      	b.n	80092ec <UART_SetConfig+0x103c>
 80092c4:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80092c8:	e010      	b.n	80092ec <UART_SetConfig+0x103c>
 80092ca:	f640 43cc 	movw	r3, #3276	; 0xccc
 80092ce:	e00d      	b.n	80092ec <UART_SetConfig+0x103c>
 80092d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092d4:	e00a      	b.n	80092ec <UART_SetConfig+0x103c>
 80092d6:	f241 5355 	movw	r3, #5461	; 0x1555
 80092da:	e007      	b.n	80092ec <UART_SetConfig+0x103c>
 80092dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80092e0:	e004      	b.n	80092ec <UART_SetConfig+0x103c>
 80092e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80092e6:	e001      	b.n	80092ec <UART_SetConfig+0x103c>
 80092e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	6852      	ldr	r2, [r2, #4]
 80092f0:	0852      	lsrs	r2, r2, #1
 80092f2:	441a      	add	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	61fb      	str	r3, [r7, #28]
        break;
 8009300:	e002      	b.n	8009308 <UART_SetConfig+0x1058>
      default:
        ret = HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	76fb      	strb	r3, [r7, #27]
        break;
 8009306:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	2b0f      	cmp	r3, #15
 800930c:	d908      	bls.n	8009320 <UART_SetConfig+0x1070>
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009314:	d204      	bcs.n	8009320 <UART_SetConfig+0x1070>
    {
      huart->Instance->BRR = usartdiv;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	69fa      	ldr	r2, [r7, #28]
 800931c:	60da      	str	r2, [r3, #12]
 800931e:	e001      	b.n	8009324 <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 8009320:	2301      	movs	r3, #1
 8009322:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2201      	movs	r2, #1
 8009328:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2201      	movs	r2, #1
 8009330:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009340:	7efb      	ldrb	r3, [r7, #27]
}
 8009342:	4618      	mov	r0, r3
 8009344:	3728      	adds	r7, #40	; 0x28
 8009346:	46bd      	mov	sp, r7
 8009348:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800934c:	00f42400 	.word	0x00f42400
 8009350:	0001e848 	.word	0x0001e848
 8009354:	0003d090 	.word	0x0003d090
 8009358:	0007a120 	.word	0x0007a120
 800935c:	000f4240 	.word	0x000f4240
 8009360:	00145855 	.word	0x00145855
 8009364:	00186a00 	.word	0x00186a00
 8009368:	001e8480 	.word	0x001e8480
 800936c:	0028b0aa 	.word	0x0028b0aa
 8009370:	003d0900 	.word	0x003d0900
 8009374:	007a1200 	.word	0x007a1200

08009378 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009378:	b480      	push	{r7}
 800937a:	b083      	sub	sp, #12
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009384:	f003 0301 	and.w	r3, r3, #1
 8009388:	2b00      	cmp	r3, #0
 800938a:	d00a      	beq.n	80093a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	430a      	orrs	r2, r1
 80093a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a6:	f003 0302 	and.w	r3, r3, #2
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00a      	beq.n	80093c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	430a      	orrs	r2, r1
 80093c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093c8:	f003 0304 	and.w	r3, r3, #4
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00a      	beq.n	80093e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	430a      	orrs	r2, r1
 80093e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ea:	f003 0308 	and.w	r3, r3, #8
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00a      	beq.n	8009408 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	430a      	orrs	r2, r1
 8009406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800940c:	f003 0310 	and.w	r3, r3, #16
 8009410:	2b00      	cmp	r3, #0
 8009412:	d00a      	beq.n	800942a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	430a      	orrs	r2, r1
 8009428:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800942e:	f003 0320 	and.w	r3, r3, #32
 8009432:	2b00      	cmp	r3, #0
 8009434:	d00a      	beq.n	800944c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	430a      	orrs	r2, r1
 800944a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009454:	2b00      	cmp	r3, #0
 8009456:	d01a      	beq.n	800948e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	430a      	orrs	r2, r1
 800946c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009472:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009476:	d10a      	bne.n	800948e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	430a      	orrs	r2, r1
 800948c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00a      	beq.n	80094b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	430a      	orrs	r2, r1
 80094ae:	605a      	str	r2, [r3, #4]
  }
}
 80094b0:	bf00      	nop
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b086      	sub	sp, #24
 80094c0:	af02      	add	r7, sp, #8
 80094c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80094cc:	f7fa fce4 	bl	8003e98 <HAL_GetTick>
 80094d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f003 0308 	and.w	r3, r3, #8
 80094dc:	2b08      	cmp	r3, #8
 80094de:	d10e      	bne.n	80094fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80094e4:	9300      	str	r3, [sp, #0]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 f82c 	bl	800954c <UART_WaitOnFlagUntilTimeout>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d001      	beq.n	80094fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094fa:	2303      	movs	r3, #3
 80094fc:	e022      	b.n	8009544 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f003 0304 	and.w	r3, r3, #4
 8009508:	2b04      	cmp	r3, #4
 800950a:	d10e      	bne.n	800952a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800950c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009510:	9300      	str	r3, [sp, #0]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2200      	movs	r2, #0
 8009516:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 f816 	bl	800954c <UART_WaitOnFlagUntilTimeout>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d001      	beq.n	800952a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009526:	2303      	movs	r3, #3
 8009528:	e00c      	b.n	8009544 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2220      	movs	r2, #32
 800952e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2220      	movs	r2, #32
 8009536:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	3710      	adds	r7, #16
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	603b      	str	r3, [r7, #0]
 8009558:	4613      	mov	r3, r2
 800955a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800955c:	e062      	b.n	8009624 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009564:	d05e      	beq.n	8009624 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009566:	f7fa fc97 	bl	8003e98 <HAL_GetTick>
 800956a:	4602      	mov	r2, r0
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	1ad3      	subs	r3, r2, r3
 8009570:	69ba      	ldr	r2, [r7, #24]
 8009572:	429a      	cmp	r2, r3
 8009574:	d302      	bcc.n	800957c <UART_WaitOnFlagUntilTimeout+0x30>
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d11d      	bne.n	80095b8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800958a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	689a      	ldr	r2, [r3, #8]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f022 0201 	bic.w	r2, r2, #1
 800959a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2220      	movs	r2, #32
 80095a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2220      	movs	r2, #32
 80095a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2200      	movs	r2, #0
 80095b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80095b4:	2303      	movs	r3, #3
 80095b6:	e045      	b.n	8009644 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f003 0304 	and.w	r3, r3, #4
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d02e      	beq.n	8009624 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	69db      	ldr	r3, [r3, #28]
 80095cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095d4:	d126      	bne.n	8009624 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80095de:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80095ee:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	689a      	ldr	r2, [r3, #8]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f022 0201 	bic.w	r2, r2, #1
 80095fe:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2220      	movs	r2, #32
 8009604:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2220      	movs	r2, #32
 800960c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2220      	movs	r2, #32
 8009614:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2200      	movs	r2, #0
 800961c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8009620:	2303      	movs	r3, #3
 8009622:	e00f      	b.n	8009644 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	69da      	ldr	r2, [r3, #28]
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	4013      	ands	r3, r2
 800962e:	68ba      	ldr	r2, [r7, #8]
 8009630:	429a      	cmp	r2, r3
 8009632:	bf0c      	ite	eq
 8009634:	2301      	moveq	r3, #1
 8009636:	2300      	movne	r3, #0
 8009638:	b2db      	uxtb	r3, r3
 800963a:	461a      	mov	r2, r3
 800963c:	79fb      	ldrb	r3, [r7, #7]
 800963e:	429a      	cmp	r2, r3
 8009640:	d08d      	beq.n	800955e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009642:	2300      	movs	r3, #0
}
 8009644:	4618      	mov	r0, r3
 8009646:	3710      	adds	r7, #16
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800965a:	2b01      	cmp	r3, #1
 800965c:	d101      	bne.n	8009662 <HAL_UARTEx_DisableFifoMode+0x16>
 800965e:	2302      	movs	r3, #2
 8009660:	e027      	b.n	80096b2 <HAL_UARTEx_DisableFifoMode+0x66>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2201      	movs	r2, #1
 8009666:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2224      	movs	r2, #36	; 0x24
 800966e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f022 0201 	bic.w	r2, r2, #1
 8009688:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009690:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2200      	movs	r2, #0
 8009696:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2220      	movs	r2, #32
 80096a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3714      	adds	r7, #20
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr

080096be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b084      	sub	sp, #16
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
 80096c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d101      	bne.n	80096d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80096d2:	2302      	movs	r3, #2
 80096d4:	e02d      	b.n	8009732 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2201      	movs	r2, #1
 80096da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2224      	movs	r2, #36	; 0x24
 80096e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f022 0201 	bic.w	r2, r2, #1
 80096fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	683a      	ldr	r2, [r7, #0]
 800970e:	430a      	orrs	r2, r1
 8009710:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 f850 	bl	80097b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2220      	movs	r2, #32
 8009724:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2200      	movs	r2, #0
 800972c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009730:	2300      	movs	r3, #0
}
 8009732:	4618      	mov	r0, r3
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b084      	sub	sp, #16
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800974a:	2b01      	cmp	r3, #1
 800974c:	d101      	bne.n	8009752 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800974e:	2302      	movs	r3, #2
 8009750:	e02d      	b.n	80097ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2201      	movs	r2, #1
 8009756:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2224      	movs	r2, #36	; 0x24
 800975e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f022 0201 	bic.w	r2, r2, #1
 8009778:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	683a      	ldr	r2, [r7, #0]
 800978a:	430a      	orrs	r2, r1
 800978c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 f812 	bl	80097b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2220      	movs	r2, #32
 80097a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80097ac:	2300      	movs	r3, #0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
	...

080097b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b089      	sub	sp, #36	; 0x24
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80097c0:	4a2f      	ldr	r2, [pc, #188]	; (8009880 <UARTEx_SetNbDataToProcess+0xc8>)
 80097c2:	f107 0314 	add.w	r3, r7, #20
 80097c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80097ca:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80097ce:	4a2d      	ldr	r2, [pc, #180]	; (8009884 <UARTEx_SetNbDataToProcess+0xcc>)
 80097d0:	f107 030c 	add.w	r3, r7, #12
 80097d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80097d8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d108      	bne.n	80097f6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2201      	movs	r2, #1
 80097e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2201      	movs	r2, #1
 80097f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80097f4:	e03d      	b.n	8009872 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80097f6:	2308      	movs	r3, #8
 80097f8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80097fa:	2308      	movs	r3, #8
 80097fc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	0e5b      	lsrs	r3, r3, #25
 8009806:	b2db      	uxtb	r3, r3
 8009808:	f003 0307 	and.w	r3, r3, #7
 800980c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	0f5b      	lsrs	r3, r3, #29
 8009816:	b2db      	uxtb	r3, r3
 8009818:	f003 0307 	and.w	r3, r3, #7
 800981c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800981e:	7fbb      	ldrb	r3, [r7, #30]
 8009820:	7f3a      	ldrb	r2, [r7, #28]
 8009822:	f107 0120 	add.w	r1, r7, #32
 8009826:	440a      	add	r2, r1
 8009828:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800982c:	fb02 f303 	mul.w	r3, r2, r3
 8009830:	7f3a      	ldrb	r2, [r7, #28]
 8009832:	f107 0120 	add.w	r1, r7, #32
 8009836:	440a      	add	r2, r1
 8009838:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800983c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009840:	b29a      	uxth	r2, r3
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009848:	7ffb      	ldrb	r3, [r7, #31]
 800984a:	7f7a      	ldrb	r2, [r7, #29]
 800984c:	f107 0120 	add.w	r1, r7, #32
 8009850:	440a      	add	r2, r1
 8009852:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009856:	fb02 f303 	mul.w	r3, r2, r3
 800985a:	7f7a      	ldrb	r2, [r7, #29]
 800985c:	f107 0120 	add.w	r1, r7, #32
 8009860:	440a      	add	r2, r1
 8009862:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009866:	fb93 f3f2 	sdiv	r3, r3, r2
 800986a:	b29a      	uxth	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009872:	bf00      	nop
 8009874:	3724      	adds	r7, #36	; 0x24
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr
 800987e:	bf00      	nop
 8009880:	0800c604 	.word	0x0800c604
 8009884:	0800c60c 	.word	0x0800c60c

08009888 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009888:	b480      	push	{r7}
 800988a:	b085      	sub	sp, #20
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009890:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009894:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800989c:	b29a      	uxth	r2, r3
 800989e:	89fb      	ldrh	r3, [r7, #14]
 80098a0:	4313      	orrs	r3, r2
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3714      	adds	r7, #20
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b085      	sub	sp, #20
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80098c0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80098c4:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	b21a      	sxth	r2, r3
 80098d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80098d4:	43db      	mvns	r3, r3
 80098d6:	b21b      	sxth	r3, r3
 80098d8:	4013      	ands	r3, r2
 80098da:	b21b      	sxth	r3, r3
 80098dc:	b29a      	uxth	r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80098e4:	2300      	movs	r3, #0
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3714      	adds	r7, #20
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr

080098f2 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80098f2:	b084      	sub	sp, #16
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	f107 0014 	add.w	r0, r7, #20
 8009900:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2200      	movs	r2, #0
 8009920:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f7ff ffaf 	bl	8009888 <USB_EnableGlobalInt>

  return HAL_OK;
 800992a:	2300      	movs	r3, #0
}
 800992c:	4618      	mov	r0, r3
 800992e:	3708      	adds	r7, #8
 8009930:	46bd      	mov	sp, r7
 8009932:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009936:	b004      	add	sp, #16
 8009938:	4770      	bx	lr

0800993a <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable(void)
{
 800993a:	b580      	push	{r7, lr}
 800993c:	b088      	sub	sp, #32
 800993e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009940:	2300      	movs	r3, #0
 8009942:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8009944:	f107 0308 	add.w	r3, r7, #8
 8009948:	2218      	movs	r2, #24
 800994a:	2100      	movs	r1, #0
 800994c:	4618      	mov	r0, r3
 800994e:	f001 f97f 	bl	800ac50 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009952:	233f      	movs	r3, #63	; 0x3f
 8009954:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8009956:	2381      	movs	r3, #129	; 0x81
 8009958:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800995a:	1dfb      	adds	r3, r7, #7
 800995c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800995e:	2301      	movs	r3, #1
 8009960:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8009962:	f107 0308 	add.w	r3, r7, #8
 8009966:	2100      	movs	r1, #0
 8009968:	4618      	mov	r0, r3
 800996a:	f001 f835 	bl	800a9d8 <hci_send_req>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	da01      	bge.n	8009978 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009974:	23ff      	movs	r3, #255	; 0xff
 8009976:	e005      	b.n	8009984 <aci_gap_set_non_discoverable+0x4a>
  if (status) 
 8009978:	79fb      	ldrb	r3, [r7, #7]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d001      	beq.n	8009982 <aci_gap_set_non_discoverable+0x48>
  {
    return status;
 800997e:	79fb      	ldrb	r3, [r7, #7]
 8009980:	e000      	b.n	8009984 <aci_gap_set_non_discoverable+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8009982:	2300      	movs	r3, #0
}
 8009984:	4618      	mov	r0, r3
 8009986:	3720      	adds	r7, #32
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 800998c:	b5b0      	push	{r4, r5, r7, lr}
 800998e:	b0ce      	sub	sp, #312	; 0x138
 8009990:	af00      	add	r7, sp, #0
 8009992:	4605      	mov	r5, r0
 8009994:	460c      	mov	r4, r1
 8009996:	4610      	mov	r0, r2
 8009998:	4619      	mov	r1, r3
 800999a:	1dfb      	adds	r3, r7, #7
 800999c:	462a      	mov	r2, r5
 800999e:	701a      	strb	r2, [r3, #0]
 80099a0:	1d3b      	adds	r3, r7, #4
 80099a2:	4622      	mov	r2, r4
 80099a4:	801a      	strh	r2, [r3, #0]
 80099a6:	1cbb      	adds	r3, r7, #2
 80099a8:	4602      	mov	r2, r0
 80099aa:	801a      	strh	r2, [r3, #0]
 80099ac:	1dbb      	adds	r3, r7, #6
 80099ae:	460a      	mov	r2, r1
 80099b0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80099b2:	f107 0310 	add.w	r3, r7, #16
 80099b6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80099ba:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80099be:	3308      	adds	r3, #8
 80099c0:	f107 0210 	add.w	r2, r7, #16
 80099c4:	4413      	add	r3, r2
 80099c6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80099ca:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80099ce:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80099d2:	4413      	add	r3, r2
 80099d4:	3309      	adds	r3, #9
 80099d6:	f107 0210 	add.w	r2, r7, #16
 80099da:	4413      	add	r3, r2
 80099dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80099e0:	f107 030f 	add.w	r3, r7, #15
 80099e4:	2200      	movs	r2, #0
 80099e6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80099e8:	2300      	movs	r3, #0
 80099ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 80099ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80099f2:	1dfa      	adds	r2, r7, #7
 80099f4:	7812      	ldrb	r2, [r2, #0]
 80099f6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80099f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80099fc:	3301      	adds	r3, #1
 80099fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 8009a02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009a06:	1d3a      	adds	r2, r7, #4
 8009a08:	8812      	ldrh	r2, [r2, #0]
 8009a0a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8009a0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a12:	3302      	adds	r3, #2
 8009a14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 8009a18:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009a1c:	1cba      	adds	r2, r7, #2
 8009a1e:	8812      	ldrh	r2, [r2, #0]
 8009a20:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8009a24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a28:	3302      	adds	r3, #2
 8009a2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8009a2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009a32:	1dba      	adds	r2, r7, #6
 8009a34:	7812      	ldrb	r2, [r2, #0]
 8009a36:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009a38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8009a42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009a46:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8009a4a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009a4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a50:	3301      	adds	r3, #1
 8009a52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 8009a56:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009a5a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8009a5e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8009a60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a64:	3301      	adds	r3, #1
 8009a66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 8009a6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009a6e:	3308      	adds	r3, #8
 8009a70:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8009a74:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f001 f8d9 	bl	800ac30 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8009a7e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8009a82:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009a86:	4413      	add	r3, r2
 8009a88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 8009a8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009a90:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009a94:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009a96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length);
 8009aa0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009aaa:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f001 f8be 	bl	800ac30 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8009ab4:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8009ab8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009abc:	4413      	add	r3, r2
 8009abe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 8009ac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ac6:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8009aca:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009acc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ad0:	3302      	adds	r3, #2
 8009ad2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 8009ad6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ada:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8009ade:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8009ae0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ae4:	3302      	adds	r3, #2
 8009ae6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 8009aea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009aee:	2218      	movs	r2, #24
 8009af0:	2100      	movs	r1, #0
 8009af2:	4618      	mov	r0, r3
 8009af4:	f001 f8ac 	bl	800ac50 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009af8:	233f      	movs	r3, #63	; 0x3f
 8009afa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8009afe:	2383      	movs	r3, #131	; 0x83
 8009b00:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009b04:	f107 0310 	add.w	r3, r7, #16
 8009b08:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009b0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b10:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009b14:	f107 030f 	add.w	r3, r7, #15
 8009b18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8009b22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009b26:	2100      	movs	r1, #0
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f000 ff55 	bl	800a9d8 <hci_send_req>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	da01      	bge.n	8009b38 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8009b34:	23ff      	movs	r3, #255	; 0xff
 8009b36:	e009      	b.n	8009b4c <aci_gap_set_discoverable+0x1c0>
  if (status) 
 8009b38:	f107 030f 	add.w	r3, r7, #15
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d003      	beq.n	8009b4a <aci_gap_set_discoverable+0x1be>
  {
    return status;
 8009b42:	f107 030f 	add.w	r3, r7, #15
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	e000      	b.n	8009b4c <aci_gap_set_discoverable+0x1c0>
  }
  return BLE_STATUS_SUCCESS;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bdb0      	pop	{r4, r5, r7, pc}

08009b56 <aci_gap_set_io_capability>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b0cc      	sub	sp, #304	; 0x130
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	1dfb      	adds	r3, r7, #7
 8009b60:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8009b62:	f107 0310 	add.w	r3, r7, #16
 8009b66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009b6a:	f107 030f 	add.w	r3, r7, #15
 8009b6e:	2200      	movs	r2, #0
 8009b70:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009b72:	2300      	movs	r3, #0
 8009b74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = htob(IO_Capability, 1);
 8009b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b7c:	1dfa      	adds	r2, r7, #7
 8009b7e:	7812      	ldrb	r2, [r2, #0]
 8009b80:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009b82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b86:	3301      	adds	r3, #1
 8009b88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8009b8c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009b90:	2218      	movs	r2, #24
 8009b92:	2100      	movs	r1, #0
 8009b94:	4618      	mov	r0, r3
 8009b96:	f001 f85b 	bl	800ac50 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009b9a:	233f      	movs	r3, #63	; 0x3f
 8009b9c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8009ba0:	2385      	movs	r3, #133	; 0x85
 8009ba2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009ba6:	f107 0310 	add.w	r3, r7, #16
 8009baa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009bae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009bb2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009bb6:	f107 030f 	add.w	r3, r7, #15
 8009bba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8009bc4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009bc8:	2100      	movs	r1, #0
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f000 ff04 	bl	800a9d8 <hci_send_req>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	da01      	bge.n	8009bda <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8009bd6:	23ff      	movs	r3, #255	; 0xff
 8009bd8:	e009      	b.n	8009bee <aci_gap_set_io_capability+0x98>
  if (status) 
 8009bda:	f107 030f 	add.w	r3, r7, #15
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d003      	beq.n	8009bec <aci_gap_set_io_capability+0x96>
  {
    return status;
 8009be4:	f107 030f 	add.w	r3, r7, #15
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	e000      	b.n	8009bee <aci_gap_set_io_capability+0x98>
  }
  return BLE_STATUS_SUCCESS;
 8009bec:	2300      	movs	r3, #0
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 8009bf8:	b5b0      	push	{r4, r5, r7, lr}
 8009bfa:	b0cc      	sub	sp, #304	; 0x130
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	4605      	mov	r5, r0
 8009c00:	460c      	mov	r4, r1
 8009c02:	4610      	mov	r0, r2
 8009c04:	4619      	mov	r1, r3
 8009c06:	1dfb      	adds	r3, r7, #7
 8009c08:	462a      	mov	r2, r5
 8009c0a:	701a      	strb	r2, [r3, #0]
 8009c0c:	1dbb      	adds	r3, r7, #6
 8009c0e:	4622      	mov	r2, r4
 8009c10:	701a      	strb	r2, [r3, #0]
 8009c12:	1d7b      	adds	r3, r7, #5
 8009c14:	4602      	mov	r2, r0
 8009c16:	701a      	strb	r2, [r3, #0]
 8009c18:	1d3b      	adds	r3, r7, #4
 8009c1a:	460a      	mov	r2, r1
 8009c1c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8009c1e:	f107 0310 	add.w	r3, r7, #16
 8009c22:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009c26:	f107 030f 	add.w	r3, r7, #15
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 8009c34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c38:	1dfa      	adds	r2, r7, #7
 8009c3a:	7812      	ldrb	r2, [r2, #0]
 8009c3c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009c3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c42:	3301      	adds	r3, #1
 8009c44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 8009c48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c4c:	1dba      	adds	r2, r7, #6
 8009c4e:	7812      	ldrb	r2, [r2, #0]
 8009c50:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009c52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c56:	3301      	adds	r3, #1
 8009c58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = htob(SC_Support, 1);
 8009c5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c60:	1d7a      	adds	r2, r7, #5
 8009c62:	7812      	ldrb	r2, [r2, #0]
 8009c64:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009c66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 8009c70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c74:	1d3a      	adds	r2, r7, #4
 8009c76:	7812      	ldrb	r2, [r2, #0]
 8009c78:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8009c7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c7e:	3301      	adds	r3, #1
 8009c80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 8009c84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c88:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8009c8c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009c8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c92:	3301      	adds	r3, #1
 8009c94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 8009c98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c9c:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8009ca0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009ca2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 8009cac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cb0:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8009cb4:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009cb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009cba:	3301      	adds	r3, #1
 8009cbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 8009cc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cc4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8009cc8:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8009ccc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009cd0:	3304      	adds	r3, #4
 8009cd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 8009cd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cda:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8009cde:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8009ce0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8009cea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009cee:	2218      	movs	r2, #24
 8009cf0:	2100      	movs	r1, #0
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f000 ffac 	bl	800ac50 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009cf8:	233f      	movs	r3, #63	; 0x3f
 8009cfa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8009cfe:	2386      	movs	r3, #134	; 0x86
 8009d00:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009d04:	f107 0310 	add.w	r3, r7, #16
 8009d08:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009d0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d10:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009d14:	f107 030f 	add.w	r3, r7, #15
 8009d18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8009d22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009d26:	2100      	movs	r1, #0
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f000 fe55 	bl	800a9d8 <hci_send_req>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	da01      	bge.n	8009d38 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8009d34:	23ff      	movs	r3, #255	; 0xff
 8009d36:	e009      	b.n	8009d4c <aci_gap_set_authentication_requirement+0x154>
  if (status) 
 8009d38:	f107 030f 	add.w	r3, r7, #15
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d003      	beq.n	8009d4a <aci_gap_set_authentication_requirement+0x152>
  {
    return status;
 8009d42:	f107 030f 	add.w	r3, r7, #15
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	e000      	b.n	8009d4c <aci_gap_set_authentication_requirement+0x154>
  }
  return BLE_STATUS_SUCCESS;
 8009d4a:	2300      	movs	r3, #0
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bdb0      	pop	{r4, r5, r7, pc}

08009d56 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8009d56:	b590      	push	{r4, r7, lr}
 8009d58:	b0cd      	sub	sp, #308	; 0x134
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	4604      	mov	r4, r0
 8009d5e:	4608      	mov	r0, r1
 8009d60:	4611      	mov	r1, r2
 8009d62:	463a      	mov	r2, r7
 8009d64:	6013      	str	r3, [r2, #0]
 8009d66:	1dfb      	adds	r3, r7, #7
 8009d68:	4622      	mov	r2, r4
 8009d6a:	701a      	strb	r2, [r3, #0]
 8009d6c:	1dbb      	adds	r3, r7, #6
 8009d6e:	4602      	mov	r2, r0
 8009d70:	701a      	strb	r2, [r3, #0]
 8009d72:	1d7b      	adds	r3, r7, #5
 8009d74:	460a      	mov	r2, r1
 8009d76:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8009d78:	f107 0310 	add.w	r3, r7, #16
 8009d7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 8009d80:	f107 0308 	add.w	r3, r7, #8
 8009d84:	2207      	movs	r2, #7
 8009d86:	2100      	movs	r1, #0
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f000 ff61 	bl	800ac50 <Osal_MemSet>
  int index_input = 0;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = htob(Role, 1);
 8009d94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d98:	1dfa      	adds	r2, r7, #7
 8009d9a:	7812      	ldrb	r2, [r2, #0]
 8009d9c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009d9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009da2:	3301      	adds	r3, #1
 8009da4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8009da8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009dac:	1dba      	adds	r2, r7, #6
 8009dae:	7812      	ldrb	r2, [r2, #0]
 8009db0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009db2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009db6:	3301      	adds	r3, #1
 8009db8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 8009dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009dc0:	1d7a      	adds	r2, r7, #5
 8009dc2:	7812      	ldrb	r2, [r2, #0]
 8009dc4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009dc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009dca:	3301      	adds	r3, #1
 8009dcc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8009dd0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009dd4:	2218      	movs	r2, #24
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f000 ff39 	bl	800ac50 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009dde:	233f      	movs	r3, #63	; 0x3f
 8009de0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8009de4:	238a      	movs	r3, #138	; 0x8a
 8009de6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009dea:	f107 0310 	add.w	r3, r7, #16
 8009dee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009df2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009df6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8009dfa:	f107 0308 	add.w	r3, r7, #8
 8009dfe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8009e02:	2307      	movs	r3, #7
 8009e04:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8009e08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f000 fde2 	bl	800a9d8 <hci_send_req>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	da01      	bge.n	8009e1e <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8009e1a:	23ff      	movs	r3, #255	; 0xff
 8009e1c:	e021      	b.n	8009e62 <aci_gap_init+0x10c>
  if (resp.Status) 
 8009e1e:	f107 0308 	add.w	r3, r7, #8
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d003      	beq.n	8009e30 <aci_gap_init+0xda>
  {
    return resp.Status;
 8009e28:	f107 0308 	add.w	r3, r7, #8
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	e018      	b.n	8009e62 <aci_gap_init+0x10c>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8009e30:	f107 0308 	add.w	r3, r7, #8
 8009e34:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009e38:	b29a      	uxth	r2, r3
 8009e3a:	463b      	mov	r3, r7
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8009e40:	f107 0308 	add.w	r3, r7, #8
 8009e44:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009e48:	b29a      	uxth	r2, r3
 8009e4a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009e4e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8009e50:	f107 0308 	add.w	r3, r7, #8
 8009e54:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009e58:	b29a      	uxth	r2, r3
 8009e5a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009e5e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009e60:	2300      	movs	r3, #0
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd90      	pop	{r4, r7, pc}

08009e6c <aci_gap_update_adv_data>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b0cc      	sub	sp, #304	; 0x130
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	4602      	mov	r2, r0
 8009e74:	463b      	mov	r3, r7
 8009e76:	6019      	str	r1, [r3, #0]
 8009e78:	1dfb      	adds	r3, r7, #7
 8009e7a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8009e7c:	f107 0310 	add.w	r3, r7, #16
 8009e80:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009e84:	f107 030f 	add.w	r3, r7, #15
 8009e88:	2200      	movs	r2, #0
 8009e8a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 8009e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e96:	1dfa      	adds	r2, r7, #7
 8009e98:	7812      	ldrb	r2, [r2, #0]
 8009e9a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009e9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen);
 8009ea6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009eaa:	1c58      	adds	r0, r3, #1
 8009eac:	1dfb      	adds	r3, r7, #7
 8009eae:	781a      	ldrb	r2, [r3, #0]
 8009eb0:	463b      	mov	r3, r7
 8009eb2:	6819      	ldr	r1, [r3, #0]
 8009eb4:	f000 febc 	bl	800ac30 <Osal_MemCpy>
  index_input += AdvDataLen;
 8009eb8:	1dfb      	adds	r3, r7, #7
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009ec0:	4413      	add	r3, r2
 8009ec2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8009ec6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009eca:	2218      	movs	r2, #24
 8009ecc:	2100      	movs	r1, #0
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f000 febe 	bl	800ac50 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009ed4:	233f      	movs	r3, #63	; 0x3f
 8009ed6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8009eda:	238e      	movs	r3, #142	; 0x8e
 8009edc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009ee0:	f107 0310 	add.w	r3, r7, #16
 8009ee4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009ee8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009eec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009ef0:	f107 030f 	add.w	r3, r7, #15
 8009ef4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8009efe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009f02:	2100      	movs	r1, #0
 8009f04:	4618      	mov	r0, r3
 8009f06:	f000 fd67 	bl	800a9d8 <hci_send_req>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	da01      	bge.n	8009f14 <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 8009f10:	23ff      	movs	r3, #255	; 0xff
 8009f12:	e009      	b.n	8009f28 <aci_gap_update_adv_data+0xbc>
  if (status) 
 8009f14:	f107 030f 	add.w	r3, r7, #15
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d003      	beq.n	8009f26 <aci_gap_update_adv_data+0xba>
  {
    return status;
 8009f1e:	f107 030f 	add.w	r3, r7, #15
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	e000      	b.n	8009f28 <aci_gap_update_adv_data+0xbc>
  }
  return BLE_STATUS_SUCCESS;
 8009f26:	2300      	movs	r3, #0
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}

08009f32 <aci_gap_configure_whitelist>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_configure_whitelist(void)
{
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b088      	sub	sp, #32
 8009f36:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8009f3c:	f107 0308 	add.w	r3, r7, #8
 8009f40:	2218      	movs	r2, #24
 8009f42:	2100      	movs	r1, #0
 8009f44:	4618      	mov	r0, r3
 8009f46:	f000 fe83 	bl	800ac50 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009f4a:	233f      	movs	r3, #63	; 0x3f
 8009f4c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8009f4e:	2392      	movs	r3, #146	; 0x92
 8009f50:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009f52:	1dfb      	adds	r3, r7, #7
 8009f54:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009f56:	2301      	movs	r3, #1
 8009f58:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8009f5a:	f107 0308 	add.w	r3, r7, #8
 8009f5e:	2100      	movs	r1, #0
 8009f60:	4618      	mov	r0, r3
 8009f62:	f000 fd39 	bl	800a9d8 <hci_send_req>
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	da01      	bge.n	8009f70 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009f6c:	23ff      	movs	r3, #255	; 0xff
 8009f6e:	e005      	b.n	8009f7c <aci_gap_configure_whitelist+0x4a>
  if (status) 
 8009f70:	79fb      	ldrb	r3, [r7, #7]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d001      	beq.n	8009f7a <aci_gap_configure_whitelist+0x48>
  {
    return status;
 8009f76:	79fb      	ldrb	r3, [r7, #7]
 8009f78:	e000      	b.n	8009f7c <aci_gap_configure_whitelist+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8009f7a:	2300      	movs	r3, #0
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3720      	adds	r7, #32
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init(void)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b088      	sub	sp, #32
 8009f88:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8009f8e:	f107 0308 	add.w	r3, r7, #8
 8009f92:	2218      	movs	r2, #24
 8009f94:	2100      	movs	r1, #0
 8009f96:	4618      	mov	r0, r3
 8009f98:	f000 fe5a 	bl	800ac50 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009f9c:	233f      	movs	r3, #63	; 0x3f
 8009f9e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8009fa0:	f240 1301 	movw	r3, #257	; 0x101
 8009fa4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009fa6:	1dfb      	adds	r3, r7, #7
 8009fa8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009faa:	2301      	movs	r3, #1
 8009fac:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8009fae:	f107 0308 	add.w	r3, r7, #8
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f000 fd0f 	bl	800a9d8 <hci_send_req>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	da01      	bge.n	8009fc4 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8009fc0:	23ff      	movs	r3, #255	; 0xff
 8009fc2:	e005      	b.n	8009fd0 <aci_gatt_init+0x4c>
  if (status) 
 8009fc4:	79fb      	ldrb	r3, [r7, #7]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d001      	beq.n	8009fce <aci_gatt_init+0x4a>
  {
    return status;
 8009fca:	79fb      	ldrb	r3, [r7, #7]
 8009fcc:	e000      	b.n	8009fd0 <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 8009fce:	2300      	movs	r3, #0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3720      	adds	r7, #32
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8009fd8:	b590      	push	{r4, r7, lr}
 8009fda:	b0cf      	sub	sp, #316	; 0x13c
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	4604      	mov	r4, r0
 8009fe0:	4638      	mov	r0, r7
 8009fe2:	6001      	str	r1, [r0, #0]
 8009fe4:	4610      	mov	r0, r2
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	1dfb      	adds	r3, r7, #7
 8009fea:	4622      	mov	r2, r4
 8009fec:	701a      	strb	r2, [r3, #0]
 8009fee:	1dbb      	adds	r3, r7, #6
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	701a      	strb	r2, [r3, #0]
 8009ff4:	1d7b      	adds	r3, r7, #5
 8009ff6:	460a      	mov	r2, r1
 8009ff8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8009ffa:	f107 0310 	add.w	r3, r7, #16
 8009ffe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800a002:	1dfb      	adds	r3, r7, #7
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	2b01      	cmp	r3, #1
 800a008:	d007      	beq.n	800a01a <aci_gatt_add_service+0x42>
 800a00a:	1dfb      	adds	r3, r7, #7
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	2b02      	cmp	r3, #2
 800a010:	d101      	bne.n	800a016 <aci_gatt_add_service+0x3e>
 800a012:	2311      	movs	r3, #17
 800a014:	e002      	b.n	800a01c <aci_gatt_add_service+0x44>
 800a016:	2301      	movs	r3, #1
 800a018:	e000      	b.n	800a01c <aci_gatt_add_service+0x44>
 800a01a:	2303      	movs	r3, #3
 800a01c:	f107 0210 	add.w	r2, r7, #16
 800a020:	4413      	add	r3, r2
 800a022:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800a026:	f107 030c 	add.w	r3, r7, #12
 800a02a:	2203      	movs	r2, #3
 800a02c:	2100      	movs	r1, #0
 800a02e:	4618      	mov	r0, r3
 800a030:	f000 fe0e 	bl	800ac50 <Osal_MemSet>
  int index_input = 0;
 800a034:	2300      	movs	r3, #0
 800a036:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 800a03a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a03e:	1dfa      	adds	r2, r7, #7
 800a040:	7812      	ldrb	r2, [r2, #0]
 800a042:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a044:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a048:	3301      	adds	r3, #1
 800a04a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 800a04e:	1dfb      	adds	r3, r7, #7
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	2b01      	cmp	r3, #1
 800a054:	d002      	beq.n	800a05c <aci_gatt_add_service+0x84>
 800a056:	2b02      	cmp	r3, #2
 800a058:	d004      	beq.n	800a064 <aci_gatt_add_service+0x8c>
 800a05a:	e007      	b.n	800a06c <aci_gatt_add_service+0x94>
      case 1: size = 2; break;
 800a05c:	2302      	movs	r3, #2
 800a05e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800a062:	e005      	b.n	800a070 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800a064:	2310      	movs	r3, #16
 800a066:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800a06a:	e001      	b.n	800a070 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 800a06c:	2347      	movs	r3, #71	; 0x47
 800a06e:	e05d      	b.n	800a12c <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 800a070:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a074:	1c58      	adds	r0, r3, #1
 800a076:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800a07a:	463b      	mov	r3, r7
 800a07c:	6819      	ldr	r1, [r3, #0]
 800a07e:	f000 fdd7 	bl	800ac30 <Osal_MemCpy>
    index_input += size;
 800a082:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800a086:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a08a:	4413      	add	r3, r2
 800a08c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = htob(Service_Type, 1);
 800a090:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a094:	1dba      	adds	r2, r7, #6
 800a096:	7812      	ldrb	r2, [r2, #0]
 800a098:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800a09a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a09e:	3301      	adds	r3, #1
 800a0a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 800a0a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0a8:	1d7a      	adds	r2, r7, #5
 800a0aa:	7812      	ldrb	r2, [r2, #0]
 800a0ac:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800a0ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 800a0b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a0bc:	2218      	movs	r2, #24
 800a0be:	2100      	movs	r1, #0
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f000 fdc5 	bl	800ac50 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a0c6:	233f      	movs	r3, #63	; 0x3f
 800a0c8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800a0cc:	f44f 7381 	mov.w	r3, #258	; 0x102
 800a0d0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a0d4:	f107 0310 	add.w	r3, r7, #16
 800a0d8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a0dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a0e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800a0e4:	f107 030c 	add.w	r3, r7, #12
 800a0e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800a0ec:	2303      	movs	r3, #3
 800a0ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800a0f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a0f6:	2100      	movs	r1, #0
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f000 fc6d 	bl	800a9d8 <hci_send_req>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b00      	cmp	r3, #0
 800a102:	da01      	bge.n	800a108 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 800a104:	23ff      	movs	r3, #255	; 0xff
 800a106:	e011      	b.n	800a12c <aci_gatt_add_service+0x154>
  if (resp.Status) 
 800a108:	f107 030c 	add.w	r3, r7, #12
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d003      	beq.n	800a11a <aci_gatt_add_service+0x142>
  {
    return resp.Status;
 800a112:	f107 030c 	add.w	r3, r7, #12
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	e008      	b.n	800a12c <aci_gatt_add_service+0x154>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800a11a:	f107 030c 	add.w	r3, r7, #12
 800a11e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a122:	b29a      	uxth	r2, r3
 800a124:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a128:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a12a:	2300      	movs	r3, #0
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800a132:	46bd      	mov	sp, r7
 800a134:	bd90      	pop	{r4, r7, pc}

0800a136 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 800a136:	b590      	push	{r4, r7, lr}
 800a138:	b0d1      	sub	sp, #324	; 0x144
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	4604      	mov	r4, r0
 800a13e:	4608      	mov	r0, r1
 800a140:	f107 0108 	add.w	r1, r7, #8
 800a144:	600a      	str	r2, [r1, #0]
 800a146:	4619      	mov	r1, r3
 800a148:	f107 030e 	add.w	r3, r7, #14
 800a14c:	4622      	mov	r2, r4
 800a14e:	801a      	strh	r2, [r3, #0]
 800a150:	f107 030d 	add.w	r3, r7, #13
 800a154:	4602      	mov	r2, r0
 800a156:	701a      	strb	r2, [r3, #0]
 800a158:	1dbb      	adds	r3, r7, #6
 800a15a:	460a      	mov	r2, r1
 800a15c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800a15e:	f107 0318 	add.w	r3, r7, #24
 800a162:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800a166:	f107 030d 	add.w	r3, r7, #13
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d008      	beq.n	800a182 <aci_gatt_add_char+0x4c>
 800a170:	f107 030d 	add.w	r3, r7, #13
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	2b02      	cmp	r3, #2
 800a178:	d101      	bne.n	800a17e <aci_gatt_add_char+0x48>
 800a17a:	2313      	movs	r3, #19
 800a17c:	e002      	b.n	800a184 <aci_gatt_add_char+0x4e>
 800a17e:	2303      	movs	r3, #3
 800a180:	e000      	b.n	800a184 <aci_gatt_add_char+0x4e>
 800a182:	2305      	movs	r3, #5
 800a184:	f107 0218 	add.w	r2, r7, #24
 800a188:	4413      	add	r3, r2
 800a18a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800a18e:	f107 0314 	add.w	r3, r7, #20
 800a192:	2203      	movs	r2, #3
 800a194:	2100      	movs	r1, #0
 800a196:	4618      	mov	r0, r3
 800a198:	f000 fd5a 	bl	800ac50 <Osal_MemSet>
  int index_input = 0;
 800a19c:	2300      	movs	r3, #0
 800a19e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = htob(Service_Handle, 2);
 800a1a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a1a6:	f107 020e 	add.w	r2, r7, #14
 800a1aa:	8812      	ldrh	r2, [r2, #0]
 800a1ac:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a1ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a1b2:	3302      	adds	r3, #2
 800a1b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 800a1b8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a1bc:	f107 020d 	add.w	r2, r7, #13
 800a1c0:	7812      	ldrb	r2, [r2, #0]
 800a1c2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a1c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 800a1ce:	f107 030d 	add.w	r3, r7, #13
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d002      	beq.n	800a1de <aci_gatt_add_char+0xa8>
 800a1d8:	2b02      	cmp	r3, #2
 800a1da:	d004      	beq.n	800a1e6 <aci_gatt_add_char+0xb0>
 800a1dc:	e007      	b.n	800a1ee <aci_gatt_add_char+0xb8>
      case 1: size = 2; break;
 800a1de:	2302      	movs	r3, #2
 800a1e0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800a1e4:	e005      	b.n	800a1f2 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 800a1e6:	2310      	movs	r3, #16
 800a1e8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800a1ec:	e001      	b.n	800a1f2 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 800a1ee:	2347      	movs	r3, #71	; 0x47
 800a1f0:	e086      	b.n	800a300 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 800a1f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a1f6:	1cd8      	adds	r0, r3, #3
 800a1f8:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800a1fc:	f107 0308 	add.w	r3, r7, #8
 800a200:	6819      	ldr	r1, [r3, #0]
 800a202:	f000 fd15 	bl	800ac30 <Osal_MemCpy>
    index_input += size;
 800a206:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800a20a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800a20e:	4413      	add	r3, r2
 800a210:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 800a214:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a218:	1dba      	adds	r2, r7, #6
 800a21a:	8812      	ldrh	r2, [r2, #0]
 800a21c:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800a21e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a222:	3302      	adds	r3, #2
 800a224:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 800a228:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a22c:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800a230:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800a232:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a236:	3301      	adds	r3, #1
 800a238:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 800a23c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a240:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800a244:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800a246:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a24a:	3301      	adds	r3, #1
 800a24c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 800a250:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a254:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800a258:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800a25a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a25e:	3301      	adds	r3, #1
 800a260:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 800a264:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a268:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800a26c:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800a26e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a272:	3301      	adds	r3, #1
 800a274:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 800a278:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a27c:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800a280:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800a282:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a286:	3301      	adds	r3, #1
 800a288:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 800a28c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a290:	2218      	movs	r2, #24
 800a292:	2100      	movs	r1, #0
 800a294:	4618      	mov	r0, r3
 800a296:	f000 fcdb 	bl	800ac50 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a29a:	233f      	movs	r3, #63	; 0x3f
 800a29c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800a2a0:	f44f 7382 	mov.w	r3, #260	; 0x104
 800a2a4:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800a2a8:	f107 0318 	add.w	r3, r7, #24
 800a2ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800a2b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a2b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800a2b8:	f107 0314 	add.w	r3, r7, #20
 800a2bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800a2c0:	2303      	movs	r3, #3
 800a2c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800a2c6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a2ca:	2100      	movs	r1, #0
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f000 fb83 	bl	800a9d8 <hci_send_req>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	da01      	bge.n	800a2dc <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 800a2d8:	23ff      	movs	r3, #255	; 0xff
 800a2da:	e011      	b.n	800a300 <aci_gatt_add_char+0x1ca>
  if (resp.Status) 
 800a2dc:	f107 0314 	add.w	r3, r7, #20
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d003      	beq.n	800a2ee <aci_gatt_add_char+0x1b8>
  {
    return resp.Status;
 800a2e6:	f107 0314 	add.w	r3, r7, #20
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	e008      	b.n	800a300 <aci_gatt_add_char+0x1ca>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 800a2ee:	f107 0314 	add.w	r3, r7, #20
 800a2f2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a2f6:	b29a      	uxth	r2, r3
 800a2f8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800a2fc:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a2fe:	2300      	movs	r3, #0
}
 800a300:	4618      	mov	r0, r3
 800a302:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800a306:	46bd      	mov	sp, r7
 800a308:	bd90      	pop	{r4, r7, pc}

0800a30a <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 800a30a:	b5b0      	push	{r4, r5, r7, lr}
 800a30c:	b0cc      	sub	sp, #304	; 0x130
 800a30e:	af00      	add	r7, sp, #0
 800a310:	4605      	mov	r5, r0
 800a312:	460c      	mov	r4, r1
 800a314:	4610      	mov	r0, r2
 800a316:	4619      	mov	r1, r3
 800a318:	1dbb      	adds	r3, r7, #6
 800a31a:	462a      	mov	r2, r5
 800a31c:	801a      	strh	r2, [r3, #0]
 800a31e:	1d3b      	adds	r3, r7, #4
 800a320:	4622      	mov	r2, r4
 800a322:	801a      	strh	r2, [r3, #0]
 800a324:	1cfb      	adds	r3, r7, #3
 800a326:	4602      	mov	r2, r0
 800a328:	701a      	strb	r2, [r3, #0]
 800a32a:	1cbb      	adds	r3, r7, #2
 800a32c:	460a      	mov	r2, r1
 800a32e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800a330:	f107 0310 	add.w	r3, r7, #16
 800a334:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a338:	f107 030f 	add.w	r3, r7, #15
 800a33c:	2200      	movs	r2, #0
 800a33e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a340:	2300      	movs	r3, #0
 800a342:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = htob(Service_Handle, 2);
 800a346:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a34a:	1dba      	adds	r2, r7, #6
 800a34c:	8812      	ldrh	r2, [r2, #0]
 800a34e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a350:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a354:	3302      	adds	r3, #2
 800a356:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = htob(Char_Handle, 2);
 800a35a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a35e:	1d3a      	adds	r2, r7, #4
 800a360:	8812      	ldrh	r2, [r2, #0]
 800a362:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a364:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a368:	3302      	adds	r3, #2
 800a36a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = htob(Val_Offset, 1);
 800a36e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a372:	1cfa      	adds	r2, r7, #3
 800a374:	7812      	ldrb	r2, [r2, #0]
 800a376:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a378:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a37c:	3301      	adds	r3, #1
 800a37e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 800a382:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a386:	1cba      	adds	r2, r7, #2
 800a388:	7812      	ldrb	r2, [r2, #0]
 800a38a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a38c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a390:	3301      	adds	r3, #1
 800a392:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 800a396:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a39a:	1d98      	adds	r0, r3, #6
 800a39c:	1cbb      	adds	r3, r7, #2
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800a3a6:	f000 fc43 	bl	800ac30 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800a3aa:	1cbb      	adds	r3, r7, #2
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a3b2:	4413      	add	r3, r2
 800a3b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800a3b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a3bc:	2218      	movs	r2, #24
 800a3be:	2100      	movs	r1, #0
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f000 fc45 	bl	800ac50 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a3c6:	233f      	movs	r3, #63	; 0x3f
 800a3c8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800a3cc:	f44f 7383 	mov.w	r3, #262	; 0x106
 800a3d0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a3d4:	f107 0310 	add.w	r3, r7, #16
 800a3d8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a3dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a3e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a3e4:	f107 030f 	add.w	r3, r7, #15
 800a3e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800a3f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a3f6:	2100      	movs	r1, #0
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f000 faed 	bl	800a9d8 <hci_send_req>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	da01      	bge.n	800a408 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800a404:	23ff      	movs	r3, #255	; 0xff
 800a406:	e009      	b.n	800a41c <aci_gatt_update_char_value+0x112>
  if (status) 
 800a408:	f107 030f 	add.w	r3, r7, #15
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d003      	beq.n	800a41a <aci_gatt_update_char_value+0x110>
  {
    return status;
 800a412:	f107 030f 	add.w	r3, r7, #15
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	e000      	b.n	800a41c <aci_gatt_update_char_value+0x112>
  }
  return BLE_STATUS_SUCCESS;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a422:	46bd      	mov	sp, r7
 800a424:	bdb0      	pop	{r4, r5, r7, pc}

0800a426 <aci_gatt_exchange_config>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gatt_exchange_config(uint16_t Connection_Handle)
{
 800a426:	b580      	push	{r7, lr}
 800a428:	b0cc      	sub	sp, #304	; 0x130
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	4602      	mov	r2, r0
 800a42e:	1dbb      	adds	r3, r7, #6
 800a430:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_exchange_config_cp0 *cp0 = (aci_gatt_exchange_config_cp0*)(cmd_buffer);
 800a432:	f107 0310 	add.w	r3, r7, #16
 800a436:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a43a:	f107 030f 	add.w	r3, r7, #15
 800a43e:	2200      	movs	r2, #0
 800a440:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a442:	2300      	movs	r3, #0
 800a444:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800a448:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a44c:	1dba      	adds	r2, r7, #6
 800a44e:	8812      	ldrh	r2, [r2, #0]
 800a450:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a452:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a456:	3302      	adds	r3, #2
 800a458:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800a45c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a460:	2218      	movs	r2, #24
 800a462:	2100      	movs	r1, #0
 800a464:	4618      	mov	r0, r3
 800a466:	f000 fbf3 	bl	800ac50 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a46a:	233f      	movs	r3, #63	; 0x3f
 800a46c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x10b;
 800a470:	f240 130b 	movw	r3, #267	; 0x10b
 800a474:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800a478:	230f      	movs	r3, #15
 800a47a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800a47e:	f107 0310 	add.w	r3, r7, #16
 800a482:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a486:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a48a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a48e:	f107 030f 	add.w	r3, r7, #15
 800a492:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a496:	2301      	movs	r3, #1
 800a498:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800a49c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f000 fa98 	bl	800a9d8 <hci_send_req>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	da01      	bge.n	800a4b2 <aci_gatt_exchange_config+0x8c>
    return BLE_STATUS_TIMEOUT;
 800a4ae:	23ff      	movs	r3, #255	; 0xff
 800a4b0:	e009      	b.n	800a4c6 <aci_gatt_exchange_config+0xa0>
  if (status) 
 800a4b2:	f107 030f 	add.w	r3, r7, #15
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d003      	beq.n	800a4c4 <aci_gatt_exchange_config+0x9e>
  {
    return status;
 800a4bc:	f107 030f 	add.w	r3, r7, #15
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	e000      	b.n	800a4c6 <aci_gatt_exchange_config+0xa0>
  }
  return BLE_STATUS_SUCCESS;
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b0cc      	sub	sp, #304	; 0x130
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	463b      	mov	r3, r7
 800a4d8:	601a      	str	r2, [r3, #0]
 800a4da:	1dfb      	adds	r3, r7, #7
 800a4dc:	4602      	mov	r2, r0
 800a4de:	701a      	strb	r2, [r3, #0]
 800a4e0:	1dbb      	adds	r3, r7, #6
 800a4e2:	460a      	mov	r2, r1
 800a4e4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800a4e6:	f107 0310 	add.w	r3, r7, #16
 800a4ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a4ee:	f107 030f 	add.w	r3, r7, #15
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = htob(Offset, 1);
 800a4fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a500:	1dfa      	adds	r2, r7, #7
 800a502:	7812      	ldrb	r2, [r2, #0]
 800a504:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a506:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a50a:	3301      	adds	r3, #1
 800a50c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = htob(Length, 1);
 800a510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a514:	1dba      	adds	r2, r7, #6
 800a516:	7812      	ldrb	r2, [r2, #0]
 800a518:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a51a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a51e:	3301      	adds	r3, #1
 800a520:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 800a524:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a528:	1c98      	adds	r0, r3, #2
 800a52a:	1dbb      	adds	r3, r7, #6
 800a52c:	781a      	ldrb	r2, [r3, #0]
 800a52e:	463b      	mov	r3, r7
 800a530:	6819      	ldr	r1, [r3, #0]
 800a532:	f000 fb7d 	bl	800ac30 <Osal_MemCpy>
  index_input += Length;
 800a536:	1dbb      	adds	r3, r7, #6
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a53e:	4413      	add	r3, r2
 800a540:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800a544:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a548:	2218      	movs	r2, #24
 800a54a:	2100      	movs	r1, #0
 800a54c:	4618      	mov	r0, r3
 800a54e:	f000 fb7f 	bl	800ac50 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a552:	233f      	movs	r3, #63	; 0x3f
 800a554:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800a558:	230c      	movs	r3, #12
 800a55a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a55e:	f107 0310 	add.w	r3, r7, #16
 800a562:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a566:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a56a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a56e:	f107 030f 	add.w	r3, r7, #15
 800a572:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a576:	2301      	movs	r3, #1
 800a578:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800a57c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a580:	2100      	movs	r1, #0
 800a582:	4618      	mov	r0, r3
 800a584:	f000 fa28 	bl	800a9d8 <hci_send_req>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	da01      	bge.n	800a592 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800a58e:	23ff      	movs	r3, #255	; 0xff
 800a590:	e009      	b.n	800a5a6 <aci_hal_write_config_data+0xd6>
  if (status) 
 800a592:	f107 030f 	add.w	r3, r7, #15
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d003      	beq.n	800a5a4 <aci_hal_write_config_data+0xd4>
  {
    return status;
 800a59c:	f107 030f 	add.w	r3, r7, #15
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	e000      	b.n	800a5a6 <aci_hal_write_config_data+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b0cc      	sub	sp, #304	; 0x130
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	1dfb      	adds	r3, r7, #7
 800a5ba:	701a      	strb	r2, [r3, #0]
 800a5bc:	1dbb      	adds	r3, r7, #6
 800a5be:	460a      	mov	r2, r1
 800a5c0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800a5c2:	f107 0310 	add.w	r3, r7, #16
 800a5c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a5ca:	f107 030f 	add.w	r3, r7, #15
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = htob(En_High_Power, 1);
 800a5d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5dc:	1dfa      	adds	r2, r7, #7
 800a5de:	7812      	ldrb	r2, [r2, #0]
 800a5e0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a5e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = htob(PA_Level, 1);
 800a5ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5f0:	1dba      	adds	r2, r7, #6
 800a5f2:	7812      	ldrb	r2, [r2, #0]
 800a5f4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a5f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800a600:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a604:	2218      	movs	r2, #24
 800a606:	2100      	movs	r1, #0
 800a608:	4618      	mov	r0, r3
 800a60a:	f000 fb21 	bl	800ac50 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a60e:	233f      	movs	r3, #63	; 0x3f
 800a610:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800a614:	230f      	movs	r3, #15
 800a616:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a61a:	f107 0310 	add.w	r3, r7, #16
 800a61e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a622:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a626:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a62a:	f107 030f 	add.w	r3, r7, #15
 800a62e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a632:	2301      	movs	r3, #1
 800a634:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800a638:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a63c:	2100      	movs	r1, #0
 800a63e:	4618      	mov	r0, r3
 800a640:	f000 f9ca 	bl	800a9d8 <hci_send_req>
 800a644:	4603      	mov	r3, r0
 800a646:	2b00      	cmp	r3, #0
 800a648:	da01      	bge.n	800a64e <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 800a64a:	23ff      	movs	r3, #255	; 0xff
 800a64c:	e009      	b.n	800a662 <aci_hal_set_tx_power_level+0xb2>
  if (status) 
 800a64e:	f107 030f 	add.w	r3, r7, #15
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d003      	beq.n	800a660 <aci_hal_set_tx_power_level+0xb0>
  {
    return status;
 800a658:	f107 030f 	add.w	r3, r7, #15
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	e000      	b.n	800a662 <aci_hal_set_tx_power_level+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy((void *) Link_Connection_Handle, (const void *) resp.Link_Connection_Handle, 16);
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask(uint16_t Radio_Activity_Mask)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b0cc      	sub	sp, #304	; 0x130
 800a670:	af00      	add	r7, sp, #0
 800a672:	4602      	mov	r2, r0
 800a674:	1dbb      	adds	r3, r7, #6
 800a676:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800a678:	f107 0310 	add.w	r3, r7, #16
 800a67c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a680:	f107 030f 	add.w	r3, r7, #15
 800a684:	2200      	movs	r2, #0
 800a686:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a688:	2300      	movs	r3, #0
 800a68a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = htob(Radio_Activity_Mask, 2);
 800a68e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a692:	1dba      	adds	r2, r7, #6
 800a694:	8812      	ldrh	r2, [r2, #0]
 800a696:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a698:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a69c:	3302      	adds	r3, #2
 800a69e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800a6a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a6a6:	2218      	movs	r2, #24
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f000 fad0 	bl	800ac50 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a6b0:	233f      	movs	r3, #63	; 0x3f
 800a6b2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800a6b6:	2318      	movs	r3, #24
 800a6b8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a6bc:	f107 0310 	add.w	r3, r7, #16
 800a6c0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a6c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a6c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a6cc:	f107 030f 	add.w	r3, r7, #15
 800a6d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800a6da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a6de:	2100      	movs	r1, #0
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f000 f979 	bl	800a9d8 <hci_send_req>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	da01      	bge.n	800a6f0 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 800a6ec:	23ff      	movs	r3, #255	; 0xff
 800a6ee:	e009      	b.n	800a704 <aci_hal_set_radio_activity_mask+0x98>
  if (status) 
 800a6f0:	f107 030f 	add.w	r3, r7, #15
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d003      	beq.n	800a702 <aci_hal_set_radio_activity_mask+0x96>
  {
    return status;
 800a6fa:	f107 030f 	add.w	r3, r7, #15
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	e000      	b.n	800a704 <aci_hal_set_radio_activity_mask+0x98>
  }
  return BLE_STATUS_SUCCESS;
 800a702:	2300      	movs	r3, #0
}
 800a704:	4618      	mov	r0, r3
 800a706:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <hci_reset>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_reset(void)
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b088      	sub	sp, #32
 800a712:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a714:	2300      	movs	r3, #0
 800a716:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800a718:	f107 0308 	add.w	r3, r7, #8
 800a71c:	2218      	movs	r2, #24
 800a71e:	2100      	movs	r1, #0
 800a720:	4618      	mov	r0, r3
 800a722:	f000 fa95 	bl	800ac50 <Osal_MemSet>
  rq.ogf = 0x03;
 800a726:	2303      	movs	r3, #3
 800a728:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800a72a:	2303      	movs	r3, #3
 800a72c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a72e:	1dfb      	adds	r3, r7, #7
 800a730:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a732:	2301      	movs	r3, #1
 800a734:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800a736:	f107 0308 	add.w	r3, r7, #8
 800a73a:	2100      	movs	r1, #0
 800a73c:	4618      	mov	r0, r3
 800a73e:	f000 f94b 	bl	800a9d8 <hci_send_req>
 800a742:	4603      	mov	r3, r0
 800a744:	2b00      	cmp	r3, #0
 800a746:	da01      	bge.n	800a74c <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a748:	23ff      	movs	r3, #255	; 0xff
 800a74a:	e005      	b.n	800a758 <hci_reset+0x4a>
  if (status) 
 800a74c:	79fb      	ldrb	r3, [r7, #7]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d001      	beq.n	800a756 <hci_reset+0x48>
  {
    return status;
 800a752:	79fb      	ldrb	r3, [r7, #7]
 800a754:	e000      	b.n	800a758 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800a756:	2300      	movs	r3, #0
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3720      	adds	r7, #32
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy(uint16_t Connection_Handle,
                           uint8_t *TX_PHY,
                           uint8_t *RX_PHY)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b0ce      	sub	sp, #312	; 0x138
 800a764:	af00      	add	r7, sp, #0
 800a766:	f107 0308 	add.w	r3, r7, #8
 800a76a:	6019      	str	r1, [r3, #0]
 800a76c:	1d3b      	adds	r3, r7, #4
 800a76e:	601a      	str	r2, [r3, #0]
 800a770:	f107 030e 	add.w	r3, r7, #14
 800a774:	4602      	mov	r2, r0
 800a776:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800a778:	f107 0318 	add.w	r3, r7, #24
 800a77c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800a780:	f107 0310 	add.w	r3, r7, #16
 800a784:	2205      	movs	r2, #5
 800a786:	2100      	movs	r1, #0
 800a788:	4618      	mov	r0, r3
 800a78a:	f000 fa61 	bl	800ac50 <Osal_MemSet>
  int index_input = 0;
 800a78e:	2300      	movs	r3, #0
 800a790:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800a794:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a798:	f107 020e 	add.w	r2, r7, #14
 800a79c:	8812      	ldrh	r2, [r2, #0]
 800a79e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a7a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a7a4:	3302      	adds	r3, #2
 800a7a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet(&rq, 0, sizeof(rq));
 800a7aa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a7ae:	2218      	movs	r2, #24
 800a7b0:	2100      	movs	r1, #0
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f000 fa4c 	bl	800ac50 <Osal_MemSet>
  rq.ogf = 0x08;
 800a7b8:	2308      	movs	r3, #8
 800a7ba:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800a7be:	2330      	movs	r3, #48	; 0x30
 800a7c0:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800a7c4:	f107 0318 	add.w	r3, r7, #24
 800a7c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800a7cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a7d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800a7d4:	f107 0310 	add.w	r3, r7, #16
 800a7d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800a7dc:	2305      	movs	r3, #5
 800a7de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800a7e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a7e6:	2100      	movs	r1, #0
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f000 f8f5 	bl	800a9d8 <hci_send_req>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	da01      	bge.n	800a7f8 <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 800a7f4:	23ff      	movs	r3, #255	; 0xff
 800a7f6:	e016      	b.n	800a826 <hci_le_read_phy+0xc6>
  if (resp.Status) 
 800a7f8:	f107 0310 	add.w	r3, r7, #16
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d003      	beq.n	800a80a <hci_le_read_phy+0xaa>
  {
    return resp.Status;
 800a802:	f107 0310 	add.w	r3, r7, #16
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	e00d      	b.n	800a826 <hci_le_read_phy+0xc6>
  }
  *TX_PHY = btoh(resp.TX_PHY, 1);
 800a80a:	f107 0310 	add.w	r3, r7, #16
 800a80e:	78da      	ldrb	r2, [r3, #3]
 800a810:	f107 0308 	add.w	r3, r7, #8
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	701a      	strb	r2, [r3, #0]
  *RX_PHY = btoh(resp.RX_PHY, 1);
 800a818:	f107 0310 	add.w	r3, r7, #16
 800a81c:	791a      	ldrb	r2, [r3, #4]
 800a81e:	1d3b      	adds	r3, r7, #4
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a824:	2300      	movs	r3, #0
}
 800a826:	4618      	mov	r0, r3
 800a828:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy(uint8_t ALL_PHYS,
                                  uint8_t TX_PHYS,
                                  uint8_t RX_PHYS)
{
 800a830:	b590      	push	{r4, r7, lr}
 800a832:	b0cd      	sub	sp, #308	; 0x134
 800a834:	af00      	add	r7, sp, #0
 800a836:	4604      	mov	r4, r0
 800a838:	4608      	mov	r0, r1
 800a83a:	4611      	mov	r1, r2
 800a83c:	1dfb      	adds	r3, r7, #7
 800a83e:	4622      	mov	r2, r4
 800a840:	701a      	strb	r2, [r3, #0]
 800a842:	1dbb      	adds	r3, r7, #6
 800a844:	4602      	mov	r2, r0
 800a846:	701a      	strb	r2, [r3, #0]
 800a848:	1d7b      	adds	r3, r7, #5
 800a84a:	460a      	mov	r2, r1
 800a84c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800a84e:	f107 0310 	add.w	r3, r7, #16
 800a852:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a856:	f107 030f 	add.w	r3, r7, #15
 800a85a:	2200      	movs	r2, #0
 800a85c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a85e:	2300      	movs	r3, #0
 800a860:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = htob(ALL_PHYS, 1);
 800a864:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a868:	1dfa      	adds	r2, r7, #7
 800a86a:	7812      	ldrb	r2, [r2, #0]
 800a86c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a86e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a872:	3301      	adds	r3, #1
 800a874:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = htob(TX_PHYS, 1);
 800a878:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a87c:	1dba      	adds	r2, r7, #6
 800a87e:	7812      	ldrb	r2, [r2, #0]
 800a880:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a882:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a886:	3301      	adds	r3, #1
 800a888:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = htob(RX_PHYS, 1);
 800a88c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a890:	1d7a      	adds	r2, r7, #5
 800a892:	7812      	ldrb	r2, [r2, #0]
 800a894:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a896:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a89a:	3301      	adds	r3, #1
 800a89c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800a8a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a8a4:	2218      	movs	r2, #24
 800a8a6:	2100      	movs	r1, #0
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f000 f9d1 	bl	800ac50 <Osal_MemSet>
  rq.ogf = 0x08;
 800a8ae:	2308      	movs	r3, #8
 800a8b0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800a8b4:	2331      	movs	r3, #49	; 0x31
 800a8b6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a8ba:	f107 0310 	add.w	r3, r7, #16
 800a8be:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a8c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a8c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a8ca:	f107 030f 	add.w	r3, r7, #15
 800a8ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800a8d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a8dc:	2100      	movs	r1, #0
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f000 f87a 	bl	800a9d8 <hci_send_req>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	da01      	bge.n	800a8ee <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 800a8ea:	23ff      	movs	r3, #255	; 0xff
 800a8ec:	e009      	b.n	800a902 <hci_le_set_default_phy+0xd2>
  if (status) 
 800a8ee:	f107 030f 	add.w	r3, r7, #15
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d003      	beq.n	800a900 <hci_le_set_default_phy+0xd0>
  {
    return status;
 800a8f8:	f107 030f 	add.w	r3, r7, #15
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	e000      	b.n	800a902 <hci_le_set_default_phy+0xd2>
  }
  return BLE_STATUS_SUCCESS;
 800a900:	2300      	movs	r3, #0
}
 800a902:	4618      	mov	r0, r3
 800a904:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd90      	pop	{r4, r7, pc}

0800a90c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	4a08      	ldr	r2, [pc, #32]	; (800a93c <hci_init+0x30>)
 800a91c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800a91e:	4a08      	ldr	r2, [pc, #32]	; (800a940 <hci_init+0x34>)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800a924:	4806      	ldr	r0, [pc, #24]	; (800a940 <hci_init+0x34>)
 800a926:	f000 f96f 	bl	800ac08 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4618      	mov	r0, r3
 800a930:	f000 f8d0 	bl	800aad4 <TlInit>

  return;
 800a934:	bf00      	nop
}
 800a936:	3708      	adds	r7, #8
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	200006c4 	.word	0x200006c4
 800a940:	2000069c 	.word	0x2000069c

0800a944 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a94a:	4820      	ldr	r0, [pc, #128]	; (800a9cc <hci_user_evt_proc+0x88>)
 800a94c:	f000 fc34 	bl	800b1b8 <LST_is_empty>
 800a950:	4603      	mov	r3, r0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d128      	bne.n	800a9a8 <hci_user_evt_proc+0x64>
 800a956:	4b1e      	ldr	r3, [pc, #120]	; (800a9d0 <hci_user_evt_proc+0x8c>)
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d024      	beq.n	800a9a8 <hci_user_evt_proc+0x64>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a95e:	f107 030c 	add.w	r3, r7, #12
 800a962:	4619      	mov	r1, r3
 800a964:	4819      	ldr	r0, [pc, #100]	; (800a9cc <hci_user_evt_proc+0x88>)
 800a966:	f000 fcae 	bl	800b2c6 <LST_remove_head>

    UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a96a:	4b19      	ldr	r3, [pc, #100]	; (800a9d0 <hci_user_evt_proc+0x8c>)
 800a96c:	2201      	movs	r2, #1
 800a96e:	701a      	strb	r2, [r3, #0]

    if (hciContext.UserEvtRx != NULL)
 800a970:	4b18      	ldr	r3, [pc, #96]	; (800a9d4 <hci_user_evt_proc+0x90>)
 800a972:	69db      	ldr	r3, [r3, #28]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d009      	beq.n	800a98c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	60bb      	str	r3, [r7, #8]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a97c:	4b15      	ldr	r3, [pc, #84]	; (800a9d4 <hci_user_evt_proc+0x90>)
 800a97e:	69db      	ldr	r3, [r3, #28]
 800a980:	1d3a      	adds	r2, r7, #4
 800a982:	4610      	mov	r0, r2
 800a984:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800a986:	793a      	ldrb	r2, [r7, #4]
 800a988:	4b11      	ldr	r3, [pc, #68]	; (800a9d0 <hci_user_evt_proc+0x8c>)
 800a98a:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800a98c:	4b10      	ldr	r3, [pc, #64]	; (800a9d0 <hci_user_evt_proc+0x8c>)
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d004      	beq.n	800a99e <hci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	4618      	mov	r0, r3
 800a998:	f000 ff0c 	bl	800b7b4 <TL_MM_EvtDone>
 800a99c:	e004      	b.n	800a9a8 <hci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	480a      	ldr	r0, [pc, #40]	; (800a9cc <hci_user_evt_proc+0x88>)
 800a9a4:	f000 fc28 	bl	800b1f8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a9a8:	4808      	ldr	r0, [pc, #32]	; (800a9cc <hci_user_evt_proc+0x88>)
 800a9aa:	f000 fc05 	bl	800b1b8 <LST_is_empty>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d107      	bne.n	800a9c4 <hci_user_evt_proc+0x80>
 800a9b4:	4b06      	ldr	r3, [pc, #24]	; (800a9d0 <hci_user_evt_proc+0x8c>)
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d003      	beq.n	800a9c4 <hci_user_evt_proc+0x80>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800a9bc:	4803      	ldr	r0, [pc, #12]	; (800a9cc <hci_user_evt_proc+0x88>)
 800a9be:	f001 fa8e 	bl	800bede <hci_notify_asynch_evt>
  }


  return;
 800a9c2:	bf00      	nop
 800a9c4:	bf00      	nop
}
 800a9c6:	3710      	adds	r7, #16
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}
 800a9cc:	200000fc 	.word	0x200000fc
 800a9d0:	20000108 	.word	0x20000108
 800a9d4:	2000069c 	.word	0x2000069c

0800a9d8 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b088      	sub	sp, #32
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	f000 f8cb 	bl	800ab80 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	885b      	ldrh	r3, [r3, #2]
 800a9f2:	b21b      	sxth	r3, r3
 800a9f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a9f8:	b21a      	sxth	r2, r3
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	881b      	ldrh	r3, [r3, #0]
 800a9fe:	029b      	lsls	r3, r3, #10
 800aa00:	b21b      	sxth	r3, r3
 800aa02:	4313      	orrs	r3, r2
 800aa04:	b21b      	sxth	r3, r3
 800aa06:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	68db      	ldr	r3, [r3, #12]
 800aa0c:	b2d9      	uxtb	r1, r3
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	689a      	ldr	r2, [r3, #8]
 800aa12:	8bbb      	ldrh	r3, [r7, #28]
 800aa14:	4618      	mov	r0, r3
 800aa16:	f000 f88d 	bl	800ab34 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800aa1a:	e04e      	b.n	800aaba <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800aa1c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800aa20:	f001 fa74 	bl	800bf0c <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800aa24:	e043      	b.n	800aaae <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800aa26:	f107 030c 	add.w	r3, r7, #12
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	4828      	ldr	r0, [pc, #160]	; (800aad0 <hci_send_req+0xf8>)
 800aa2e:	f000 fc4a 	bl	800b2c6 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	7a5b      	ldrb	r3, [r3, #9]
 800aa36:	2b0f      	cmp	r3, #15
 800aa38:	d114      	bne.n	800aa64 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	330b      	adds	r3, #11
 800aa3e:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	885b      	ldrh	r3, [r3, #2]
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	8bba      	ldrh	r2, [r7, #28]
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d104      	bne.n	800aa56 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	691b      	ldr	r3, [r3, #16]
 800aa50:	693a      	ldr	r2, [r7, #16]
 800aa52:	7812      	ldrb	r2, [r2, #0]
 800aa54:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	785b      	ldrb	r3, [r3, #1]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d027      	beq.n	800aaae <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	77fb      	strb	r3, [r7, #31]
 800aa62:	e024      	b.n	800aaae <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	330b      	adds	r3, #11
 800aa68:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800aa6a:	69bb      	ldr	r3, [r7, #24]
 800aa6c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	8bba      	ldrh	r2, [r7, #28]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d114      	bne.n	800aaa2 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	7a9b      	ldrb	r3, [r3, #10]
 800aa7c:	3b03      	subs	r3, #3
 800aa7e:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	695a      	ldr	r2, [r3, #20]
 800aa84:	7dfb      	ldrb	r3, [r7, #23]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	bfa8      	it	ge
 800aa8a:	461a      	movge	r2, r3
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6918      	ldr	r0, [r3, #16]
 800aa94:	69bb      	ldr	r3, [r7, #24]
 800aa96:	1cd9      	adds	r1, r3, #3
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	695b      	ldr	r3, [r3, #20]
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	f001 fd7b 	bl	800c598 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800aaa2:	69bb      	ldr	r3, [r7, #24]
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d001      	beq.n	800aaae <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800aaae:	4808      	ldr	r0, [pc, #32]	; (800aad0 <hci_send_req+0xf8>)
 800aab0:	f000 fb82 	bl	800b1b8 <LST_is_empty>
 800aab4:	4603      	mov	r3, r0
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d0b5      	beq.n	800aa26 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800aaba:	7ffb      	ldrb	r3, [r7, #31]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d0ad      	beq.n	800aa1c <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800aac0:	2001      	movs	r0, #1
 800aac2:	f000 f85d 	bl	800ab80 <NotifyCmdStatus>

  return 0;
 800aac6:	2300      	movs	r3, #0
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3720      	adds	r7, #32
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	200006bc 	.word	0x200006bc

0800aad4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b086      	sub	sp, #24
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800aadc:	480f      	ldr	r0, [pc, #60]	; (800ab1c <TlInit+0x48>)
 800aade:	f000 fb5b 	bl	800b198 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800aae2:	4a0f      	ldr	r2, [pc, #60]	; (800ab20 <TlInit+0x4c>)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800aae8:	480e      	ldr	r0, [pc, #56]	; (800ab24 <TlInit+0x50>)
 800aaea:	f000 fb55 	bl	800b198 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800aaee:	4b0e      	ldr	r3, [pc, #56]	; (800ab28 <TlInit+0x54>)
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800aaf4:	4b0d      	ldr	r3, [pc, #52]	; (800ab2c <TlInit+0x58>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d00a      	beq.n	800ab12 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800ab00:	4b0b      	ldr	r3, [pc, #44]	; (800ab30 <TlInit+0x5c>)
 800ab02:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800ab04:	4b09      	ldr	r3, [pc, #36]	; (800ab2c <TlInit+0x58>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f107 0208 	add.w	r2, r7, #8
 800ab0c:	4610      	mov	r0, r2
 800ab0e:	4798      	blx	r3
  }

  return;
 800ab10:	bf00      	nop
 800ab12:	bf00      	nop
}
 800ab14:	3718      	adds	r7, #24
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	200006bc 	.word	0x200006bc
 800ab20:	20000104 	.word	0x20000104
 800ab24:	200000fc 	.word	0x200000fc
 800ab28:	20000108 	.word	0x20000108
 800ab2c:	2000069c 	.word	0x2000069c
 800ab30:	0800abc1 	.word	0x0800abc1

0800ab34 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b082      	sub	sp, #8
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	603a      	str	r2, [r7, #0]
 800ab3e:	80fb      	strh	r3, [r7, #6]
 800ab40:	460b      	mov	r3, r1
 800ab42:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800ab44:	4b0c      	ldr	r3, [pc, #48]	; (800ab78 <SendCmd+0x44>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	88fa      	ldrh	r2, [r7, #6]
 800ab4a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800ab4e:	4b0a      	ldr	r3, [pc, #40]	; (800ab78 <SendCmd+0x44>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	797a      	ldrb	r2, [r7, #5]
 800ab54:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800ab56:	4b08      	ldr	r3, [pc, #32]	; (800ab78 <SendCmd+0x44>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	330c      	adds	r3, #12
 800ab5c:	797a      	ldrb	r2, [r7, #5]
 800ab5e:	6839      	ldr	r1, [r7, #0]
 800ab60:	4618      	mov	r0, r3
 800ab62:	f001 fd19 	bl	800c598 <memcpy>

  hciContext.io.Send(0,0);
 800ab66:	4b05      	ldr	r3, [pc, #20]	; (800ab7c <SendCmd+0x48>)
 800ab68:	691b      	ldr	r3, [r3, #16]
 800ab6a:	2100      	movs	r1, #0
 800ab6c:	2000      	movs	r0, #0
 800ab6e:	4798      	blx	r3

  return;
 800ab70:	bf00      	nop
}
 800ab72:	3708      	adds	r7, #8
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}
 800ab78:	20000104 	.word	0x20000104
 800ab7c:	2000069c 	.word	0x2000069c

0800ab80 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b082      	sub	sp, #8
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	4603      	mov	r3, r0
 800ab88:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800ab8a:	79fb      	ldrb	r3, [r7, #7]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d108      	bne.n	800aba2 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800ab90:	4b0a      	ldr	r3, [pc, #40]	; (800abbc <NotifyCmdStatus+0x3c>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d00d      	beq.n	800abb4 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800ab98:	4b08      	ldr	r3, [pc, #32]	; (800abbc <NotifyCmdStatus+0x3c>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	2000      	movs	r0, #0
 800ab9e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800aba0:	e008      	b.n	800abb4 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800aba2:	4b06      	ldr	r3, [pc, #24]	; (800abbc <NotifyCmdStatus+0x3c>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d004      	beq.n	800abb4 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800abaa:	4b04      	ldr	r3, [pc, #16]	; (800abbc <NotifyCmdStatus+0x3c>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2001      	movs	r0, #1
 800abb0:	4798      	blx	r3
  return;
 800abb2:	bf00      	nop
 800abb4:	bf00      	nop
}
 800abb6:	3708      	adds	r7, #8
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}
 800abbc:	200006c4 	.word	0x200006c4

0800abc0 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	7a5b      	ldrb	r3, [r3, #9]
 800abcc:	2b0f      	cmp	r3, #15
 800abce:	d003      	beq.n	800abd8 <TlEvtReceived+0x18>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	7a5b      	ldrb	r3, [r3, #9]
 800abd4:	2b0e      	cmp	r3, #14
 800abd6:	d107      	bne.n	800abe8 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800abd8:	6879      	ldr	r1, [r7, #4]
 800abda:	4809      	ldr	r0, [pc, #36]	; (800ac00 <TlEvtReceived+0x40>)
 800abdc:	f000 fb30 	bl	800b240 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800abe0:	2000      	movs	r0, #0
 800abe2:	f001 f988 	bl	800bef6 <hci_cmd_resp_release>
 800abe6:	e006      	b.n	800abf6 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800abe8:	6879      	ldr	r1, [r7, #4]
 800abea:	4806      	ldr	r0, [pc, #24]	; (800ac04 <TlEvtReceived+0x44>)
 800abec:	f000 fb28 	bl	800b240 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800abf0:	4804      	ldr	r0, [pc, #16]	; (800ac04 <TlEvtReceived+0x44>)
 800abf2:	f001 f974 	bl	800bede <hci_notify_asynch_evt>
  }

  return;
 800abf6:	bf00      	nop
}
 800abf8:	3708      	adds	r7, #8
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
 800abfe:	bf00      	nop
 800ac00:	200006bc 	.word	0x200006bc
 800ac04:	200000fc 	.word	0x200000fc

0800ac08 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	4a05      	ldr	r2, [pc, #20]	; (800ac28 <hci_register_io_bus+0x20>)
 800ac14:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	4a04      	ldr	r2, [pc, #16]	; (800ac2c <hci_register_io_bus+0x24>)
 800ac1a:	611a      	str	r2, [r3, #16]

  return;
 800ac1c:	bf00      	nop
}
 800ac1e:	370c      	adds	r7, #12
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr
 800ac28:	0800b58d 	.word	0x0800b58d
 800ac2c:	0800b5f5 	.word	0x0800b5f5

0800ac30 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	60f8      	str	r0, [r7, #12]
 800ac38:	60b9      	str	r1, [r7, #8]
 800ac3a:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	68b9      	ldr	r1, [r7, #8]
 800ac40:	68f8      	ldr	r0, [r7, #12]
 800ac42:	f001 fca9 	bl	800c598 <memcpy>
 800ac46:	4603      	mov	r3, r0
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3710      	adds	r7, #16
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	60f8      	str	r0, [r7, #12]
 800ac58:	60b9      	str	r1, [r7, #8]
 800ac5a:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800ac5c:	687a      	ldr	r2, [r7, #4]
 800ac5e:	68b9      	ldr	r1, [r7, #8]
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	f001 fca4 	bl	800c5ae <memset>
 800ac66:	4603      	mov	r3, r0
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3710      	adds	r7, #16
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800ac70:	b480      	push	{r7}
 800ac72:	b085      	sub	sp, #20
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	4603      	mov	r3, r0
 800ac78:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800ac7a:	4b0f      	ldr	r3, [pc, #60]	; (800acb8 <OTP_Read+0x48>)
 800ac7c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ac7e:	e002      	b.n	800ac86 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	3b08      	subs	r3, #8
 800ac84:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	3307      	adds	r3, #7
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	79fa      	ldrb	r2, [r7, #7]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d003      	beq.n	800ac9a <OTP_Read+0x2a>
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	4a09      	ldr	r2, [pc, #36]	; (800acbc <OTP_Read+0x4c>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d1f2      	bne.n	800ac80 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	3307      	adds	r3, #7
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	79fa      	ldrb	r2, [r7, #7]
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d001      	beq.n	800acaa <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800aca6:	2300      	movs	r3, #0
 800aca8:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800acaa:	68fb      	ldr	r3, [r7, #12]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3714      	adds	r7, #20
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr
 800acb8:	1fff73f8 	.word	0x1fff73f8
 800acbc:	1fff7000 	.word	0x1fff7000

0800acc0 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b08a      	sub	sp, #40	; 0x28
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800acc8:	2300      	movs	r3, #0
 800acca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	3301      	adds	r3, #1
 800acd2:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800acd4:	6a3b      	ldr	r3, [r7, #32]
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	2bff      	cmp	r3, #255	; 0xff
 800acda:	d000      	beq.n	800acde <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800acdc:	e04a      	b.n	800ad74 <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800acde:	6a3b      	ldr	r3, [r7, #32]
 800ace0:	3302      	adds	r3, #2
 800ace2:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	881b      	ldrh	r3, [r3, #0]
 800ace8:	b29b      	uxth	r3, r3
 800acea:	461a      	mov	r2, r3
 800acec:	f640 4301 	movw	r3, #3073	; 0xc01
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d000      	beq.n	800acf6 <PeerToPeer_Event_Handler+0x36>
          break;
 800acf4:	e03d      	b.n	800ad72 <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 800acf6:	69fb      	ldr	r3, [r7, #28]
 800acf8:	3302      	adds	r3, #2
 800acfa:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800acfc:	69bb      	ldr	r3, [r7, #24]
 800acfe:	885b      	ldrh	r3, [r3, #2]
 800ad00:	b29b      	uxth	r3, r3
 800ad02:	461a      	mov	r2, r3
 800ad04:	4b1e      	ldr	r3, [pc, #120]	; (800ad80 <PeerToPeer_Event_Handler+0xc0>)
 800ad06:	889b      	ldrh	r3, [r3, #4]
 800ad08:	3302      	adds	r3, #2
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d118      	bne.n	800ad40 <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800ad14:	69bb      	ldr	r3, [r7, #24]
 800ad16:	7a1b      	ldrb	r3, [r3, #8]
 800ad18:	f003 0301 	and.w	r3, r3, #1
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d007      	beq.n	800ad30 <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800ad20:	2300      	movs	r3, #0
 800ad22:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800ad24:	f107 0308 	add.w	r3, r7, #8
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f001 f933 	bl	800bf94 <P2PS_STM_App_Notification>
        break;
 800ad2e:	e01f      	b.n	800ad70 <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800ad30:	2301      	movs	r3, #1
 800ad32:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800ad34:	f107 0308 	add.w	r3, r7, #8
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f001 f92b 	bl	800bf94 <P2PS_STM_App_Notification>
        break;
 800ad3e:	e017      	b.n	800ad70 <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800ad40:	69bb      	ldr	r3, [r7, #24]
 800ad42:	885b      	ldrh	r3, [r3, #2]
 800ad44:	b29b      	uxth	r3, r3
 800ad46:	461a      	mov	r2, r3
 800ad48:	4b0d      	ldr	r3, [pc, #52]	; (800ad80 <PeerToPeer_Event_Handler+0xc0>)
 800ad4a:	885b      	ldrh	r3, [r3, #2]
 800ad4c:	3301      	adds	r3, #1
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d10e      	bne.n	800ad70 <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800ad52:	2303      	movs	r3, #3
 800ad54:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800ad56:	69bb      	ldr	r3, [r7, #24]
 800ad58:	88db      	ldrh	r3, [r3, #6]
 800ad5a:	b29b      	uxth	r3, r3
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800ad60:	69bb      	ldr	r3, [r7, #24]
 800ad62:	3308      	adds	r3, #8
 800ad64:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 800ad66:	f107 0308 	add.w	r3, r7, #8
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f001 f912 	bl	800bf94 <P2PS_STM_App_Notification>
        break;
 800ad70:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800ad72:	bf00      	nop
  }

  return(return_value);
 800ad74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3728      	adds	r7, #40	; 0x28
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}
 800ad80:	2000010c 	.word	0x2000010c

0800ad84 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b08a      	sub	sp, #40	; 0x28
 800ad88:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800ad8a:	484a      	ldr	r0, [pc, #296]	; (800aeb4 <P2PS_STM_Init+0x130>)
 800ad8c:	f000 fb56 	bl	800b43c <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800ad90:	238f      	movs	r3, #143	; 0x8f
 800ad92:	703b      	strb	r3, [r7, #0]
 800ad94:	23e5      	movs	r3, #229	; 0xe5
 800ad96:	707b      	strb	r3, [r7, #1]
 800ad98:	23b3      	movs	r3, #179	; 0xb3
 800ad9a:	70bb      	strb	r3, [r7, #2]
 800ad9c:	23d5      	movs	r3, #213	; 0xd5
 800ad9e:	70fb      	strb	r3, [r7, #3]
 800ada0:	232e      	movs	r3, #46	; 0x2e
 800ada2:	713b      	strb	r3, [r7, #4]
 800ada4:	237f      	movs	r3, #127	; 0x7f
 800ada6:	717b      	strb	r3, [r7, #5]
 800ada8:	234a      	movs	r3, #74	; 0x4a
 800adaa:	71bb      	strb	r3, [r7, #6]
 800adac:	2398      	movs	r3, #152	; 0x98
 800adae:	71fb      	strb	r3, [r7, #7]
 800adb0:	232a      	movs	r3, #42	; 0x2a
 800adb2:	723b      	strb	r3, [r7, #8]
 800adb4:	2348      	movs	r3, #72	; 0x48
 800adb6:	727b      	strb	r3, [r7, #9]
 800adb8:	237a      	movs	r3, #122	; 0x7a
 800adba:	72bb      	strb	r3, [r7, #10]
 800adbc:	23cc      	movs	r3, #204	; 0xcc
 800adbe:	72fb      	strb	r3, [r7, #11]
 800adc0:	2340      	movs	r3, #64	; 0x40
 800adc2:	733b      	strb	r3, [r7, #12]
 800adc4:	23fe      	movs	r3, #254	; 0xfe
 800adc6:	737b      	strb	r3, [r7, #13]
 800adc8:	2300      	movs	r3, #0
 800adca:	73bb      	strb	r3, [r7, #14]
 800adcc:	2300      	movs	r3, #0
 800adce:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800add0:	4639      	mov	r1, r7
 800add2:	4b39      	ldr	r3, [pc, #228]	; (800aeb8 <P2PS_STM_Init+0x134>)
 800add4:	9300      	str	r3, [sp, #0]
 800add6:	2308      	movs	r3, #8
 800add8:	2201      	movs	r2, #1
 800adda:	2002      	movs	r0, #2
 800addc:	f7ff f8fc 	bl	8009fd8 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800ade0:	2319      	movs	r3, #25
 800ade2:	703b      	strb	r3, [r7, #0]
 800ade4:	23ed      	movs	r3, #237	; 0xed
 800ade6:	707b      	strb	r3, [r7, #1]
 800ade8:	2382      	movs	r3, #130	; 0x82
 800adea:	70bb      	strb	r3, [r7, #2]
 800adec:	23ae      	movs	r3, #174	; 0xae
 800adee:	70fb      	strb	r3, [r7, #3]
 800adf0:	23ed      	movs	r3, #237	; 0xed
 800adf2:	713b      	strb	r3, [r7, #4]
 800adf4:	2321      	movs	r3, #33	; 0x21
 800adf6:	717b      	strb	r3, [r7, #5]
 800adf8:	234c      	movs	r3, #76	; 0x4c
 800adfa:	71bb      	strb	r3, [r7, #6]
 800adfc:	239d      	movs	r3, #157	; 0x9d
 800adfe:	71fb      	strb	r3, [r7, #7]
 800ae00:	2341      	movs	r3, #65	; 0x41
 800ae02:	723b      	strb	r3, [r7, #8]
 800ae04:	2345      	movs	r3, #69	; 0x45
 800ae06:	727b      	strb	r3, [r7, #9]
 800ae08:	2322      	movs	r3, #34	; 0x22
 800ae0a:	72bb      	strb	r3, [r7, #10]
 800ae0c:	238e      	movs	r3, #142	; 0x8e
 800ae0e:	72fb      	strb	r3, [r7, #11]
 800ae10:	2341      	movs	r3, #65	; 0x41
 800ae12:	733b      	strb	r3, [r7, #12]
 800ae14:	23fe      	movs	r3, #254	; 0xfe
 800ae16:	737b      	strb	r3, [r7, #13]
 800ae18:	2300      	movs	r3, #0
 800ae1a:	73bb      	strb	r3, [r7, #14]
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800ae20:	4b25      	ldr	r3, [pc, #148]	; (800aeb8 <P2PS_STM_Init+0x134>)
 800ae22:	8818      	ldrh	r0, [r3, #0]
 800ae24:	463a      	mov	r2, r7
 800ae26:	4b25      	ldr	r3, [pc, #148]	; (800aebc <P2PS_STM_Init+0x138>)
 800ae28:	9305      	str	r3, [sp, #20]
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	9304      	str	r3, [sp, #16]
 800ae2e:	230a      	movs	r3, #10
 800ae30:	9303      	str	r3, [sp, #12]
 800ae32:	2301      	movs	r3, #1
 800ae34:	9302      	str	r3, [sp, #8]
 800ae36:	2300      	movs	r3, #0
 800ae38:	9301      	str	r3, [sp, #4]
 800ae3a:	2306      	movs	r3, #6
 800ae3c:	9300      	str	r3, [sp, #0]
 800ae3e:	237b      	movs	r3, #123	; 0x7b
 800ae40:	2102      	movs	r1, #2
 800ae42:	f7ff f978 	bl	800a136 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800ae46:	2319      	movs	r3, #25
 800ae48:	703b      	strb	r3, [r7, #0]
 800ae4a:	23ed      	movs	r3, #237	; 0xed
 800ae4c:	707b      	strb	r3, [r7, #1]
 800ae4e:	2382      	movs	r3, #130	; 0x82
 800ae50:	70bb      	strb	r3, [r7, #2]
 800ae52:	23ae      	movs	r3, #174	; 0xae
 800ae54:	70fb      	strb	r3, [r7, #3]
 800ae56:	23ed      	movs	r3, #237	; 0xed
 800ae58:	713b      	strb	r3, [r7, #4]
 800ae5a:	2321      	movs	r3, #33	; 0x21
 800ae5c:	717b      	strb	r3, [r7, #5]
 800ae5e:	234c      	movs	r3, #76	; 0x4c
 800ae60:	71bb      	strb	r3, [r7, #6]
 800ae62:	239d      	movs	r3, #157	; 0x9d
 800ae64:	71fb      	strb	r3, [r7, #7]
 800ae66:	2341      	movs	r3, #65	; 0x41
 800ae68:	723b      	strb	r3, [r7, #8]
 800ae6a:	2345      	movs	r3, #69	; 0x45
 800ae6c:	727b      	strb	r3, [r7, #9]
 800ae6e:	2322      	movs	r3, #34	; 0x22
 800ae70:	72bb      	strb	r3, [r7, #10]
 800ae72:	238e      	movs	r3, #142	; 0x8e
 800ae74:	72fb      	strb	r3, [r7, #11]
 800ae76:	2342      	movs	r3, #66	; 0x42
 800ae78:	733b      	strb	r3, [r7, #12]
 800ae7a:	23fe      	movs	r3, #254	; 0xfe
 800ae7c:	737b      	strb	r3, [r7, #13]
 800ae7e:	2300      	movs	r3, #0
 800ae80:	73bb      	strb	r3, [r7, #14]
 800ae82:	2300      	movs	r3, #0
 800ae84:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800ae86:	4b0c      	ldr	r3, [pc, #48]	; (800aeb8 <P2PS_STM_Init+0x134>)
 800ae88:	8818      	ldrh	r0, [r3, #0]
 800ae8a:	463a      	mov	r2, r7
 800ae8c:	4b0c      	ldr	r3, [pc, #48]	; (800aec0 <P2PS_STM_Init+0x13c>)
 800ae8e:	9305      	str	r3, [sp, #20]
 800ae90:	2301      	movs	r3, #1
 800ae92:	9304      	str	r3, [sp, #16]
 800ae94:	230a      	movs	r3, #10
 800ae96:	9303      	str	r3, [sp, #12]
 800ae98:	2301      	movs	r3, #1
 800ae9a:	9302      	str	r3, [sp, #8]
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	9301      	str	r3, [sp, #4]
 800aea0:	2310      	movs	r3, #16
 800aea2:	9300      	str	r3, [sp, #0]
 800aea4:	237b      	movs	r3, #123	; 0x7b
 800aea6:	2102      	movs	r1, #2
 800aea8:	f7ff f945 	bl	800a136 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 800aeac:	bf00      	nop
}
 800aeae:	3710      	adds	r7, #16
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}
 800aeb4:	0800acc1 	.word	0x0800acc1
 800aeb8:	2000010c 	.word	0x2000010c
 800aebc:	2000010e 	.word	0x2000010e
 800aec0:	20000110 	.word	0x20000110

0800aec4 <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b086      	sub	sp, #24
 800aec8:	af02      	add	r7, sp, #8
 800aeca:	4603      	mov	r3, r0
 800aecc:	6039      	str	r1, [r7, #0]
 800aece:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800aed0:	2342      	movs	r3, #66	; 0x42
 800aed2:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800aed4:	88fb      	ldrh	r3, [r7, #6]
 800aed6:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d000      	beq.n	800aee0 <P2PS_STM_App_Update_Char+0x1c>
							 (uint8_t *)  pPayload);

      break;

    default:
      break;
 800aede:	e00c      	b.n	800aefa <P2PS_STM_App_Update_Char+0x36>
		result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800aee0:	4b08      	ldr	r3, [pc, #32]	; (800af04 <P2PS_STM_App_Update_Char+0x40>)
 800aee2:	8818      	ldrh	r0, [r3, #0]
 800aee4:	4b07      	ldr	r3, [pc, #28]	; (800af04 <P2PS_STM_App_Update_Char+0x40>)
 800aee6:	8899      	ldrh	r1, [r3, #4]
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	9300      	str	r3, [sp, #0]
 800aeec:	237b      	movs	r3, #123	; 0x7b
 800aeee:	2200      	movs	r2, #0
 800aef0:	f7ff fa0b 	bl	800a30a <aci_gatt_update_char_value>
 800aef4:	4603      	mov	r3, r0
 800aef6:	73fb      	strb	r3, [r7, #15]
      break;
 800aef8:	bf00      	nop
  }

  return result;
 800aefa:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 800aefc:	4618      	mov	r0, r3
 800aefe:	3710      	adds	r7, #16
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}
 800af04:	2000010c 	.word	0x2000010c

0800af08 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b088      	sub	sp, #32
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800af10:	f107 030c 	add.w	r3, r7, #12
 800af14:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800af1c:	69fb      	ldr	r3, [r7, #28]
 800af1e:	2121      	movs	r1, #33	; 0x21
 800af20:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800af24:	f000 f86e 	bl	800b004 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800af28:	69fb      	ldr	r3, [r7, #28]
 800af2a:	330b      	adds	r3, #11
 800af2c:	78db      	ldrb	r3, [r3, #3]
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3720      	adds	r7, #32
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
	...

0800af38 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	4a08      	ldr	r2, [pc, #32]	; (800af68 <shci_init+0x30>)
 800af48:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800af4a:	4a08      	ldr	r2, [pc, #32]	; (800af6c <shci_init+0x34>)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800af50:	4806      	ldr	r0, [pc, #24]	; (800af6c <shci_init+0x34>)
 800af52:	f000 f90d 	bl	800b170 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4618      	mov	r0, r3
 800af5c:	f000 f890 	bl	800b080 <TlInit>

  return;
 800af60:	bf00      	nop
}
 800af62:	3708      	adds	r7, #8
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}
 800af68:	200006e8 	.word	0x200006e8
 800af6c:	200006c8 	.word	0x200006c8

0800af70 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800af76:	4820      	ldr	r0, [pc, #128]	; (800aff8 <shci_user_evt_proc+0x88>)
 800af78:	f000 f91e 	bl	800b1b8 <LST_is_empty>
 800af7c:	4603      	mov	r3, r0
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d128      	bne.n	800afd4 <shci_user_evt_proc+0x64>
 800af82:	4b1e      	ldr	r3, [pc, #120]	; (800affc <shci_user_evt_proc+0x8c>)
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d024      	beq.n	800afd4 <shci_user_evt_proc+0x64>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800af8a:	f107 030c 	add.w	r3, r7, #12
 800af8e:	4619      	mov	r1, r3
 800af90:	4819      	ldr	r0, [pc, #100]	; (800aff8 <shci_user_evt_proc+0x88>)
 800af92:	f000 f998 	bl	800b2c6 <LST_remove_head>

    SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800af96:	4b19      	ldr	r3, [pc, #100]	; (800affc <shci_user_evt_proc+0x8c>)
 800af98:	2201      	movs	r2, #1
 800af9a:	701a      	strb	r2, [r3, #0]

    if (shciContext.UserEvtRx != NULL)
 800af9c:	4b18      	ldr	r3, [pc, #96]	; (800b000 <shci_user_evt_proc+0x90>)
 800af9e:	69db      	ldr	r3, [r3, #28]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d009      	beq.n	800afb8 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	60bb      	str	r3, [r7, #8]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800afa8:	4b15      	ldr	r3, [pc, #84]	; (800b000 <shci_user_evt_proc+0x90>)
 800afaa:	69db      	ldr	r3, [r3, #28]
 800afac:	1d3a      	adds	r2, r7, #4
 800afae:	4610      	mov	r0, r2
 800afb0:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800afb2:	793a      	ldrb	r2, [r7, #4]
 800afb4:	4b11      	ldr	r3, [pc, #68]	; (800affc <shci_user_evt_proc+0x8c>)
 800afb6:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800afb8:	4b10      	ldr	r3, [pc, #64]	; (800affc <shci_user_evt_proc+0x8c>)
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d004      	beq.n	800afca <shci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	4618      	mov	r0, r3
 800afc4:	f000 fbf6 	bl	800b7b4 <TL_MM_EvtDone>
 800afc8:	e004      	b.n	800afd4 <shci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	4619      	mov	r1, r3
 800afce:	480a      	ldr	r0, [pc, #40]	; (800aff8 <shci_user_evt_proc+0x88>)
 800afd0:	f000 f912 	bl	800b1f8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800afd4:	4808      	ldr	r0, [pc, #32]	; (800aff8 <shci_user_evt_proc+0x88>)
 800afd6:	f000 f8ef 	bl	800b1b8 <LST_is_empty>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d107      	bne.n	800aff0 <shci_user_evt_proc+0x80>
 800afe0:	4b06      	ldr	r3, [pc, #24]	; (800affc <shci_user_evt_proc+0x8c>)
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d003      	beq.n	800aff0 <shci_user_evt_proc+0x80>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800afe8:	4803      	ldr	r0, [pc, #12]	; (800aff8 <shci_user_evt_proc+0x88>)
 800afea:	f7f6 f8f3 	bl	80011d4 <shci_notify_asynch_evt>
  }


  return;
 800afee:	bf00      	nop
 800aff0:	bf00      	nop
}
 800aff2:	3710      	adds	r7, #16
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}
 800aff8:	20000138 	.word	0x20000138
 800affc:	20000148 	.word	0x20000148
 800b000:	200006c8 	.word	0x200006c8

0800b004 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	60ba      	str	r2, [r7, #8]
 800b00c:	607b      	str	r3, [r7, #4]
 800b00e:	4603      	mov	r3, r0
 800b010:	81fb      	strh	r3, [r7, #14]
 800b012:	460b      	mov	r3, r1
 800b014:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800b016:	2000      	movs	r0, #0
 800b018:	f000 f864 	bl	800b0e4 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800b01c:	4b16      	ldr	r3, [pc, #88]	; (800b078 <shci_send+0x74>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	89fa      	ldrh	r2, [r7, #14]
 800b022:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800b026:	4b14      	ldr	r3, [pc, #80]	; (800b078 <shci_send+0x74>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	7b7a      	ldrb	r2, [r7, #13]
 800b02c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800b02e:	4b12      	ldr	r3, [pc, #72]	; (800b078 <shci_send+0x74>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	330c      	adds	r3, #12
 800b034:	7b7a      	ldrb	r2, [r7, #13]
 800b036:	68b9      	ldr	r1, [r7, #8]
 800b038:	4618      	mov	r0, r3
 800b03a:	f001 faad 	bl	800c598 <memcpy>

  shciContext.io.Send(0,0);
 800b03e:	4b0f      	ldr	r3, [pc, #60]	; (800b07c <shci_send+0x78>)
 800b040:	691b      	ldr	r3, [r3, #16]
 800b042:	2100      	movs	r1, #0
 800b044:	2000      	movs	r0, #0
 800b046:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800b048:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800b04c:	f7f6 f8da 	bl	8001204 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f103 0008 	add.w	r0, r3, #8
 800b056:	4b08      	ldr	r3, [pc, #32]	; (800b078 <shci_send+0x74>)
 800b058:	6819      	ldr	r1, [r3, #0]
 800b05a:	4b07      	ldr	r3, [pc, #28]	; (800b078 <shci_send+0x74>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	789b      	ldrb	r3, [r3, #2]
 800b060:	3303      	adds	r3, #3
 800b062:	461a      	mov	r2, r3
 800b064:	f001 fa98 	bl	800c598 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b068:	2001      	movs	r0, #1
 800b06a:	f000 f83b 	bl	800b0e4 <Cmd_SetStatus>

  return;
 800b06e:	bf00      	nop
}
 800b070:	3710      	adds	r7, #16
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop
 800b078:	20000144 	.word	0x20000144
 800b07c:	200006c8 	.word	0x200006c8

0800b080 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b086      	sub	sp, #24
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800b088:	4a10      	ldr	r2, [pc, #64]	; (800b0cc <TlInit+0x4c>)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800b08e:	4810      	ldr	r0, [pc, #64]	; (800b0d0 <TlInit+0x50>)
 800b090:	f000 f882 	bl	800b198 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b094:	2001      	movs	r0, #1
 800b096:	f000 f825 	bl	800b0e4 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b09a:	4b0e      	ldr	r3, [pc, #56]	; (800b0d4 <TlInit+0x54>)
 800b09c:	2201      	movs	r2, #1
 800b09e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800b0a0:	4b0d      	ldr	r3, [pc, #52]	; (800b0d8 <TlInit+0x58>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d00c      	beq.n	800b0c2 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800b0ac:	4b0b      	ldr	r3, [pc, #44]	; (800b0dc <TlInit+0x5c>)
 800b0ae:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800b0b0:	4b0b      	ldr	r3, [pc, #44]	; (800b0e0 <TlInit+0x60>)
 800b0b2:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800b0b4:	4b08      	ldr	r3, [pc, #32]	; (800b0d8 <TlInit+0x58>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f107 020c 	add.w	r2, r7, #12
 800b0bc:	4610      	mov	r0, r2
 800b0be:	4798      	blx	r3
  }

  return;
 800b0c0:	bf00      	nop
 800b0c2:	bf00      	nop
}
 800b0c4:	3718      	adds	r7, #24
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}
 800b0ca:	bf00      	nop
 800b0cc:	20000144 	.word	0x20000144
 800b0d0:	20000138 	.word	0x20000138
 800b0d4:	20000148 	.word	0x20000148
 800b0d8:	200006c8 	.word	0x200006c8
 800b0dc:	0800b135 	.word	0x0800b135
 800b0e0:	0800b14d 	.word	0x0800b14d

0800b0e4 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800b0ee:	79fb      	ldrb	r3, [r7, #7]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d10b      	bne.n	800b10c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800b0f4:	4b0d      	ldr	r3, [pc, #52]	; (800b12c <Cmd_SetStatus+0x48>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d003      	beq.n	800b104 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800b0fc:	4b0b      	ldr	r3, [pc, #44]	; (800b12c <Cmd_SetStatus+0x48>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	2000      	movs	r0, #0
 800b102:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800b104:	4b0a      	ldr	r3, [pc, #40]	; (800b130 <Cmd_SetStatus+0x4c>)
 800b106:	2200      	movs	r2, #0
 800b108:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800b10a:	e00b      	b.n	800b124 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800b10c:	4b08      	ldr	r3, [pc, #32]	; (800b130 <Cmd_SetStatus+0x4c>)
 800b10e:	2201      	movs	r2, #1
 800b110:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800b112:	4b06      	ldr	r3, [pc, #24]	; (800b12c <Cmd_SetStatus+0x48>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d004      	beq.n	800b124 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800b11a:	4b04      	ldr	r3, [pc, #16]	; (800b12c <Cmd_SetStatus+0x48>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	2001      	movs	r0, #1
 800b120:	4798      	blx	r3
  return;
 800b122:	bf00      	nop
 800b124:	bf00      	nop
}
 800b126:	3708      	adds	r7, #8
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}
 800b12c:	200006e8 	.word	0x200006e8
 800b130:	20000140 	.word	0x20000140

0800b134 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800b13c:	2000      	movs	r0, #0
 800b13e:	f7f6 f856 	bl	80011ee <shci_cmd_resp_release>

  return;
 800b142:	bf00      	nop
}
 800b144:	3708      	adds	r7, #8
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
	...

0800b14c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800b154:	6879      	ldr	r1, [r7, #4]
 800b156:	4805      	ldr	r0, [pc, #20]	; (800b16c <TlUserEvtReceived+0x20>)
 800b158:	f000 f872 	bl	800b240 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b15c:	4803      	ldr	r0, [pc, #12]	; (800b16c <TlUserEvtReceived+0x20>)
 800b15e:	f7f6 f839 	bl	80011d4 <shci_notify_asynch_evt>

  return;
 800b162:	bf00      	nop
}
 800b164:	3708      	adds	r7, #8
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	20000138 	.word	0x20000138

0800b170 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	4a05      	ldr	r2, [pc, #20]	; (800b190 <shci_register_io_bus+0x20>)
 800b17c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	4a04      	ldr	r2, [pc, #16]	; (800b194 <shci_register_io_bus+0x24>)
 800b182:	611a      	str	r2, [r3, #16]

  return;
 800b184:	bf00      	nop
}
 800b186:	370c      	adds	r7, #12
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr
 800b190:	0800b669 	.word	0x0800b669
 800b194:	0800b6bd 	.word	0x0800b6bd

0800b198 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	687a      	ldr	r2, [r7, #4]
 800b1aa:	605a      	str	r2, [r3, #4]
}
 800b1ac:	bf00      	nop
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b087      	sub	sp, #28
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1c0:	f3ef 8310 	mrs	r3, PRIMASK
 800b1c4:	60fb      	str	r3, [r7, #12]
  return(result);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b1c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b1ca:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d102      	bne.n	800b1dc <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	75fb      	strb	r3, [r7, #23]
 800b1da:	e001      	b.n	800b1e0 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	75fb      	strb	r3, [r7, #23]
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800b1ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	371c      	adds	r7, #28
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr

0800b1f8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b087      	sub	sp, #28
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b202:	f3ef 8310 	mrs	r3, PRIMASK
 800b206:	60fb      	str	r3, [r7, #12]
  return(result);
 800b208:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b20a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b20c:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681a      	ldr	r2, [r3, #0]
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	687a      	ldr	r2, [r7, #4]
 800b21a:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	683a      	ldr	r2, [r7, #0]
 800b220:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	683a      	ldr	r2, [r7, #0]
 800b228:	605a      	str	r2, [r3, #4]
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b234:	bf00      	nop
 800b236:	371c      	adds	r7, #28
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr

0800b240 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800b240:	b480      	push	{r7}
 800b242:	b087      	sub	sp, #28
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b24a:	f3ef 8310 	mrs	r3, PRIMASK
 800b24e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b250:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b252:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b254:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	687a      	ldr	r2, [r7, #4]
 800b25a:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	685a      	ldr	r2, [r3, #4]
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	683a      	ldr	r2, [r7, #0]
 800b268:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	683a      	ldr	r2, [r7, #0]
 800b270:	601a      	str	r2, [r3, #0]
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b27c:	bf00      	nop
 800b27e:	371c      	adds	r7, #28
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr

0800b288 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800b288:	b480      	push	{r7}
 800b28a:	b087      	sub	sp, #28
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b290:	f3ef 8310 	mrs	r3, PRIMASK
 800b294:	60fb      	str	r3, [r7, #12]
  return(result);
 800b296:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b298:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b29a:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	6812      	ldr	r2, [r2, #0]
 800b2a4:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	6852      	ldr	r2, [r2, #4]
 800b2ae:	605a      	str	r2, [r3, #4]
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b2ba:	bf00      	nop
 800b2bc:	371c      	adds	r7, #28
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr

0800b2c6 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800b2c6:	b580      	push	{r7, lr}
 800b2c8:	b086      	sub	sp, #24
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
 800b2ce:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2d0:	f3ef 8310 	mrs	r3, PRIMASK
 800b2d4:	60fb      	str	r3, [r7, #12]
  return(result);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b2d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b2da:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681a      	ldr	r2, [r3, #0]
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7ff ffcd 	bl	800b288 <LST_remove_node>
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b2f8:	bf00      	nop
 800b2fa:	3718      	adds	r7, #24
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 800b300:	b480      	push	{r7}
 800b302:	af00      	add	r7, sp, #0
  return;
 800b304:	bf00      	nop
}
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr

0800b30e <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800b30e:	b480      	push	{r7}
 800b310:	af00      	add	r7, sp, #0
  return;
 800b312:	bf00      	nop
}
 800b314:	46bd      	mov	sp, r7
 800b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31a:	4770      	bx	lr

0800b31c <DIS_Init>:
__weak void DIS_Init( void )
{
 800b31c:	b480      	push	{r7}
 800b31e:	af00      	add	r7, sp, #0
  return;
 800b320:	bf00      	nop
}
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr

0800b32a <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 800b32a:	b480      	push	{r7}
 800b32c:	af00      	add	r7, sp, #0
  return;
 800b32e:	bf00      	nop
}
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr

0800b338 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 800b338:	b480      	push	{r7}
 800b33a:	af00      	add	r7, sp, #0
  return;
 800b33c:	bf00      	nop
}
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr

0800b346 <HRS_Init>:
__weak void HRS_Init( void )
{
 800b346:	b480      	push	{r7}
 800b348:	af00      	add	r7, sp, #0
  return;
 800b34a:	bf00      	nop
}
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr

0800b354 <HTS_Init>:
__weak void HTS_Init( void )
{
 800b354:	b480      	push	{r7}
 800b356:	af00      	add	r7, sp, #0
  return;
 800b358:	bf00      	nop
}
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr

0800b362 <IAS_Init>:
__weak void IAS_Init( void )
{
 800b362:	b480      	push	{r7}
 800b364:	af00      	add	r7, sp, #0
  return;
 800b366:	bf00      	nop
}
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr

0800b370 <LLS_Init>:
__weak void LLS_Init( void )
{
 800b370:	b480      	push	{r7}
 800b372:	af00      	add	r7, sp, #0
  return;
 800b374:	bf00      	nop
}
 800b376:	46bd      	mov	sp, r7
 800b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37c:	4770      	bx	lr

0800b37e <TPS_Init>:
__weak void TPS_Init( void )
{
 800b37e:	b480      	push	{r7}
 800b380:	af00      	add	r7, sp, #0
  return;
 800b382:	bf00      	nop
}
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800b38c:	b480      	push	{r7}
 800b38e:	af00      	add	r7, sp, #0
  return;
 800b390:	bf00      	nop
}
 800b392:	46bd      	mov	sp, r7
 800b394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b398:	4770      	bx	lr

0800b39a <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800b39a:	b480      	push	{r7}
 800b39c:	af00      	add	r7, sp, #0
  return;
 800b39e:	bf00      	nop
}
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <MESH_Init>:
__weak void MESH_Init( void )
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	af00      	add	r7, sp, #0
  return;
 800b3ac:	bf00      	nop
}
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr

0800b3b6 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800b3b6:	b480      	push	{r7}
 800b3b8:	af00      	add	r7, sp, #0
  return;
 800b3ba:	bf00      	nop
}
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	af00      	add	r7, sp, #0
  return;
 800b3c8:	bf00      	nop
}
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr
	...

0800b3d4 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800b3d8:	4b04      	ldr	r3, [pc, #16]	; (800b3ec <SVCCTL_Init+0x18>)
 800b3da:	2200      	movs	r2, #0
 800b3dc:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800b3de:	4b04      	ldr	r3, [pc, #16]	; (800b3f0 <SVCCTL_Init+0x1c>)
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800b3e4:	f000 f806 	bl	800b3f4 <SVCCTL_SvcInit>

  return;
 800b3e8:	bf00      	nop
}
 800b3ea:	bd80      	pop	{r7, pc}
 800b3ec:	20000114 	.word	0x20000114
 800b3f0:	20000134 	.word	0x20000134

0800b3f4 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	af00      	add	r7, sp, #0
  BLS_Init();
 800b3f8:	f7ff ff82 	bl	800b300 <BLS_Init>

  CRS_STM_Init();
 800b3fc:	f7ff ff87 	bl	800b30e <CRS_STM_Init>

  DIS_Init();
 800b400:	f7ff ff8c 	bl	800b31c <DIS_Init>

  EDS_STM_Init();
 800b404:	f7ff ff91 	bl	800b32a <EDS_STM_Init>

  HIDS_Init();
 800b408:	f7ff ff96 	bl	800b338 <HIDS_Init>

  HRS_Init();
 800b40c:	f7ff ff9b 	bl	800b346 <HRS_Init>

  HTS_Init();
 800b410:	f7ff ffa0 	bl	800b354 <HTS_Init>

  IAS_Init();
 800b414:	f7ff ffa5 	bl	800b362 <IAS_Init>

  LLS_Init();
 800b418:	f7ff ffaa 	bl	800b370 <LLS_Init>

  TPS_Init();
 800b41c:	f7ff ffaf 	bl	800b37e <TPS_Init>

  MOTENV_STM_Init();
 800b420:	f7ff ffb4 	bl	800b38c <MOTENV_STM_Init>

  P2PS_STM_Init();
 800b424:	f7ff fcae 	bl	800ad84 <P2PS_STM_Init>

  OTAS_STM_Init();
 800b428:	f7ff ffb7 	bl	800b39a <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800b42c:	f7ff ffc3 	bl	800b3b6 <BVOPUS_STM_Init>

  MESH_Init();
 800b430:	f7ff ffba 	bl	800b3a8 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800b434:	f7ff ffc6 	bl	800b3c4 <SVCCTL_InitCustomSvc>
  
  return;
 800b438:	bf00      	nop
}
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800b43c:	b480      	push	{r7}
 800b43e:	b083      	sub	sp, #12
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800b444:	4b09      	ldr	r3, [pc, #36]	; (800b46c <SVCCTL_RegisterSvcHandler+0x30>)
 800b446:	7f1b      	ldrb	r3, [r3, #28]
 800b448:	4619      	mov	r1, r3
 800b44a:	4a08      	ldr	r2, [pc, #32]	; (800b46c <SVCCTL_RegisterSvcHandler+0x30>)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800b452:	4b06      	ldr	r3, [pc, #24]	; (800b46c <SVCCTL_RegisterSvcHandler+0x30>)
 800b454:	7f1b      	ldrb	r3, [r3, #28]
 800b456:	3301      	adds	r3, #1
 800b458:	b2da      	uxtb	r2, r3
 800b45a:	4b04      	ldr	r3, [pc, #16]	; (800b46c <SVCCTL_RegisterSvcHandler+0x30>)
 800b45c:	771a      	strb	r2, [r3, #28]

  return;
 800b45e:	bf00      	nop
}
 800b460:	370c      	adds	r7, #12
 800b462:	46bd      	mov	sp, r7
 800b464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b468:	4770      	bx	lr
 800b46a:	bf00      	nop
 800b46c:	20000114 	.word	0x20000114

0800b470 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b086      	sub	sp, #24
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	3301      	adds	r3, #1
 800b47c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800b47e:	2300      	movs	r3, #0
 800b480:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	2bff      	cmp	r3, #255	; 0xff
 800b488:	d000      	beq.n	800b48c <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800b48a:	e025      	b.n	800b4d8 <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	3302      	adds	r3, #2
 800b490:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	881b      	ldrh	r3, [r3, #0]
 800b496:	b29b      	uxth	r3, r3
 800b498:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b49c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b4a0:	d000      	beq.n	800b4a4 <SVCCTL_UserEvtRx+0x34>
          break;
 800b4a2:	e018      	b.n	800b4d6 <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	757b      	strb	r3, [r7, #21]
 800b4a8:	e00d      	b.n	800b4c6 <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800b4aa:	7d7b      	ldrb	r3, [r7, #21]
 800b4ac:	4a18      	ldr	r2, [pc, #96]	; (800b510 <SVCCTL_UserEvtRx+0xa0>)
 800b4ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	4798      	blx	r3
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800b4ba:	7dfb      	ldrb	r3, [r7, #23]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d108      	bne.n	800b4d2 <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800b4c0:	7d7b      	ldrb	r3, [r7, #21]
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	757b      	strb	r3, [r7, #21]
 800b4c6:	4b12      	ldr	r3, [pc, #72]	; (800b510 <SVCCTL_UserEvtRx+0xa0>)
 800b4c8:	7f1b      	ldrb	r3, [r3, #28]
 800b4ca:	7d7a      	ldrb	r2, [r7, #21]
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d3ec      	bcc.n	800b4aa <SVCCTL_UserEvtRx+0x3a>
          break;
 800b4d0:	e000      	b.n	800b4d4 <SVCCTL_UserEvtRx+0x64>
              break;
 800b4d2:	bf00      	nop
          break;
 800b4d4:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800b4d6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800b4d8:	7dfb      	ldrb	r3, [r7, #23]
 800b4da:	2b01      	cmp	r3, #1
 800b4dc:	d009      	beq.n	800b4f2 <SVCCTL_UserEvtRx+0x82>
 800b4de:	2b02      	cmp	r3, #2
 800b4e0:	d00a      	beq.n	800b4f8 <SVCCTL_UserEvtRx+0x88>
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d10b      	bne.n	800b4fe <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f000 fa62 	bl	800b9b0 <SVCCTL_App_Notification>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	75bb      	strb	r3, [r7, #22]
      break;
 800b4f0:	e008      	b.n	800b504 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	75bb      	strb	r3, [r7, #22]
      break;
 800b4f6:	e005      	b.n	800b504 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	75bb      	strb	r3, [r7, #22]
      break;
 800b4fc:	e002      	b.n	800b504 <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800b4fe:	2301      	movs	r3, #1
 800b500:	75bb      	strb	r3, [r7, #22]
      break;
 800b502:	bf00      	nop
  }

  return (return_status);
 800b504:	7dbb      	ldrb	r3, [r7, #22]
}
 800b506:	4618      	mov	r0, r3
 800b508:	3718      	adds	r7, #24
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	bf00      	nop
 800b510:	20000114 	.word	0x20000114

0800b514 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800b514:	b580      	push	{r7, lr}
 800b516:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800b518:	f000 ff54 	bl	800c3c4 <HW_IPCC_Enable>

  return;
 800b51c:	bf00      	nop
}
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <TL_Init>:


void TL_Init( void )
{
 800b520:	b580      	push	{r7, lr}
 800b522:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800b524:	4b0f      	ldr	r3, [pc, #60]	; (800b564 <TL_Init+0x44>)
 800b526:	4a10      	ldr	r2, [pc, #64]	; (800b568 <TL_Init+0x48>)
 800b528:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800b52a:	4b0e      	ldr	r3, [pc, #56]	; (800b564 <TL_Init+0x44>)
 800b52c:	4a0f      	ldr	r2, [pc, #60]	; (800b56c <TL_Init+0x4c>)
 800b52e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800b530:	4b0c      	ldr	r3, [pc, #48]	; (800b564 <TL_Init+0x44>)
 800b532:	4a0f      	ldr	r2, [pc, #60]	; (800b570 <TL_Init+0x50>)
 800b534:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800b536:	4b0b      	ldr	r3, [pc, #44]	; (800b564 <TL_Init+0x44>)
 800b538:	4a0e      	ldr	r2, [pc, #56]	; (800b574 <TL_Init+0x54>)
 800b53a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 800b53c:	4b09      	ldr	r3, [pc, #36]	; (800b564 <TL_Init+0x44>)
 800b53e:	4a0e      	ldr	r2, [pc, #56]	; (800b578 <TL_Init+0x58>)
 800b540:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800b542:	4b08      	ldr	r3, [pc, #32]	; (800b564 <TL_Init+0x44>)
 800b544:	4a0d      	ldr	r2, [pc, #52]	; (800b57c <TL_Init+0x5c>)
 800b546:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800b548:	4b06      	ldr	r3, [pc, #24]	; (800b564 <TL_Init+0x44>)
 800b54a:	4a0d      	ldr	r2, [pc, #52]	; (800b580 <TL_Init+0x60>)
 800b54c:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800b54e:	4b05      	ldr	r3, [pc, #20]	; (800b564 <TL_Init+0x44>)
 800b550:	4a0c      	ldr	r2, [pc, #48]	; (800b584 <TL_Init+0x64>)
 800b552:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800b554:	4b03      	ldr	r3, [pc, #12]	; (800b564 <TL_Init+0x44>)
 800b556:	4a0c      	ldr	r2, [pc, #48]	; (800b588 <TL_Init+0x68>)
 800b558:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800b55a:	f000 ff3b 	bl	800c3d4 <HW_IPCC_Init>

  return;
 800b55e:	bf00      	nop
}
 800b560:	bd80      	pop	{r7, pc}
 800b562:	bf00      	nop
 800b564:	20030000 	.word	0x20030000
 800b568:	20030024 	.word	0x20030024
 800b56c:	20030044 	.word	0x20030044
 800b570:	20030054 	.word	0x20030054
 800b574:	20030060 	.word	0x20030060
 800b578:	20030068 	.word	0x20030068
 800b57c:	20030070 	.word	0x20030070
 800b580:	2003008c 	.word	0x2003008c
 800b584:	20030090 	.word	0x20030090
 800b588:	2003009c 	.word	0x2003009c

0800b58c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b084      	sub	sp, #16
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800b598:	4811      	ldr	r0, [pc, #68]	; (800b5e0 <TL_BLE_Init+0x54>)
 800b59a:	f7ff fdfd 	bl	800b198 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800b59e:	4b11      	ldr	r3, [pc, #68]	; (800b5e4 <TL_BLE_Init+0x58>)
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	689a      	ldr	r2, [r3, #8]
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	68da      	ldr	r2, [r3, #12]
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	4a0c      	ldr	r2, [pc, #48]	; (800b5e8 <TL_BLE_Init+0x5c>)
 800b5b8:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	4a08      	ldr	r2, [pc, #32]	; (800b5e0 <TL_BLE_Init+0x54>)
 800b5be:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800b5c0:	f000 ff1e 	bl	800c400 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4a08      	ldr	r2, [pc, #32]	; (800b5ec <TL_BLE_Init+0x60>)
 800b5ca:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	4a07      	ldr	r2, [pc, #28]	; (800b5f0 <TL_BLE_Init+0x64>)
 800b5d2:	6013      	str	r3, [r2, #0]

  return 0;
 800b5d4:	2300      	movs	r3, #0
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3710      	adds	r7, #16
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	bf00      	nop
 800b5e0:	20030a34 	.word	0x20030a34
 800b5e4:	20030000 	.word	0x20030000
 800b5e8:	20030a24 	.word	0x20030a24
 800b5ec:	200006f4 	.word	0x200006f4
 800b5f0:	200006f8 	.word	0x200006f8

0800b5f4 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800b600:	4b05      	ldr	r3, [pc, #20]	; (800b618 <TL_BLE_SendCmd+0x24>)
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	2201      	movs	r2, #1
 800b608:	721a      	strb	r2, [r3, #8]

  HW_IPCC_BLE_SendCmd();
 800b60a:	f000 ff03 	bl	800c414 <HW_IPCC_BLE_SendCmd>

  return 0;
 800b60e:	2300      	movs	r3, #0
}
 800b610:	4618      	mov	r0, r3
 800b612:	3708      	adds	r7, #8
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	20030000 	.word	0x20030000

0800b61c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800b622:	e009      	b.n	800b638 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800b624:	1d3b      	adds	r3, r7, #4
 800b626:	4619      	mov	r1, r3
 800b628:	4808      	ldr	r0, [pc, #32]	; (800b64c <HW_IPCC_BLE_RxEvtNot+0x30>)
 800b62a:	f7ff fe4c 	bl	800b2c6 <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 800b62e:	4b08      	ldr	r3, [pc, #32]	; (800b650 <HW_IPCC_BLE_RxEvtNot+0x34>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	4610      	mov	r0, r2
 800b636:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800b638:	4804      	ldr	r0, [pc, #16]	; (800b64c <HW_IPCC_BLE_RxEvtNot+0x30>)
 800b63a:	f7ff fdbd 	bl	800b1b8 <LST_is_empty>
 800b63e:	4603      	mov	r3, r0
 800b640:	2b00      	cmp	r3, #0
 800b642:	d0ef      	beq.n	800b624 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800b644:	bf00      	nop
}
 800b646:	3708      	adds	r7, #8
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}
 800b64c:	20030a34 	.word	0x20030a34
 800b650:	200006f4 	.word	0x200006f4

0800b654 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800b658:	4b02      	ldr	r3, [pc, #8]	; (800b664 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4798      	blx	r3

  return;
 800b65e:	bf00      	nop
}
 800b660:	bd80      	pop	{r7, pc}
 800b662:	bf00      	nop
 800b664:	200006f8 	.word	0x200006f8

0800b668 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800b674:	480d      	ldr	r0, [pc, #52]	; (800b6ac <TL_SYS_Init+0x44>)
 800b676:	f7ff fd8f 	bl	800b198 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800b67a:	4b0d      	ldr	r3, [pc, #52]	; (800b6b0 <TL_SYS_Init+0x48>)
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	689a      	ldr	r2, [r3, #8]
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	4a08      	ldr	r2, [pc, #32]	; (800b6ac <TL_SYS_Init+0x44>)
 800b68c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800b68e:	f000 fee3 	bl	800c458 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4a07      	ldr	r2, [pc, #28]	; (800b6b4 <TL_SYS_Init+0x4c>)
 800b698:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	4a06      	ldr	r2, [pc, #24]	; (800b6b8 <TL_SYS_Init+0x50>)
 800b6a0:	6013      	str	r3, [r2, #0]

  return 0;
 800b6a2:	2300      	movs	r3, #0
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3710      	adds	r7, #16
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}
 800b6ac:	20030a3c 	.word	0x20030a3c
 800b6b0:	20030000 	.word	0x20030000
 800b6b4:	200006fc 	.word	0x200006fc
 800b6b8:	20000700 	.word	0x20000700

0800b6bc <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b082      	sub	sp, #8
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800b6c8:	4b05      	ldr	r3, [pc, #20]	; (800b6e0 <TL_SYS_SendCmd+0x24>)
 800b6ca:	68db      	ldr	r3, [r3, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	2210      	movs	r2, #16
 800b6d0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 800b6d2:	f000 fecb 	bl	800c46c <HW_IPCC_SYS_SendCmd>

  return 0;
 800b6d6:	2300      	movs	r3, #0
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3708      	adds	r7, #8
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}
 800b6e0:	20030000 	.word	0x20030000

0800b6e4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b6e8:	4b04      	ldr	r3, [pc, #16]	; (800b6fc <HW_IPCC_SYS_CmdEvtNot+0x18>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4a04      	ldr	r2, [pc, #16]	; (800b700 <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 800b6ee:	68d2      	ldr	r2, [r2, #12]
 800b6f0:	6812      	ldr	r2, [r2, #0]
 800b6f2:	4610      	mov	r0, r2
 800b6f4:	4798      	blx	r3

  return;
 800b6f6:	bf00      	nop
}
 800b6f8:	bd80      	pop	{r7, pc}
 800b6fa:	bf00      	nop
 800b6fc:	200006fc 	.word	0x200006fc
 800b700:	20030000 	.word	0x20030000

0800b704 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b082      	sub	sp, #8
 800b708:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b70a:	e009      	b.n	800b720 <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800b70c:	1d3b      	adds	r3, r7, #4
 800b70e:	4619      	mov	r1, r3
 800b710:	4808      	ldr	r0, [pc, #32]	; (800b734 <HW_IPCC_SYS_EvtNot+0x30>)
 800b712:	f7ff fdd8 	bl	800b2c6 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 800b716:	4b08      	ldr	r3, [pc, #32]	; (800b738 <HW_IPCC_SYS_EvtNot+0x34>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	687a      	ldr	r2, [r7, #4]
 800b71c:	4610      	mov	r0, r2
 800b71e:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b720:	4804      	ldr	r0, [pc, #16]	; (800b734 <HW_IPCC_SYS_EvtNot+0x30>)
 800b722:	f7ff fd49 	bl	800b1b8 <LST_is_empty>
 800b726:	4603      	mov	r3, r0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d0ef      	beq.n	800b70c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800b72c:	bf00      	nop
}
 800b72e:	3708      	adds	r7, #8
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}
 800b734:	20030a3c 	.word	0x20030a3c
 800b738:	20000700 	.word	0x20000700

0800b73c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b082      	sub	sp, #8
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800b744:	4817      	ldr	r0, [pc, #92]	; (800b7a4 <TL_MM_Init+0x68>)
 800b746:	f7ff fd27 	bl	800b198 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800b74a:	4817      	ldr	r0, [pc, #92]	; (800b7a8 <TL_MM_Init+0x6c>)
 800b74c:	f7ff fd24 	bl	800b198 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800b750:	4b16      	ldr	r3, [pc, #88]	; (800b7ac <TL_MM_Init+0x70>)
 800b752:	691b      	ldr	r3, [r3, #16]
 800b754:	4a16      	ldr	r2, [pc, #88]	; (800b7b0 <TL_MM_Init+0x74>)
 800b756:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800b758:	4b15      	ldr	r3, [pc, #84]	; (800b7b0 <TL_MM_Init+0x74>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	687a      	ldr	r2, [r7, #4]
 800b75e:	6892      	ldr	r2, [r2, #8]
 800b760:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800b762:	4b13      	ldr	r3, [pc, #76]	; (800b7b0 <TL_MM_Init+0x74>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	68d2      	ldr	r2, [r2, #12]
 800b76a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800b76c:	4b10      	ldr	r3, [pc, #64]	; (800b7b0 <TL_MM_Init+0x74>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	4a0c      	ldr	r2, [pc, #48]	; (800b7a4 <TL_MM_Init+0x68>)
 800b772:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800b774:	4b0e      	ldr	r3, [pc, #56]	; (800b7b0 <TL_MM_Init+0x74>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	6812      	ldr	r2, [r2, #0]
 800b77c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800b77e:	4b0c      	ldr	r3, [pc, #48]	; (800b7b0 <TL_MM_Init+0x74>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	687a      	ldr	r2, [r7, #4]
 800b784:	6852      	ldr	r2, [r2, #4]
 800b786:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800b788:	4b09      	ldr	r3, [pc, #36]	; (800b7b0 <TL_MM_Init+0x74>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	6912      	ldr	r2, [r2, #16]
 800b790:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800b792:	4b07      	ldr	r3, [pc, #28]	; (800b7b0 <TL_MM_Init+0x74>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	6952      	ldr	r2, [r2, #20]
 800b79a:	619a      	str	r2, [r3, #24]

  return;
 800b79c:	bf00      	nop
}
 800b79e:	3708      	adds	r7, #8
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	200300a8 	.word	0x200300a8
 800b7a8:	200006ec 	.word	0x200006ec
 800b7ac:	20030000 	.word	0x20030000
 800b7b0:	20000704 	.word	0x20000704

0800b7b4 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800b7bc:	6879      	ldr	r1, [r7, #4]
 800b7be:	4805      	ldr	r0, [pc, #20]	; (800b7d4 <TL_MM_EvtDone+0x20>)
 800b7c0:	f7ff fd3e 	bl	800b240 <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800b7c4:	4804      	ldr	r0, [pc, #16]	; (800b7d8 <TL_MM_EvtDone+0x24>)
 800b7c6:	f000 fe77 	bl	800c4b8 <HW_IPCC_MM_SendFreeBuf>

  return;
 800b7ca:	bf00      	nop
}
 800b7cc:	3708      	adds	r7, #8
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
 800b7d2:	bf00      	nop
 800b7d4:	200006ec 	.word	0x200006ec
 800b7d8:	0800b7dd 	.word	0x0800b7dd

0800b7dc <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b082      	sub	sp, #8
 800b7e0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b7e2:	e00c      	b.n	800b7fe <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800b7e4:	1d3b      	adds	r3, r7, #4
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	480a      	ldr	r0, [pc, #40]	; (800b814 <SendFreeBuf+0x38>)
 800b7ea:	f7ff fd6c 	bl	800b2c6 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800b7ee:	4b0a      	ldr	r3, [pc, #40]	; (800b818 <SendFreeBuf+0x3c>)
 800b7f0:	691b      	ldr	r3, [r3, #16]
 800b7f2:	691b      	ldr	r3, [r3, #16]
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	4611      	mov	r1, r2
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f7ff fd21 	bl	800b240 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b7fe:	4805      	ldr	r0, [pc, #20]	; (800b814 <SendFreeBuf+0x38>)
 800b800:	f7ff fcda 	bl	800b1b8 <LST_is_empty>
 800b804:	4603      	mov	r3, r0
 800b806:	2b00      	cmp	r3, #0
 800b808:	d0ec      	beq.n	800b7e4 <SendFreeBuf+0x8>
  }

  return;
 800b80a:	bf00      	nop
}
 800b80c:	3708      	adds	r7, #8
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
 800b812:	bf00      	nop
 800b814:	200006ec 	.word	0x200006ec
 800b818:	20030000 	.word	0x20030000

0800b81c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800b820:	4805      	ldr	r0, [pc, #20]	; (800b838 <TL_TRACES_Init+0x1c>)
 800b822:	f7ff fcb9 	bl	800b198 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800b826:	4b05      	ldr	r3, [pc, #20]	; (800b83c <TL_TRACES_Init+0x20>)
 800b828:	695b      	ldr	r3, [r3, #20]
 800b82a:	4a03      	ldr	r2, [pc, #12]	; (800b838 <TL_TRACES_Init+0x1c>)
 800b82c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800b82e:	f000 fe79 	bl	800c524 <HW_IPCC_TRACES_Init>

  return;
 800b832:	bf00      	nop
}
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	200300b0 	.word	0x200300b0
 800b83c:	20030000 	.word	0x20030000

0800b840 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b846:	e008      	b.n	800b85a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800b848:	1d3b      	adds	r3, r7, #4
 800b84a:	4619      	mov	r1, r3
 800b84c:	4808      	ldr	r0, [pc, #32]	; (800b870 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b84e:	f7ff fd3a 	bl	800b2c6 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	4618      	mov	r0, r3
 800b856:	f000 f80d 	bl	800b874 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b85a:	4805      	ldr	r0, [pc, #20]	; (800b870 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b85c:	f7ff fcac 	bl	800b1b8 <LST_is_empty>
 800b860:	4603      	mov	r3, r0
 800b862:	2b00      	cmp	r3, #0
 800b864:	d0f0      	beq.n	800b848 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800b866:	bf00      	nop
}
 800b868:	3708      	adds	r7, #8
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	bf00      	nop
 800b870:	200300b0 	.word	0x200300b0

0800b874 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt ){};
 800b874:	b480      	push	{r7}
 800b876:	b083      	sub	sp, #12
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	bf00      	nop
 800b87e:	370c      	adds	r7, #12
 800b880:	46bd      	mov	sp, r7
 800b882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b886:	4770      	bx	lr

0800b888 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800b888:	b480      	push	{r7}
 800b88a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800b88c:	4b03      	ldr	r3, [pc, #12]	; (800b89c <LL_FLASH_GetUDN+0x14>)
 800b88e:	681b      	ldr	r3, [r3, #0]
}
 800b890:	4618      	mov	r0, r3
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr
 800b89a:	bf00      	nop
 800b89c:	1fff7580 	.word	0x1fff7580

0800b8a0 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800b8a4:	4b03      	ldr	r3, [pc, #12]	; (800b8b4 <LL_FLASH_GetDeviceID+0x14>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	b2db      	uxtb	r3, r3
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr
 800b8b4:	1fff7584 	.word	0x1fff7584

0800b8b8 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800b8bc:	4b03      	ldr	r3, [pc, #12]	; (800b8cc <LL_FLASH_GetSTCompanyID+0x14>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	0a1b      	lsrs	r3, r3, #8
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr
 800b8cc:	1fff7584 	.word	0x1fff7584

0800b8d0 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800b8d0:	b5b0      	push	{r4, r5, r7, lr}
 800b8d2:	b08c      	sub	sp, #48	; 0x30
 800b8d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800b8d6:	4b2b      	ldr	r3, [pc, #172]	; (800b984 <APP_BLE_Init+0xb4>)
 800b8d8:	463c      	mov	r4, r7
 800b8da:	461d      	mov	r5, r3
 800b8dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b8de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b8e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b8e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b8e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b8e8:	c407      	stmia	r4!, {r0, r1, r2}
 800b8ea:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800b8ec:	f000 f928 	bl	800bb40 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800b8f0:	2101      	movs	r1, #1
 800b8f2:	2002      	movs	r0, #2
 800b8f4:	f7f7 fc68 	bl	80031c8 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800b8f8:	4a23      	ldr	r2, [pc, #140]	; (800b988 <APP_BLE_Init+0xb8>)
 800b8fa:	2100      	movs	r1, #0
 800b8fc:	2004      	movs	r0, #4
 800b8fe:	f7f7 fdcb 	bl	8003498 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 800b902:	463b      	mov	r3, r7
 800b904:	4618      	mov	r0, r3
 800b906:	f7ff faff 	bl	800af08 <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800b90a:	f000 f92f 	bl	800bb6c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800b90e:	f7ff fd61 	bl	800b3d4 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b912:	4b1e      	ldr	r3, [pc, #120]	; (800b98c <APP_BLE_Init+0xbc>)
 800b914:	2200      	movs	r2, #0
 800b916:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;  
 800b91a:	4b1c      	ldr	r3, [pc, #112]	; (800b98c <APP_BLE_Init+0xbc>)
 800b91c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b920:	84da      	strh	r2, [r3, #38]	; 0x26
  /**
   * From here, all initialization are BLE application specific
   */
    UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800b922:	4a1b      	ldr	r2, [pc, #108]	; (800b990 <APP_BLE_Init+0xc0>)
 800b924:	2100      	movs	r1, #0
 800b926:	2001      	movs	r0, #1
 800b928:	f7f7 fdb6 	bl	8003498 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)  
    manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)  
  aci_hal_set_radio_activity_mask(0x0006);
 800b92c:	2006      	movs	r0, #6
 800b92e:	f7fe fe9d 	bl	800a66c <aci_hal_set_radio_activity_mask>
  mutex = 1; 
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800b932:	f000 fb65 	bl	800c000 <P2PS_APP_Init>

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800b936:	4b17      	ldr	r3, [pc, #92]	; (800b994 <APP_BLE_Init+0xc4>)
 800b938:	2200      	movs	r2, #0
 800b93a:	4917      	ldr	r1, [pc, #92]	; (800b998 <APP_BLE_Init+0xc8>)
 800b93c:	2000      	movs	r0, #0
 800b93e:	f7f6 fa11 	bl	8001d64 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800b942:	4b16      	ldr	r3, [pc, #88]	; (800b99c <APP_BLE_Init+0xcc>)
 800b944:	2200      	movs	r2, #0
 800b946:	4916      	ldr	r1, [pc, #88]	; (800b9a0 <APP_BLE_Init+0xd0>)
 800b948:	2000      	movs	r0, #0
 800b94a:	f7f6 fa0b 	bl	8001d64 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800b94e:	4b0f      	ldr	r3, [pc, #60]	; (800b98c <APP_BLE_Init+0xbc>)
 800b950:	2200      	movs	r2, #0
 800b952:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800b956:	4b0d      	ldr	r3, [pc, #52]	; (800b98c <APP_BLE_Init+0xbc>)
 800b958:	2200      	movs	r2, #0
 800b95a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800b95e:	4b11      	ldr	r3, [pc, #68]	; (800b9a4 <APP_BLE_Init+0xd4>)
 800b960:	2280      	movs	r2, #128	; 0x80
 800b962:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800b964:	4b10      	ldr	r3, [pc, #64]	; (800b9a8 <APP_BLE_Init+0xd8>)
 800b966:	22a0      	movs	r2, #160	; 0xa0
 800b968:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 800b96a:	2001      	movs	r0, #1
 800b96c:	f000 f9d8 	bl	800bd20 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */
   HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800b970:	2201      	movs	r2, #1
 800b972:	2120      	movs	r1, #32
 800b974:	480d      	ldr	r0, [pc, #52]	; (800b9ac <APP_BLE_Init+0xdc>)
 800b976:	f7f8 fdd1 	bl	800451c <HAL_GPIO_WritePin>
/* USER CODE END APP_BLE_Init_2 */
  return;
 800b97a:	bf00      	nop
}
 800b97c:	3730      	adds	r7, #48	; 0x30
 800b97e:	46bd      	mov	sp, r7
 800b980:	bdb0      	pop	{r4, r5, r7, pc}
 800b982:	bf00      	nop
 800b984:	0800c614 	.word	0x0800c614
 800b988:	0800a945 	.word	0x0800a945
 800b98c:	2000014c 	.word	0x2000014c
 800b990:	0800be8d 	.word	0x0800be8d
 800b994:	0800bec1 	.word	0x0800bec1
 800b998:	200001dd 	.word	0x200001dd
 800b99c:	0800bed1 	.word	0x0800bed1
 800b9a0:	200001de 	.word	0x200001de
 800b9a4:	200001e0 	.word	0x200001e0
 800b9a8:	200001e2 	.word	0x200001e2
 800b9ac:	48000400 	.word	0x48000400

0800b9b0 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b08a      	sub	sp, #40	; 0x28
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete; 
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b9b8:	2342      	movs	r3, #66	; 0x42
 800b9ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800b9c4:	6a3b      	ldr	r3, [r7, #32]
 800b9c6:	781b      	ldrb	r3, [r3, #0]
 800b9c8:	2b3e      	cmp	r3, #62	; 0x3e
 800b9ca:	d02f      	beq.n	800ba2c <SVCCTL_App_Notification+0x7c>
 800b9cc:	2bff      	cmp	r3, #255	; 0xff
 800b9ce:	f000 808c 	beq.w	800baea <SVCCTL_App_Notification+0x13a>
 800b9d2:	2b05      	cmp	r3, #5
 800b9d4:	d000      	beq.n	800b9d8 <SVCCTL_App_Notification+0x28>

        default:
        /* USER CODE BEGIN ECODE_DEFAULT*/

        /* USER CODE END ECODE_DEFAULT*/
          break;
 800b9d6:	e09b      	b.n	800bb10 <SVCCTL_App_Notification+0x160>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 800b9d8:	6a3b      	ldr	r3, [r7, #32]
 800b9da:	3302      	adds	r3, #2
 800b9dc:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b9e4:	b29a      	uxth	r2, r3
 800b9e6:	4b4d      	ldr	r3, [pc, #308]	; (800bb1c <SVCCTL_App_Notification+0x16c>)
 800b9e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d106      	bne.n	800b9fc <SVCCTL_App_Notification+0x4c>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800b9ee:	4b4b      	ldr	r3, [pc, #300]	; (800bb1c <SVCCTL_App_Notification+0x16c>)
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	84da      	strh	r2, [r3, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b9f4:	4b49      	ldr	r3, [pc, #292]	; (800bb1c <SVCCTL_App_Notification+0x16c>)
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      Adv_Request(APP_BLE_FAST_ADV);
 800b9fc:	2001      	movs	r0, #1
 800b9fe:	f000 f98f 	bl	800bd20 <Adv_Request>
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800ba02:	4b47      	ldr	r3, [pc, #284]	; (800bb20 <SVCCTL_App_Notification+0x170>)
 800ba04:	2201      	movs	r2, #1
 800ba06:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800ba08:	4b44      	ldr	r3, [pc, #272]	; (800bb1c <SVCCTL_App_Notification+0x16c>)
 800ba0a:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800ba0c:	4b44      	ldr	r3, [pc, #272]	; (800bb20 <SVCCTL_App_Notification+0x170>)
 800ba0e:	805a      	strh	r2, [r3, #2]
        P2PS_APP_Notification(&handleNotification);
 800ba10:	4843      	ldr	r0, [pc, #268]	; (800bb20 <SVCCTL_App_Notification+0x170>)
 800ba12:	f000 fae1 	bl	800bfd8 <P2PS_APP_Notification>
        HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800ba16:	2200      	movs	r2, #0
 800ba18:	2101      	movs	r1, #1
 800ba1a:	4842      	ldr	r0, [pc, #264]	; (800bb24 <SVCCTL_App_Notification+0x174>)
 800ba1c:	f7f8 fd7e 	bl	800451c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800ba20:	2201      	movs	r2, #1
 800ba22:	2120      	movs	r1, #32
 800ba24:	483f      	ldr	r0, [pc, #252]	; (800bb24 <SVCCTL_App_Notification+0x174>)
 800ba26:	f7f8 fd79 	bl	800451c <HAL_GPIO_WritePin>
    break; /* EVT_DISCONN_COMPLETE */
 800ba2a:	e071      	b.n	800bb10 <SVCCTL_App_Notification+0x160>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800ba2c:	6a3b      	ldr	r3, [r7, #32]
 800ba2e:	3302      	adds	r3, #2
 800ba30:	61bb      	str	r3, [r7, #24]
      switch (meta_evt->subevent)
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	781b      	ldrb	r3, [r3, #0]
 800ba36:	2b03      	cmp	r3, #3
 800ba38:	d053      	beq.n	800bae2 <SVCCTL_App_Notification+0x132>
 800ba3a:	2b0c      	cmp	r3, #12
 800ba3c:	d002      	beq.n	800ba44 <SVCCTL_App_Notification+0x94>
 800ba3e:	2b01      	cmp	r3, #1
 800ba40:	d016      	beq.n	800ba70 <SVCCTL_App_Notification+0xc0>
          break;
 800ba42:	e051      	b.n	800bae8 <SVCCTL_App_Notification+0x138>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 800ba44:	69bb      	ldr	r3, [r7, #24]
 800ba46:	3301      	adds	r3, #1
 800ba48:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 800ba4a:	4b34      	ldr	r3, [pc, #208]	; (800bb1c <SVCCTL_App_Notification+0x16c>)
 800ba4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ba4e:	f107 020a 	add.w	r2, r7, #10
 800ba52:	f107 010b 	add.w	r1, r7, #11
 800ba56:	4618      	mov	r0, r3
 800ba58:	f7fe fe82 	bl	800a760 <hci_le_read_phy>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret == BLE_STATUS_SUCCESS)
 800ba62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d13d      	bne.n	800bae6 <SVCCTL_App_Notification+0x136>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 800ba6a:	7afb      	ldrb	r3, [r7, #11]
 800ba6c:	2b02      	cmp	r3, #2
          break;
 800ba6e:	e03a      	b.n	800bae6 <SVCCTL_App_Notification+0x136>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800ba70:	69bb      	ldr	r3, [r7, #24]
 800ba72:	3301      	adds	r3, #1
 800ba74:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800ba76:	4b29      	ldr	r3, [pc, #164]	; (800bb1c <SVCCTL_App_Notification+0x16c>)
 800ba78:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7f6 f9e7 	bl	8001e50 <HW_TS_Stop>
            if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800ba82:	4b26      	ldr	r3, [pc, #152]	; (800bb1c <SVCCTL_App_Notification+0x16c>)
 800ba84:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800ba88:	2b04      	cmp	r3, #4
 800ba8a:	d104      	bne.n	800ba96 <SVCCTL_App_Notification+0xe6>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800ba8c:	4b23      	ldr	r3, [pc, #140]	; (800bb1c <SVCCTL_App_Notification+0x16c>)
 800ba8e:	2206      	movs	r2, #6
 800ba90:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800ba94:	e003      	b.n	800ba9e <SVCCTL_App_Notification+0xee>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800ba96:	4b21      	ldr	r3, [pc, #132]	; (800bb1c <SVCCTL_App_Notification+0x16c>)
 800ba98:	2205      	movs	r2, #5
 800ba9a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                connection_complete_event->Connection_Handle;
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800baa4:	b29a      	uxth	r2, r3
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle =
 800baa6:	4b1d      	ldr	r3, [pc, #116]	; (800bb1c <SVCCTL_App_Notification+0x16c>)
 800baa8:	84da      	strh	r2, [r3, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800baaa:	4b1d      	ldr	r3, [pc, #116]	; (800bb20 <SVCCTL_App_Notification+0x170>)
 800baac:	2200      	movs	r2, #0
 800baae:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800bab0:	4b1a      	ldr	r3, [pc, #104]	; (800bb1c <SVCCTL_App_Notification+0x16c>)
 800bab2:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800bab4:	4b1a      	ldr	r3, [pc, #104]	; (800bb20 <SVCCTL_App_Notification+0x170>)
 800bab6:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 800bab8:	4819      	ldr	r0, [pc, #100]	; (800bb20 <SVCCTL_App_Notification+0x170>)
 800baba:	f000 fa8d 	bl	800bfd8 <P2PS_APP_Notification>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800babe:	2201      	movs	r2, #1
 800bac0:	2101      	movs	r1, #1
 800bac2:	4818      	ldr	r0, [pc, #96]	; (800bb24 <SVCCTL_App_Notification+0x174>)
 800bac4:	f7f8 fd2a 	bl	800451c <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800bac8:	2200      	movs	r2, #0
 800baca:	2120      	movs	r1, #32
 800bacc:	4815      	ldr	r0, [pc, #84]	; (800bb24 <SVCCTL_App_Notification+0x174>)
 800bace:	f7f8 fd25 	bl	800451c <HAL_GPIO_WritePin>
          aci_gatt_exchange_config(connection_complete_event->Connection_Handle);
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bad8:	b29b      	uxth	r3, r3
 800bada:	4618      	mov	r0, r3
 800badc:	f7fe fca3 	bl	800a426 <aci_gatt_exchange_config>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 800bae0:	e002      	b.n	800bae8 <SVCCTL_App_Notification+0x138>
          break;
 800bae2:	bf00      	nop
 800bae4:	e014      	b.n	800bb10 <SVCCTL_App_Notification+0x160>
          break;
 800bae6:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 800bae8:	e012      	b.n	800bb10 <SVCCTL_App_Notification+0x160>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800baea:	6a3b      	ldr	r3, [r7, #32]
 800baec:	3302      	adds	r3, #2
 800baee:	61fb      	str	r3, [r7, #28]
      switch (blue_evt->ecode)
 800baf0:	69fb      	ldr	r3, [r7, #28]
 800baf2:	881b      	ldrh	r3, [r3, #0]
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	f240 4207 	movw	r2, #1031	; 0x407
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d004      	beq.n	800bb08 <SVCCTL_App_Notification+0x158>
 800bafe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb02:	d003      	beq.n	800bb0c <SVCCTL_App_Notification+0x15c>
 800bb04:	2b04      	cmp	r3, #4
        break; /* RADIO_ACTIVITY_EVENT */
 800bb06:	e002      	b.n	800bb0e <SVCCTL_App_Notification+0x15e>
        break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800bb08:	bf00      	nop
 800bb0a:	e000      	b.n	800bb0e <SVCCTL_App_Notification+0x15e>
      break;
 800bb0c:	bf00      	nop
      break; /* EVT_VENDOR */
 800bb0e:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800bb10:	2301      	movs	r3, #1
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3728      	adds	r7, #40	; 0x28
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}
 800bb1a:	bf00      	nop
 800bb1c:	2000014c 	.word	0x2000014c
 800bb20:	20000c14 	.word	0x20000c14
 800bb24:	48000400 	.word	0x48000400

0800bb28 <APP_BLE_Get_Server_Connection_Status>:

APP_BLE_ConnStatus_t APP_BLE_Get_Server_Connection_Status(void)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	af00      	add	r7, sp, #0
    return BleApplicationContext.Device_Connection_Status;
 800bb2c:	4b03      	ldr	r3, [pc, #12]	; (800bb3c <APP_BLE_Get_Server_Connection_Status+0x14>)
 800bb2e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr
 800bb3c:	2000014c 	.word	0x2000014c

0800bb40 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800bb46:	4b06      	ldr	r3, [pc, #24]	; (800bb60 <Ble_Tl_Init+0x20>)
 800bb48:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800bb4a:	4b06      	ldr	r3, [pc, #24]	; (800bb64 <Ble_Tl_Init+0x24>)
 800bb4c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800bb4e:	463b      	mov	r3, r7
 800bb50:	4619      	mov	r1, r3
 800bb52:	4805      	ldr	r0, [pc, #20]	; (800bb68 <Ble_Tl_Init+0x28>)
 800bb54:	f7fe feda 	bl	800a90c <hci_init>

  return;
 800bb58:	bf00      	nop
}
 800bb5a:	3708      	adds	r7, #8
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}
 800bb60:	200300b8 	.word	0x200300b8
 800bb64:	0800bf5b 	.word	0x0800bf5b
 800bb68:	0800bf23 	.word	0x0800bf23

0800bb6c <Ble_Hci_Gap_Gatt_Init>:

 static void Ble_Hci_Gap_Gatt_Init(void){
 800bb6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb6e:	b091      	sub	sp, #68	; 0x44
 800bb70:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 800bb72:	2300      	movs	r3, #0
 800bb74:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 800bb76:	f7fe fdca 	bl	800a70e <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800bb7a:	f000 f943 	bl	800be04 <BleGetBdAddress>
 800bb7e:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800bb80:	6a3a      	ldr	r2, [r7, #32]
 800bb82:	2106      	movs	r1, #6
 800bb84:	2000      	movs	r0, #0
 800bb86:	f7fe fca3 	bl	800a4d0 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800bb8a:	6a3b      	ldr	r3, [r7, #32]
 800bb8c:	795a      	ldrb	r2, [r3, #5]
 800bb8e:	4b5e      	ldr	r3, [pc, #376]	; (800bd08 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800bb90:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 800bb92:	6a3b      	ldr	r3, [r7, #32]
 800bb94:	791a      	ldrb	r2, [r3, #4]
 800bb96:	4b5c      	ldr	r3, [pc, #368]	; (800bd08 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800bb98:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800bb9a:	6a3b      	ldr	r3, [r7, #32]
 800bb9c:	78da      	ldrb	r2, [r3, #3]
 800bb9e:	4b5a      	ldr	r3, [pc, #360]	; (800bd08 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800bba0:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 800bba2:	6a3b      	ldr	r3, [r7, #32]
 800bba4:	789a      	ldrb	r2, [r3, #2]
 800bba6:	4b58      	ldr	r3, [pc, #352]	; (800bd08 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800bba8:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 800bbaa:	6a3b      	ldr	r3, [r7, #32]
 800bbac:	785a      	ldrb	r2, [r3, #1]
 800bbae:	4b56      	ldr	r3, [pc, #344]	; (800bd08 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800bbb0:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 800bbb2:	6a3b      	ldr	r3, [r7, #32]
 800bbb4:	781a      	ldrb	r2, [r3, #0]
 800bbb6:	4b54      	ldr	r3, [pc, #336]	; (800bd08 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800bbb8:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 800bbba:	f64e 536e 	movw	r3, #60782	; 0xed6e
 800bbbe:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 800bbc0:	f7ff fe62 	bl	800b888 <LL_FLASH_GetUDN>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800bbc8:	f107 0308 	add.w	r3, r7, #8
 800bbcc:	461a      	mov	r2, r3
 800bbce:	2106      	movs	r1, #6
 800bbd0:	202e      	movs	r0, #46	; 0x2e
 800bbd2:	f7fe fc7d 	bl	800a4d0 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK 
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800bbd6:	4a4d      	ldr	r2, [pc, #308]	; (800bd0c <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 800bbd8:	2110      	movs	r1, #16
 800bbda:	2018      	movs	r0, #24
 800bbdc:	f7fe fc78 	bl	800a4d0 <aci_hal_write_config_data>
    
   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800bbe0:	4a4b      	ldr	r2, [pc, #300]	; (800bd10 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 800bbe2:	2110      	movs	r1, #16
 800bbe4:	2008      	movs	r0, #8
 800bbe6:	f7fe fc73 	bl	800a4d0 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800bbea:	2118      	movs	r1, #24
 800bbec:	2001      	movs	r0, #1
 800bbee:	f7fe fcdf 	bl	800a5b0 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800bbf2:	f7fe f9c7 	bl	8009f84 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800bbfa:	7ffb      	ldrb	r3, [r7, #31]
 800bbfc:	f043 0301 	orr.w	r3, r3, #1
 800bc00:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 800bc02:	7ffb      	ldrb	r3, [r7, #31]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d01e      	beq.n	800bc46 <Ble_Hci_Gap_Gatt_Init+0xda>
  {
    const char *name = "STM32WB";
 800bc08:	4b42      	ldr	r3, [pc, #264]	; (800bd14 <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 800bc0a:	61bb      	str	r3, [r7, #24]
    aci_gap_init(role, 0,
 800bc0c:	f107 0216 	add.w	r2, r7, #22
 800bc10:	7ff8      	ldrb	r0, [r7, #31]
 800bc12:	f107 0312 	add.w	r3, r7, #18
 800bc16:	9301      	str	r3, [sp, #4]
 800bc18:	f107 0314 	add.w	r3, r7, #20
 800bc1c:	9300      	str	r3, [sp, #0]
 800bc1e:	4613      	mov	r3, r2
 800bc20:	2207      	movs	r2, #7
 800bc22:	2100      	movs	r1, #0
 800bc24:	f7fe f897 	bl	8009d56 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800bc28:	8afc      	ldrh	r4, [r7, #22]
 800bc2a:	8abd      	ldrh	r5, [r7, #20]
 800bc2c:	69b8      	ldr	r0, [r7, #24]
 800bc2e:	f7f4 faa7 	bl	8000180 <strlen>
 800bc32:	4603      	mov	r3, r0
 800bc34:	b2da      	uxtb	r2, r3
 800bc36:	69bb      	ldr	r3, [r7, #24]
 800bc38:	9300      	str	r3, [sp, #0]
 800bc3a:	4613      	mov	r3, r2
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	4629      	mov	r1, r5
 800bc40:	4620      	mov	r0, r4
 800bc42:	f7fe fb62 	bl	800a30a <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800bc46:	8af8      	ldrh	r0, [r7, #22]
 800bc48:	8a79      	ldrh	r1, [r7, #18]
 800bc4a:	1d3b      	adds	r3, r7, #4
 800bc4c:	9300      	str	r3, [sp, #0]
 800bc4e:	2302      	movs	r3, #2
 800bc50:	2200      	movs	r2, #0
 800bc52:	f7fe fb5a 	bl	800a30a <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
/**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED); 
 800bc56:	2202      	movs	r2, #2
 800bc58:	2102      	movs	r1, #2
 800bc5a:	2000      	movs	r0, #0
 800bc5c:	f7fe fde8 	bl	800a830 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800bc60:	4b2d      	ldr	r3, [pc, #180]	; (800bd18 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800bc62:	2201      	movs	r2, #1
 800bc64:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800bc66:	4b2c      	ldr	r3, [pc, #176]	; (800bd18 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800bc68:	781b      	ldrb	r3, [r3, #0]
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f7fd ff73 	bl	8009b56 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800bc70:	4b29      	ldr	r3, [pc, #164]	; (800bd18 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800bc72:	2201      	movs	r2, #1
 800bc74:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 800bc76:	4b28      	ldr	r3, [pc, #160]	; (800bd18 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800bc78:	2200      	movs	r2, #0
 800bc7a:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
 800bc7c:	4b26      	ldr	r3, [pc, #152]	; (800bd18 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800bc7e:	2208      	movs	r2, #8
 800bc80:	755a      	strb	r2, [r3, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 800bc82:	4b25      	ldr	r3, [pc, #148]	; (800bd18 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800bc84:	2210      	movs	r2, #16
 800bc86:	759a      	strb	r2, [r3, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = 1;
 800bc88:	4b23      	ldr	r3, [pc, #140]	; (800bd18 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	751a      	strb	r2, [r3, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 800bc8e:	4b22      	ldr	r3, [pc, #136]	; (800bd18 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800bc90:	4a22      	ldr	r2, [pc, #136]	; (800bd1c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800bc92:	619a      	str	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = 1;
 800bc94:	4b20      	ldr	r3, [pc, #128]	; (800bd18 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800bc96:	2201      	movs	r2, #1
 800bc98:	709a      	strb	r2, [r3, #2]
  for (index = 0; index < 16; index++)
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bca0:	e00b      	b.n	800bcba <Ble_Hci_Gap_Gatt_Init+0x14e>
  {
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 800bca2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bca6:	4a1c      	ldr	r2, [pc, #112]	; (800bd18 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800bca8:	4413      	add	r3, r2
 800bcaa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bcae:	711a      	strb	r2, [r3, #4]
  for (index = 0; index < 16; index++)
 800bcb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bcba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcbe:	2b0f      	cmp	r3, #15
 800bcc0:	d9ef      	bls.n	800bca2 <Ble_Hci_Gap_Gatt_Init+0x136>
  }

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800bcc2:	4b15      	ldr	r3, [pc, #84]	; (800bd18 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800bcc4:	789d      	ldrb	r5, [r3, #2]
 800bcc6:	4b14      	ldr	r3, [pc, #80]	; (800bd18 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800bcc8:	785e      	ldrb	r6, [r3, #1]
 800bcca:	4b13      	ldr	r3, [pc, #76]	; (800bd18 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800bccc:	7d5b      	ldrb	r3, [r3, #21]
 800bcce:	4a12      	ldr	r2, [pc, #72]	; (800bd18 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800bcd0:	7d92      	ldrb	r2, [r2, #22]
 800bcd2:	4911      	ldr	r1, [pc, #68]	; (800bd18 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800bcd4:	7d09      	ldrb	r1, [r1, #20]
 800bcd6:	4810      	ldr	r0, [pc, #64]	; (800bd18 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800bcd8:	6980      	ldr	r0, [r0, #24]
 800bcda:	2400      	movs	r4, #0
 800bcdc:	9404      	str	r4, [sp, #16]
 800bcde:	9003      	str	r0, [sp, #12]
 800bce0:	9102      	str	r1, [sp, #8]
 800bce2:	9201      	str	r2, [sp, #4]
 800bce4:	9300      	str	r3, [sp, #0]
 800bce6:	2300      	movs	r3, #0
 800bce8:	2201      	movs	r2, #1
 800bcea:	4631      	mov	r1, r6
 800bcec:	4628      	mov	r0, r5
 800bcee:	f7fd ff83 	bl	8009bf8 <aci_gap_set_authentication_requirement>
                                        );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800bcf2:	4b09      	ldr	r3, [pc, #36]	; (800bd18 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800bcf4:	789b      	ldrb	r3, [r3, #2]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d001      	beq.n	800bcfe <Ble_Hci_Gap_Gatt_Init+0x192>
   {
     aci_gap_configure_whitelist();
 800bcfa:	f7fe f91a 	bl	8009f32 <aci_gap_configure_whitelist>
   }
}
 800bcfe:	bf00      	nop
 800bd00:	372c      	adds	r7, #44	; 0x2c
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd06:	bf00      	nop
 800bd08:	2000004c 	.word	0x2000004c
 800bd0c:	0800c71c 	.word	0x0800c71c
 800bd10:	0800c72c 	.word	0x0800c72c
 800bd14:	0800c644 	.word	0x0800c644
 800bd18:	2000014c 	.word	0x2000014c
 800bd1c:	0001b207 	.word	0x0001b207

0800bd20 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b08c      	sub	sp, #48	; 0x30
 800bd24:	af08      	add	r7, sp, #32
 800bd26:	4603      	mov	r3, r0
 800bd28:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800bd2a:	2342      	movs	r3, #66	; 0x42
 800bd2c:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;
 
  if (New_Status == APP_BLE_FAST_ADV)
 800bd2e:	79fb      	ldrb	r3, [r7, #7]
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	d106      	bne.n	800bd42 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800bd34:	4b2c      	ldr	r3, [pc, #176]	; (800bde8 <Adv_Request+0xc8>)
 800bd36:	881b      	ldrh	r3, [r3, #0]
 800bd38:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800bd3a:	4b2c      	ldr	r3, [pc, #176]	; (800bdec <Adv_Request+0xcc>)
 800bd3c:	881b      	ldrh	r3, [r3, #0]
 800bd3e:	81bb      	strh	r3, [r7, #12]
 800bd40:	e005      	b.n	800bd4e <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800bd42:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800bd46:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800bd48:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800bd4c:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800bd4e:	4b28      	ldr	r3, [pc, #160]	; (800bdf0 <Adv_Request+0xd0>)
 800bd50:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7f6 f87b 	bl	8001e50 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
    if ((New_Status == APP_BLE_LP_ADV)
 800bd5a:	79fb      	ldrb	r3, [r7, #7]
 800bd5c:	2b02      	cmp	r3, #2
 800bd5e:	d10d      	bne.n	800bd7c <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800bd60:	4b23      	ldr	r3, [pc, #140]	; (800bdf0 <Adv_Request+0xd0>)
 800bd62:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	d004      	beq.n	800bd74 <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800bd6a:	4b21      	ldr	r3, [pc, #132]	; (800bdf0 <Adv_Request+0xd0>)
 800bd6c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800bd70:	2b02      	cmp	r3, #2
 800bd72:	d103      	bne.n	800bd7c <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 800bd74:	f7fd fde1 	bl	800993a <aci_gap_set_non_discoverable>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 800bd7c:	4a1c      	ldr	r2, [pc, #112]	; (800bdf0 <Adv_Request+0xd0>)
 800bd7e:	79fb      	ldrb	r3, [r7, #7]
 800bd80:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 800bd84:	4b1a      	ldr	r3, [pc, #104]	; (800bdf0 <Adv_Request+0xd0>)
 800bd86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd8a:	89b8      	ldrh	r0, [r7, #12]
 800bd8c:	89f9      	ldrh	r1, [r7, #14]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	9206      	str	r2, [sp, #24]
 800bd92:	2200      	movs	r2, #0
 800bd94:	9205      	str	r2, [sp, #20]
 800bd96:	4a17      	ldr	r2, [pc, #92]	; (800bdf4 <Adv_Request+0xd4>)
 800bd98:	9204      	str	r2, [sp, #16]
 800bd9a:	9303      	str	r3, [sp, #12]
 800bd9c:	4b16      	ldr	r3, [pc, #88]	; (800bdf8 <Adv_Request+0xd8>)
 800bd9e:	9302      	str	r3, [sp, #8]
 800bda0:	2308      	movs	r3, #8
 800bda2:	9301      	str	r3, [sp, #4]
 800bda4:	2300      	movs	r3, #0
 800bda6:	9300      	str	r3, [sp, #0]
 800bda8:	2300      	movs	r3, #0
 800bdaa:	4602      	mov	r2, r0
 800bdac:	2000      	movs	r0, #0
 800bdae:	f7fd fded 	bl	800998c <aci_gap_set_discoverable>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);
    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800bdb6:	4911      	ldr	r1, [pc, #68]	; (800bdfc <Adv_Request+0xdc>)
 800bdb8:	200e      	movs	r0, #14
 800bdba:	f7fe f857 	bl	8009e6c <aci_gap_update_adv_data>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	72fb      	strb	r3, [r7, #11]

     if (ret == BLE_STATUS_SUCCESS)
 800bdc2:	7afb      	ldrb	r3, [r7, #11]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d10a      	bne.n	800bdde <Adv_Request+0xbe>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 800bdc8:	79fb      	ldrb	r3, [r7, #7]
 800bdca:	2b01      	cmp	r3, #1
 800bdcc:	d107      	bne.n	800bdde <Adv_Request+0xbe>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800bdce:	4b08      	ldr	r3, [pc, #32]	; (800bdf0 <Adv_Request+0xd0>)
 800bdd0:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800bdd4:	490a      	ldr	r1, [pc, #40]	; (800be00 <Adv_Request+0xe0>)
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7f6 f8c4 	bl	8001f64 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 800bddc:	bf00      	nop
 800bdde:	bf00      	nop
}
 800bde0:	3710      	adds	r7, #16
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}
 800bde6:	bf00      	nop
 800bde8:	200001e0 	.word	0x200001e0
 800bdec:	200001e2 	.word	0x200001e2
 800bdf0:	2000014c 	.word	0x2000014c
 800bdf4:	20000175 	.word	0x20000175
 800bdf8:	0800c73c 	.word	0x0800c73c
 800bdfc:	2000004c 	.word	0x2000004c
 800be00:	0001e046 	.word	0x0001e046

0800be04 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b086      	sub	sp, #24
 800be08:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800be0a:	f7ff fd3d 	bl	800b888 <LL_FLASH_GetUDN>
 800be0e:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be16:	d023      	beq.n	800be60 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800be18:	f7ff fd4e 	bl	800b8b8 <LL_FLASH_GetSTCompanyID>
 800be1c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800be1e:	f7ff fd3f 	bl	800b8a0 <LL_FLASH_GetDeviceID>
 800be22:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	b2da      	uxtb	r2, r3
 800be28:	4b16      	ldr	r3, [pc, #88]	; (800be84 <BleGetBdAddress+0x80>)
 800be2a:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	0a1b      	lsrs	r3, r3, #8
 800be30:	b2da      	uxtb	r2, r3
 800be32:	4b14      	ldr	r3, [pc, #80]	; (800be84 <BleGetBdAddress+0x80>)
 800be34:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	0c1b      	lsrs	r3, r3, #16
 800be3a:	b2da      	uxtb	r2, r3
 800be3c:	4b11      	ldr	r3, [pc, #68]	; (800be84 <BleGetBdAddress+0x80>)
 800be3e:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	b2da      	uxtb	r2, r3
 800be44:	4b0f      	ldr	r3, [pc, #60]	; (800be84 <BleGetBdAddress+0x80>)
 800be46:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	b2da      	uxtb	r2, r3
 800be4c:	4b0d      	ldr	r3, [pc, #52]	; (800be84 <BleGetBdAddress+0x80>)
 800be4e:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	0a1b      	lsrs	r3, r3, #8
 800be54:	b2da      	uxtb	r2, r3
 800be56:	4b0b      	ldr	r3, [pc, #44]	; (800be84 <BleGetBdAddress+0x80>)
 800be58:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800be5a:	4b0a      	ldr	r3, [pc, #40]	; (800be84 <BleGetBdAddress+0x80>)
 800be5c:	617b      	str	r3, [r7, #20]
 800be5e:	e00b      	b.n	800be78 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800be60:	2000      	movs	r0, #0
 800be62:	f7fe ff05 	bl	800ac70 <OTP_Read>
 800be66:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d002      	beq.n	800be74 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	617b      	str	r3, [r7, #20]
 800be72:	e001      	b.n	800be78 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800be74:	4b04      	ldr	r3, [pc, #16]	; (800be88 <BleGetBdAddress+0x84>)
 800be76:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 800be78:	697b      	ldr	r3, [r7, #20]
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3718      	adds	r7, #24
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	20000708 	.word	0x20000708
 800be88:	0800c714 	.word	0x0800c714

0800be8c <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800be92:	4b0a      	ldr	r3, [pc, #40]	; (800bebc <Adv_Cancel+0x30>)
 800be94:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800be98:	2b05      	cmp	r3, #5
 800be9a:	d00a      	beq.n	800beb2 <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 800be9c:	2300      	movs	r3, #0
 800be9e:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 800bea0:	f7fd fd4b 	bl	800993a <aci_gap_set_non_discoverable>
 800bea4:	4603      	mov	r3, r0
 800bea6:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800bea8:	4b04      	ldr	r3, [pc, #16]	; (800bebc <Adv_Cancel+0x30>)
 800beaa:	2200      	movs	r2, #0
 800beac:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 800beb0:	bf00      	nop
 800beb2:	bf00      	nop
}
 800beb4:	3708      	adds	r7, #8
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	2000014c 	.word	0x2000014c

0800bec0 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800bec4:	2100      	movs	r1, #0
 800bec6:	2001      	movs	r0, #1
 800bec8:	f7f7 fb06 	bl	80034d8 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 800becc:	bf00      	nop
}
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 800bed0:	b480      	push	{r7}
 800bed2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 800bed4:	bf00      	nop
 800bed6:	46bd      	mov	sp, r7
 800bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bedc:	4770      	bx	lr

0800bede <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800bede:	b580      	push	{r7, lr}
 800bee0:	b082      	sub	sp, #8
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800bee6:	2100      	movs	r1, #0
 800bee8:	2004      	movs	r0, #4
 800beea:	f7f7 faf5 	bl	80034d8 <UTIL_SEQ_SetTask>
  return;
 800beee:	bf00      	nop
}
 800bef0:	3708      	adds	r7, #8
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}

0800bef6 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800bef6:	b580      	push	{r7, lr}
 800bef8:	b082      	sub	sp, #8
 800befa:	af00      	add	r7, sp, #0
 800befc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800befe:	2001      	movs	r0, #1
 800bf00:	f7f7 fb50 	bl	80035a4 <UTIL_SEQ_SetEvt>
  return;
 800bf04:	bf00      	nop
}
 800bf06:	3708      	adds	r7, #8
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}

0800bf0c <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b082      	sub	sp, #8
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800bf14:	2001      	movs	r0, #1
 800bf16:	f7f7 fb63 	bl	80035e0 <UTIL_SEQ_WaitEvt>
  return;
 800bf1a:	bf00      	nop
}
 800bf1c:	3708      	adds	r7, #8
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}

0800bf22 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800bf22:	b580      	push	{r7, lr}
 800bf24:	b084      	sub	sp, #16
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload; 
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	3308      	adds	r3, #8
 800bf34:	4618      	mov	r0, r3
 800bf36:	f7ff fa9b 	bl	800b470 <SVCCTL_UserEvtRx>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800bf3e:	7afb      	ldrb	r3, [r7, #11]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d003      	beq.n	800bf4c <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	2201      	movs	r2, #1
 800bf48:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 800bf4a:	e002      	b.n	800bf52 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	701a      	strb	r2, [r3, #0]
}
 800bf52:	bf00      	nop
 800bf54:	3710      	adds	r7, #16
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}

0800bf5a <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800bf5a:	b580      	push	{r7, lr}
 800bf5c:	b084      	sub	sp, #16
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	4603      	mov	r3, r0
 800bf62:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800bf64:	79fb      	ldrb	r3, [r7, #7]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d002      	beq.n	800bf70 <BLE_StatusNot+0x16>
 800bf6a:	2b01      	cmp	r3, #1
 800bf6c:	d007      	beq.n	800bf7e <BLE_StatusNot+0x24>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 800bf6e:	e00d      	b.n	800bf8c <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800bf70:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800bf74:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800bf76:	68f8      	ldr	r0, [r7, #12]
 800bf78:	f7f7 fad8 	bl	800352c <UTIL_SEQ_PauseTask>
      break;
 800bf7c:	e006      	b.n	800bf8c <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800bf7e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800bf82:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800bf84:	68f8      	ldr	r0, [r7, #12]
 800bf86:	f7f7 faef 	bl	8003568 <UTIL_SEQ_ResumeTask>
      break;
 800bf8a:	bf00      	nop
  }
  return;
 800bf8c:	bf00      	nop
}
 800bf8e:	3710      	adds	r7, #16
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <P2PS_STM_App_Notification>:
static void P2PS_DataChange_Timer_Callback(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b082      	sub	sp, #8
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d00b      	beq.n	800bfbc <P2PS_STM_App_Notification+0x28>
 800bfa4:	2b03      	cmp	r3, #3
 800bfa6:	d00d      	beq.n	800bfc4 <P2PS_STM_App_Notification+0x30>
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d000      	beq.n	800bfae <P2PS_STM_App_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800bfac:	e00b      	b.n	800bfc6 <P2PS_STM_App_Notification+0x32>
    	P2P_Server_App_Context.NotificationStatus = 1;
 800bfae:	4b08      	ldr	r3, [pc, #32]	; (800bfd0 <P2PS_STM_App_Notification+0x3c>)
 800bfb0:	2201      	movs	r2, #1
 800bfb2:	701a      	strb	r2, [r3, #0]
    	HAL_TIM_Base_Start_IT(&htim16);
 800bfb4:	4807      	ldr	r0, [pc, #28]	; (800bfd4 <P2PS_STM_App_Notification+0x40>)
 800bfb6:	f7fb ff17 	bl	8007de8 <HAL_TIM_Base_Start_IT>
      break;
 800bfba:	e004      	b.n	800bfc6 <P2PS_STM_App_Notification+0x32>
    	P2P_Server_App_Context.NotificationStatus = 0;
 800bfbc:	4b04      	ldr	r3, [pc, #16]	; (800bfd0 <P2PS_STM_App_Notification+0x3c>)
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	701a      	strb	r2, [r3, #0]
      break;
 800bfc2:	e000      	b.n	800bfc6 <P2PS_STM_App_Notification+0x32>
      break;
 800bfc4:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800bfc6:	bf00      	nop
}
 800bfc8:	3708      	adds	r7, #8
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	200001e4 	.word	0x200001e4
 800bfd4:	200008d0 	.word	0x200008d0

0800bfd8 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b083      	sub	sp, #12
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d002      	beq.n	800bfee <P2PS_APP_Notification+0x16>
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	d002      	beq.n	800bff2 <P2PS_APP_Notification+0x1a>
    
    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800bfec:	e002      	b.n	800bff4 <P2PS_APP_Notification+0x1c>
    break;
 800bfee:	bf00      	nop
 800bff0:	e000      	b.n	800bff4 <P2PS_APP_Notification+0x1c>
    break;
 800bff2:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800bff4:	bf00      	nop
}
 800bff6:	370c      	adds	r7, #12
 800bff8:	46bd      	mov	sp, r7
 800bffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffe:	4770      	bx	lr

0800c000 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
	/* Register task used to update the characteristic (send the notification) */
		//UTIL_SEQ_RegTask(1 << CFG_MY_TASK_NOTIFY_DATA ,UTIL_SEQ_RFU, P2PS_Send_Notification_Task);
		UTIL_SEQ_RegTask(1 << SEND_FSR_DATA_BLE_TASK, UTIL_SEQ_RFU, P2PS_Send_Notification_Task_FSR);
 800c004:	4a0b      	ldr	r2, [pc, #44]	; (800c034 <P2PS_APP_Init+0x34>)
 800c006:	2100      	movs	r1, #0
 800c008:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c00c:	f7f7 fa44 	bl	8003498 <UTIL_SEQ_RegTask>
		UTIL_SEQ_RegTask(1 << SEND_ACC_DATA_BLE_TASK, UTIL_SEQ_RFU, P2PS_Send_Notification_Task_ACC);
 800c010:	4a09      	ldr	r2, [pc, #36]	; (800c038 <P2PS_APP_Init+0x38>)
 800c012:	2100      	movs	r1, #0
 800c014:	2080      	movs	r0, #128	; 0x80
 800c016:	f7f7 fa3f 	bl	8003498 <UTIL_SEQ_RegTask>
		UTIL_SEQ_RegTask(1 << SEND_PPG_DATA_BLE_TASK, UTIL_SEQ_RFU, P2PS_Send_Notification_Task_PPG);
 800c01a:	4a08      	ldr	r2, [pc, #32]	; (800c03c <P2PS_APP_Init+0x3c>)
 800c01c:	2100      	movs	r1, #0
 800c01e:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c022:	f7f7 fa39 	bl	8003498 <UTIL_SEQ_RegTask>
//				P2PS_DataChange_Timer_Callback);

	  /**
	   * Initialize Template application context
	   */
	  P2P_Server_App_Context.NotificationStatus=0;
 800c026:	4b06      	ldr	r3, [pc, #24]	; (800c040 <P2PS_APP_Init+0x40>)
 800c028:	2200      	movs	r2, #0
 800c02a:	701a      	strb	r2, [r3, #0]
	  P2PS_APP_context_Init();
 800c02c:	f000 f864 	bl	800c0f8 <P2PS_APP_context_Init>
/* USER CODE END P2PS_APP_Init */
  return;
 800c030:	bf00      	nop
}
 800c032:	bd80      	pop	{r7, pc}
 800c034:	0800c045 	.word	0x0800c045
 800c038:	0800c081 	.word	0x0800c081
 800c03c:	0800c0bd 	.word	0x0800c0bd
 800c040:	200001e4 	.word	0x200001e4

0800c044 <P2PS_Send_Notification_Task_FSR>:

/* USER CODE BEGIN FD */

static void P2PS_Send_Notification_Task_FSR(void)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b0a0      	sub	sp, #128	; 0x80
 800c048:	af00      	add	r7, sp, #0
  /* Update P2P_NOTIFY characteristic */
	uint8_t value[PAYLOAD_LENGTH] = {0};
 800c04a:	1d3b      	adds	r3, r7, #4
 800c04c:	227b      	movs	r2, #123	; 0x7b
 800c04e:	2100      	movs	r1, #0
 800c050:	4618      	mov	r0, r3
 800c052:	f000 faac 	bl	800c5ae <memset>

	if(P2P_Server_App_Context.NotificationStatus)
 800c056:	4b09      	ldr	r3, [pc, #36]	; (800c07c <P2PS_Send_Notification_Task_FSR+0x38>)
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d00a      	beq.n	800c074 <P2PS_Send_Notification_Task_FSR+0x30>
	{
		prepare_fsr_ble_pack(&value[0]);
 800c05e:	1d3b      	adds	r3, r7, #4
 800c060:	4618      	mov	r0, r3
 800c062:	f7f6 fc37 	bl	80028d4 <prepare_fsr_ble_pack>
//		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
		P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID,&value[0]);
 800c066:	1d3b      	adds	r3, r7, #4
 800c068:	4619      	mov	r1, r3
 800c06a:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800c06e:	f7fe ff29 	bl	800aec4 <P2PS_STM_App_Update_Char>
	else
	{

	}

  return;
 800c072:	bf00      	nop
 800c074:	bf00      	nop
}
 800c076:	3780      	adds	r7, #128	; 0x80
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}
 800c07c:	200001e4 	.word	0x200001e4

0800c080 <P2PS_Send_Notification_Task_ACC>:
static void P2PS_Send_Notification_Task_ACC(void)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b0a0      	sub	sp, #128	; 0x80
 800c084:	af00      	add	r7, sp, #0
  /* Update P2P_NOTIFY characteristic */
	uint8_t value[PAYLOAD_LENGTH] = {0};
 800c086:	1d3b      	adds	r3, r7, #4
 800c088:	227b      	movs	r2, #123	; 0x7b
 800c08a:	2100      	movs	r1, #0
 800c08c:	4618      	mov	r0, r3
 800c08e:	f000 fa8e 	bl	800c5ae <memset>

	if(P2P_Server_App_Context.NotificationStatus)
 800c092:	4b09      	ldr	r3, [pc, #36]	; (800c0b8 <P2PS_Send_Notification_Task_ACC+0x38>)
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d00a      	beq.n	800c0b0 <P2PS_Send_Notification_Task_ACC+0x30>
	{
		prepare_acc_ble_pack(&value[0]);
 800c09a:	1d3b      	adds	r3, r7, #4
 800c09c:	4618      	mov	r0, r3
 800c09e:	f7f6 fc41 	bl	8002924 <prepare_acc_ble_pack>
//		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
		P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID,&value[0]);
 800c0a2:	1d3b      	adds	r3, r7, #4
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800c0aa:	f7fe ff0b 	bl	800aec4 <P2PS_STM_App_Update_Char>
	else
	{

	}

  return;
 800c0ae:	bf00      	nop
 800c0b0:	bf00      	nop
}
 800c0b2:	3780      	adds	r7, #128	; 0x80
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}
 800c0b8:	200001e4 	.word	0x200001e4

0800c0bc <P2PS_Send_Notification_Task_PPG>:
static void P2PS_Send_Notification_Task_PPG(void)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b0a0      	sub	sp, #128	; 0x80
 800c0c0:	af00      	add	r7, sp, #0
  /* Update P2P_NOTIFY characteristic */
	uint8_t value[PAYLOAD_LENGTH] = {0};
 800c0c2:	1d3b      	adds	r3, r7, #4
 800c0c4:	227b      	movs	r2, #123	; 0x7b
 800c0c6:	2100      	movs	r1, #0
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f000 fa70 	bl	800c5ae <memset>

	if(P2P_Server_App_Context.NotificationStatus)
 800c0ce:	4b09      	ldr	r3, [pc, #36]	; (800c0f4 <P2PS_Send_Notification_Task_PPG+0x38>)
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d00a      	beq.n	800c0ec <P2PS_Send_Notification_Task_PPG+0x30>
	{
		prepare_ppg_ble_pack(&value[0]);
 800c0d6:	1d3b      	adds	r3, r7, #4
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7f6 fda1 	bl	8002c20 <prepare_ppg_ble_pack>
//		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
		P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID,&value[0]);
 800c0de:	1d3b      	adds	r3, r7, #4
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800c0e6:	f7fe feed 	bl	800aec4 <P2PS_STM_App_Update_Char>
	else
	{

	}

  return;
 800c0ea:	bf00      	nop
 800c0ec:	bf00      	nop
}
 800c0ee:	3780      	adds	r7, #128	; 0x80
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	200001e4 	.word	0x200001e4

0800c0f8 <P2PS_APP_context_Init>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
static void P2PS_APP_context_Init(void)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	af00      	add	r7, sp, #0
  P2P_Server_App_Context.Parameter = 0;
 800c0fc:	4b0b      	ldr	r3, [pc, #44]	; (800c12c <P2PS_APP_context_Init+0x34>)
 800c0fe:	2200      	movs	r2, #0
 800c100:	805a      	strh	r2, [r3, #2]
  P2P_Server_App_Context.ACC.X = 0;
 800c102:	4b0a      	ldr	r3, [pc, #40]	; (800c12c <P2PS_APP_context_Init+0x34>)
 800c104:	2200      	movs	r2, #0
 800c106:	809a      	strh	r2, [r3, #4]
  P2P_Server_App_Context.ACC.Y = 0;
 800c108:	4b08      	ldr	r3, [pc, #32]	; (800c12c <P2PS_APP_context_Init+0x34>)
 800c10a:	2200      	movs	r2, #0
 800c10c:	80da      	strh	r2, [r3, #6]
  P2P_Server_App_Context.ACC.Z = 0;
 800c10e:	4b07      	ldr	r3, [pc, #28]	; (800c12c <P2PS_APP_context_Init+0x34>)
 800c110:	2200      	movs	r2, #0
 800c112:	811a      	strh	r2, [r3, #8]
  P2P_Server_App_Context.ECG.ecg_value = 0;
 800c114:	4b05      	ldr	r3, [pc, #20]	; (800c12c <P2PS_APP_context_Init+0x34>)
 800c116:	2200      	movs	r2, #0
 800c118:	815a      	strh	r2, [r3, #10]
  P2P_Server_App_Context.PPG.ppg_value = 0;
 800c11a:	4b04      	ldr	r3, [pc, #16]	; (800c12c <P2PS_APP_context_Init+0x34>)
 800c11c:	2200      	movs	r2, #0
 800c11e:	819a      	strh	r2, [r3, #12]
}
 800c120:	bf00      	nop
 800c122:	46bd      	mov	sp, r7
 800c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c128:	4770      	bx	lr
 800c12a:	bf00      	nop
 800c12c:	200001e4 	.word	0x200001e4

0800c130 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 800c130:	b480      	push	{r7}
 800c132:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800c134:	4b05      	ldr	r3, [pc, #20]	; (800c14c <LL_PWR_EnableBootC2+0x1c>)
 800c136:	68db      	ldr	r3, [r3, #12]
 800c138:	4a04      	ldr	r2, [pc, #16]	; (800c14c <LL_PWR_EnableBootC2+0x1c>)
 800c13a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c13e:	60d3      	str	r3, [r2, #12]
}
 800c140:	bf00      	nop
 800c142:	46bd      	mov	sp, r7
 800c144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c148:	4770      	bx	lr
 800c14a:	bf00      	nop
 800c14c:	58000400 	.word	0x58000400

0800c150 <LL_AHB3_GRP1_EnableClock>:
{
 800c150:	b480      	push	{r7}
 800c152:	b085      	sub	sp, #20
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800c158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c15c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c15e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	4313      	orrs	r3, r2
 800c166:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800c168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c16c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	4013      	ands	r3, r2
 800c172:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c174:	68fb      	ldr	r3, [r7, #12]
}
 800c176:	bf00      	nop
 800c178:	3714      	adds	r7, #20
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr

0800c182 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800c182:	b480      	push	{r7}
 800c184:	b083      	sub	sp, #12
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	601a      	str	r2, [r3, #0]
}
 800c196:	bf00      	nop
 800c198:	370c      	adds	r7, #12
 800c19a:	46bd      	mov	sp, r7
 800c19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a0:	4770      	bx	lr

0800c1a2 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800c1a2:	b480      	push	{r7}
 800c1a4:	b083      	sub	sp, #12
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f043 0201 	orr.w	r2, r3, #1
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	601a      	str	r2, [r3, #0]
}
 800c1b6:	bf00      	nop
 800c1b8:	370c      	adds	r7, #12
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c0:	4770      	bx	lr

0800c1c2 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c1c2:	b480      	push	{r7}
 800c1c4:	b083      	sub	sp, #12
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
 800c1ca:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	685a      	ldr	r2, [r3, #4]
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	041b      	lsls	r3, r3, #16
 800c1d4:	43db      	mvns	r3, r3
 800c1d6:	401a      	ands	r2, r3
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	605a      	str	r2, [r3, #4]
}
 800c1dc:	bf00      	nop
 800c1de:	370c      	adds	r7, #12
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr

0800c1e8 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b083      	sub	sp, #12
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	685a      	ldr	r2, [r3, #4]
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	041b      	lsls	r3, r3, #16
 800c1fa:	431a      	orrs	r2, r3
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	605a      	str	r2, [r3, #4]
}
 800c200:	bf00      	nop
 800c202:	370c      	adds	r7, #12
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr

0800c20c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c20c:	b480      	push	{r7}
 800c20e:	b083      	sub	sp, #12
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	685a      	ldr	r2, [r3, #4]
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	43db      	mvns	r3, r3
 800c21e:	401a      	ands	r2, r3
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	605a      	str	r2, [r3, #4]
}
 800c224:	bf00      	nop
 800c226:	370c      	adds	r7, #12
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr

0800c230 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c230:	b480      	push	{r7}
 800c232:	b083      	sub	sp, #12
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	683a      	ldr	r2, [r7, #0]
 800c23e:	609a      	str	r2, [r3, #8]
}
 800c240:	bf00      	nop
 800c242:	370c      	adds	r7, #12
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr

0800c24c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b083      	sub	sp, #12
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	041a      	lsls	r2, r3, #16
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	609a      	str	r2, [r3, #8]
}
 800c25e:	bf00      	nop
 800c260:	370c      	adds	r7, #12
 800c262:	46bd      	mov	sp, r7
 800c264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c268:	4770      	bx	lr

0800c26a <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800c26a:	b480      	push	{r7}
 800c26c:	b083      	sub	sp, #12
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]
 800c272:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	68da      	ldr	r2, [r3, #12]
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	4013      	ands	r3, r2
 800c27c:	683a      	ldr	r2, [r7, #0]
 800c27e:	429a      	cmp	r2, r3
 800c280:	d101      	bne.n	800c286 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800c282:	2301      	movs	r3, #1
 800c284:	e000      	b.n	800c288 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800c286:	2300      	movs	r3, #0
}
 800c288:	4618      	mov	r0, r3
 800c28a:	370c      	adds	r7, #12
 800c28c:	46bd      	mov	sp, r7
 800c28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c292:	4770      	bx	lr

0800c294 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800c294:	b480      	push	{r7}
 800c296:	b083      	sub	sp, #12
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	69da      	ldr	r2, [r3, #28]
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	4013      	ands	r3, r2
 800c2a6:	683a      	ldr	r2, [r7, #0]
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d101      	bne.n	800c2b0 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	e000      	b.n	800c2b2 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800c2b0:	2300      	movs	r3, #0
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	370c      	adds	r7, #12
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2bc:	4770      	bx	lr
	...

0800c2c0 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800c2c4:	2102      	movs	r1, #2
 800c2c6:	4819      	ldr	r0, [pc, #100]	; (800c32c <HW_IPCC_Rx_Handler+0x6c>)
 800c2c8:	f7ff ffe4 	bl	800c294 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d009      	beq.n	800c2e6 <HW_IPCC_Rx_Handler+0x26>
 800c2d2:	4b16      	ldr	r3, [pc, #88]	; (800c32c <HW_IPCC_Rx_Handler+0x6c>)
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	43db      	mvns	r3, r3
 800c2d8:	f003 0302 	and.w	r3, r3, #2
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d002      	beq.n	800c2e6 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800c2e0:	f000 f8de 	bl	800c4a0 <HW_IPCC_SYS_EvtHandler>
 800c2e4:	e01f      	b.n	800c326 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800c2e6:	2101      	movs	r1, #1
 800c2e8:	4810      	ldr	r0, [pc, #64]	; (800c32c <HW_IPCC_Rx_Handler+0x6c>)
 800c2ea:	f7ff ffd3 	bl	800c294 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d008      	beq.n	800c306 <HW_IPCC_Rx_Handler+0x46>
 800c2f4:	4b0d      	ldr	r3, [pc, #52]	; (800c32c <HW_IPCC_Rx_Handler+0x6c>)
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	f003 0301 	and.w	r3, r3, #1
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d102      	bne.n	800c306 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800c300:	f000 f892 	bl	800c428 <HW_IPCC_BLE_EvtHandler>
 800c304:	e00f      	b.n	800c326 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800c306:	2108      	movs	r1, #8
 800c308:	4808      	ldr	r0, [pc, #32]	; (800c32c <HW_IPCC_Rx_Handler+0x6c>)
 800c30a:	f7ff ffc3 	bl	800c294 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c30e:	4603      	mov	r3, r0
 800c310:	2b00      	cmp	r3, #0
 800c312:	d009      	beq.n	800c328 <HW_IPCC_Rx_Handler+0x68>
 800c314:	4b05      	ldr	r3, [pc, #20]	; (800c32c <HW_IPCC_Rx_Handler+0x6c>)
 800c316:	685b      	ldr	r3, [r3, #4]
 800c318:	43db      	mvns	r3, r3
 800c31a:	f003 0308 	and.w	r3, r3, #8
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d002      	beq.n	800c328 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800c322:	f000 f909 	bl	800c538 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800c326:	bf00      	nop
 800c328:	bf00      	nop
}
 800c32a:	bd80      	pop	{r7, pc}
 800c32c:	58000c00 	.word	0x58000c00

0800c330 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800c330:	b580      	push	{r7, lr}
 800c332:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800c334:	2102      	movs	r1, #2
 800c336:	4822      	ldr	r0, [pc, #136]	; (800c3c0 <HW_IPCC_Tx_Handler+0x90>)
 800c338:	f7ff ff97 	bl	800c26a <LL_C1_IPCC_IsActiveFlag_CHx>
 800c33c:	4603      	mov	r3, r0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d109      	bne.n	800c356 <HW_IPCC_Tx_Handler+0x26>
 800c342:	4b1f      	ldr	r3, [pc, #124]	; (800c3c0 <HW_IPCC_Tx_Handler+0x90>)
 800c344:	685b      	ldr	r3, [r3, #4]
 800c346:	43db      	mvns	r3, r3
 800c348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d002      	beq.n	800c356 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800c350:	f000 f89a 	bl	800c488 <HW_IPCC_SYS_CmdEvtHandler>
 800c354:	e031      	b.n	800c3ba <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800c356:	2102      	movs	r1, #2
 800c358:	4819      	ldr	r0, [pc, #100]	; (800c3c0 <HW_IPCC_Tx_Handler+0x90>)
 800c35a:	f7ff ff86 	bl	800c26a <LL_C1_IPCC_IsActiveFlag_CHx>
 800c35e:	4603      	mov	r3, r0
 800c360:	2b00      	cmp	r3, #0
 800c362:	d109      	bne.n	800c378 <HW_IPCC_Tx_Handler+0x48>
 800c364:	4b16      	ldr	r3, [pc, #88]	; (800c3c0 <HW_IPCC_Tx_Handler+0x90>)
 800c366:	685b      	ldr	r3, [r3, #4]
 800c368:	43db      	mvns	r3, r3
 800c36a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d002      	beq.n	800c378 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800c372:	f000 f889 	bl	800c488 <HW_IPCC_SYS_CmdEvtHandler>
 800c376:	e020      	b.n	800c3ba <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800c378:	2108      	movs	r1, #8
 800c37a:	4811      	ldr	r0, [pc, #68]	; (800c3c0 <HW_IPCC_Tx_Handler+0x90>)
 800c37c:	f7ff ff75 	bl	800c26a <LL_C1_IPCC_IsActiveFlag_CHx>
 800c380:	4603      	mov	r3, r0
 800c382:	2b00      	cmp	r3, #0
 800c384:	d109      	bne.n	800c39a <HW_IPCC_Tx_Handler+0x6a>
 800c386:	4b0e      	ldr	r3, [pc, #56]	; (800c3c0 <HW_IPCC_Tx_Handler+0x90>)
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	43db      	mvns	r3, r3
 800c38c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c390:	2b00      	cmp	r3, #0
 800c392:	d002      	beq.n	800c39a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 800c394:	f000 f8b2 	bl	800c4fc <HW_IPCC_MM_FreeBufHandler>
 800c398:	e00f      	b.n	800c3ba <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800c39a:	2120      	movs	r1, #32
 800c39c:	4808      	ldr	r0, [pc, #32]	; (800c3c0 <HW_IPCC_Tx_Handler+0x90>)
 800c39e:	f7ff ff64 	bl	800c26a <LL_C1_IPCC_IsActiveFlag_CHx>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d109      	bne.n	800c3bc <HW_IPCC_Tx_Handler+0x8c>
 800c3a8:	4b05      	ldr	r3, [pc, #20]	; (800c3c0 <HW_IPCC_Tx_Handler+0x90>)
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	43db      	mvns	r3, r3
 800c3ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d002      	beq.n	800c3bc <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800c3b6:	f000 f843 	bl	800c440 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800c3ba:	bf00      	nop
 800c3bc:	bf00      	nop
}
 800c3be:	bd80      	pop	{r7, pc}
 800c3c0:	58000c00 	.word	0x58000c00

0800c3c4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	af00      	add	r7, sp, #0
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800c3c8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800c3ca:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800c3cc:	f7ff feb0 	bl	800c130 <LL_PWR_EnableBootC2>

  return;
 800c3d0:	bf00      	nop
}
 800c3d2:	bd80      	pop	{r7, pc}

0800c3d4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800c3d8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c3dc:	f7ff feb8 	bl	800c150 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800c3e0:	4806      	ldr	r0, [pc, #24]	; (800c3fc <HW_IPCC_Init+0x28>)
 800c3e2:	f7ff fede 	bl	800c1a2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800c3e6:	4805      	ldr	r0, [pc, #20]	; (800c3fc <HW_IPCC_Init+0x28>)
 800c3e8:	f7ff fecb 	bl	800c182 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800c3ec:	202c      	movs	r0, #44	; 0x2c
 800c3ee:	f7f7 fee0 	bl	80041b2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800c3f2:	202d      	movs	r0, #45	; 0x2d
 800c3f4:	f7f7 fedd 	bl	80041b2 <HAL_NVIC_EnableIRQ>

  return;
 800c3f8:	bf00      	nop
}
 800c3fa:	bd80      	pop	{r7, pc}
 800c3fc:	58000c00 	.word	0x58000c00

0800c400 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800c400:	b580      	push	{r7, lr}
 800c402:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800c404:	2101      	movs	r1, #1
 800c406:	4802      	ldr	r0, [pc, #8]	; (800c410 <HW_IPCC_BLE_Init+0x10>)
 800c408:	f7ff ff00 	bl	800c20c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c40c:	bf00      	nop
}
 800c40e:	bd80      	pop	{r7, pc}
 800c410:	58000c00 	.word	0x58000c00

0800c414 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800c414:	b580      	push	{r7, lr}
 800c416:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800c418:	2101      	movs	r1, #1
 800c41a:	4802      	ldr	r0, [pc, #8]	; (800c424 <HW_IPCC_BLE_SendCmd+0x10>)
 800c41c:	f7ff ff16 	bl	800c24c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800c420:	bf00      	nop
}
 800c422:	bd80      	pop	{r7, pc}
 800c424:	58000c00 	.word	0x58000c00

0800c428 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800c42c:	f7ff f8f6 	bl	800b61c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800c430:	2101      	movs	r1, #1
 800c432:	4802      	ldr	r0, [pc, #8]	; (800c43c <HW_IPCC_BLE_EvtHandler+0x14>)
 800c434:	f7ff fefc 	bl	800c230 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c438:	bf00      	nop
}
 800c43a:	bd80      	pop	{r7, pc}
 800c43c:	58000c00 	.word	0x58000c00

0800c440 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800c440:	b580      	push	{r7, lr}
 800c442:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800c444:	2120      	movs	r1, #32
 800c446:	4803      	ldr	r0, [pc, #12]	; (800c454 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800c448:	f7ff fece 	bl	800c1e8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800c44c:	f7ff f902 	bl	800b654 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800c450:	bf00      	nop
}
 800c452:	bd80      	pop	{r7, pc}
 800c454:	58000c00 	.word	0x58000c00

0800c458 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800c45c:	2102      	movs	r1, #2
 800c45e:	4802      	ldr	r0, [pc, #8]	; (800c468 <HW_IPCC_SYS_Init+0x10>)
 800c460:	f7ff fed4 	bl	800c20c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c464:	bf00      	nop
}
 800c466:	bd80      	pop	{r7, pc}
 800c468:	58000c00 	.word	0x58000c00

0800c46c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c470:	2102      	movs	r1, #2
 800c472:	4804      	ldr	r0, [pc, #16]	; (800c484 <HW_IPCC_SYS_SendCmd+0x18>)
 800c474:	f7ff feea 	bl	800c24c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c478:	2102      	movs	r1, #2
 800c47a:	4802      	ldr	r0, [pc, #8]	; (800c484 <HW_IPCC_SYS_SendCmd+0x18>)
 800c47c:	f7ff fea1 	bl	800c1c2 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800c480:	bf00      	nop
}
 800c482:	bd80      	pop	{r7, pc}
 800c484:	58000c00 	.word	0x58000c00

0800c488 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c48c:	2102      	movs	r1, #2
 800c48e:	4803      	ldr	r0, [pc, #12]	; (800c49c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800c490:	f7ff feaa 	bl	800c1e8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800c494:	f7ff f926 	bl	800b6e4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800c498:	bf00      	nop
}
 800c49a:	bd80      	pop	{r7, pc}
 800c49c:	58000c00 	.word	0x58000c00

0800c4a0 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800c4a4:	f7ff f92e 	bl	800b704 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800c4a8:	2102      	movs	r1, #2
 800c4aa:	4802      	ldr	r0, [pc, #8]	; (800c4b4 <HW_IPCC_SYS_EvtHandler+0x14>)
 800c4ac:	f7ff fec0 	bl	800c230 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c4b0:	bf00      	nop
}
 800c4b2:	bd80      	pop	{r7, pc}
 800c4b4:	58000c00 	.word	0x58000c00

0800c4b8 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800c4c0:	2108      	movs	r1, #8
 800c4c2:	480c      	ldr	r0, [pc, #48]	; (800c4f4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c4c4:	f7ff fed1 	bl	800c26a <LL_C1_IPCC_IsActiveFlag_CHx>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d007      	beq.n	800c4de <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800c4ce:	4a0a      	ldr	r2, [pc, #40]	; (800c4f8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c4d4:	2108      	movs	r1, #8
 800c4d6:	4807      	ldr	r0, [pc, #28]	; (800c4f4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c4d8:	f7ff fe73 	bl	800c1c2 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800c4dc:	e006      	b.n	800c4ec <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c4e2:	2108      	movs	r1, #8
 800c4e4:	4803      	ldr	r0, [pc, #12]	; (800c4f4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c4e6:	f7ff feb1 	bl	800c24c <LL_C1_IPCC_SetFlag_CHx>
  return;
 800c4ea:	bf00      	nop
}
 800c4ec:	3708      	adds	r7, #8
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	58000c00 	.word	0x58000c00
 800c4f8:	20000710 	.word	0x20000710

0800c4fc <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c500:	2108      	movs	r1, #8
 800c502:	4806      	ldr	r0, [pc, #24]	; (800c51c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800c504:	f7ff fe70 	bl	800c1e8 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800c508:	4b05      	ldr	r3, [pc, #20]	; (800c520 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c50e:	2108      	movs	r1, #8
 800c510:	4802      	ldr	r0, [pc, #8]	; (800c51c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800c512:	f7ff fe9b 	bl	800c24c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800c516:	bf00      	nop
}
 800c518:	bd80      	pop	{r7, pc}
 800c51a:	bf00      	nop
 800c51c:	58000c00 	.word	0x58000c00
 800c520:	20000710 	.word	0x20000710

0800c524 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800c524:	b580      	push	{r7, lr}
 800c526:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800c528:	2108      	movs	r1, #8
 800c52a:	4802      	ldr	r0, [pc, #8]	; (800c534 <HW_IPCC_TRACES_Init+0x10>)
 800c52c:	f7ff fe6e 	bl	800c20c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c530:	bf00      	nop
}
 800c532:	bd80      	pop	{r7, pc}
 800c534:	58000c00 	.word	0x58000c00

0800c538 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800c53c:	f7ff f980 	bl	800b840 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800c540:	2108      	movs	r1, #8
 800c542:	4802      	ldr	r0, [pc, #8]	; (800c54c <HW_IPCC_TRACES_EvtHandler+0x14>)
 800c544:	f7ff fe74 	bl	800c230 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c548:	bf00      	nop
}
 800c54a:	bd80      	pop	{r7, pc}
 800c54c:	58000c00 	.word	0x58000c00

0800c550 <__libc_init_array>:
 800c550:	b570      	push	{r4, r5, r6, lr}
 800c552:	4e0d      	ldr	r6, [pc, #52]	; (800c588 <__libc_init_array+0x38>)
 800c554:	4c0d      	ldr	r4, [pc, #52]	; (800c58c <__libc_init_array+0x3c>)
 800c556:	1ba4      	subs	r4, r4, r6
 800c558:	10a4      	asrs	r4, r4, #2
 800c55a:	2500      	movs	r5, #0
 800c55c:	42a5      	cmp	r5, r4
 800c55e:	d109      	bne.n	800c574 <__libc_init_array+0x24>
 800c560:	4e0b      	ldr	r6, [pc, #44]	; (800c590 <__libc_init_array+0x40>)
 800c562:	4c0c      	ldr	r4, [pc, #48]	; (800c594 <__libc_init_array+0x44>)
 800c564:	f000 f82c 	bl	800c5c0 <_init>
 800c568:	1ba4      	subs	r4, r4, r6
 800c56a:	10a4      	asrs	r4, r4, #2
 800c56c:	2500      	movs	r5, #0
 800c56e:	42a5      	cmp	r5, r4
 800c570:	d105      	bne.n	800c57e <__libc_init_array+0x2e>
 800c572:	bd70      	pop	{r4, r5, r6, pc}
 800c574:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c578:	4798      	blx	r3
 800c57a:	3501      	adds	r5, #1
 800c57c:	e7ee      	b.n	800c55c <__libc_init_array+0xc>
 800c57e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c582:	4798      	blx	r3
 800c584:	3501      	adds	r5, #1
 800c586:	e7f2      	b.n	800c56e <__libc_init_array+0x1e>
 800c588:	0800c74c 	.word	0x0800c74c
 800c58c:	0800c74c 	.word	0x0800c74c
 800c590:	0800c74c 	.word	0x0800c74c
 800c594:	0800c750 	.word	0x0800c750

0800c598 <memcpy>:
 800c598:	b510      	push	{r4, lr}
 800c59a:	1e43      	subs	r3, r0, #1
 800c59c:	440a      	add	r2, r1
 800c59e:	4291      	cmp	r1, r2
 800c5a0:	d100      	bne.n	800c5a4 <memcpy+0xc>
 800c5a2:	bd10      	pop	{r4, pc}
 800c5a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5ac:	e7f7      	b.n	800c59e <memcpy+0x6>

0800c5ae <memset>:
 800c5ae:	4402      	add	r2, r0
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d100      	bne.n	800c5b8 <memset+0xa>
 800c5b6:	4770      	bx	lr
 800c5b8:	f803 1b01 	strb.w	r1, [r3], #1
 800c5bc:	e7f9      	b.n	800c5b2 <memset+0x4>
	...

0800c5c0 <_init>:
 800c5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5c2:	bf00      	nop
 800c5c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5c6:	bc08      	pop	{r3}
 800c5c8:	469e      	mov	lr, r3
 800c5ca:	4770      	bx	lr

0800c5cc <_fini>:
 800c5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ce:	bf00      	nop
 800c5d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5d2:	bc08      	pop	{r3}
 800c5d4:	469e      	mov	lr, r3
 800c5d6:	4770      	bx	lr
