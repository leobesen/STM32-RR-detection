
SERVER_NUCLEO_LB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cad8  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000738  0800cc18  0800cc18  0001cc18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d350  0800d350  0001d350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d358  0800d358  0001d358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d35c  0800d35c  0001d35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000028  20000004  0800d360  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  2000002c  0800d388  0002002c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003d  200000c8  0800d421  000200c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000108  0800d45e  00020108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 000000a8  2000011c  0800d46f  0002011c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000005a0  200001c4  0800d517  000201c4  2**2
                  ALLOC
 12 ._user_heap_stack 00000c04  20000764  0800d517  00020764  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000024  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       0000019f  20030024  20030024  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000880  200301c4  200301c4  00030000  2**2
                  ALLOC
 17 .debug_info   00043875  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 00007c3a  00000000  00000000  00063a69  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00003160  00000000  00000000  0006b6a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00002dc8  00000000  00000000  0006e808  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  0000e6dd  00000000  00000000  000715d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   00035c70  00000000  00000000  0007fcad  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    0010378c  00000000  00000000  000b591d  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  001b90a9  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000cd38  00000000  00000000  001b9124  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001c4 	.word	0x200001c4
 800015c:	00000000 	.word	0x00000000
 8000160:	0800cc00 	.word	0x0800cc00

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001c8 	.word	0x200001c8
 800017c:	0800cc00 	.word	0x0800cc00

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_uldivmod>:
 8000190:	b953      	cbnz	r3, 80001a8 <__aeabi_uldivmod+0x18>
 8000192:	b94a      	cbnz	r2, 80001a8 <__aeabi_uldivmod+0x18>
 8000194:	2900      	cmp	r1, #0
 8000196:	bf08      	it	eq
 8000198:	2800      	cmpeq	r0, #0
 800019a:	bf1c      	itt	ne
 800019c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001a4:	f000 b972 	b.w	800048c <__aeabi_idiv0>
 80001a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b0:	f000 f806 	bl	80001c0 <__udivmoddi4>
 80001b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001bc:	b004      	add	sp, #16
 80001be:	4770      	bx	lr

080001c0 <__udivmoddi4>:
 80001c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c4:	9e08      	ldr	r6, [sp, #32]
 80001c6:	4604      	mov	r4, r0
 80001c8:	4688      	mov	r8, r1
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d14b      	bne.n	8000266 <__udivmoddi4+0xa6>
 80001ce:	428a      	cmp	r2, r1
 80001d0:	4615      	mov	r5, r2
 80001d2:	d967      	bls.n	80002a4 <__udivmoddi4+0xe4>
 80001d4:	fab2 f282 	clz	r2, r2
 80001d8:	b14a      	cbz	r2, 80001ee <__udivmoddi4+0x2e>
 80001da:	f1c2 0720 	rsb	r7, r2, #32
 80001de:	fa01 f302 	lsl.w	r3, r1, r2
 80001e2:	fa20 f707 	lsr.w	r7, r0, r7
 80001e6:	4095      	lsls	r5, r2
 80001e8:	ea47 0803 	orr.w	r8, r7, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80001f8:	fa1f fc85 	uxth.w	ip, r5
 80001fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000200:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000204:	fb07 f10c 	mul.w	r1, r7, ip
 8000208:	4299      	cmp	r1, r3
 800020a:	d909      	bls.n	8000220 <__udivmoddi4+0x60>
 800020c:	18eb      	adds	r3, r5, r3
 800020e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000212:	f080 811b 	bcs.w	800044c <__udivmoddi4+0x28c>
 8000216:	4299      	cmp	r1, r3
 8000218:	f240 8118 	bls.w	800044c <__udivmoddi4+0x28c>
 800021c:	3f02      	subs	r7, #2
 800021e:	442b      	add	r3, r5
 8000220:	1a5b      	subs	r3, r3, r1
 8000222:	b2a4      	uxth	r4, r4
 8000224:	fbb3 f0fe 	udiv	r0, r3, lr
 8000228:	fb0e 3310 	mls	r3, lr, r0, r3
 800022c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000230:	fb00 fc0c 	mul.w	ip, r0, ip
 8000234:	45a4      	cmp	ip, r4
 8000236:	d909      	bls.n	800024c <__udivmoddi4+0x8c>
 8000238:	192c      	adds	r4, r5, r4
 800023a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800023e:	f080 8107 	bcs.w	8000450 <__udivmoddi4+0x290>
 8000242:	45a4      	cmp	ip, r4
 8000244:	f240 8104 	bls.w	8000450 <__udivmoddi4+0x290>
 8000248:	3802      	subs	r0, #2
 800024a:	442c      	add	r4, r5
 800024c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000250:	eba4 040c 	sub.w	r4, r4, ip
 8000254:	2700      	movs	r7, #0
 8000256:	b11e      	cbz	r6, 8000260 <__udivmoddi4+0xa0>
 8000258:	40d4      	lsrs	r4, r2
 800025a:	2300      	movs	r3, #0
 800025c:	e9c6 4300 	strd	r4, r3, [r6]
 8000260:	4639      	mov	r1, r7
 8000262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000266:	428b      	cmp	r3, r1
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0xbe>
 800026a:	2e00      	cmp	r6, #0
 800026c:	f000 80eb 	beq.w	8000446 <__udivmoddi4+0x286>
 8000270:	2700      	movs	r7, #0
 8000272:	e9c6 0100 	strd	r0, r1, [r6]
 8000276:	4638      	mov	r0, r7
 8000278:	4639      	mov	r1, r7
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f783 	clz	r7, r3
 8000282:	2f00      	cmp	r7, #0
 8000284:	d147      	bne.n	8000316 <__udivmoddi4+0x156>
 8000286:	428b      	cmp	r3, r1
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd0>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fa 	bhi.w	8000484 <__udivmoddi4+0x2c4>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb61 0303 	sbc.w	r3, r1, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e0      	beq.n	8000260 <__udivmoddi4+0xa0>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7dd      	b.n	8000260 <__udivmoddi4+0xa0>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xe8>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 808f 	bne.w	80003d0 <__udivmoddi4+0x210>
 80002b2:	1b49      	subs	r1, r1, r5
 80002b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002b8:	fa1f f885 	uxth.w	r8, r5
 80002bc:	2701      	movs	r7, #1
 80002be:	fbb1 fcfe 	udiv	ip, r1, lr
 80002c2:	0c23      	lsrs	r3, r4, #16
 80002c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80002c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002cc:	fb08 f10c 	mul.w	r1, r8, ip
 80002d0:	4299      	cmp	r1, r3
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0x124>
 80002d4:	18eb      	adds	r3, r5, r3
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0x122>
 80002dc:	4299      	cmp	r1, r3
 80002de:	f200 80cd 	bhi.w	800047c <__udivmoddi4+0x2bc>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1a59      	subs	r1, r3, r1
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80002f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x14c>
 80002fc:	192c      	adds	r4, r5, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x14a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80b6 	bhi.w	8000476 <__udivmoddi4+0x2b6>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e79f      	b.n	8000256 <__udivmoddi4+0x96>
 8000316:	f1c7 0c20 	rsb	ip, r7, #32
 800031a:	40bb      	lsls	r3, r7
 800031c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000320:	ea4e 0e03 	orr.w	lr, lr, r3
 8000324:	fa01 f407 	lsl.w	r4, r1, r7
 8000328:	fa20 f50c 	lsr.w	r5, r0, ip
 800032c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000330:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000334:	4325      	orrs	r5, r4
 8000336:	fbb3 f9f8 	udiv	r9, r3, r8
 800033a:	0c2c      	lsrs	r4, r5, #16
 800033c:	fb08 3319 	mls	r3, r8, r9, r3
 8000340:	fa1f fa8e 	uxth.w	sl, lr
 8000344:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000348:	fb09 f40a 	mul.w	r4, r9, sl
 800034c:	429c      	cmp	r4, r3
 800034e:	fa02 f207 	lsl.w	r2, r2, r7
 8000352:	fa00 f107 	lsl.w	r1, r0, r7
 8000356:	d90b      	bls.n	8000370 <__udivmoddi4+0x1b0>
 8000358:	eb1e 0303 	adds.w	r3, lr, r3
 800035c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000360:	f080 8087 	bcs.w	8000472 <__udivmoddi4+0x2b2>
 8000364:	429c      	cmp	r4, r3
 8000366:	f240 8084 	bls.w	8000472 <__udivmoddi4+0x2b2>
 800036a:	f1a9 0902 	sub.w	r9, r9, #2
 800036e:	4473      	add	r3, lr
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	b2ad      	uxth	r5, r5
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000380:	fb00 fa0a 	mul.w	sl, r0, sl
 8000384:	45a2      	cmp	sl, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x1da>
 8000388:	eb1e 0404 	adds.w	r4, lr, r4
 800038c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000390:	d26b      	bcs.n	800046a <__udivmoddi4+0x2aa>
 8000392:	45a2      	cmp	sl, r4
 8000394:	d969      	bls.n	800046a <__udivmoddi4+0x2aa>
 8000396:	3802      	subs	r0, #2
 8000398:	4474      	add	r4, lr
 800039a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800039e:	fba0 8902 	umull	r8, r9, r0, r2
 80003a2:	eba4 040a 	sub.w	r4, r4, sl
 80003a6:	454c      	cmp	r4, r9
 80003a8:	46c2      	mov	sl, r8
 80003aa:	464b      	mov	r3, r9
 80003ac:	d354      	bcc.n	8000458 <__udivmoddi4+0x298>
 80003ae:	d051      	beq.n	8000454 <__udivmoddi4+0x294>
 80003b0:	2e00      	cmp	r6, #0
 80003b2:	d069      	beq.n	8000488 <__udivmoddi4+0x2c8>
 80003b4:	ebb1 050a 	subs.w	r5, r1, sl
 80003b8:	eb64 0403 	sbc.w	r4, r4, r3
 80003bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003c0:	40fd      	lsrs	r5, r7
 80003c2:	40fc      	lsrs	r4, r7
 80003c4:	ea4c 0505 	orr.w	r5, ip, r5
 80003c8:	e9c6 5400 	strd	r5, r4, [r6]
 80003cc:	2700      	movs	r7, #0
 80003ce:	e747      	b.n	8000260 <__udivmoddi4+0xa0>
 80003d0:	f1c2 0320 	rsb	r3, r2, #32
 80003d4:	fa20 f703 	lsr.w	r7, r0, r3
 80003d8:	4095      	lsls	r5, r2
 80003da:	fa01 f002 	lsl.w	r0, r1, r2
 80003de:	fa21 f303 	lsr.w	r3, r1, r3
 80003e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e6:	4338      	orrs	r0, r7
 80003e8:	0c01      	lsrs	r1, r0, #16
 80003ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80003ee:	fa1f f885 	uxth.w	r8, r5
 80003f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80003f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fa:	fb07 f308 	mul.w	r3, r7, r8
 80003fe:	428b      	cmp	r3, r1
 8000400:	fa04 f402 	lsl.w	r4, r4, r2
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x256>
 8000406:	1869      	adds	r1, r5, r1
 8000408:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800040c:	d22f      	bcs.n	800046e <__udivmoddi4+0x2ae>
 800040e:	428b      	cmp	r3, r1
 8000410:	d92d      	bls.n	800046e <__udivmoddi4+0x2ae>
 8000412:	3f02      	subs	r7, #2
 8000414:	4429      	add	r1, r5
 8000416:	1acb      	subs	r3, r1, r3
 8000418:	b281      	uxth	r1, r0
 800041a:	fbb3 f0fe 	udiv	r0, r3, lr
 800041e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000422:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000426:	fb00 f308 	mul.w	r3, r0, r8
 800042a:	428b      	cmp	r3, r1
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x27e>
 800042e:	1869      	adds	r1, r5, r1
 8000430:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000434:	d217      	bcs.n	8000466 <__udivmoddi4+0x2a6>
 8000436:	428b      	cmp	r3, r1
 8000438:	d915      	bls.n	8000466 <__udivmoddi4+0x2a6>
 800043a:	3802      	subs	r0, #2
 800043c:	4429      	add	r1, r5
 800043e:	1ac9      	subs	r1, r1, r3
 8000440:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000444:	e73b      	b.n	80002be <__udivmoddi4+0xfe>
 8000446:	4637      	mov	r7, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e709      	b.n	8000260 <__udivmoddi4+0xa0>
 800044c:	4607      	mov	r7, r0
 800044e:	e6e7      	b.n	8000220 <__udivmoddi4+0x60>
 8000450:	4618      	mov	r0, r3
 8000452:	e6fb      	b.n	800024c <__udivmoddi4+0x8c>
 8000454:	4541      	cmp	r1, r8
 8000456:	d2ab      	bcs.n	80003b0 <__udivmoddi4+0x1f0>
 8000458:	ebb8 0a02 	subs.w	sl, r8, r2
 800045c:	eb69 020e 	sbc.w	r2, r9, lr
 8000460:	3801      	subs	r0, #1
 8000462:	4613      	mov	r3, r2
 8000464:	e7a4      	b.n	80003b0 <__udivmoddi4+0x1f0>
 8000466:	4660      	mov	r0, ip
 8000468:	e7e9      	b.n	800043e <__udivmoddi4+0x27e>
 800046a:	4618      	mov	r0, r3
 800046c:	e795      	b.n	800039a <__udivmoddi4+0x1da>
 800046e:	4667      	mov	r7, ip
 8000470:	e7d1      	b.n	8000416 <__udivmoddi4+0x256>
 8000472:	4681      	mov	r9, r0
 8000474:	e77c      	b.n	8000370 <__udivmoddi4+0x1b0>
 8000476:	3802      	subs	r0, #2
 8000478:	442c      	add	r4, r5
 800047a:	e747      	b.n	800030c <__udivmoddi4+0x14c>
 800047c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000480:	442b      	add	r3, r5
 8000482:	e72f      	b.n	80002e4 <__udivmoddi4+0x124>
 8000484:	4638      	mov	r0, r7
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xda>
 8000488:	4637      	mov	r7, r6
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0xa0>

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop

08000490 <begin>:


float temperature;
//uint16_t IR, RED;

void begin(void){
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0

	  uint8_t temp = 0;
 8000496:	2300      	movs	r3, #0
 8000498:	717b      	strb	r3, [r7, #5]
	  uint8_t mode = 0x03; // [0,7]
 800049a:	2303      	movs	r3, #3
 800049c:	73fb      	strb	r3, [r7, #15]
	  bool temperature = true;
 800049e:	2301      	movs	r3, #1
 80004a0:	73bb      	strb	r3, [r7, #14]
	  bool spo2_hs = true;
 80004a2:	2301      	movs	r3, #1
 80004a4:	737b      	strb	r3, [r7, #13]
	  uint8_t spo2_sr = 6; // [0,7]
 80004a6:	2306      	movs	r3, #6
 80004a8:	733b      	strb	r3, [r7, #12]
	  uint8_t pulse_width = 3; // [0,3]
 80004aa:	2303      	movs	r3, #3
 80004ac:	72fb      	strb	r3, [r7, #11]
	  uint8_t red_level = 0x0F; // 0b00001111; // [0,15]
 80004ae:	230f      	movs	r3, #15
 80004b0:	72bb      	strb	r3, [r7, #10]
	  uint8_t ir_level = 0x0F; // [0,15]
 80004b2:	230f      	movs	r3, #15
 80004b4:	727b      	strb	r3, [r7, #9]
	  uint8_t hr_ready_int = true;
 80004b6:	2301      	movs	r3, #1
 80004b8:	723b      	strb	r3, [r7, #8]
	  uint8_t spo2_ready_int = true;
 80004ba:	2301      	movs	r3, #1
 80004bc:	71fb      	strb	r3, [r7, #7]
	  uint8_t temp_ready_int = true;
 80004be:	2301      	movs	r3, #1
 80004c0:	71bb      	strb	r3, [r7, #6]


	  //Reset
	  read_byte( MAX30100_MODE_CONFIG, &temp );
 80004c2:	1d7b      	adds	r3, r7, #5
 80004c4:	4619      	mov	r1, r3
 80004c6:	2006      	movs	r0, #6
 80004c8:	f000 f9e8 	bl	800089c <read_byte>

	  temp |= (1<<6);
 80004cc:	797b      	ldrb	r3, [r7, #5]
 80004ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_MODE_CONFIG, temp);
 80004d6:	797b      	ldrb	r3, [r7, #5]
 80004d8:	4619      	mov	r1, r3
 80004da:	2006      	movs	r0, #6
 80004dc:	f000 f9c2 	bl	8000864 <write_byte>

	  //Wait for the end of reset state/process
	  do
	  {
		read_byte(MAX30100_MODE_CONFIG, &temp);
 80004e0:	1d7b      	adds	r3, r7, #5
 80004e2:	4619      	mov	r1, r3
 80004e4:	2006      	movs	r0, #6
 80004e6:	f000 f9d9 	bl	800089c <read_byte>
	    temp &= (1<<6);
 80004ea:	797b      	ldrb	r3, [r7, #5]
 80004ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	717b      	strb	r3, [r7, #5]
	  }
	  while (temp != 0);
 80004f4:	797b      	ldrb	r3, [r7, #5]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d1f2      	bne.n	80004e0 <begin+0x50>

	  //Mode Configuration
	  read_byte( MAX30100_MODE_CONFIG, &temp );
 80004fa:	1d7b      	adds	r3, r7, #5
 80004fc:	4619      	mov	r1, r3
 80004fe:	2006      	movs	r0, #6
 8000500:	f000 f9cc 	bl	800089c <read_byte>

	  temp |= mode;
 8000504:	797a      	ldrb	r2, [r7, #5]
 8000506:	7bfb      	ldrb	r3, [r7, #15]
 8000508:	4313      	orrs	r3, r2
 800050a:	b2db      	uxtb	r3, r3
 800050c:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_MODE_CONFIG, temp);
 800050e:	797b      	ldrb	r3, [r7, #5]
 8000510:	4619      	mov	r1, r3
 8000512:	2006      	movs	r0, #6
 8000514:	f000 f9a6 	bl	8000864 <write_byte>
	  temp = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_MODE_CONFIG, &temp ); //check
 800051c:	1d7b      	adds	r3, r7, #5
 800051e:	4619      	mov	r1, r3
 8000520:	2006      	movs	r0, #6
 8000522:	f000 f9bb 	bl	800089c <read_byte>

	  //Temperature sensor activation
	  read_byte( MAX30100_MODE_CONFIG, &temp );
 8000526:	1d7b      	adds	r3, r7, #5
 8000528:	4619      	mov	r1, r3
 800052a:	2006      	movs	r0, #6
 800052c:	f000 f9b6 	bl	800089c <read_byte>

	  if ( temperature == true )
 8000530:	7bbb      	ldrb	r3, [r7, #14]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d005      	beq.n	8000542 <begin+0xb2>
	    temp |= (1<<3);
 8000536:	797b      	ldrb	r3, [r7, #5]
 8000538:	f043 0308 	orr.w	r3, r3, #8
 800053c:	b2db      	uxtb	r3, r3
 800053e:	717b      	strb	r3, [r7, #5]
 8000540:	e004      	b.n	800054c <begin+0xbc>
	  else
	    temp &= ~(1<<3);
 8000542:	797b      	ldrb	r3, [r7, #5]
 8000544:	f023 0308 	bic.w	r3, r3, #8
 8000548:	b2db      	uxtb	r3, r3
 800054a:	717b      	strb	r3, [r7, #5]

	  write_byte(MAX30100_MODE_CONFIG, temp);
 800054c:	797b      	ldrb	r3, [r7, #5]
 800054e:	4619      	mov	r1, r3
 8000550:	2006      	movs	r0, #6
 8000552:	f000 f987 	bl	8000864 <write_byte>
	  temp = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_MODE_CONFIG, &temp ); //check
 800055a:	1d7b      	adds	r3, r7, #5
 800055c:	4619      	mov	r1, r3
 800055e:	2006      	movs	r0, #6
 8000560:	f000 f99c 	bl	800089c <read_byte>

	  //SPO2 high resolution activation
	  read_byte( MAX30100_SPO2_CONFIG, &temp );
 8000564:	1d7b      	adds	r3, r7, #5
 8000566:	4619      	mov	r1, r3
 8000568:	2007      	movs	r0, #7
 800056a:	f000 f997 	bl	800089c <read_byte>

	  if (spo2_hs == true)
 800056e:	7b7b      	ldrb	r3, [r7, #13]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d005      	beq.n	8000580 <begin+0xf0>
	    temp |= (1<<6);
 8000574:	797b      	ldrb	r3, [r7, #5]
 8000576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800057a:	b2db      	uxtb	r3, r3
 800057c:	717b      	strb	r3, [r7, #5]
 800057e:	e004      	b.n	800058a <begin+0xfa>

	  else
	    temp &= ~(1<<6);
 8000580:	797b      	ldrb	r3, [r7, #5]
 8000582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000586:	b2db      	uxtb	r3, r3
 8000588:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_SPO2_CONFIG, temp);
 800058a:	797b      	ldrb	r3, [r7, #5]
 800058c:	4619      	mov	r1, r3
 800058e:	2007      	movs	r0, #7
 8000590:	f000 f968 	bl	8000864 <write_byte>

	  //SPO2 sample rate configuration
	  read_byte( MAX30100_SPO2_CONFIG, &temp );
 8000594:	1d7b      	adds	r3, r7, #5
 8000596:	4619      	mov	r1, r3
 8000598:	2007      	movs	r0, #7
 800059a:	f000 f97f 	bl	800089c <read_byte>
	  temp |= (spo2_sr << 2);
 800059e:	7b3b      	ldrb	r3, [r7, #12]
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	b25a      	sxtb	r2, r3
 80005a4:	797b      	ldrb	r3, [r7, #5]
 80005a6:	b25b      	sxtb	r3, r3
 80005a8:	4313      	orrs	r3, r2
 80005aa:	b25b      	sxtb	r3, r3
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	717b      	strb	r3, [r7, #5]

	  write_byte( MAX30100_SPO2_CONFIG, temp );
 80005b0:	797b      	ldrb	r3, [r7, #5]
 80005b2:	4619      	mov	r1, r3
 80005b4:	2007      	movs	r0, #7
 80005b6:	f000 f955 	bl	8000864 <write_byte>
	  temp = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_SPO2_CONFIG, &temp ); //check
 80005be:	1d7b      	adds	r3, r7, #5
 80005c0:	4619      	mov	r1, r3
 80005c2:	2007      	movs	r0, #7
 80005c4:	f000 f96a 	bl	800089c <read_byte>

	  //LED pulse width configuration
	  read_byte( MAX30100_SPO2_CONFIG, &temp );
 80005c8:	1d7b      	adds	r3, r7, #5
 80005ca:	4619      	mov	r1, r3
 80005cc:	2007      	movs	r0, #7
 80005ce:	f000 f965 	bl	800089c <read_byte>

	  temp |= pulse_width;
 80005d2:	797a      	ldrb	r2, [r7, #5]
 80005d4:	7afb      	ldrb	r3, [r7, #11]
 80005d6:	4313      	orrs	r3, r2
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_SPO2_CONFIG, temp);
 80005dc:	797b      	ldrb	r3, [r7, #5]
 80005de:	4619      	mov	r1, r3
 80005e0:	2007      	movs	r0, #7
 80005e2:	f000 f93f 	bl	8000864 <write_byte>
	  temp = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_SPO2_CONFIG, &temp ); //check
 80005ea:	1d7b      	adds	r3, r7, #5
 80005ec:	4619      	mov	r1, r3
 80005ee:	2007      	movs	r0, #7
 80005f0:	f000 f954 	bl	800089c <read_byte>

	  //LED red current level
	  read_byte( MAX30100_LED_CONFIG, &temp );
 80005f4:	1d7b      	adds	r3, r7, #5
 80005f6:	4619      	mov	r1, r3
 80005f8:	2009      	movs	r0, #9
 80005fa:	f000 f94f 	bl	800089c <read_byte>

	  temp |= (red_level << 4);
 80005fe:	7abb      	ldrb	r3, [r7, #10]
 8000600:	011b      	lsls	r3, r3, #4
 8000602:	b25a      	sxtb	r2, r3
 8000604:	797b      	ldrb	r3, [r7, #5]
 8000606:	b25b      	sxtb	r3, r3
 8000608:	4313      	orrs	r3, r2
 800060a:	b25b      	sxtb	r3, r3
 800060c:	b2db      	uxtb	r3, r3
 800060e:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_LED_CONFIG, temp);
 8000610:	797b      	ldrb	r3, [r7, #5]
 8000612:	4619      	mov	r1, r3
 8000614:	2009      	movs	r0, #9
 8000616:	f000 f925 	bl	8000864 <write_byte>
	  temp = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_LED_CONFIG, &temp ); //check
 800061e:	1d7b      	adds	r3, r7, #5
 8000620:	4619      	mov	r1, r3
 8000622:	2009      	movs	r0, #9
 8000624:	f000 f93a 	bl	800089c <read_byte>

	  //LED ir current level
	  read_byte( MAX30100_LED_CONFIG, &temp );
 8000628:	1d7b      	adds	r3, r7, #5
 800062a:	4619      	mov	r1, r3
 800062c:	2009      	movs	r0, #9
 800062e:	f000 f935 	bl	800089c <read_byte>

	  temp |= ir_level;
 8000632:	797a      	ldrb	r2, [r7, #5]
 8000634:	7a7b      	ldrb	r3, [r7, #9]
 8000636:	4313      	orrs	r3, r2
 8000638:	b2db      	uxtb	r3, r3
 800063a:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_LED_CONFIG, temp);
 800063c:	797b      	ldrb	r3, [r7, #5]
 800063e:	4619      	mov	r1, r3
 8000640:	2009      	movs	r0, #9
 8000642:	f000 f90f 	bl	8000864 <write_byte>
	  temp = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_LED_CONFIG, &temp ); //check
 800064a:	1d7b      	adds	r3, r7, #5
 800064c:	4619      	mov	r1, r3
 800064e:	2009      	movs	r0, #9
 8000650:	f000 f924 	bl	800089c <read_byte>

	  //Heart rate data ready interruption
	  read_byte( MAX30100_INT_ENABLE, &temp );
 8000654:	1d7b      	adds	r3, r7, #5
 8000656:	4619      	mov	r1, r3
 8000658:	2001      	movs	r0, #1
 800065a:	f000 f91f 	bl	800089c <read_byte>
	  if (hr_ready_int == true)
 800065e:	7a3b      	ldrb	r3, [r7, #8]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d105      	bne.n	8000670 <begin+0x1e0>
	    temp |= (1<<5);
 8000664:	797b      	ldrb	r3, [r7, #5]
 8000666:	f043 0320 	orr.w	r3, r3, #32
 800066a:	b2db      	uxtb	r3, r3
 800066c:	717b      	strb	r3, [r7, #5]
 800066e:	e004      	b.n	800067a <begin+0x1ea>
	  else
	    temp &= ~(1<<5);
 8000670:	797b      	ldrb	r3, [r7, #5]
 8000672:	f023 0320 	bic.w	r3, r3, #32
 8000676:	b2db      	uxtb	r3, r3
 8000678:	717b      	strb	r3, [r7, #5]

	  write_byte(MAX30100_INT_ENABLE, temp);
 800067a:	797b      	ldrb	r3, [r7, #5]
 800067c:	4619      	mov	r1, r3
 800067e:	2001      	movs	r0, #1
 8000680:	f000 f8f0 	bl	8000864 <write_byte>
	  temp = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_INT_ENABLE, &temp ); //check
 8000688:	1d7b      	adds	r3, r7, #5
 800068a:	4619      	mov	r1, r3
 800068c:	2001      	movs	r0, #1
 800068e:	f000 f905 	bl	800089c <read_byte>

	  //SPO2 data ready interruption
	  read_byte( MAX30100_INT_ENABLE, &temp );
 8000692:	1d7b      	adds	r3, r7, #5
 8000694:	4619      	mov	r1, r3
 8000696:	2001      	movs	r0, #1
 8000698:	f000 f900 	bl	800089c <read_byte>
	  if (spo2_ready_int == true)
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d105      	bne.n	80006ae <begin+0x21e>
	    temp |= (1<<4);
 80006a2:	797b      	ldrb	r3, [r7, #5]
 80006a4:	f043 0310 	orr.w	r3, r3, #16
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	717b      	strb	r3, [r7, #5]
 80006ac:	e004      	b.n	80006b8 <begin+0x228>
	  else
	    temp &= ~(1<<4);
 80006ae:	797b      	ldrb	r3, [r7, #5]
 80006b0:	f023 0310 	bic.w	r3, r3, #16
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	717b      	strb	r3, [r7, #5]

	  write_byte(MAX30100_INT_ENABLE, temp);
 80006b8:	797b      	ldrb	r3, [r7, #5]
 80006ba:	4619      	mov	r1, r3
 80006bc:	2001      	movs	r0, #1
 80006be:	f000 f8d1 	bl	8000864 <write_byte>
	  temp = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_INT_ENABLE, &temp ); //check
 80006c6:	1d7b      	adds	r3, r7, #5
 80006c8:	4619      	mov	r1, r3
 80006ca:	2001      	movs	r0, #1
 80006cc:	f000 f8e6 	bl	800089c <read_byte>

	  //Temperature data ready interruption
	  read_byte(MAX30100_INT_ENABLE, &temp );
 80006d0:	1d7b      	adds	r3, r7, #5
 80006d2:	4619      	mov	r1, r3
 80006d4:	2001      	movs	r0, #1
 80006d6:	f000 f8e1 	bl	800089c <read_byte>
	  if (temp_ready_int == true)
 80006da:	79bb      	ldrb	r3, [r7, #6]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d105      	bne.n	80006ec <begin+0x25c>
	    temp |= (1<<6);
 80006e0:	797b      	ldrb	r3, [r7, #5]
 80006e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	717b      	strb	r3, [r7, #5]
 80006ea:	e004      	b.n	80006f6 <begin+0x266>
	  else
	    temp &= ~(1<<6);
 80006ec:	797b      	ldrb	r3, [r7, #5]
 80006ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	717b      	strb	r3, [r7, #5]

	  write_byte(MAX30100_INT_ENABLE, temp);
 80006f6:	797b      	ldrb	r3, [r7, #5]
 80006f8:	4619      	mov	r1, r3
 80006fa:	2001      	movs	r0, #1
 80006fc:	f000 f8b2 	bl	8000864 <write_byte>
	  temp = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_INT_ENABLE, &temp ); //check
 8000704:	1d7b      	adds	r3, r7, #5
 8000706:	4619      	mov	r1, r3
 8000708:	2001      	movs	r0, #1
 800070a:	f000 f8c7 	bl	800089c <read_byte>
}
 800070e:	bf00      	nop
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <readFIFO>:


void readFIFO(uint16_t* RED, uint16_t* IR){
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af02      	add	r7, sp, #8
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
   /* Burst read four bytes from the FIFO
    * to obtain 16-bit ADC values for IR
    * and RED reflectance.
    */
	uint8_t data[4];
   data[0] = MAX30100_FIFO_DATA;
 8000722:	2305      	movs	r3, #5
 8000724:	733b      	strb	r3, [r7, #12]
   HAL_I2C_Master_Transmit(&hi2c3, MAX30100_ADDR, data, 1, 100);
 8000726:	f107 020c 	add.w	r2, r7, #12
 800072a:	2364      	movs	r3, #100	; 0x64
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	2301      	movs	r3, #1
 8000730:	21ae      	movs	r1, #174	; 0xae
 8000732:	4812      	ldr	r0, [pc, #72]	; (800077c <readFIFO+0x64>)
 8000734:	f003 f964 	bl	8003a00 <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Receive(&hi2c3, MAX30100_ADDR, data, 4, 1000); // Read four times from the FIFO
 8000738:	f107 020c 	add.w	r2, r7, #12
 800073c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	2304      	movs	r3, #4
 8000744:	21ae      	movs	r1, #174	; 0xae
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <readFIFO+0x64>)
 8000748:	f003 fa4e 	bl	8003be8 <HAL_I2C_Master_Receive>

   // Combine bytes to get the actual number
   IR[0] = (data[0]<<8) | data[1];
 800074c:	7b3b      	ldrb	r3, [r7, #12]
 800074e:	021b      	lsls	r3, r3, #8
 8000750:	b21a      	sxth	r2, r3
 8000752:	7b7b      	ldrb	r3, [r7, #13]
 8000754:	b21b      	sxth	r3, r3
 8000756:	4313      	orrs	r3, r2
 8000758:	b21b      	sxth	r3, r3
 800075a:	b29a      	uxth	r2, r3
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	801a      	strh	r2, [r3, #0]
   RED[0] = (data[2]<<8) | data[3];
 8000760:	7bbb      	ldrb	r3, [r7, #14]
 8000762:	021b      	lsls	r3, r3, #8
 8000764:	b21a      	sxth	r2, r3
 8000766:	7bfb      	ldrb	r3, [r7, #15]
 8000768:	b21b      	sxth	r3, r3
 800076a:	4313      	orrs	r3, r2
 800076c:	b21b      	sxth	r3, r3
 800076e:	b29a      	uxth	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	801a      	strh	r2, [r3, #0]
}
 8000774:	bf00      	nop
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000348 	.word	0x20000348

08000780 <read_diodes>:

uint8_t read_diodes(uint16_t* ir_buff, uint16_t* red_buff)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af02      	add	r7, sp, #8
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6039      	str	r1, [r7, #0]
    uint8_t i, sampleNum = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	75bb      	strb	r3, [r7, #22]
    uint8_t wrPtr[1] = {0}, rdPtr[1] = {0}, ovPtr, _ptr, samples[4] = {0};
 800078e:	2300      	movs	r3, #0
 8000790:	753b      	strb	r3, [r7, #20]
 8000792:	2300      	movs	r3, #0
 8000794:	743b      	strb	r3, [r7, #16]
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
    uint8_t data[4]  = {0};
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]

    read_byte( MAX30100_FIFO_WR_PTR, &wrPtr[0] );
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	4619      	mov	r1, r3
 80007a4:	2002      	movs	r0, #2
 80007a6:	f000 f879 	bl	800089c <read_byte>
    read_byte( MAX30100_FIFO_RD_PTR, &rdPtr[0] );
 80007aa:	f107 0310 	add.w	r3, r7, #16
 80007ae:	4619      	mov	r1, r3
 80007b0:	2004      	movs	r0, #4
 80007b2:	f000 f873 	bl	800089c <read_byte>

    sampleNum = abs( 16 + wrPtr[0] - rdPtr[0] ) % 16;
 80007b6:	7d3b      	ldrb	r3, [r7, #20]
 80007b8:	3310      	adds	r3, #16
 80007ba:	7c3a      	ldrb	r2, [r7, #16]
 80007bc:	1a9b      	subs	r3, r3, r2
 80007be:	2b00      	cmp	r3, #0
 80007c0:	bfb8      	it	lt
 80007c2:	425b      	neglt	r3, r3
 80007c4:	425a      	negs	r2, r3
 80007c6:	f003 030f 	and.w	r3, r3, #15
 80007ca:	f002 020f 	and.w	r2, r2, #15
 80007ce:	bf58      	it	pl
 80007d0:	4253      	negpl	r3, r2
 80007d2:	75bb      	strb	r3, [r7, #22]

    if ( sampleNum >= 1 )
 80007d4:	7dbb      	ldrb	r3, [r7, #22]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d03d      	beq.n	8000856 <read_diodes+0xd6>
    {
        for ( i = 0; i < sampleNum; ++i )
 80007da:	2300      	movs	r3, #0
 80007dc:	75fb      	strb	r3, [r7, #23]
 80007de:	e036      	b.n	800084e <read_diodes+0xce>
        {
            // read data
            data[0] = MAX30100_FIFO_DATA;
 80007e0:	2305      	movs	r3, #5
 80007e2:	723b      	strb	r3, [r7, #8]
            HAL_I2C_Master_Transmit(&hi2c3, MAX30100_ADDR, data, 1, 100);
 80007e4:	f107 0208 	add.w	r2, r7, #8
 80007e8:	2364      	movs	r3, #100	; 0x64
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	2301      	movs	r3, #1
 80007ee:	21ae      	movs	r1, #174	; 0xae
 80007f0:	481b      	ldr	r0, [pc, #108]	; (8000860 <read_diodes+0xe0>)
 80007f2:	f003 f905 	bl	8003a00 <HAL_I2C_Master_Transmit>
            HAL_I2C_Master_Receive(&hi2c3, MAX30100_ADDR, samples, 4, 100); // Read four times from the FIFO
 80007f6:	f107 020c 	add.w	r2, r7, #12
 80007fa:	2364      	movs	r3, #100	; 0x64
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2304      	movs	r3, #4
 8000800:	21ae      	movs	r1, #174	; 0xae
 8000802:	4817      	ldr	r0, [pc, #92]	; (8000860 <read_diodes+0xe0>)
 8000804:	f003 f9f0 	bl	8003be8 <HAL_I2C_Master_Receive>

            *(ir_buff) =  (uint16_t)samples[1];
 8000808:	7b7b      	ldrb	r3, [r7, #13]
 800080a:	b29a      	uxth	r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	801a      	strh	r2, [r3, #0]
            *(ir_buff++) |= (uint16_t)samples[0] << 8;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	1c9a      	adds	r2, r3, #2
 8000814:	607a      	str	r2, [r7, #4]
 8000816:	881a      	ldrh	r2, [r3, #0]
 8000818:	b211      	sxth	r1, r2
 800081a:	7b3a      	ldrb	r2, [r7, #12]
 800081c:	0212      	lsls	r2, r2, #8
 800081e:	b212      	sxth	r2, r2
 8000820:	430a      	orrs	r2, r1
 8000822:	b212      	sxth	r2, r2
 8000824:	b292      	uxth	r2, r2
 8000826:	801a      	strh	r2, [r3, #0]
            *(red_buff) = (uint16_t)samples[3];
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	b29a      	uxth	r2, r3
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	801a      	strh	r2, [r3, #0]
            *(red_buff++) |=  (uint16_t) samples[2] << 8;
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	1c9a      	adds	r2, r3, #2
 8000834:	603a      	str	r2, [r7, #0]
 8000836:	881a      	ldrh	r2, [r3, #0]
 8000838:	b211      	sxth	r1, r2
 800083a:	7bba      	ldrb	r2, [r7, #14]
 800083c:	0212      	lsls	r2, r2, #8
 800083e:	b212      	sxth	r2, r2
 8000840:	430a      	orrs	r2, r1
 8000842:	b212      	sxth	r2, r2
 8000844:	b292      	uxth	r2, r2
 8000846:	801a      	strh	r2, [r3, #0]
        for ( i = 0; i < sampleNum; ++i )
 8000848:	7dfb      	ldrb	r3, [r7, #23]
 800084a:	3301      	adds	r3, #1
 800084c:	75fb      	strb	r3, [r7, #23]
 800084e:	7dfa      	ldrb	r2, [r7, #23]
 8000850:	7dbb      	ldrb	r3, [r7, #22]
 8000852:	429a      	cmp	r2, r3
 8000854:	d3c4      	bcc.n	80007e0 <read_diodes+0x60>

        }
    }
    return sampleNum;
 8000856:	7dbb      	ldrb	r3, [r7, #22]
}
 8000858:	4618      	mov	r0, r3
 800085a:	3718      	adds	r7, #24
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000348 	.word	0x20000348

08000864 <write_byte>:
   HAL_I2C_Master_Receive(&hi2c3, MAX30100_ADDR, &tempFrac, 1, 100);

   temperature  = (float) tempFrac * 0.0625 + (int8_t) tempInt;
}

void write_byte(uint8_t reg, uint8_t data){
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af02      	add	r7, sp, #8
 800086a:	4603      	mov	r3, r0
 800086c:	460a      	mov	r2, r1
 800086e:	71fb      	strb	r3, [r7, #7]
 8000870:	4613      	mov	r3, r2
 8000872:	71bb      	strb	r3, [r7, #6]
   /*  Write to the register of a device. Note the char
    *  type must be used due to the MBED i2c functions
    */
   uint8_t transfer[2] = {reg, data};
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	733b      	strb	r3, [r7, #12]
 8000878:	79bb      	ldrb	r3, [r7, #6]
 800087a:	737b      	strb	r3, [r7, #13]
   HAL_I2C_Master_Transmit(&hi2c3, MAX30100_ADDR, transfer, 2, 100);
 800087c:	f107 020c 	add.w	r2, r7, #12
 8000880:	2364      	movs	r3, #100	; 0x64
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	2302      	movs	r3, #2
 8000886:	21ae      	movs	r1, #174	; 0xae
 8000888:	4803      	ldr	r0, [pc, #12]	; (8000898 <write_byte+0x34>)
 800088a:	f003 f8b9 	bl	8003a00 <HAL_I2C_Master_Transmit>
}
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000348 	.word	0x20000348

0800089c <read_byte>:

void read_byte(uint8_t reg, uint8_t* data){
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af02      	add	r7, sp, #8
 80008a2:	4603      	mov	r3, r0
 80008a4:	6039      	str	r1, [r7, #0]
 80008a6:	71fb      	strb	r3, [r7, #7]

	   HAL_I2C_Master_Transmit(&hi2c3, MAX30100_ADDR, &reg, 1, 100);
 80008a8:	1dfa      	adds	r2, r7, #7
 80008aa:	2364      	movs	r3, #100	; 0x64
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	2301      	movs	r3, #1
 80008b0:	21ae      	movs	r1, #174	; 0xae
 80008b2:	4807      	ldr	r0, [pc, #28]	; (80008d0 <read_byte+0x34>)
 80008b4:	f003 f8a4 	bl	8003a00 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c3, MAX30100_ADDR, data, 1, 100);
 80008b8:	2364      	movs	r3, #100	; 0x64
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	2301      	movs	r3, #1
 80008be:	683a      	ldr	r2, [r7, #0]
 80008c0:	21ae      	movs	r1, #174	; 0xae
 80008c2:	4803      	ldr	r0, [pc, #12]	; (80008d0 <read_byte+0x34>)
 80008c4:	f003 f990 	bl	8003be8 <HAL_I2C_Master_Receive>
}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000348 	.word	0x20000348

080008d4 <writeByte>:
float q[4] = {1.0f, 0.0f, 0.0f, 0.0f};           // vector to hold quaternion
float eInt[3] = {0.0f, 0.0f, 0.0f};              // vector to hold integral error for Mahony method


void writeByte(uint8_t reg, uint8_t data)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	460a      	mov	r2, r1
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_MPU9050_CS_ENBALE;
 80008e8:	2200      	movs	r2, #0
 80008ea:	2101      	movs	r1, #1
 80008ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f0:	f002 fef8 	bl	80036e4 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&hspi1, &spiReg, 1, 100);
 80008f4:	f107 010f 	add.w	r1, r7, #15
 80008f8:	2364      	movs	r3, #100	; 0x64
 80008fa:	2201      	movs	r2, #1
 80008fc:	4809      	ldr	r0, [pc, #36]	; (8000924 <writeByte+0x50>)
 80008fe:	f006 fce7 	bl	80072d0 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8000902:	1db9      	adds	r1, r7, #6
 8000904:	2364      	movs	r3, #100	; 0x64
 8000906:	2201      	movs	r2, #1
 8000908:	4806      	ldr	r0, [pc, #24]	; (8000924 <writeByte+0x50>)
 800090a:	f006 fce1 	bl	80072d0 <HAL_SPI_Transmit>
	//Disable CS
	_MPU9050_CS_DISABLE;
 800090e:	2201      	movs	r2, #1
 8000910:	2101      	movs	r1, #1
 8000912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000916:	f002 fee5 	bl	80036e4 <HAL_GPIO_WritePin>
}
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200003b8 	.word	0x200003b8

08000928 <readByte>:

void readByte(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	6039      	str	r1, [r7, #0]
 8000932:	71fb      	strb	r3, [r7, #7]
 8000934:	4613      	mov	r3, r2
 8000936:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800093e:	b2db      	uxtb	r3, r3
 8000940:	733b      	strb	r3, [r7, #12]
	//Enable CS
	_MPU9050_CS_ENBALE;
 8000942:	2200      	movs	r2, #0
 8000944:	2101      	movs	r1, #1
 8000946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094a:	f002 fecb 	bl	80036e4 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&hspi1, spiBuf, 1, 100);
 800094e:	f107 010c 	add.w	r1, r7, #12
 8000952:	2364      	movs	r3, #100	; 0x64
 8000954:	2201      	movs	r2, #1
 8000956:	480a      	ldr	r0, [pc, #40]	; (8000980 <readByte+0x58>)
 8000958:	f006 fcba 	bl	80072d0 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(&hspi1, dataR, size, 10000);
 800095c:	79bb      	ldrb	r3, [r7, #6]
 800095e:	b29a      	uxth	r2, r3
 8000960:	f242 7310 	movw	r3, #10000	; 0x2710
 8000964:	6839      	ldr	r1, [r7, #0]
 8000966:	4806      	ldr	r0, [pc, #24]	; (8000980 <readByte+0x58>)
 8000968:	f006 fe28 	bl	80075bc <HAL_SPI_Receive>
	//Disable CS
	_MPU9050_CS_DISABLE;
 800096c:	2201      	movs	r2, #1
 800096e:	2101      	movs	r1, #1
 8000970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000974:	f002 feb6 	bl	80036e4 <HAL_GPIO_WritePin>

}
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	200003b8 	.word	0x200003b8

08000984 <readAccelData>:
  }
}


void readAccelData(int16_t * destination)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  uint8_t rawData[6];  // x/y/z accel register data stored here

  readByte(ACCEL_XOUT_H, &rawData[0], 6);  // Read the six raw data registers into data array
 800098c:	f107 0308 	add.w	r3, r7, #8
 8000990:	2206      	movs	r2, #6
 8000992:	4619      	mov	r1, r3
 8000994:	203b      	movs	r0, #59	; 0x3b
 8000996:	f7ff ffc7 	bl	8000928 <readByte>
  destination[0] = (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 800099a:	7a3b      	ldrb	r3, [r7, #8]
 800099c:	021b      	lsls	r3, r3, #8
 800099e:	b21a      	sxth	r2, r3
 80009a0:	7a7b      	ldrb	r3, [r7, #9]
 80009a2:	b21b      	sxth	r3, r3
 80009a4:	4313      	orrs	r3, r2
 80009a6:	b21a      	sxth	r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	801a      	strh	r2, [r3, #0]
  destination[1] = (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
 80009ac:	7abb      	ldrb	r3, [r7, #10]
 80009ae:	021b      	lsls	r3, r3, #8
 80009b0:	b219      	sxth	r1, r3
 80009b2:	7afb      	ldrb	r3, [r7, #11]
 80009b4:	b21a      	sxth	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	3302      	adds	r3, #2
 80009ba:	430a      	orrs	r2, r1
 80009bc:	b212      	sxth	r2, r2
 80009be:	801a      	strh	r2, [r3, #0]
  destination[2] = (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
 80009c0:	7b3b      	ldrb	r3, [r7, #12]
 80009c2:	021b      	lsls	r3, r3, #8
 80009c4:	b219      	sxth	r1, r3
 80009c6:	7b7b      	ldrb	r3, [r7, #13]
 80009c8:	b21a      	sxth	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	3304      	adds	r3, #4
 80009ce:	430a      	orrs	r2, r1
 80009d0:	b212      	sxth	r2, r2
 80009d2:	801a      	strh	r2, [r3, #0]
}
 80009d4:	bf00      	nop
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <initMPU9250>:
	writeByte( I2C_SLV0_CTRL, 0x81);
}


void initMPU9250()
{  
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
  // Initialize MPU9250 device
  // wake up device
  writeByte(PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 80009e2:	2100      	movs	r1, #0
 80009e4:	206b      	movs	r0, #107	; 0x6b
 80009e6:	f7ff ff75 	bl	80008d4 <writeByte>
  HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 80009ea:	2064      	movs	r0, #100	; 0x64
 80009ec:	f002 fa34 	bl	8002e58 <HAL_Delay>

  // get stable time source
  writeByte(PWR_MGMT_1, 0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 80009f0:	2101      	movs	r1, #1
 80009f2:	206b      	movs	r0, #107	; 0x6b
 80009f4:	f7ff ff6e 	bl	80008d4 <writeByte>

  // Configure Gyro and Accelerometer
  // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively; 
  // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
  // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
  writeByte(CONFIG, 0x03);
 80009f8:	2103      	movs	r1, #3
 80009fa:	201a      	movs	r0, #26
 80009fc:	f7ff ff6a 	bl	80008d4 <writeByte>

  // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  writeByte(SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 8000a00:	2104      	movs	r1, #4
 8000a02:	2019      	movs	r0, #25
 8000a04:	f7ff ff66 	bl	80008d4 <writeByte>
  //writeByte(GYRO_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
  //writeByte(GYRO_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
  //writeByte(GYRO_CONFIG, c | Gscale << 3); // Set full scale range for the gyro

  // Set accelerometer configuration
  readByte(ACCEL_CONFIG, &c, 1);
 8000a08:	1dfb      	adds	r3, r7, #7
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	201c      	movs	r0, #28
 8000a10:	f7ff ff8a 	bl	8000928 <readByte>
  writeByte(ACCEL_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	f003 031f 	and.w	r3, r3, #31
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	201c      	movs	r0, #28
 8000a20:	f7ff ff58 	bl	80008d4 <writeByte>
  writeByte(ACCEL_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	f023 0318 	bic.w	r3, r3, #24
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	201c      	movs	r0, #28
 8000a30:	f7ff ff50 	bl	80008d4 <writeByte>
  writeByte(ACCEL_CONFIG, c | Ascale << 3); // Set full scale range for the accelerometer
 8000a34:	4b29      	ldr	r3, [pc, #164]	; (8000adc <initMPU9250+0x100>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	00db      	lsls	r3, r3, #3
 8000a3a:	b25a      	sxtb	r2, r3
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	b25b      	sxtb	r3, r3
 8000a40:	4313      	orrs	r3, r2
 8000a42:	b25b      	sxtb	r3, r3
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	4619      	mov	r1, r3
 8000a48:	201c      	movs	r0, #28
 8000a4a:	f7ff ff43 	bl	80008d4 <writeByte>

  // Set accelerometer sample rate configuration
  // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
  // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  readByte(ACCEL_CONFIG2, &c, 1);
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	2201      	movs	r2, #1
 8000a52:	4619      	mov	r1, r3
 8000a54:	201d      	movs	r0, #29
 8000a56:	f7ff ff67 	bl	8000928 <readByte>
  writeByte(ACCEL_CONFIG2, c & ~0x0F); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	f023 030f 	bic.w	r3, r3, #15
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	4619      	mov	r1, r3
 8000a64:	201d      	movs	r0, #29
 8000a66:	f7ff ff35 	bl	80008d4 <writeByte>
  //writeByte(ACCEL_CONFIG2, c | 0x03); // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
  writeByte(ACCEL_CONFIG2, c | 0x0B); // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	f043 030b 	orr.w	r3, r3, #11
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	4619      	mov	r1, r3
 8000a74:	201d      	movs	r0, #29
 8000a76:	f7ff ff2d 	bl	80008d4 <writeByte>
  // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips 
  // can join the I2C bus and all can be controlled by the Arduino as master
  writeByte(INT_PIN_CFG, 0x22);
 8000a7a:	2122      	movs	r1, #34	; 0x22
 8000a7c:	2037      	movs	r0, #55	; 0x37
 8000a7e:	f7ff ff29 	bl	80008d4 <writeByte>
  writeByte(INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 8000a82:	2101      	movs	r1, #1
 8000a84:	2038      	movs	r0, #56	; 0x38
 8000a86:	f7ff ff25 	bl	80008d4 <writeByte>

  // Power off gyro
  readByte(PWR_MGMT_2, &c, 1);
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	4619      	mov	r1, r3
 8000a90:	206c      	movs	r0, #108	; 0x6c
 8000a92:	f7ff ff49 	bl	8000928 <readByte>
  c |= 0x07;
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	f043 0307 	orr.w	r3, r3, #7
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	71fb      	strb	r3, [r7, #7]
  c &= 0xC7;
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	71fb      	strb	r3, [r7, #7]
  writeByte(PWR_MGMT_2, c); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	4619      	mov	r1, r3
 8000aae:	206c      	movs	r0, #108	; 0x6c
 8000ab0:	f7ff ff10 	bl	80008d4 <writeByte>

  //Power off temperature
  readByte(PWR_MGMT_1, &c, 1);
 8000ab4:	1dfb      	adds	r3, r7, #7
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	206b      	movs	r0, #107	; 0x6b
 8000abc:	f7ff ff34 	bl	8000928 <readByte>
  c |= 0x08;
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	f043 0308 	orr.w	r3, r3, #8
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	71fb      	strb	r3, [r7, #7]
  writeByte(PWR_MGMT_1, c); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	4619      	mov	r1, r3
 8000ace:	206b      	movs	r0, #107	; 0x6b
 8000ad0:	f7ff ff00 	bl	80008d4 <writeByte>

}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	200001e0 	.word	0x200001e0

08000ae0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000af2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	608b      	str	r3, [r1, #8]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000b0c:	f000 f80a 	bl	8000b24 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000b10:	4903      	ldr	r1, [pc, #12]	; (8000b20 <APPE_Init+0x18>)
 8000b12:	2000      	movs	r0, #0
 8000b14:	f000 fd32 	bl	800157c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000b18:	f000 f80e 	bl	8000b38 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000b1c:	bf00      	nop
}
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000394 	.word	0x20000394

08000b24 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000b28:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000b2c:	f7ff ffd8 	bl	8000ae0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 8000b30:	f001 fb08 	bl	8002144 <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000b34:	bf00      	nop
}
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b088      	sub	sp, #32
 8000b3c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000b3e:	f00b f85d 	bl	800bbfc <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000b42:	4a11      	ldr	r2, [pc, #68]	; (8000b88 <appe_Tl_Init+0x50>)
 8000b44:	2100      	movs	r1, #0
 8000b46:	2080      	movs	r0, #128	; 0x80
 8000b48:	f001 fc76 	bl	8002438 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <appe_Tl_Init+0x54>)
 8000b4e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <appe_Tl_Init+0x58>)
 8000b52:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000b54:	463b      	mov	r3, r7
 8000b56:	4619      	mov	r1, r3
 8000b58:	480e      	ldr	r0, [pc, #56]	; (8000b94 <appe_Tl_Init+0x5c>)
 8000b5a:	f00a fd5b 	bl	800b614 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <appe_Tl_Init+0x60>)
 8000b60:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <appe_Tl_Init+0x64>)
 8000b64:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <appe_Tl_Init+0x68>)
 8000b68:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000b6a:	f240 533c 	movw	r3, #1340	; 0x53c
 8000b6e:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000b70:	f107 0308 	add.w	r3, r7, #8
 8000b74:	4618      	mov	r0, r3
 8000b76:	f00b f94f 	bl	800be18 <TL_MM_Init>

  TL_Enable();
 8000b7a:	f00b f839 	bl	800bbf0 <TL_Enable>

  return;
 8000b7e:	bf00      	nop
}
 8000b80:	3720      	adds	r7, #32
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	0800b64d 	.word	0x0800b64d
 8000b8c:	20030700 	.word	0x20030700
 8000b90:	08000ba5 	.word	0x08000ba5
 8000b94:	08000bbb 	.word	0x08000bbb
 8000b98:	20030918 	.word	0x20030918
 8000b9c:	2003080c 	.word	0x2003080c
 8000ba0:	200301c4 	.word	0x200301c4

08000ba4 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000bae:	bf00      	nop
}
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <APPE_SysUserEvtRx>:

static void APPE_SysUserEvtRx( void * pPayload )
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8000bc2:	f00b f999 	bl	800bef8 <TL_TRACES_Init>

  APP_BLE_Init( );
 8000bc6:	f00b f9f1 	bl	800bfac <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000bca:	2100      	movs	r1, #0
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f001 facb 	bl	8002168 <UTIL_LPM_SetOffMode>
  return;
 8000bd2:	bf00      	nop
}
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
 8000bde:	f001 faf1 	bl	80021c4 <UTIL_LPM_EnterLowPower>
#endif
  return;
 8000be2:	bf00      	nop
}
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
 8000bee:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf4:	f001 fb44 	bl	8002280 <UTIL_SEQ_Run>
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2080      	movs	r0, #128	; 0x80
 8000c0c:	f001 fc34 	bl	8002478 <UTIL_SEQ_SetTask>
  return;
 8000c10:	bf00      	nop
}
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000c20:	2002      	movs	r0, #2
 8000c22:	f001 fc8f 	bl	8002544 <UTIL_SEQ_SetEvt>
  return;
 8000c26:	bf00      	nop
}
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000c36:	2002      	movs	r0, #2
 8000c38:	f001 fca2 	bl	8002580 <UTIL_SEQ_WaitEvt>
  return;
 8000c3c:	bf00      	nop
}
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4013      	ands	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c68:	68fb      	ldr	r3, [r7, #12]
}
 8000c6a:	bf00      	nop
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
	...

08000c78 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8c:	2004      	movs	r0, #4
 8000c8e:	f7ff ffd9 	bl	8000c44 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	2001      	movs	r0, #1
 8000c94:	f7ff ffd6 	bl	8000c44 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c98:	2002      	movs	r0, #2
 8000c9a:	f7ff ffd3 	bl	8000c44 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9e:	2008      	movs	r0, #8
 8000ca0:	f7ff ffd0 	bl	8000c44 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MPU9050_CS_Pin|LIS3DH_CS_Pin, GPIO_PIN_SET);
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	2105      	movs	r1, #5
 8000ca8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cac:	f002 fd1a 	bl	80036e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2123      	movs	r1, #35	; 0x23
 8000cb4:	481b      	ldr	r0, [pc, #108]	; (8000d24 <MX_GPIO_Init+0xac>)
 8000cb6:	f002 fd15 	bl	80036e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MPU9050_CS_Pin|LIS3DH_CS_Pin;
 8000cba:	2305      	movs	r3, #5
 8000cbc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd2:	f002 facb 	bl	800326c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cd6:	2310      	movs	r3, #16
 8000cd8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4810      	ldr	r0, [pc, #64]	; (8000d28 <MX_GPIO_Init+0xb0>)
 8000ce8:	f002 fac0 	bl	800326c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8000cec:	2323      	movs	r3, #35	; 0x23
 8000cee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4808      	ldr	r0, [pc, #32]	; (8000d24 <MX_GPIO_Init+0xac>)
 8000d02:	f002 fab3 	bl	800326c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000d06:	2303      	movs	r3, #3
 8000d08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	4619      	mov	r1, r3
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_GPIO_Init+0xb4>)
 8000d18:	f002 faa8 	bl	800326c <HAL_GPIO_Init>

}
 8000d1c:	bf00      	nop
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	48000400 	.word	0x48000400
 8000d28:	48000800 	.word	0x48000800
 8000d2c:	48000c00 	.word	0x48000c00

08000d30 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <LL_EXTI_EnableIT_0_31+0x24>)
 8000d3a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000d3e:	4905      	ldr	r1, [pc, #20]	; (8000d54 <LL_EXTI_EnableIT_0_31+0x24>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	58000800 	.word	0x58000800

08000d58 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4904      	ldr	r1, [pc, #16]	; (8000d78 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	600b      	str	r3, [r1, #0]

}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	58000800 	.word	0x58000800

08000d7c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000d82:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <ReadRtcSsrValue+0x3c>)
 8000d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <ReadRtcSsrValue+0x3c>)
 8000d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000d92:	e005      	b.n	8000da0 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000d98:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <ReadRtcSsrValue+0x3c>)
 8000d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d1f5      	bne.n	8000d94 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000da8:	683b      	ldr	r3, [r7, #0]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	40002800 	.word	0x40002800

08000dbc <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	460a      	mov	r2, r1
 8000dc6:	71fb      	strb	r3, [r7, #7]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000dcc:	79ba      	ldrb	r2, [r7, #6]
 8000dce:	491d      	ldr	r1, [pc, #116]	; (8000e44 <LinkTimerAfter+0x88>)
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4413      	add	r3, r2
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	440b      	add	r3, r1
 8000dda:	3315      	adds	r3, #21
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	2b06      	cmp	r3, #6
 8000de4:	d009      	beq.n	8000dfa <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000de6:	7bfa      	ldrb	r2, [r7, #15]
 8000de8:	4916      	ldr	r1, [pc, #88]	; (8000e44 <LinkTimerAfter+0x88>)
 8000dea:	4613      	mov	r3, r2
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	4413      	add	r3, r2
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	440b      	add	r3, r1
 8000df4:	3314      	adds	r3, #20
 8000df6:	79fa      	ldrb	r2, [r7, #7]
 8000df8:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000dfa:	79fa      	ldrb	r2, [r7, #7]
 8000dfc:	4911      	ldr	r1, [pc, #68]	; (8000e44 <LinkTimerAfter+0x88>)
 8000dfe:	4613      	mov	r3, r2
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	4413      	add	r3, r2
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	440b      	add	r3, r1
 8000e08:	3315      	adds	r3, #21
 8000e0a:	7bfa      	ldrb	r2, [r7, #15]
 8000e0c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000e0e:	79fa      	ldrb	r2, [r7, #7]
 8000e10:	490c      	ldr	r1, [pc, #48]	; (8000e44 <LinkTimerAfter+0x88>)
 8000e12:	4613      	mov	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	4413      	add	r3, r2
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	440b      	add	r3, r1
 8000e1c:	3314      	adds	r3, #20
 8000e1e:	79ba      	ldrb	r2, [r7, #6]
 8000e20:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000e22:	79ba      	ldrb	r2, [r7, #6]
 8000e24:	4907      	ldr	r1, [pc, #28]	; (8000e44 <LinkTimerAfter+0x88>)
 8000e26:	4613      	mov	r3, r2
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	4413      	add	r3, r2
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	440b      	add	r3, r1
 8000e30:	3315      	adds	r3, #21
 8000e32:	79fa      	ldrb	r2, [r7, #7]
 8000e34:	701a      	strb	r2, [r3, #0]

  return;
 8000e36:	bf00      	nop
}
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	2000002c 	.word	0x2000002c

08000e48 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	460a      	mov	r2, r1
 8000e52:	71fb      	strb	r3, [r7, #7]
 8000e54:	4613      	mov	r3, r2
 8000e56:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000e58:	4b29      	ldr	r3, [pc, #164]	; (8000f00 <LinkTimerBefore+0xb8>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	79ba      	ldrb	r2, [r7, #6]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d032      	beq.n	8000eca <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000e64:	79ba      	ldrb	r2, [r7, #6]
 8000e66:	4927      	ldr	r1, [pc, #156]	; (8000f04 <LinkTimerBefore+0xbc>)
 8000e68:	4613      	mov	r3, r2
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	4413      	add	r3, r2
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	440b      	add	r3, r1
 8000e72:	3314      	adds	r3, #20
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000e78:	7bfa      	ldrb	r2, [r7, #15]
 8000e7a:	4922      	ldr	r1, [pc, #136]	; (8000f04 <LinkTimerBefore+0xbc>)
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	4413      	add	r3, r2
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	440b      	add	r3, r1
 8000e86:	3315      	adds	r3, #21
 8000e88:	79fa      	ldrb	r2, [r7, #7]
 8000e8a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000e8c:	79fa      	ldrb	r2, [r7, #7]
 8000e8e:	491d      	ldr	r1, [pc, #116]	; (8000f04 <LinkTimerBefore+0xbc>)
 8000e90:	4613      	mov	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	4413      	add	r3, r2
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	440b      	add	r3, r1
 8000e9a:	3315      	adds	r3, #21
 8000e9c:	79ba      	ldrb	r2, [r7, #6]
 8000e9e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000ea0:	79fa      	ldrb	r2, [r7, #7]
 8000ea2:	4918      	ldr	r1, [pc, #96]	; (8000f04 <LinkTimerBefore+0xbc>)
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	4413      	add	r3, r2
 8000eaa:	00db      	lsls	r3, r3, #3
 8000eac:	440b      	add	r3, r1
 8000eae:	3314      	adds	r3, #20
 8000eb0:	7bfa      	ldrb	r2, [r7, #15]
 8000eb2:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000eb4:	79ba      	ldrb	r2, [r7, #6]
 8000eb6:	4913      	ldr	r1, [pc, #76]	; (8000f04 <LinkTimerBefore+0xbc>)
 8000eb8:	4613      	mov	r3, r2
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	4413      	add	r3, r2
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	440b      	add	r3, r1
 8000ec2:	3314      	adds	r3, #20
 8000ec4:	79fa      	ldrb	r2, [r7, #7]
 8000ec6:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000ec8:	e014      	b.n	8000ef4 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000eca:	79fa      	ldrb	r2, [r7, #7]
 8000ecc:	490d      	ldr	r1, [pc, #52]	; (8000f04 <LinkTimerBefore+0xbc>)
 8000ece:	4613      	mov	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	4413      	add	r3, r2
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	440b      	add	r3, r1
 8000ed8:	3315      	adds	r3, #21
 8000eda:	79ba      	ldrb	r2, [r7, #6]
 8000edc:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000ede:	79ba      	ldrb	r2, [r7, #6]
 8000ee0:	4908      	ldr	r1, [pc, #32]	; (8000f04 <LinkTimerBefore+0xbc>)
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	4413      	add	r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	440b      	add	r3, r1
 8000eec:	3314      	adds	r3, #20
 8000eee:	79fa      	ldrb	r2, [r7, #7]
 8000ef0:	701a      	strb	r2, [r3, #0]
  return;
 8000ef2:	bf00      	nop
}
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	200000bc 	.word	0x200000bc
 8000f04:	2000002c 	.word	0x2000002c

08000f08 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f12:	4b4e      	ldr	r3, [pc, #312]	; (800104c <linkTimer+0x144>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	2b06      	cmp	r3, #6
 8000f1a:	d118      	bne.n	8000f4e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000f1c:	4b4b      	ldr	r3, [pc, #300]	; (800104c <linkTimer+0x144>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4b4b      	ldr	r3, [pc, #300]	; (8001050 <linkTimer+0x148>)
 8000f24:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000f26:	4a49      	ldr	r2, [pc, #292]	; (800104c <linkTimer+0x144>)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000f2c:	79fa      	ldrb	r2, [r7, #7]
 8000f2e:	4949      	ldr	r1, [pc, #292]	; (8001054 <linkTimer+0x14c>)
 8000f30:	4613      	mov	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	4413      	add	r3, r2
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	440b      	add	r3, r1
 8000f3a:	3315      	adds	r3, #21
 8000f3c:	2206      	movs	r2, #6
 8000f3e:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000f40:	4b45      	ldr	r3, [pc, #276]	; (8001058 <linkTimer+0x150>)
 8000f42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f46:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	81fb      	strh	r3, [r7, #14]
 8000f4c:	e078      	b.n	8001040 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000f4e:	f000 f909 	bl	8001164 <ReturnTimeElapsed>
 8000f52:	4603      	mov	r3, r0
 8000f54:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000f56:	79fa      	ldrb	r2, [r7, #7]
 8000f58:	493e      	ldr	r1, [pc, #248]	; (8001054 <linkTimer+0x14c>)
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	4413      	add	r3, r2
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	440b      	add	r3, r1
 8000f64:	3308      	adds	r3, #8
 8000f66:	6819      	ldr	r1, [r3, #0]
 8000f68:	89fb      	ldrh	r3, [r7, #14]
 8000f6a:	79fa      	ldrb	r2, [r7, #7]
 8000f6c:	4419      	add	r1, r3
 8000f6e:	4839      	ldr	r0, [pc, #228]	; (8001054 <linkTimer+0x14c>)
 8000f70:	4613      	mov	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	4413      	add	r3, r2
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	4403      	add	r3, r0
 8000f7a:	3308      	adds	r3, #8
 8000f7c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000f7e:	79fa      	ldrb	r2, [r7, #7]
 8000f80:	4934      	ldr	r1, [pc, #208]	; (8001054 <linkTimer+0x14c>)
 8000f82:	4613      	mov	r3, r2
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	4413      	add	r3, r2
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	440b      	add	r3, r1
 8000f8c:	3308      	adds	r3, #8
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000f92:	4b2e      	ldr	r3, [pc, #184]	; (800104c <linkTimer+0x144>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4a2e      	ldr	r2, [pc, #184]	; (8001054 <linkTimer+0x14c>)
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	440b      	add	r3, r1
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	4413      	add	r3, r2
 8000fa6:	3308      	adds	r3, #8
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d337      	bcc.n	8001020 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000fb0:	4b26      	ldr	r3, [pc, #152]	; (800104c <linkTimer+0x144>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000fb6:	7b7a      	ldrb	r2, [r7, #13]
 8000fb8:	4926      	ldr	r1, [pc, #152]	; (8001054 <linkTimer+0x14c>)
 8000fba:	4613      	mov	r3, r2
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	4413      	add	r3, r2
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	440b      	add	r3, r1
 8000fc4:	3315      	adds	r3, #21
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000fca:	e013      	b.n	8000ff4 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000fcc:	7b7a      	ldrb	r2, [r7, #13]
 8000fce:	4921      	ldr	r1, [pc, #132]	; (8001054 <linkTimer+0x14c>)
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	4413      	add	r3, r2
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	440b      	add	r3, r1
 8000fda:	3315      	adds	r3, #21
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000fe0:	7b7a      	ldrb	r2, [r7, #13]
 8000fe2:	491c      	ldr	r1, [pc, #112]	; (8001054 <linkTimer+0x14c>)
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	4413      	add	r3, r2
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	440b      	add	r3, r1
 8000fee:	3315      	adds	r3, #21
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000ff4:	7b3b      	ldrb	r3, [r7, #12]
 8000ff6:	2b06      	cmp	r3, #6
 8000ff8:	d00b      	beq.n	8001012 <linkTimer+0x10a>
 8000ffa:	7b3a      	ldrb	r2, [r7, #12]
 8000ffc:	4915      	ldr	r1, [pc, #84]	; (8001054 <linkTimer+0x14c>)
 8000ffe:	4613      	mov	r3, r2
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	4413      	add	r3, r2
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	440b      	add	r3, r1
 8001008:	3308      	adds	r3, #8
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	68ba      	ldr	r2, [r7, #8]
 800100e:	429a      	cmp	r2, r3
 8001010:	d2dc      	bcs.n	8000fcc <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001012:	7b7a      	ldrb	r2, [r7, #13]
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fecf 	bl	8000dbc <LinkTimerAfter>
 800101e:	e00f      	b.n	8001040 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001020:	4b0a      	ldr	r3, [pc, #40]	; (800104c <linkTimer+0x144>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	4611      	mov	r1, r2
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ff0c 	bl	8000e48 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <linkTimer+0x144>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <linkTimer+0x148>)
 8001038:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800103a:	4a04      	ldr	r2, [pc, #16]	; (800104c <linkTimer+0x144>)
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001040:	89fb      	ldrh	r3, [r7, #14]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200000bc 	.word	0x200000bc
 8001050:	200000bd 	.word	0x200000bd
 8001054:	2000002c 	.word	0x2000002c
 8001058:	200000c0 	.word	0x200000c0

0800105c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	460a      	mov	r2, r1
 8001066:	71fb      	strb	r3, [r7, #7]
 8001068:	4613      	mov	r3, r2
 800106a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 800106c:	4b39      	ldr	r3, [pc, #228]	; (8001154 <UnlinkTimer+0xf8>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	79fa      	ldrb	r2, [r7, #7]
 8001074:	429a      	cmp	r2, r3
 8001076:	d111      	bne.n	800109c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001078:	4b36      	ldr	r3, [pc, #216]	; (8001154 <UnlinkTimer+0xf8>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4b36      	ldr	r3, [pc, #216]	; (8001158 <UnlinkTimer+0xfc>)
 8001080:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001082:	79fa      	ldrb	r2, [r7, #7]
 8001084:	4935      	ldr	r1, [pc, #212]	; (800115c <UnlinkTimer+0x100>)
 8001086:	4613      	mov	r3, r2
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	4413      	add	r3, r2
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	440b      	add	r3, r1
 8001090:	3315      	adds	r3, #21
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <UnlinkTimer+0xf8>)
 8001098:	701a      	strb	r2, [r3, #0]
 800109a:	e03e      	b.n	800111a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	492f      	ldr	r1, [pc, #188]	; (800115c <UnlinkTimer+0x100>)
 80010a0:	4613      	mov	r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	4413      	add	r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	440b      	add	r3, r1
 80010aa:	3314      	adds	r3, #20
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80010b0:	79fa      	ldrb	r2, [r7, #7]
 80010b2:	492a      	ldr	r1, [pc, #168]	; (800115c <UnlinkTimer+0x100>)
 80010b4:	4613      	mov	r3, r2
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	4413      	add	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	440b      	add	r3, r1
 80010be:	3315      	adds	r3, #21
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80010c4:	79f9      	ldrb	r1, [r7, #7]
 80010c6:	7bfa      	ldrb	r2, [r7, #15]
 80010c8:	4824      	ldr	r0, [pc, #144]	; (800115c <UnlinkTimer+0x100>)
 80010ca:	460b      	mov	r3, r1
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	440b      	add	r3, r1
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	4403      	add	r3, r0
 80010d4:	3315      	adds	r3, #21
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b2d8      	uxtb	r0, r3
 80010da:	4920      	ldr	r1, [pc, #128]	; (800115c <UnlinkTimer+0x100>)
 80010dc:	4613      	mov	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	4413      	add	r3, r2
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	440b      	add	r3, r1
 80010e6:	3315      	adds	r3, #21
 80010e8:	4602      	mov	r2, r0
 80010ea:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010ec:	7bbb      	ldrb	r3, [r7, #14]
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d013      	beq.n	800111a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80010f2:	79f9      	ldrb	r1, [r7, #7]
 80010f4:	7bba      	ldrb	r2, [r7, #14]
 80010f6:	4819      	ldr	r0, [pc, #100]	; (800115c <UnlinkTimer+0x100>)
 80010f8:	460b      	mov	r3, r1
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	440b      	add	r3, r1
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	4403      	add	r3, r0
 8001102:	3314      	adds	r3, #20
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b2d8      	uxtb	r0, r3
 8001108:	4914      	ldr	r1, [pc, #80]	; (800115c <UnlinkTimer+0x100>)
 800110a:	4613      	mov	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4413      	add	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	440b      	add	r3, r1
 8001114:	3314      	adds	r3, #20
 8001116:	4602      	mov	r2, r0
 8001118:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800111a:	79fa      	ldrb	r2, [r7, #7]
 800111c:	490f      	ldr	r1, [pc, #60]	; (800115c <UnlinkTimer+0x100>)
 800111e:	4613      	mov	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4413      	add	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	440b      	add	r3, r1
 8001128:	330c      	adds	r3, #12
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <UnlinkTimer+0xf8>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b06      	cmp	r3, #6
 8001136:	d107      	bne.n	8001148 <UnlinkTimer+0xec>
 8001138:	79bb      	ldrb	r3, [r7, #6]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d104      	bne.n	8001148 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <UnlinkTimer+0x104>)
 8001140:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001144:	601a      	str	r2, [r3, #0]
  }

  return;
 8001146:	bf00      	nop
 8001148:	bf00      	nop
}
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	200000bc 	.word	0x200000bc
 8001158:	200000bd 	.word	0x200000bd
 800115c:	2000002c 	.word	0x2000002c
 8001160:	200000c0 	.word	0x200000c0

08001164 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <ReturnTimeElapsed+0x70>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001172:	d026      	beq.n	80011c2 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001174:	f7ff fe02 	bl	8000d7c <ReadRtcSsrValue>
 8001178:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <ReturnTimeElapsed+0x70>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	429a      	cmp	r2, r3
 8001182:	d805      	bhi.n	8001190 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <ReturnTimeElapsed+0x70>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	e00a      	b.n	80011a6 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <ReturnTimeElapsed+0x74>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 800119c:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <ReturnTimeElapsed+0x70>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	4413      	add	r3, r2
 80011a4:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80011a6:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <ReturnTimeElapsed+0x78>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	fb02 f303 	mul.w	r3, r2, r3
 80011b2:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80011b4:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <ReturnTimeElapsed+0x7c>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	461a      	mov	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	40d3      	lsrs	r3, r2
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	e001      	b.n	80011c6 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	b29b      	uxth	r3, r3
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200000c0 	.word	0x200000c0
 80011d8:	200001ea 	.word	0x200001ea
 80011dc:	200001e9 	.word	0x200001e9
 80011e0:	200001e8 	.word	0x200001e8

080011e4 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d108      	bne.n	8001206 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80011f4:	f7ff fdc2 	bl	8000d7c <ReadRtcSsrValue>
 80011f8:	4602      	mov	r2, r0
 80011fa:	4b24      	ldr	r3, [pc, #144]	; (800128c <RestartWakeupCounter+0xa8>)
 80011fc:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80011fe:	2003      	movs	r0, #3
 8001200:	f002 f800 	bl	8003204 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001204:	e03e      	b.n	8001284 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d803      	bhi.n	8001214 <RestartWakeupCounter+0x30>
 800120c:	4b20      	ldr	r3, [pc, #128]	; (8001290 <RestartWakeupCounter+0xac>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d002      	beq.n	800121a <RestartWakeupCounter+0x36>
      Value -= 1;
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	3b01      	subs	r3, #1
 8001218:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800121a:	bf00      	nop
 800121c:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <RestartWakeupCounter+0xb0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0f7      	beq.n	800121c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <RestartWakeupCounter+0xb0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4b17      	ldr	r3, [pc, #92]	; (8001294 <RestartWakeupCounter+0xb0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001240:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <RestartWakeupCounter+0xb4>)
 8001244:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001248:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800124a:	2003      	movs	r0, #3
 800124c:	f001 fff4 	bl	8003238 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <RestartWakeupCounter+0xb8>)
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	0c1b      	lsrs	r3, r3, #16
 8001256:	041b      	lsls	r3, r3, #16
 8001258:	88fa      	ldrh	r2, [r7, #6]
 800125a:	4910      	ldr	r1, [pc, #64]	; (800129c <RestartWakeupCounter+0xb8>)
 800125c:	4313      	orrs	r3, r2
 800125e:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001260:	f7ff fd8c 	bl	8000d7c <ReadRtcSsrValue>
 8001264:	4602      	mov	r2, r0
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <RestartWakeupCounter+0xa8>)
 8001268:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <RestartWakeupCounter+0xb0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <RestartWakeupCounter+0xb0>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800127c:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800127e:	f3af 8000 	nop.w
  return ;
 8001282:	bf00      	nop
}
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200000c0 	.word	0x200000c0
 8001290:	200001e8 	.word	0x200001e8
 8001294:	200001e4 	.word	0x200001e4
 8001298:	58000800 	.word	0x58000800
 800129c:	40002800 	.word	0x40002800

080012a0 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80012a6:	4b47      	ldr	r3, [pc, #284]	; (80013c4 <RescheduleTimerList+0x124>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012b2:	d108      	bne.n	80012c6 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80012b4:	bf00      	nop
 80012b6:	4b44      	ldr	r3, [pc, #272]	; (80013c8 <RescheduleTimerList+0x128>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	f003 0304 	and.w	r3, r3, #4
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f7      	bne.n	80012b6 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80012c6:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <RescheduleTimerList+0x128>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	4b3e      	ldr	r3, [pc, #248]	; (80013c8 <RescheduleTimerList+0x128>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012d8:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80012da:	4b3c      	ldr	r3, [pc, #240]	; (80013cc <RescheduleTimerList+0x12c>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80012e0:	7bfa      	ldrb	r2, [r7, #15]
 80012e2:	493b      	ldr	r1, [pc, #236]	; (80013d0 <RescheduleTimerList+0x130>)
 80012e4:	4613      	mov	r3, r2
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	4413      	add	r3, r2
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	440b      	add	r3, r1
 80012ee:	3308      	adds	r3, #8
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80012f4:	f7ff ff36 	bl	8001164 <ReturnTimeElapsed>
 80012f8:	4603      	mov	r3, r0
 80012fa:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	429a      	cmp	r2, r3
 8001302:	d205      	bcs.n	8001310 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001308:	4b32      	ldr	r3, [pc, #200]	; (80013d4 <RescheduleTimerList+0x134>)
 800130a:	2201      	movs	r2, #1
 800130c:	701a      	strb	r2, [r3, #0]
 800130e:	e04d      	b.n	80013ac <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001310:	88fb      	ldrh	r3, [r7, #6]
 8001312:	4a31      	ldr	r2, [pc, #196]	; (80013d8 <RescheduleTimerList+0x138>)
 8001314:	8812      	ldrh	r2, [r2, #0]
 8001316:	b292      	uxth	r2, r2
 8001318:	4413      	add	r3, r2
 800131a:	461a      	mov	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	4293      	cmp	r3, r2
 8001320:	d906      	bls.n	8001330 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001322:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <RescheduleTimerList+0x138>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001328:	4b2a      	ldr	r3, [pc, #168]	; (80013d4 <RescheduleTimerList+0x134>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
 800132e:	e03d      	b.n	80013ac <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	b29a      	uxth	r2, r3
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800133a:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <RescheduleTimerList+0x134>)
 800133c:	2201      	movs	r2, #1
 800133e:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001340:	e034      	b.n	80013ac <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001342:	7bfa      	ldrb	r2, [r7, #15]
 8001344:	4922      	ldr	r1, [pc, #136]	; (80013d0 <RescheduleTimerList+0x130>)
 8001346:	4613      	mov	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	4413      	add	r3, r2
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	440b      	add	r3, r1
 8001350:	3308      	adds	r3, #8
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	88fb      	ldrh	r3, [r7, #6]
 8001356:	429a      	cmp	r2, r3
 8001358:	d20a      	bcs.n	8001370 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800135a:	7bfa      	ldrb	r2, [r7, #15]
 800135c:	491c      	ldr	r1, [pc, #112]	; (80013d0 <RescheduleTimerList+0x130>)
 800135e:	4613      	mov	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	4413      	add	r3, r2
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	440b      	add	r3, r1
 8001368:	3308      	adds	r3, #8
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	e013      	b.n	8001398 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001370:	7bfa      	ldrb	r2, [r7, #15]
 8001372:	4917      	ldr	r1, [pc, #92]	; (80013d0 <RescheduleTimerList+0x130>)
 8001374:	4613      	mov	r3, r2
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	4413      	add	r3, r2
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	440b      	add	r3, r1
 800137e:	3308      	adds	r3, #8
 8001380:	6819      	ldr	r1, [r3, #0]
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	7bfa      	ldrb	r2, [r7, #15]
 8001386:	1ac9      	subs	r1, r1, r3
 8001388:	4811      	ldr	r0, [pc, #68]	; (80013d0 <RescheduleTimerList+0x130>)
 800138a:	4613      	mov	r3, r2
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	4413      	add	r3, r2
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	4403      	add	r3, r0
 8001394:	3308      	adds	r3, #8
 8001396:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001398:	7bfa      	ldrb	r2, [r7, #15]
 800139a:	490d      	ldr	r1, [pc, #52]	; (80013d0 <RescheduleTimerList+0x130>)
 800139c:	4613      	mov	r3, r2
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	4413      	add	r3, r2
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	440b      	add	r3, r1
 80013a6:	3315      	adds	r3, #21
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	2b06      	cmp	r3, #6
 80013b0:	d1c7      	bne.n	8001342 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80013b2:	89bb      	ldrh	r3, [r7, #12]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff15 	bl	80011e4 <RestartWakeupCounter>

  return ;
 80013ba:	bf00      	nop
}
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40002800 	.word	0x40002800
 80013c8:	200001e4 	.word	0x200001e4
 80013cc:	200000bc 	.word	0x200000bc
 80013d0:	2000002c 	.word	0x2000002c
 80013d4:	200000c4 	.word	0x200000c4
 80013d8:	200001ec 	.word	0x200001ec

080013dc <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013e2:	f3ef 8310 	mrs	r3, PRIMASK
 80013e6:	617b      	str	r3, [r7, #20]
  return(result);
 80013e8:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80013ec:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80013ee:	4b5e      	ldr	r3, [pc, #376]	; (8001568 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	22ca      	movs	r2, #202	; 0xca
 80013f6:	625a      	str	r2, [r3, #36]	; 0x24
 80013f8:	4b5b      	ldr	r3, [pc, #364]	; (8001568 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2253      	movs	r2, #83	; 0x53
 8001400:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8001402:	4b59      	ldr	r3, [pc, #356]	; (8001568 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	4b57      	ldr	r3, [pc, #348]	; (8001568 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001414:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001416:	4b55      	ldr	r3, [pc, #340]	; (800156c <HW_TS_RTC_Wakeup_Handler+0x190>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 800141e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001422:	4953      	ldr	r1, [pc, #332]	; (8001570 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001424:	4613      	mov	r3, r2
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	4413      	add	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	440b      	add	r3, r1
 800142e:	330c      	adds	r3, #12
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d170      	bne.n	800151a <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001438:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800143c:	494c      	ldr	r1, [pc, #304]	; (8001570 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800143e:	4613      	mov	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	440b      	add	r3, r1
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800144c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001450:	4947      	ldr	r1, [pc, #284]	; (8001570 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001452:	4613      	mov	r3, r2
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4413      	add	r3, r2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	440b      	add	r3, r1
 800145c:	3310      	adds	r3, #16
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001462:	4b44      	ldr	r3, [pc, #272]	; (8001574 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b00      	cmp	r3, #0
 800146a:	d04e      	beq.n	800150a <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800146c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001470:	493f      	ldr	r1, [pc, #252]	; (8001570 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001472:	4613      	mov	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4413      	add	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	440b      	add	r3, r1
 800147c:	330d      	adds	r3, #13
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b01      	cmp	r3, #1
 8001484:	d125      	bne.n	80014d2 <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001486:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800148a:	2101      	movs	r1, #1
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fde5 	bl	800105c <UnlinkTimer>
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800149c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80014a0:	4933      	ldr	r1, [pc, #204]	; (8001570 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80014a2:	4613      	mov	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	4413      	add	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	440b      	add	r3, r1
 80014ac:	3304      	adds	r3, #4
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014b4:	4611      	mov	r1, r2
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 fa40 	bl	800193c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80014bc:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	22ca      	movs	r2, #202	; 0xca
 80014c4:	625a      	str	r2, [r3, #36]	; 0x24
 80014c6:	4b28      	ldr	r3, [pc, #160]	; (8001568 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2253      	movs	r2, #83	; 0x53
 80014ce:	625a      	str	r2, [r3, #36]	; 0x24
 80014d0:	e013      	b.n	80014fa <HW_TS_RTC_Wakeup_Handler+0x11e>
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80014dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 f9a1 	bl	8001828 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80014e6:	4b20      	ldr	r3, [pc, #128]	; (8001568 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	22ca      	movs	r2, #202	; 0xca
 80014ee:	625a      	str	r2, [r3, #36]	; 0x24
 80014f0:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2253      	movs	r2, #83	; 0x53
 80014f8:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80014fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014fe:	69fa      	ldr	r2, [r7, #28]
 8001500:	4619      	mov	r1, r3
 8001502:	69b8      	ldr	r0, [r7, #24]
 8001504:	f000 faa0 	bl	8001a48 <HW_TS_RTC_Int_AppNot>
 8001508:	e024      	b.n	8001554 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 800150a:	f7ff fec9 	bl	80012a0 <RescheduleTimerList>
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	f383 8810 	msr	PRIMASK, r3
 8001518:	e01c      	b.n	8001554 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800151a:	bf00      	nop
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0f7      	beq.n	800151c <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800152c:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001540:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001542:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001544:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001554:	4b04      	ldr	r3, [pc, #16]	; (8001568 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	22ff      	movs	r2, #255	; 0xff
 800155c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800155e:	bf00      	nop
}
 8001560:	3728      	adds	r7, #40	; 0x28
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200001e4 	.word	0x200001e4
 800156c:	200000bc 	.word	0x200000bc
 8001570:	2000002c 	.word	0x2000002c
 8001574:	200000c4 	.word	0x200000c4
 8001578:	58000800 	.word	0x58000800

0800157c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001588:	4a61      	ldr	r2, [pc, #388]	; (8001710 <HW_TS_Init+0x194>)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800158e:	4b60      	ldr	r3, [pc, #384]	; (8001710 <HW_TS_Init+0x194>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	22ca      	movs	r2, #202	; 0xca
 8001596:	625a      	str	r2, [r3, #36]	; 0x24
 8001598:	4b5d      	ldr	r3, [pc, #372]	; (8001710 <HW_TS_Init+0x194>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2253      	movs	r2, #83	; 0x53
 80015a0:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80015a2:	4b5c      	ldr	r3, [pc, #368]	; (8001714 <HW_TS_Init+0x198>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	4a5b      	ldr	r2, [pc, #364]	; (8001714 <HW_TS_Init+0x198>)
 80015a8:	f043 0320 	orr.w	r3, r3, #32
 80015ac:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80015ae:	4b59      	ldr	r3, [pc, #356]	; (8001714 <HW_TS_Init+0x198>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	f003 0307 	and.w	r3, r3, #7
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	f1c3 0304 	rsb	r3, r3, #4
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	4b55      	ldr	r3, [pc, #340]	; (8001718 <HW_TS_Init+0x19c>)
 80015c2:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80015c4:	4b53      	ldr	r3, [pc, #332]	; (8001714 <HW_TS_Init+0x198>)
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80015cc:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80015d0:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	fa92 f2a2 	rbit	r2, r2
 80015d8:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	fab2 f282 	clz	r2, r2
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	40d3      	lsrs	r3, r2
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	3301      	adds	r3, #1
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4b4c      	ldr	r3, [pc, #304]	; (800171c <HW_TS_Init+0x1a0>)
 80015ec:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80015ee:	4b49      	ldr	r3, [pc, #292]	; (8001714 <HW_TS_Init+0x198>)
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	3301      	adds	r3, #1
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	4b48      	ldr	r3, [pc, #288]	; (8001720 <HW_TS_Init+0x1a4>)
 8001600:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001602:	4b47      	ldr	r3, [pc, #284]	; (8001720 <HW_TS_Init+0x1a4>)
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	3b01      	subs	r3, #1
 8001608:	4a44      	ldr	r2, [pc, #272]	; (800171c <HW_TS_Init+0x1a0>)
 800160a:	7812      	ldrb	r2, [r2, #0]
 800160c:	fb02 f303 	mul.w	r3, r2, r3
 8001610:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001614:	4a40      	ldr	r2, [pc, #256]	; (8001718 <HW_TS_Init+0x19c>)
 8001616:	7812      	ldrb	r2, [r2, #0]
 8001618:	40d3      	lsrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001622:	4293      	cmp	r3, r2
 8001624:	d904      	bls.n	8001630 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001626:	4b3f      	ldr	r3, [pc, #252]	; (8001724 <HW_TS_Init+0x1a8>)
 8001628:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800162c:	801a      	strh	r2, [r3, #0]
 800162e:	e003      	b.n	8001638 <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	b29a      	uxth	r2, r3
 8001634:	4b3b      	ldr	r3, [pc, #236]	; (8001724 <HW_TS_Init+0x1a8>)
 8001636:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001638:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800163c:	f7ff fb8c 	bl	8000d58 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001640:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001644:	f7ff fb74 	bl	8000d30 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d143      	bne.n	80016d6 <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800164e:	4b36      	ldr	r3, [pc, #216]	; (8001728 <HW_TS_Init+0x1ac>)
 8001650:	2201      	movs	r2, #1
 8001652:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001654:	4b35      	ldr	r3, [pc, #212]	; (800172c <HW_TS_Init+0x1b0>)
 8001656:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800165a:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800165c:	2300      	movs	r3, #0
 800165e:	75fb      	strb	r3, [r7, #23]
 8001660:	e00c      	b.n	800167c <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001662:	7dfa      	ldrb	r2, [r7, #23]
 8001664:	4932      	ldr	r1, [pc, #200]	; (8001730 <HW_TS_Init+0x1b4>)
 8001666:	4613      	mov	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	4413      	add	r3, r2
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	440b      	add	r3, r1
 8001670:	330c      	adds	r3, #12
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001676:	7dfb      	ldrb	r3, [r7, #23]
 8001678:	3301      	adds	r3, #1
 800167a:	75fb      	strb	r3, [r7, #23]
 800167c:	7dfb      	ldrb	r3, [r7, #23]
 800167e:	2b05      	cmp	r3, #5
 8001680:	d9ef      	bls.n	8001662 <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001682:	4b2c      	ldr	r3, [pc, #176]	; (8001734 <HW_TS_Init+0x1b8>)
 8001684:	2206      	movs	r2, #6
 8001686:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001688:	4b21      	ldr	r3, [pc, #132]	; (8001710 <HW_TS_Init+0x194>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <HW_TS_Init+0x194>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800169a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800169c:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <HW_TS_Init+0x194>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <HW_TS_Init+0x194>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80016b0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80016b2:	4b21      	ldr	r3, [pc, #132]	; (8001738 <HW_TS_Init+0x1bc>)
 80016b4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80016b8:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80016ba:	2003      	movs	r0, #3
 80016bc:	f001 fdbc 	bl	8003238 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <HW_TS_Init+0x194>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <HW_TS_Init+0x194>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	e00a      	b.n	80016ec <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <HW_TS_Init+0x194>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d002      	beq.n	80016ec <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80016e6:	2003      	movs	r0, #3
 80016e8:	f001 fd8c 	bl	8003204 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <HW_TS_Init+0x194>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	22ff      	movs	r2, #255	; 0xff
 80016f4:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80016f6:	2200      	movs	r2, #0
 80016f8:	2103      	movs	r1, #3
 80016fa:	2003      	movs	r0, #3
 80016fc:	f001 fd1c 	bl	8003138 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001700:	2003      	movs	r0, #3
 8001702:	f001 fd43 	bl	800318c <HAL_NVIC_EnableIRQ>

  return;
 8001706:	bf00      	nop
}
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200001e4 	.word	0x200001e4
 8001714:	40002800 	.word	0x40002800
 8001718:	200001e8 	.word	0x200001e8
 800171c:	200001e9 	.word	0x200001e9
 8001720:	200001ea 	.word	0x200001ea
 8001724:	200001ec 	.word	0x200001ec
 8001728:	200000c4 	.word	0x200000c4
 800172c:	200000c0 	.word	0x200000c0
 8001730:	2000002c 	.word	0x2000002c
 8001734:	200000bc 	.word	0x200000bc
 8001738:	58000800 	.word	0x58000800

0800173c <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 800173c:	b480      	push	{r7}
 800173e:	b08b      	sub	sp, #44	; 0x2c
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	4613      	mov	r3, r2
 800174a:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001752:	f3ef 8310 	mrs	r3, PRIMASK
 8001756:	61fb      	str	r3, [r7, #28]
  return(result);
 8001758:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800175a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800175c:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800175e:	e004      	b.n	800176a <HW_TS_Create+0x2e>
  {
    loop++;
 8001760:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001764:	3301      	adds	r3, #1
 8001766:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800176a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800176e:	2b05      	cmp	r3, #5
 8001770:	d80c      	bhi.n	800178c <HW_TS_Create+0x50>
 8001772:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001776:	492b      	ldr	r1, [pc, #172]	; (8001824 <HW_TS_Create+0xe8>)
 8001778:	4613      	mov	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4413      	add	r3, r2
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	440b      	add	r3, r1
 8001782:	330c      	adds	r3, #12
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1e9      	bne.n	8001760 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800178c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001790:	2b06      	cmp	r3, #6
 8001792:	d037      	beq.n	8001804 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001794:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001798:	4922      	ldr	r1, [pc, #136]	; (8001824 <HW_TS_Create+0xe8>)
 800179a:	4613      	mov	r3, r2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	4413      	add	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	440b      	add	r3, r1
 80017a4:	330c      	adds	r3, #12
 80017a6:	2201      	movs	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]
 80017aa:	6a3b      	ldr	r3, [r7, #32]
 80017ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80017b4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80017b8:	491a      	ldr	r1, [pc, #104]	; (8001824 <HW_TS_Create+0xe8>)
 80017ba:	4613      	mov	r3, r2
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4413      	add	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	440b      	add	r3, r1
 80017c4:	3310      	adds	r3, #16
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80017ca:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80017ce:	4915      	ldr	r1, [pc, #84]	; (8001824 <HW_TS_Create+0xe8>)
 80017d0:	4613      	mov	r3, r2
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4413      	add	r3, r2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	440b      	add	r3, r1
 80017da:	330d      	adds	r3, #13
 80017dc:	79fa      	ldrb	r2, [r7, #7]
 80017de:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80017e0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80017e4:	490f      	ldr	r1, [pc, #60]	; (8001824 <HW_TS_Create+0xe8>)
 80017e6:	4613      	mov	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	440b      	add	r3, r1
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80017fa:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80017fc:	2300      	movs	r3, #0
 80017fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001802:	e007      	b.n	8001814 <HW_TS_Create+0xd8>
 8001804:	6a3b      	ldr	r3, [r7, #32]
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 800180e:	2301      	movs	r3, #1
 8001810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8001814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001818:	4618      	mov	r0, r3
 800181a:	372c      	adds	r7, #44	; 0x2c
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	2000002c 	.word	0x2000002c

08001828 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001832:	f3ef 8310 	mrs	r3, PRIMASK
 8001836:	60fb      	str	r3, [r7, #12]
  return(result);
 8001838:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800183a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800183c:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800183e:	2003      	movs	r0, #3
 8001840:	f001 fcbc 	bl	80031bc <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001844:	4b37      	ldr	r3, [pc, #220]	; (8001924 <HW_TS_Stop+0xfc>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	22ca      	movs	r2, #202	; 0xca
 800184c:	625a      	str	r2, [r3, #36]	; 0x24
 800184e:	4b35      	ldr	r3, [pc, #212]	; (8001924 <HW_TS_Stop+0xfc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2253      	movs	r2, #83	; 0x53
 8001856:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001858:	79fa      	ldrb	r2, [r7, #7]
 800185a:	4933      	ldr	r1, [pc, #204]	; (8001928 <HW_TS_Stop+0x100>)
 800185c:	4613      	mov	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4413      	add	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	440b      	add	r3, r1
 8001866:	330c      	adds	r3, #12
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d148      	bne.n	8001902 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	2100      	movs	r1, #0
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fbf1 	bl	800105c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800187a:	4b2c      	ldr	r3, [pc, #176]	; (800192c <HW_TS_Stop+0x104>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001880:	7cfb      	ldrb	r3, [r7, #19]
 8001882:	2b06      	cmp	r3, #6
 8001884:	d135      	bne.n	80018f2 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001886:	4b2a      	ldr	r3, [pc, #168]	; (8001930 <HW_TS_Stop+0x108>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001892:	d108      	bne.n	80018a6 <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001894:	bf00      	nop
 8001896:	4b23      	ldr	r3, [pc, #140]	; (8001924 <HW_TS_Stop+0xfc>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f7      	bne.n	8001896 <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80018a6:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <HW_TS_Stop+0xfc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HW_TS_Stop+0xfc>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018b8:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80018ba:	bf00      	nop
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HW_TS_Stop+0xfc>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f7      	beq.n	80018bc <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80018cc:	4b15      	ldr	r3, [pc, #84]	; (8001924 <HW_TS_Stop+0xfc>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4b13      	ldr	r3, [pc, #76]	; (8001924 <HW_TS_Stop+0xfc>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80018e0:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80018e2:	4b14      	ldr	r3, [pc, #80]	; (8001934 <HW_TS_Stop+0x10c>)
 80018e4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80018e8:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80018ea:	2003      	movs	r0, #3
 80018ec:	f001 fca4 	bl	8003238 <HAL_NVIC_ClearPendingIRQ>
 80018f0:	e007      	b.n	8001902 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <HW_TS_Stop+0x110>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	7cfa      	ldrb	r2, [r7, #19]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d001      	beq.n	8001902 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 80018fe:	f7ff fccf 	bl	80012a0 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <HW_TS_Stop+0xfc>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	22ff      	movs	r2, #255	; 0xff
 800190a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800190c:	2003      	movs	r0, #3
 800190e:	f001 fc3d 	bl	800318c <HAL_NVIC_EnableIRQ>
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800191c:	bf00      	nop
}
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	200001e4 	.word	0x200001e4
 8001928:	2000002c 	.word	0x2000002c
 800192c:	200000bc 	.word	0x200000bc
 8001930:	40002800 	.word	0x40002800
 8001934:	58000800 	.word	0x58000800
 8001938:	200000bd 	.word	0x200000bd

0800193c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	6039      	str	r1, [r7, #0]
 8001946:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001948:	79fa      	ldrb	r2, [r7, #7]
 800194a:	493b      	ldr	r1, [pc, #236]	; (8001a38 <HW_TS_Start+0xfc>)
 800194c:	4613      	mov	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4413      	add	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	440b      	add	r3, r1
 8001956:	330c      	adds	r3, #12
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d103      	bne.n	8001968 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff ff60 	bl	8001828 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001968:	f3ef 8310 	mrs	r3, PRIMASK
 800196c:	60fb      	str	r3, [r7, #12]
  return(result);
 800196e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001970:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001972:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001974:	2003      	movs	r0, #3
 8001976:	f001 fc21 	bl	80031bc <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800197a:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <HW_TS_Start+0x100>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	22ca      	movs	r2, #202	; 0xca
 8001982:	625a      	str	r2, [r3, #36]	; 0x24
 8001984:	4b2d      	ldr	r3, [pc, #180]	; (8001a3c <HW_TS_Start+0x100>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2253      	movs	r2, #83	; 0x53
 800198c:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800198e:	79fa      	ldrb	r2, [r7, #7]
 8001990:	4929      	ldr	r1, [pc, #164]	; (8001a38 <HW_TS_Start+0xfc>)
 8001992:	4613      	mov	r3, r2
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	4413      	add	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	440b      	add	r3, r1
 800199c:	330c      	adds	r3, #12
 800199e:	2202      	movs	r2, #2
 80019a0:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80019a2:	79fa      	ldrb	r2, [r7, #7]
 80019a4:	4924      	ldr	r1, [pc, #144]	; (8001a38 <HW_TS_Start+0xfc>)
 80019a6:	4613      	mov	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4413      	add	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	440b      	add	r3, r1
 80019b0:	3308      	adds	r3, #8
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80019b6:	79fa      	ldrb	r2, [r7, #7]
 80019b8:	491f      	ldr	r1, [pc, #124]	; (8001a38 <HW_TS_Start+0xfc>)
 80019ba:	4613      	mov	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4413      	add	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	440b      	add	r3, r1
 80019c4:	3304      	adds	r3, #4
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fa9b 	bl	8000f08 <linkTimer>
 80019d2:	4603      	mov	r3, r0
 80019d4:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80019d6:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <HW_TS_Start+0x104>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80019dc:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <HW_TS_Start+0x108>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	7c7a      	ldrb	r2, [r7, #17]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d002      	beq.n	80019ee <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 80019e8:	f7ff fc5a 	bl	80012a0 <RescheduleTimerList>
 80019ec:	e013      	b.n	8001a16 <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80019ee:	79fa      	ldrb	r2, [r7, #7]
 80019f0:	4911      	ldr	r1, [pc, #68]	; (8001a38 <HW_TS_Start+0xfc>)
 80019f2:	4613      	mov	r3, r2
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	4413      	add	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	440b      	add	r3, r1
 80019fc:	3308      	adds	r3, #8
 80019fe:	6819      	ldr	r1, [r3, #0]
 8001a00:	8a7b      	ldrh	r3, [r7, #18]
 8001a02:	79fa      	ldrb	r2, [r7, #7]
 8001a04:	1ac9      	subs	r1, r1, r3
 8001a06:	480c      	ldr	r0, [pc, #48]	; (8001a38 <HW_TS_Start+0xfc>)
 8001a08:	4613      	mov	r3, r2
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4413      	add	r3, r2
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	4403      	add	r3, r0
 8001a12:	3308      	adds	r3, #8
 8001a14:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <HW_TS_Start+0x100>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	22ff      	movs	r2, #255	; 0xff
 8001a1e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001a20:	2003      	movs	r0, #3
 8001a22:	f001 fbb3 	bl	800318c <HAL_NVIC_EnableIRQ>
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001a30:	bf00      	nop
}
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	2000002c 	.word	0x2000002c
 8001a3c:	200001e4 	.word	0x200001e4
 8001a40:	200000bc 	.word	0x200000bc
 8001a44:	200000bd 	.word	0x200000bd

08001a48 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	460b      	mov	r3, r1
 8001a52:	607a      	str	r2, [r7, #4]
 8001a54:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4798      	blx	r3

  return;
 8001a5a:	bf00      	nop
}
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <LL_AHB2_GRP1_EnableClock>:
{
 8001a62:	b480      	push	{r7}
 8001a64:	b085      	sub	sp, #20
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4013      	ands	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a86:	68fb      	ldr	r3, [r7, #12]
}
 8001a88:	bf00      	nop
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001aa2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
}
 8001aba:	bf00      	nop
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8001acc:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <MX_I2C3_Init+0x74>)
 8001ace:	4a1c      	ldr	r2, [pc, #112]	; (8001b40 <MX_I2C3_Init+0x78>)
 8001ad0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00300F38;
 8001ad2:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <MX_I2C3_Init+0x74>)
 8001ad4:	4a1b      	ldr	r2, [pc, #108]	; (8001b44 <MX_I2C3_Init+0x7c>)
 8001ad6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001ad8:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <MX_I2C3_Init+0x74>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ade:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <MX_I2C3_Init+0x74>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ae4:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <MX_I2C3_Init+0x74>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001aea:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <MX_I2C3_Init+0x74>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <MX_I2C3_Init+0x74>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001af6:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <MX_I2C3_Init+0x74>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001afc:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <MX_I2C3_Init+0x74>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001b02:	480e      	ldr	r0, [pc, #56]	; (8001b3c <MX_I2C3_Init+0x74>)
 8001b04:	f001 fe68 	bl	80037d8 <HAL_I2C_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001b0e:	f000 fa15 	bl	8001f3c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b12:	2100      	movs	r1, #0
 8001b14:	4809      	ldr	r0, [pc, #36]	; (8001b3c <MX_I2C3_Init+0x74>)
 8001b16:	f002 fb79 	bl	800420c <HAL_I2CEx_ConfigAnalogFilter>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001b20:	f000 fa0c 	bl	8001f3c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001b24:	2100      	movs	r1, #0
 8001b26:	4805      	ldr	r0, [pc, #20]	; (8001b3c <MX_I2C3_Init+0x74>)
 8001b28:	f002 fbd8 	bl	80042dc <HAL_I2CEx_ConfigDigitalFilter>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001b32:	f000 fa03 	bl	8001f3c <Error_Handler>
  }

}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000348 	.word	0x20000348
 8001b40:	40005c00 	.word	0x40005c00
 8001b44:	00300f38 	.word	0x00300f38

08001b48 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 030c 	add.w	r3, r7, #12
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0e      	ldr	r2, [pc, #56]	; (8001ba0 <HAL_I2C_MspInit+0x58>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d116      	bne.n	8001b98 <HAL_I2C_MspInit+0x50>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6a:	2004      	movs	r0, #4
 8001b6c:	f7ff ff79 	bl	8001a62 <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration    
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b70:	2303      	movs	r3, #3
 8001b72:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b74:	2312      	movs	r3, #18
 8001b76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b80:	2304      	movs	r3, #4
 8001b82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b84:	f107 030c 	add.w	r3, r7, #12
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4806      	ldr	r0, [pc, #24]	; (8001ba4 <HAL_I2C_MspInit+0x5c>)
 8001b8c:	f001 fb6e 	bl	800326c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b90:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001b94:	f7ff ff7e 	bl	8001a94 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001b98:	bf00      	nop
 8001b9a:	3720      	adds	r7, #32
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40005c00 	.word	0x40005c00
 8001ba4:	48000800 	.word	0x48000800

08001ba8 <LL_RCC_LSE_SetDriveCapability>:
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb8:	f023 0218 	bic.w	r2, r3, #24
 8001bbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bd8:	f001 f8ba 	bl	8002d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bdc:	f000 f834 	bl	8001c48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001be0:	f7ff f84a 	bl	8000c78 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001be4:	f000 ff76 	bl	8002ad4 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8001be8:	f001 f822 	bl	8002c30 <MX_USB_PCD_Init>
  MX_RF_Init();
 8001bec:	f000 f9b8 	bl	8001f60 <MX_RF_Init>
  MX_RTC_Init();
 8001bf0:	f000 f9ce 	bl	8001f90 <MX_RTC_Init>
  MX_I2C3_Init();
 8001bf4:	f7ff ff68 	bl	8001ac8 <MX_I2C3_Init>
  MX_SPI1_Init();
 8001bf8:	f000 fa36 	bl	8002068 <MX_SPI1_Init>
  MX_TIM16_Init();
 8001bfc:	f000 fef4 	bl	80029e8 <MX_TIM16_Init>

  /*
   * MPU9250
   * */

   readByte(WHO_AM_I_MPU9250, &WAI_MPU9250, 1);
 8001c00:	2201      	movs	r2, #1
 8001c02:	490c      	ldr	r1, [pc, #48]	; (8001c34 <main+0x60>)
 8001c04:	2075      	movs	r0, #117	; 0x75
 8001c06:	f7fe fe8f 	bl	8000928 <readByte>

   initMPU9250();
 8001c0a:	f7fe fee7 	bl	80009dc <initMPU9250>

  /*
   * MAX30100
   * */

   read_byte(reg, &ID_MAX30100);
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <main+0x64>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	490a      	ldr	r1, [pc, #40]	; (8001c3c <main+0x68>)
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fe41 	bl	800089c <read_byte>

   begin();
 8001c1a:	f7fe fc39 	bl	8000490 <begin>


  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */  
  APPE_Init();
 8001c1e:	f7fe ff73 	bl	8000b08 <APPE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001c22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c26:	f000 fb2b 	bl	8002280 <UTIL_SEQ_Run>
//	  if(status != 0){
//		  status = 0;
      //read_diodes(&IR, &RED);
//	  }
	  //readTemperature();
	  readFIFO(&RED, &IR);
 8001c2a:	4905      	ldr	r1, [pc, #20]	; (8001c40 <main+0x6c>)
 8001c2c:	4805      	ldr	r0, [pc, #20]	; (8001c44 <main+0x70>)
 8001c2e:	f7fe fd73 	bl	8000718 <readFIFO>
	  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001c32:	e7f6      	b.n	8001c22 <main+0x4e>
 8001c34:	200001ee 	.word	0x200001ee
 8001c38:	20000004 	.word	0x20000004
 8001c3c:	200001ef 	.word	0x200001ef
 8001c40:	200001f6 	.word	0x200001f6
 8001c44:	200001f8 	.word	0x200001f8

08001c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b0ae      	sub	sp, #184	; 0xb8
 8001c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c4e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c52:	2248      	movs	r2, #72	; 0x48
 8001c54:	2100      	movs	r1, #0
 8001c56:	4618      	mov	r0, r3
 8001c58:	f00a ffc9 	bl	800cbee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c5c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
 8001c6c:	615a      	str	r2, [r3, #20]
 8001c6e:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	2250      	movs	r2, #80	; 0x50
 8001c74:	2100      	movs	r1, #0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f00a ffb9 	bl	800cbee <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8001c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c8a:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8001c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	f023 0303 	bic.w	r3, r3, #3
 8001c96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f7ff ff81 	bl	8001ba8 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ca6:	4b3e      	ldr	r3, [pc, #248]	; (8001da0 <SystemClock_Config+0x158>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cae:	4a3c      	ldr	r2, [pc, #240]	; (8001da0 <SystemClock_Config+0x158>)
 8001cb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	4b3a      	ldr	r3, [pc, #232]	; (8001da0 <SystemClock_Config+0x158>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001cc2:	2327      	movs	r3, #39	; 0x27
 8001cc4:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cca:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cd4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cdc:	2340      	movs	r3, #64	; 0x40
 8001cde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001ce8:	2360      	movs	r3, #96	; 0x60
 8001cea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cf4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f002 fff9 	bl	8004cf0 <HAL_RCC_OscConfig>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d04:	f000 f91a 	bl	8001f3c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001d08:	236f      	movs	r3, #111	; 0x6f
 8001d0a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d10:	2300      	movs	r3, #0
 8001d12:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d14:	2300      	movs	r3, #0
 8001d16:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001d20:	2300      	movs	r3, #0
 8001d22:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d28:	2101      	movs	r1, #1
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f003 fcaa 	bl	8005684 <HAL_RCC_ClockConfig>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001d36:	f000 f901 	bl	8001f3c <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001d3a:	f643 1309 	movw	r3, #14601	; 0x3909
 8001d3e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8001d40:	2318      	movs	r3, #24
 8001d42:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001d44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d48:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001d4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d4e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001d50:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001d54:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8001d56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d5a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001d60:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8001d64:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001d66:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001d6a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d70:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001d72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d76:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	4618      	mov	r0, r3
 8001d84:	f004 fa1c 	bl	80061c0 <HAL_RCCEx_PeriphCLKConfig>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8001d8e:	f000 f8d5 	bl	8001f3c <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001d92:	f004 fd39 	bl	8006808 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001d96:	bf00      	nop
 8001d98:	37b8      	adds	r7, #184	; 0xb8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	58000400 	.word	0x58000400

08001da4 <read_sensors>:

/* USER CODE BEGIN 4 */

void read_sensors(void){
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0

	if(flag_buffer_full == 0x00){
 8001da8:	4b42      	ldr	r3, [pc, #264]	; (8001eb4 <read_sensors+0x110>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d17e      	bne.n	8001eae <read_sensors+0x10a>
		/*
		 * MPU9250
		 * */
		readAccelData(rawData_MPU9250);
 8001db0:	4841      	ldr	r0, [pc, #260]	; (8001eb8 <read_sensors+0x114>)
 8001db2:	f7fe fde7 	bl	8000984 <readAccelData>

		ble_buffer[0 + buff_counter] = (rawData_MPU9250[0] & 0x00FF);
 8001db6:	4b40      	ldr	r3, [pc, #256]	; (8001eb8 <read_sensors+0x114>)
 8001db8:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001dbc:	4b3f      	ldr	r3, [pc, #252]	; (8001ebc <read_sensors+0x118>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	b2c9      	uxtb	r1, r1
 8001dc4:	4b3e      	ldr	r3, [pc, #248]	; (8001ec0 <read_sensors+0x11c>)
 8001dc6:	5499      	strb	r1, [r3, r2]
		ble_buffer[1 + buff_counter] = ((rawData_MPU9250[0] >> 8) & 0x00FF);
 8001dc8:	4b3b      	ldr	r3, [pc, #236]	; (8001eb8 <read_sensors+0x114>)
 8001dca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dce:	121b      	asrs	r3, r3, #8
 8001dd0:	b21a      	sxth	r2, r3
 8001dd2:	4b3a      	ldr	r3, [pc, #232]	; (8001ebc <read_sensors+0x118>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	b2d1      	uxtb	r1, r2
 8001dda:	4a39      	ldr	r2, [pc, #228]	; (8001ec0 <read_sensors+0x11c>)
 8001ddc:	54d1      	strb	r1, [r2, r3]
		ble_buffer[2 + buff_counter] = (rawData_MPU9250[1] & 0x00FF);
 8001dde:	4b36      	ldr	r3, [pc, #216]	; (8001eb8 <read_sensors+0x114>)
 8001de0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001de4:	4b35      	ldr	r3, [pc, #212]	; (8001ebc <read_sensors+0x118>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	3302      	adds	r3, #2
 8001dea:	b2d1      	uxtb	r1, r2
 8001dec:	4a34      	ldr	r2, [pc, #208]	; (8001ec0 <read_sensors+0x11c>)
 8001dee:	54d1      	strb	r1, [r2, r3]
		ble_buffer[3 + buff_counter] = ((rawData_MPU9250[1] >> 8) & 0x00FF);
 8001df0:	4b31      	ldr	r3, [pc, #196]	; (8001eb8 <read_sensors+0x114>)
 8001df2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001df6:	121b      	asrs	r3, r3, #8
 8001df8:	b21a      	sxth	r2, r3
 8001dfa:	4b30      	ldr	r3, [pc, #192]	; (8001ebc <read_sensors+0x118>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	3303      	adds	r3, #3
 8001e00:	b2d1      	uxtb	r1, r2
 8001e02:	4a2f      	ldr	r2, [pc, #188]	; (8001ec0 <read_sensors+0x11c>)
 8001e04:	54d1      	strb	r1, [r2, r3]
		ble_buffer[4 + buff_counter] = (rawData_MPU9250[2] & 0x00FF);
 8001e06:	4b2c      	ldr	r3, [pc, #176]	; (8001eb8 <read_sensors+0x114>)
 8001e08:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001e0c:	4b2b      	ldr	r3, [pc, #172]	; (8001ebc <read_sensors+0x118>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	3304      	adds	r3, #4
 8001e12:	b2d1      	uxtb	r1, r2
 8001e14:	4a2a      	ldr	r2, [pc, #168]	; (8001ec0 <read_sensors+0x11c>)
 8001e16:	54d1      	strb	r1, [r2, r3]
		ble_buffer[5 + buff_counter] = ((rawData_MPU9250[2] >> 8) & 0x00FF);
 8001e18:	4b27      	ldr	r3, [pc, #156]	; (8001eb8 <read_sensors+0x114>)
 8001e1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e1e:	121b      	asrs	r3, r3, #8
 8001e20:	b21a      	sxth	r2, r3
 8001e22:	4b26      	ldr	r3, [pc, #152]	; (8001ebc <read_sensors+0x118>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	3305      	adds	r3, #5
 8001e28:	b2d1      	uxtb	r1, r2
 8001e2a:	4a25      	ldr	r2, [pc, #148]	; (8001ec0 <read_sensors+0x11c>)
 8001e2c:	54d1      	strb	r1, [r2, r3]

		/*
		 * MAX30100
		 * */
		read_diodes(&IR, &RED);
 8001e2e:	4925      	ldr	r1, [pc, #148]	; (8001ec4 <read_sensors+0x120>)
 8001e30:	4825      	ldr	r0, [pc, #148]	; (8001ec8 <read_sensors+0x124>)
 8001e32:	f7fe fca5 	bl	8000780 <read_diodes>

		ble_buffer[6 + buff_counter] = (RED & 0x00FF);
 8001e36:	4b23      	ldr	r3, [pc, #140]	; (8001ec4 <read_sensors+0x120>)
 8001e38:	881a      	ldrh	r2, [r3, #0]
 8001e3a:	4b20      	ldr	r3, [pc, #128]	; (8001ebc <read_sensors+0x118>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	3306      	adds	r3, #6
 8001e40:	b2d1      	uxtb	r1, r2
 8001e42:	4a1f      	ldr	r2, [pc, #124]	; (8001ec0 <read_sensors+0x11c>)
 8001e44:	54d1      	strb	r1, [r2, r3]
		ble_buffer[7 + buff_counter] = ((RED >> 8) & 0x00FF);
 8001e46:	4b1f      	ldr	r3, [pc, #124]	; (8001ec4 <read_sensors+0x120>)
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	0a1b      	lsrs	r3, r3, #8
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <read_sensors+0x118>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	3307      	adds	r3, #7
 8001e54:	b2d1      	uxtb	r1, r2
 8001e56:	4a1a      	ldr	r2, [pc, #104]	; (8001ec0 <read_sensors+0x11c>)
 8001e58:	54d1      	strb	r1, [r2, r3]
		ble_buffer[8 + buff_counter] = (IR & 0x00FF);
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <read_sensors+0x124>)
 8001e5c:	881a      	ldrh	r2, [r3, #0]
 8001e5e:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <read_sensors+0x118>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	3308      	adds	r3, #8
 8001e64:	b2d1      	uxtb	r1, r2
 8001e66:	4a16      	ldr	r2, [pc, #88]	; (8001ec0 <read_sensors+0x11c>)
 8001e68:	54d1      	strb	r1, [r2, r3]
		ble_buffer[9 + buff_counter] = ((IR >> 8) & 0x00FF);
 8001e6a:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <read_sensors+0x124>)
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	0a1b      	lsrs	r3, r3, #8
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <read_sensors+0x118>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	3309      	adds	r3, #9
 8001e78:	b2d1      	uxtb	r1, r2
 8001e7a:	4a11      	ldr	r2, [pc, #68]	; (8001ec0 <read_sensors+0x11c>)
 8001e7c:	54d1      	strb	r1, [r2, r3]


		if(buff_counter == 30){
 8001e7e:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <read_sensors+0x118>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b1e      	cmp	r3, #30
 8001e84:	d10a      	bne.n	8001e9c <read_sensors+0xf8>
			buff_counter = 0;
 8001e86:	4b0d      	ldr	r3, [pc, #52]	; (8001ebc <read_sensors+0x118>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	701a      	strb	r2, [r3, #0]
			flag_buffer_full = 0x01;
 8001e8c:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <read_sensors+0x110>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	701a      	strb	r2, [r3, #0]
			//HAL_TIM_Base_Stop_IT(&htim16);
			UTIL_SEQ_SetTask(1 << CFG_MY_TASK_NOTIFY_DATA, CFG_SCH_PRIO_0);
 8001e92:	2100      	movs	r1, #0
 8001e94:	2008      	movs	r0, #8
 8001e96:	f000 faef 	bl	8002478 <UTIL_SEQ_SetTask>
		}else{
			buff_counter+=10;
			flag_buffer_full = 0x00;
		}
	}
}
 8001e9a:	e008      	b.n	8001eae <read_sensors+0x10a>
			buff_counter+=10;
 8001e9c:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <read_sensors+0x118>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	330a      	adds	r3, #10
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <read_sensors+0x118>)
 8001ea6:	701a      	strb	r2, [r3, #0]
			flag_buffer_full = 0x00;
 8001ea8:	4b02      	ldr	r3, [pc, #8]	; (8001eb4 <read_sensors+0x110>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000225 	.word	0x20000225
 8001eb8:	200001f0 	.word	0x200001f0
 8001ebc:	20000224 	.word	0x20000224
 8001ec0:	200001fc 	.word	0x200001fc
 8001ec4:	200001f8 	.word	0x200001f8
 8001ec8:	200001f6 	.word	0x200001f6

08001ecc <get_buffer_values>:

void get_buffer_values(uint8_t* buff){
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 40; i++)
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	e00a      	b.n	8001ef0 <get_buffer_values+0x24>
		buff[i] = ble_buffer[i];
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	4413      	add	r3, r2
 8001ee0:	4909      	ldr	r1, [pc, #36]	; (8001f08 <get_buffer_values+0x3c>)
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	440a      	add	r2, r1
 8001ee6:	7812      	ldrb	r2, [r2, #0]
 8001ee8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 40; i++)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	3301      	adds	r3, #1
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2b27      	cmp	r3, #39	; 0x27
 8001ef4:	ddf1      	ble.n	8001eda <get_buffer_values+0xe>
	flag_buffer_full = 0x00;
 8001ef6:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <get_buffer_values+0x40>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]
	//HAL_TIM_Base_Start_IT(&htim16);
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	200001fc 	.word	0x200001fc
 8001f0c:	20000225 	.word	0x20000225

08001f10 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  if(htim == &htim16){
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a07      	ldr	r2, [pc, #28]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d106      	bne.n	8001f2e <HAL_TIM_PeriodElapsedCallback+0x1e>
	  if(APP_BLE_Get_Server_Connection_Status() == APP_BLE_CONNECTED_SERVER)
 8001f20:	f00a f970 	bl	800c204 <APP_BLE_Get_Server_Connection_Status>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b05      	cmp	r3, #5
 8001f28:	d101      	bne.n	8001f2e <HAL_TIM_PeriodElapsedCallback+0x1e>
		  read_sensors();
 8001f2a:	f7ff ff3b 	bl	8001da4 <read_sensors>
  }

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	2000041c 	.word	0x2000041c

08001f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
 8001f52:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0

}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001f86:	bf00      	nop
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001f94:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <MX_RTC_Init+0x48>)
 8001f96:	4a11      	ldr	r2, [pc, #68]	; (8001fdc <MX_RTC_Init+0x4c>)
 8001f98:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001f9a:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <MX_RTC_Init+0x48>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001fa0:	4b0d      	ldr	r3, [pc, #52]	; (8001fd8 <MX_RTC_Init+0x48>)
 8001fa2:	220f      	movs	r2, #15
 8001fa4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <MX_RTC_Init+0x48>)
 8001fa8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001fac:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001fae:	480a      	ldr	r0, [pc, #40]	; (8001fd8 <MX_RTC_Init+0x48>)
 8001fb0:	f004 fdf8 	bl	8006ba4 <HAL_RTC_Init>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 8001fba:	f7ff ffbf 	bl	8001f3c <Error_Handler>
  }
  /** Enable the WakeUp 
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <MX_RTC_Init+0x48>)
 8001fc4:	f004 ff42 	bl	8006e4c <HAL_RTCEx_SetWakeUpTimer>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_RTC_Init+0x42>
  {
    Error_Handler();
 8001fce:	f7ff ffb5 	bl	8001f3c <Error_Handler>
  }

}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000394 	.word	0x20000394
 8001fdc:	40002800 	.word	0x40002800

08001fe0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a04      	ldr	r2, [pc, #16]	; (8002000 <HAL_RTC_MspInit+0x20>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d101      	bne.n	8001ff6 <HAL_RTC_MspInit+0x16>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ff2:	f7ff ffbc 	bl	8001f6e <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40002800 	.word	0x40002800

08002004 <LL_AHB2_GRP1_EnableClock>:
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800200c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002010:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002012:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4313      	orrs	r3, r2
 800201a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800201c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002020:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4013      	ands	r3, r2
 8002026:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002028:	68fb      	ldr	r3, [r7, #12]
}
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002036:	b480      	push	{r7}
 8002038:	b085      	sub	sp, #20
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800203e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002042:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002044:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4313      	orrs	r3, r2
 800204c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800204e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002052:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4013      	ands	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800205a:	68fb      	ldr	r3, [r7, #12]
}
 800205c:	bf00      	nop
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800206c:	4b1b      	ldr	r3, [pc, #108]	; (80020dc <MX_SPI1_Init+0x74>)
 800206e:	4a1c      	ldr	r2, [pc, #112]	; (80020e0 <MX_SPI1_Init+0x78>)
 8002070:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002072:	4b1a      	ldr	r3, [pc, #104]	; (80020dc <MX_SPI1_Init+0x74>)
 8002074:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002078:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800207a:	4b18      	ldr	r3, [pc, #96]	; (80020dc <MX_SPI1_Init+0x74>)
 800207c:	2200      	movs	r2, #0
 800207e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002080:	4b16      	ldr	r3, [pc, #88]	; (80020dc <MX_SPI1_Init+0x74>)
 8002082:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002086:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002088:	4b14      	ldr	r3, [pc, #80]	; (80020dc <MX_SPI1_Init+0x74>)
 800208a:	2202      	movs	r2, #2
 800208c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800208e:	4b13      	ldr	r3, [pc, #76]	; (80020dc <MX_SPI1_Init+0x74>)
 8002090:	2201      	movs	r2, #1
 8002092:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002094:	4b11      	ldr	r3, [pc, #68]	; (80020dc <MX_SPI1_Init+0x74>)
 8002096:	f44f 7200 	mov.w	r2, #512	; 0x200
 800209a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800209c:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <MX_SPI1_Init+0x74>)
 800209e:	2228      	movs	r2, #40	; 0x28
 80020a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <MX_SPI1_Init+0x74>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020a8:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <MX_SPI1_Init+0x74>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <MX_SPI1_Init+0x74>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80020b4:	4b09      	ldr	r3, [pc, #36]	; (80020dc <MX_SPI1_Init+0x74>)
 80020b6:	2207      	movs	r2, #7
 80020b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80020ba:	4b08      	ldr	r3, [pc, #32]	; (80020dc <MX_SPI1_Init+0x74>)
 80020bc:	2200      	movs	r2, #0
 80020be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <MX_SPI1_Init+0x74>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020c6:	4805      	ldr	r0, [pc, #20]	; (80020dc <MX_SPI1_Init+0x74>)
 80020c8:	f004 ff7e 	bl	8006fc8 <HAL_SPI_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80020d2:	f7ff ff33 	bl	8001f3c <Error_Handler>
  }

}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	200003b8 	.word	0x200003b8
 80020e0:	40013000 	.word	0x40013000

080020e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	f107 030c 	add.w	r3, r7, #12
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a0f      	ldr	r2, [pc, #60]	; (8002140 <HAL_SPI_MspInit+0x5c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d117      	bne.n	8002136 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002106:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800210a:	f7ff ff94 	bl	8002036 <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210e:	2001      	movs	r0, #1
 8002110:	f7ff ff78 	bl	8002004 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8002114:	23c2      	movs	r3, #194	; 0xc2
 8002116:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002118:	2302      	movs	r3, #2
 800211a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800211c:	2301      	movs	r3, #1
 800211e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002120:	2302      	movs	r3, #2
 8002122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002124:	2305      	movs	r3, #5
 8002126:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002128:	f107 030c 	add.w	r3, r7, #12
 800212c:	4619      	mov	r1, r3
 800212e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002132:	f001 f89b 	bl	800326c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002136:	bf00      	nop
 8002138:	3720      	adds	r7, #32
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40013000 	.word	0x40013000

08002144 <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8002148:	4b05      	ldr	r3, [pc, #20]	; (8002160 <UTIL_LPM_Init+0x1c>)
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800214e:	4b05      	ldr	r3, [pc, #20]	; (8002164 <UTIL_LPM_Init+0x20>)
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	20000228 	.word	0x20000228
 8002164:	2000022c 	.word	0x2000022c

08002168 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002174:	f3ef 8310 	mrs	r3, PRIMASK
 8002178:	613b      	str	r3, [r7, #16]
  return(result);
 800217a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800217c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800217e:	b672      	cpsid	i
  
  switch(state)
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d009      	beq.n	800219a <UTIL_LPM_SetOffMode+0x32>
 8002186:	2b01      	cmp	r3, #1
 8002188:	d000      	beq.n	800218c <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 800218a:	e00e      	b.n	80021aa <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <UTIL_LPM_SetOffMode+0x58>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4313      	orrs	r3, r2
 8002194:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <UTIL_LPM_SetOffMode+0x58>)
 8002196:	6013      	str	r3, [r2, #0]
      break;
 8002198:	e007      	b.n	80021aa <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	43da      	mvns	r2, r3
 800219e:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <UTIL_LPM_SetOffMode+0x58>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4013      	ands	r3, r2
 80021a4:	4a06      	ldr	r2, [pc, #24]	; (80021c0 <UTIL_LPM_SetOffMode+0x58>)
 80021a6:	6013      	str	r3, [r2, #0]
      break;
 80021a8:	bf00      	nop
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80021b4:	bf00      	nop
 80021b6:	371c      	adds	r7, #28
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	2000022c 	.word	0x2000022c

080021c4 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021ca:	f3ef 8310 	mrs	r3, PRIMASK
 80021ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80021d0:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80021d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80021d4:	b672      	cpsid	i

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 80021d6:	4b12      	ldr	r3, [pc, #72]	; (8002220 <UTIL_LPM_EnterLowPower+0x5c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d006      	beq.n	80021ec <UTIL_LPM_EnterLowPower+0x28>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 80021de:	4b11      	ldr	r3, [pc, #68]	; (8002224 <UTIL_LPM_EnterLowPower+0x60>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 80021e4:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <UTIL_LPM_EnterLowPower+0x60>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	4798      	blx	r3
 80021ea:	e010      	b.n	800220e <UTIL_LPM_EnterLowPower+0x4a>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 80021ec:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <UTIL_LPM_EnterLowPower+0x64>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d006      	beq.n	8002202 <UTIL_LPM_EnterLowPower+0x3e>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <UTIL_LPM_EnterLowPower+0x60>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 80021fa:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <UTIL_LPM_EnterLowPower+0x60>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	4798      	blx	r3
 8002200:	e005      	b.n	800220e <UTIL_LPM_EnterLowPower+0x4a>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8002202:	4b08      	ldr	r3, [pc, #32]	; (8002224 <UTIL_LPM_EnterLowPower+0x60>)
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <UTIL_LPM_EnterLowPower+0x60>)
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	4798      	blx	r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8002218:	bf00      	nop
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20000228 	.word	0x20000228
 8002224:	0800d258 	.word	0x0800d258
 8002228:	2000022c 	.word	0x2000022c

0800222c <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode( void )
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterOffMode */

/* USER CODE END PWR_EnterOffMode */
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode( void )
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode */

/* USER CODE END PWR_ExitOffMode */
}
 800223e:	bf00      	nop
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode( void )
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterStopMode */

/* USER CODE END PWR_EnterStopMode */
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode( void )
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitStopMode */

/* USER CODE END PWR_ExitStopMode */
}
 800225a:	bf00      	nop
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode( void )
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode */

/* USER CODE END PWR_EnterSleepMode */
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode( void )
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode */

/* USER CODE END PWR_ExitSleepMode */
}
 8002276:	bf00      	nop
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t mask_bm )
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08c      	sub	sp, #48	; 0x30
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8002288:	4b63      	ldr	r3, [pc, #396]	; (8002418 <UTIL_SEQ_Run+0x198>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= mask_bm;
 800228e:	4b62      	ldr	r3, [pc, #392]	; (8002418 <UTIL_SEQ_Run+0x198>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4013      	ands	r3, r2
 8002296:	4a60      	ldr	r2, [pc, #384]	; (8002418 <UTIL_SEQ_Run+0x198>)
 8002298:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 800229a:	e082      	b.n	80023a2 <UTIL_SEQ_Run+0x122>
  {
    counter = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 80022a0:	e002      	b.n	80022a8 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 80022a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a4:	3301      	adds	r3, #1
 80022a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 80022a8:	4a5c      	ldr	r2, [pc, #368]	; (800241c <UTIL_SEQ_Run+0x19c>)
 80022aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ac:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80022b0:	4b5b      	ldr	r3, [pc, #364]	; (8002420 <UTIL_SEQ_Run+0x1a0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	401a      	ands	r2, r3
 80022b6:	4b58      	ldr	r3, [pc, #352]	; (8002418 <UTIL_SEQ_Run+0x198>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4013      	ands	r3, r2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f0      	beq.n	80022a2 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 80022c0:	4a56      	ldr	r2, [pc, #344]	; (800241c <UTIL_SEQ_Run+0x19c>)
 80022c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80022c8:	4b55      	ldr	r3, [pc, #340]	; (8002420 <UTIL_SEQ_Run+0x1a0>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	401a      	ands	r2, r3
 80022ce:	4b52      	ldr	r3, [pc, #328]	; (8002418 <UTIL_SEQ_Run+0x198>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4013      	ands	r3, r2
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if (!(TaskPrio[counter].round_robin & current_task_set))
 80022d6:	4a51      	ldr	r2, [pc, #324]	; (800241c <UTIL_SEQ_Run+0x19c>)
 80022d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4413      	add	r3, r2
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d106      	bne.n	80022f6 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80022e8:	4a4c      	ldr	r2, [pc, #304]	; (800241c <UTIL_SEQ_Run+0x19c>)
 80022ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4413      	add	r3, r2
 80022f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022f4:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = bit_position(current_task_set & TaskPrio[counter].round_robin);
 80022f6:	4a49      	ldr	r2, [pc, #292]	; (800241c <UTIL_SEQ_Run+0x19c>)
 80022f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4413      	add	r3, r2
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	4013      	ands	r3, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f000 f97d 	bl	8002604 <bit_position>
 800230a:	4602      	mov	r2, r0
 800230c:	4b45      	ldr	r3, [pc, #276]	; (8002424 <UTIL_SEQ_Run+0x1a4>)
 800230e:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1 << (CurrentTaskIdx));
 8002310:	4a42      	ldr	r2, [pc, #264]	; (800241c <UTIL_SEQ_Run+0x19c>)
 8002312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4413      	add	r3, r2
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	4a42      	ldr	r2, [pc, #264]	; (8002424 <UTIL_SEQ_Run+0x1a4>)
 800231c:	6812      	ldr	r2, [r2, #0]
 800231e:	2101      	movs	r1, #1
 8002320:	fa01 f202 	lsl.w	r2, r1, r2
 8002324:	43d2      	mvns	r2, r2
 8002326:	401a      	ands	r2, r3
 8002328:	493c      	ldr	r1, [pc, #240]	; (800241c <UTIL_SEQ_Run+0x19c>)
 800232a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	440b      	add	r3, r1
 8002330:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002332:	f3ef 8310 	mrs	r3, PRIMASK
 8002336:	61bb      	str	r3, [r7, #24]
  return(result);
 8002338:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800233a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800233c:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1 << (CurrentTaskIdx));
 800233e:	4b39      	ldr	r3, [pc, #228]	; (8002424 <UTIL_SEQ_Run+0x1a4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2201      	movs	r2, #1
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	461a      	mov	r2, r3
 800234c:	4b36      	ldr	r3, [pc, #216]	; (8002428 <UTIL_SEQ_Run+0x1a8>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4013      	ands	r3, r2
 8002352:	4a35      	ldr	r2, [pc, #212]	; (8002428 <UTIL_SEQ_Run+0x1a8>)
 8002354:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 8002356:	2302      	movs	r3, #2
 8002358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800235a:	e014      	b.n	8002386 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1].priority &= ~(1 << (CurrentTaskIdx));
 800235c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235e:	3b01      	subs	r3, #1
 8002360:	4a2e      	ldr	r2, [pc, #184]	; (800241c <UTIL_SEQ_Run+0x19c>)
 8002362:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002366:	4b2f      	ldr	r3, [pc, #188]	; (8002424 <UTIL_SEQ_Run+0x1a4>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2101      	movs	r1, #1
 800236c:	fa01 f303 	lsl.w	r3, r1, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	4619      	mov	r1, r3
 8002374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002376:	3b01      	subs	r3, #1
 8002378:	400a      	ands	r2, r1
 800237a:	4928      	ldr	r1, [pc, #160]	; (800241c <UTIL_SEQ_Run+0x19c>)
 800237c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 8002380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002382:	3b01      	subs	r3, #1
 8002384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1e7      	bne.n	800235c <UTIL_SEQ_Run+0xdc>
 800238c:	6a3b      	ldr	r3, [r7, #32]
 800238e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8002396:	4b23      	ldr	r3, [pc, #140]	; (8002424 <UTIL_SEQ_Run+0x1a4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a24      	ldr	r2, [pc, #144]	; (800242c <UTIL_SEQ_Run+0x1ac>)
 800239c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a0:	4798      	blx	r3
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 80023a2:	4b21      	ldr	r3, [pc, #132]	; (8002428 <UTIL_SEQ_Run+0x1a8>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	4b1e      	ldr	r3, [pc, #120]	; (8002420 <UTIL_SEQ_Run+0x1a0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	401a      	ands	r2, r3
 80023ac:	4b1a      	ldr	r3, [pc, #104]	; (8002418 <UTIL_SEQ_Run+0x198>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d007      	beq.n	80023c6 <UTIL_SEQ_Run+0x146>
 80023b6:	4b1e      	ldr	r3, [pc, #120]	; (8002430 <UTIL_SEQ_Run+0x1b0>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	4b1e      	ldr	r3, [pc, #120]	; (8002434 <UTIL_SEQ_Run+0x1b4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4013      	ands	r3, r2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f43f af6b 	beq.w	800229c <UTIL_SEQ_Run+0x1c>
  }

  UTIL_SEQ_PreIdle( );
 80023c6:	f000 f90f 	bl	80025e8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023ca:	f3ef 8310 	mrs	r3, PRIMASK
 80023ce:	613b      	str	r3, [r7, #16]
  return(result);
 80023d0:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80023d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80023d4:	b672      	cpsid	i
  if (!((TaskSet & TaskMask & SuperMask) || (EvtSet & EvtWaited)))
 80023d6:	4b14      	ldr	r3, [pc, #80]	; (8002428 <UTIL_SEQ_Run+0x1a8>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <UTIL_SEQ_Run+0x1a0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	401a      	ands	r2, r3
 80023e0:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <UTIL_SEQ_Run+0x198>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d108      	bne.n	80023fc <UTIL_SEQ_Run+0x17c>
 80023ea:	4b11      	ldr	r3, [pc, #68]	; (8002430 <UTIL_SEQ_Run+0x1b0>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	4b11      	ldr	r3, [pc, #68]	; (8002434 <UTIL_SEQ_Run+0x1b4>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4013      	ands	r3, r2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <UTIL_SEQ_Run+0x17c>
  {
    UTIL_SEQ_Idle( );
 80023f8:	f7fe fbef 	bl	8000bda <UTIL_SEQ_Idle>
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  
  UTIL_SEQ_PostIdle( );
 8002406:	f000 f8f6 	bl	80025f6 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800240a:	4a03      	ldr	r2, [pc, #12]	; (8002418 <UTIL_SEQ_Run+0x198>)
 800240c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240e:	6013      	str	r3, [r2, #0]

  return;
 8002410:	bf00      	nop
}
 8002412:	3730      	adds	r7, #48	; 0x30
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	2000000c 	.word	0x2000000c
 800241c:	200002c0 	.word	0x200002c0
 8002420:	20000008 	.word	0x20000008
 8002424:	2000023c 	.word	0x2000023c
 8002428:	20000230 	.word	0x20000230
 800242c:	20000240 	.word	0x20000240
 8002430:	20000234 	.word	0x20000234
 8002434:	20000238 	.word	0x20000238

08002438 <UTIL_SEQ_RegTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_RegTask( UTIL_SEQ_bm_t task_id_bm , uint32_t flags, void (*task)( void ) )
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002444:	f3ef 8310 	mrs	r3, PRIMASK
 8002448:	617b      	str	r3, [r7, #20]
  return(result);
 800244a:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800244c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800244e:	b672      	cpsid	i

  TaskCb[bit_position(task_id_bm)] = task;
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 f8d7 	bl	8002604 <bit_position>
 8002456:	4601      	mov	r1, r0
 8002458:	4a06      	ldr	r2, [pc, #24]	; (8002474 <UTIL_SEQ_RegTask+0x3c>)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800246a:	bf00      	nop
}
 800246c:	3720      	adds	r7, #32
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000240 	.word	0x20000240

08002478 <UTIL_SEQ_SetTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t task_id_bm , uint32_t task_prio )
{
 8002478:	b480      	push	{r7}
 800247a:	b087      	sub	sp, #28
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002482:	f3ef 8310 	mrs	r3, PRIMASK
 8002486:	60fb      	str	r3, [r7, #12]
  return(result);
 8002488:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800248a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800248c:	b672      	cpsid	i

  TaskSet |= task_id_bm;
 800248e:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <UTIL_SEQ_SetTask+0x4c>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4313      	orrs	r3, r2
 8002496:	4a0b      	ldr	r2, [pc, #44]	; (80024c4 <UTIL_SEQ_SetTask+0x4c>)
 8002498:	6013      	str	r3, [r2, #0]
  TaskPrio[task_prio].priority |= task_id_bm;
 800249a:	4a0b      	ldr	r2, [pc, #44]	; (80024c8 <UTIL_SEQ_SetTask+0x50>)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	431a      	orrs	r2, r3
 80024a6:	4908      	ldr	r1, [pc, #32]	; (80024c8 <UTIL_SEQ_SetTask+0x50>)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80024b8:	bf00      	nop
}
 80024ba:	371c      	adds	r7, #28
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	20000230 	.word	0x20000230
 80024c8:	200002c0 	.word	0x200002c0

080024cc <UTIL_SEQ_PauseTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t task_id_bm )
{
 80024cc:	b480      	push	{r7}
 80024ce:	b087      	sub	sp, #28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024d4:	f3ef 8310 	mrs	r3, PRIMASK
 80024d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80024da:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80024dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80024de:	b672      	cpsid	i

  TaskMask &= (~task_id_bm);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	43da      	mvns	r2, r3
 80024e4:	4b07      	ldr	r3, [pc, #28]	; (8002504 <UTIL_SEQ_PauseTask+0x38>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4013      	ands	r3, r2
 80024ea:	4a06      	ldr	r2, [pc, #24]	; (8002504 <UTIL_SEQ_PauseTask+0x38>)
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80024f8:	bf00      	nop
}
 80024fa:	371c      	adds	r7, #28
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	20000008 	.word	0x20000008

08002508 <UTIL_SEQ_ResumeTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t task_id_bm )
{
 8002508:	b480      	push	{r7}
 800250a:	b087      	sub	sp, #28
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002510:	f3ef 8310 	mrs	r3, PRIMASK
 8002514:	60fb      	str	r3, [r7, #12]
  return(result);
 8002516:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8002518:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800251a:	b672      	cpsid	i

  TaskMask |= task_id_bm;
 800251c:	4b08      	ldr	r3, [pc, #32]	; (8002540 <UTIL_SEQ_ResumeTask+0x38>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4313      	orrs	r3, r2
 8002524:	4a06      	ldr	r2, [pc, #24]	; (8002540 <UTIL_SEQ_ResumeTask+0x38>)
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8002532:	bf00      	nop
}
 8002534:	371c      	adds	r7, #28
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	20000008 	.word	0x20000008

08002544 <UTIL_SEQ_SetEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 8002544:	b480      	push	{r7}
 8002546:	b087      	sub	sp, #28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800254c:	f3ef 8310 	mrs	r3, PRIMASK
 8002550:	60fb      	str	r3, [r7, #12]
  return(result);
 8002552:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8002554:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002556:	b672      	cpsid	i

  EvtSet |= evt_id_bm;
 8002558:	4b08      	ldr	r3, [pc, #32]	; (800257c <UTIL_SEQ_SetEvt+0x38>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4313      	orrs	r3, r2
 8002560:	4a06      	ldr	r2, [pc, #24]	; (800257c <UTIL_SEQ_SetEvt+0x38>)
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800256e:	bf00      	nop
}
 8002570:	371c      	adds	r7, #28
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	20000234 	.word	0x20000234

08002580 <UTIL_SEQ_WaitEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_WaitEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_id_bm;

  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_id_bm = (1 << CurrentTaskIdx);
 8002588:	4b14      	ldr	r3, [pc, #80]	; (80025dc <UTIL_SEQ_WaitEvt+0x5c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2201      	movs	r2, #1
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	60fb      	str	r3, [r7, #12]

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8002594:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <UTIL_SEQ_WaitEvt+0x60>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	60bb      	str	r3, [r7, #8]
  EvtWaited = evt_id_bm;
 800259a:	4a11      	ldr	r2, [pc, #68]	; (80025e0 <UTIL_SEQ_WaitEvt+0x60>)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again fro the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while((EvtSet & EvtWaited) == 0)
 80025a0:	e005      	b.n	80025ae <UTIL_SEQ_WaitEvt+0x2e>
  {
    UTIL_SEQ_EvtIdle(current_task_id_bm, EvtWaited);
 80025a2:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <UTIL_SEQ_WaitEvt+0x60>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4619      	mov	r1, r3
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f7fe fb1c 	bl	8000be6 <UTIL_SEQ_EvtIdle>
  while((EvtSet & EvtWaited) == 0)
 80025ae:	4b0d      	ldr	r3, [pc, #52]	; (80025e4 <UTIL_SEQ_WaitEvt+0x64>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <UTIL_SEQ_WaitEvt+0x60>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f2      	beq.n	80025a2 <UTIL_SEQ_WaitEvt+0x22>
  }
  EvtSet &= (~EvtWaited);
 80025bc:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <UTIL_SEQ_WaitEvt+0x60>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	43da      	mvns	r2, r3
 80025c2:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <UTIL_SEQ_WaitEvt+0x64>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4013      	ands	r3, r2
 80025c8:	4a06      	ldr	r2, [pc, #24]	; (80025e4 <UTIL_SEQ_WaitEvt+0x64>)
 80025ca:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 80025cc:	4a04      	ldr	r2, [pc, #16]	; (80025e0 <UTIL_SEQ_WaitEvt+0x60>)
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	6013      	str	r3, [r2, #0]

  return;
 80025d2:	bf00      	nop
}
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	2000023c 	.word	0x2000023c
 80025e0:	20000238 	.word	0x20000238
 80025e4:	20000234 	.word	0x20000234

080025e8 <UTIL_SEQ_PreIdle>:
   */
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80025ec:	bf00      	nop
}
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80025fa:	bf00      	nop
}
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <bit_position>:

#if( __CORTEX_M == 0)
static const uint8_t clz_table_4bit[16] = { 4, 3, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };	
static uint32_t bit_position(uint32_t value)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]

  uint32_t n = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	60fb      	str	r3, [r7, #12]

  if ((value & 0xFFFF0000) == 0)  { n  = 16; value <<= 16;  }
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	0c1b      	lsrs	r3, r3, #16
 8002614:	041b      	lsls	r3, r3, #16
 8002616:	2b00      	cmp	r3, #0
 8002618:	d104      	bne.n	8002624 <bit_position+0x20>
 800261a:	2310      	movs	r3, #16
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	041b      	lsls	r3, r3, #16
 8002622:	607b      	str	r3, [r7, #4]
  if ((value & 0xFF000000) == 0)  { n +=  8; value <<=  8;  }
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d105      	bne.n	800263a <bit_position+0x36>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	3308      	adds	r3, #8
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	607b      	str	r3, [r7, #4]
  if ((value & 0xF0000000) == 0)  { n +=  4; value <<=  4;  }
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d105      	bne.n	8002650 <bit_position+0x4c>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	3304      	adds	r3, #4
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	607b      	str	r3, [r7, #4]

  n += (uint32_t)clz_table_4bit[value >> (32-4)];
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	0f1b      	lsrs	r3, r3, #28
 8002654:	4a07      	ldr	r2, [pc, #28]	; (8002674 <bit_position+0x70>)
 8002656:	5cd3      	ldrb	r3, [r2, r3]
 8002658:	461a      	mov	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4413      	add	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]

  return (31-n);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f1c3 031f 	rsb	r3, r3, #31
}
 8002666:	4618      	mov	r0, r3
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	0800d270 	.word	0x0800d270

08002678 <LL_RCC_HSE_SetCapacitorTuning>:
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8002680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002684:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8002686:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800268a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800268e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002692:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	021b      	lsls	r3, r3, #8
 800269a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800269e:	4313      	orrs	r3, r2
 80026a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	cafecafe 	.word	0xcafecafe

080026b4 <LL_AHB3_GRP1_EnableClock>:
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80026bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80026cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4013      	ands	r3, r2
 80026d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026d8:	68fb      	ldr	r3, [r7, #12]
}
 80026da:	bf00      	nop
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b082      	sub	sp, #8
 80026ea:	af00      	add	r7, sp, #0

	OTP_ID0_t * p_otp;
	/**
	* Read HSE_Tuning from OTP
	*/
	p_otp = (OTP_ID0_t *) OTP_Read(0);
 80026ec:	2000      	movs	r0, #0
 80026ee:	f008 fe23 	bl	800b338 <OTP_Read>
 80026f2:	6078      	str	r0, [r7, #4]
	if (p_otp)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d004      	beq.n	8002704 <HAL_MspInit+0x1e>
	{
		LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	799b      	ldrb	r3, [r3, #6]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff ffba 	bl	8002678 <LL_RCC_HSE_SetCapacitorTuning>
	}
  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002708:	f7ff ffd4 	bl	80026b4 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800270c:	2200      	movs	r2, #0
 800270e:	2100      	movs	r1, #0
 8002710:	202e      	movs	r0, #46	; 0x2e
 8002712:	f000 fd11 	bl	8003138 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002716:	202e      	movs	r0, #46	; 0x2e
 8002718:	f000 fd38 	bl	800318c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800271c:	bf00      	nop
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002732:	b480      	push	{r7}
 8002734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002736:	e7fe      	b.n	8002736 <HardFault_Handler+0x4>

08002738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800273c:	e7fe      	b.n	800273c <MemManage_Handler+0x4>

0800273e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800273e:	b480      	push	{r7}
 8002740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002742:	e7fe      	b.n	8002742 <BusFault_Handler+0x4>

08002744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002748:	e7fe      	b.n	8002748 <UsageFault_Handler+0x4>

0800274a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002766:	b480      	push	{r7}
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002778:	f000 fb44 	bl	8002e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800277c:	bf00      	nop
 800277e:	bd80      	pop	{r7, pc}

08002780 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002784:	4802      	ldr	r0, [pc, #8]	; (8002790 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002786:	f005 fca5 	bl	80080d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	2000041c 	.word	0x2000041c

08002794 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002798:	f000 fffa 	bl	8003790 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}

080027a0 <RTC_WKUP_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
* @brief This function handles RTC wake-up interrupt through EXTI line 19.
*/
void RTC_WKUP_IRQHandler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
	HW_TS_RTC_Wakeup_Handler();
 80027a4:	f7fe fe1a 	bl	80013dc <HW_TS_RTC_Wakeup_Handler>
}
 80027a8:	bf00      	nop
 80027aa:	bd80      	pop	{r7, pc}

080027ac <IPCC_C1_RX_IRQHandler>:
/**
* @brief This function handles IPCC RX occupied interrupt.
*/
void IPCC_C1_RX_IRQHandler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
	HW_IPCC_Rx_Handler();
 80027b0:	f00a f8a6 	bl	800c900 <HW_IPCC_Rx_Handler>
}
 80027b4:	bf00      	nop
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <IPCC_C1_TX_IRQHandler>:
/**
* @brief This function handles IPCC TX free interrupt.
*/
void IPCC_C1_TX_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
	HW_IPCC_Tx_Handler();
 80027bc:	f00a f8d8 	bl	800c970 <HW_IPCC_Tx_Handler>
}
 80027c0:	bf00      	nop
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80027c8:	4b26      	ldr	r3, [pc, #152]	; (8002864 <SystemInit+0xa0>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80027ce:	4b25      	ldr	r3, [pc, #148]	; (8002864 <SystemInit+0xa0>)
 80027d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d4:	4a23      	ldr	r2, [pc, #140]	; (8002864 <SystemInit+0xa0>)
 80027d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027da:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80027de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80027ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80027f6:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80027f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002802:	4b19      	ldr	r3, [pc, #100]	; (8002868 <SystemInit+0xa4>)
 8002804:	4013      	ands	r3, r2
 8002806:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800280c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002810:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002814:	f023 0305 	bic.w	r3, r3, #5
 8002818:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800281c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002820:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002824:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002828:	f023 0301 	bic.w	r3, r3, #1
 800282c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002834:	4a0d      	ldr	r2, [pc, #52]	; (800286c <SystemInit+0xa8>)
 8002836:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800283c:	4a0b      	ldr	r2, [pc, #44]	; (800286c <SystemInit+0xa8>)
 800283e:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800284a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800284e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002854:	2200      	movs	r2, #0
 8002856:	619a      	str	r2, [r3, #24]
}
 8002858:	bf00      	nop
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	e000ed00 	.word	0xe000ed00
 8002868:	faf6fefb 	.word	0xfaf6fefb
 800286c:	22041000 	.word	0x22041000

08002870 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002870:	b480      	push	{r7}
 8002872:	b087      	sub	sp, #28
 8002874:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8002876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	091b      	lsrs	r3, r3, #4
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	4a47      	ldr	r2, [pc, #284]	; (80029a0 <SystemCoreClockUpdate+0x130>)
 8002884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002888:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800288a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 030c 	and.w	r3, r3, #12
 8002894:	2b0c      	cmp	r3, #12
 8002896:	d867      	bhi.n	8002968 <SystemCoreClockUpdate+0xf8>
 8002898:	a201      	add	r2, pc, #4	; (adr r2, 80028a0 <SystemCoreClockUpdate+0x30>)
 800289a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800289e:	bf00      	nop
 80028a0:	080028d5 	.word	0x080028d5
 80028a4:	08002969 	.word	0x08002969
 80028a8:	08002969 	.word	0x08002969
 80028ac:	08002969 	.word	0x08002969
 80028b0:	080028dd 	.word	0x080028dd
 80028b4:	08002969 	.word	0x08002969
 80028b8:	08002969 	.word	0x08002969
 80028bc:	08002969 	.word	0x08002969
 80028c0:	080028e5 	.word	0x080028e5
 80028c4:	08002969 	.word	0x08002969
 80028c8:	08002969 	.word	0x08002969
 80028cc:	08002969 	.word	0x08002969
 80028d0:	080028ed 	.word	0x080028ed
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80028d4:	4a33      	ldr	r2, [pc, #204]	; (80029a4 <SystemCoreClockUpdate+0x134>)
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	6013      	str	r3, [r2, #0]
      break;
 80028da:	e049      	b.n	8002970 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 80028dc:	4b31      	ldr	r3, [pc, #196]	; (80029a4 <SystemCoreClockUpdate+0x134>)
 80028de:	4a32      	ldr	r2, [pc, #200]	; (80029a8 <SystemCoreClockUpdate+0x138>)
 80028e0:	601a      	str	r2, [r3, #0]
      break;
 80028e2:	e045      	b.n	8002970 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80028e4:	4b2f      	ldr	r3, [pc, #188]	; (80029a4 <SystemCoreClockUpdate+0x134>)
 80028e6:	4a31      	ldr	r2, [pc, #196]	; (80029ac <SystemCoreClockUpdate+0x13c>)
 80028e8:	601a      	str	r2, [r3, #0]
      break;
 80028ea:	e041      	b.n	8002970 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80028ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 80028f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	091b      	lsrs	r3, r3, #4
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	3301      	adds	r3, #1
 8002906:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d105      	bne.n	800291a <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 800290e:	4a26      	ldr	r2, [pc, #152]	; (80029a8 <SystemCoreClockUpdate+0x138>)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	fbb2 f3f3 	udiv	r3, r2, r3
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	e00d      	b.n	8002936 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2b03      	cmp	r3, #3
 800291e:	d105      	bne.n	800292c <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8002920:	4a22      	ldr	r2, [pc, #136]	; (80029ac <SystemCoreClockUpdate+0x13c>)
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	fbb2 f3f3 	udiv	r3, r2, r3
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	e004      	b.n	8002936 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	fbb2 f3f3 	udiv	r3, r2, r3
 8002934:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	0a1b      	lsrs	r3, r3, #8
 800293e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	fb02 f303 	mul.w	r3, r2, r3
 8002948:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 800294a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	0f5b      	lsrs	r3, r3, #29
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	3301      	adds	r3, #1
 8002958:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002962:	4a10      	ldr	r2, [pc, #64]	; (80029a4 <SystemCoreClockUpdate+0x134>)
 8002964:	6013      	str	r3, [r2, #0]
      break;
 8002966:	e003      	b.n	8002970 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8002968:	4a0e      	ldr	r2, [pc, #56]	; (80029a4 <SystemCoreClockUpdate+0x134>)
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	6013      	str	r3, [r2, #0]
      break;
 800296e:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	091b      	lsrs	r3, r3, #4
 8002978:	f003 030f 	and.w	r3, r3, #15
 800297c:	4a0c      	ldr	r2, [pc, #48]	; (80029b0 <SystemCoreClockUpdate+0x140>)
 800297e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002982:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8002984:	4b07      	ldr	r3, [pc, #28]	; (80029a4 <SystemCoreClockUpdate+0x134>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	fbb2 f3f3 	udiv	r3, r2, r3
 800298e:	4a05      	ldr	r2, [pc, #20]	; (80029a4 <SystemCoreClockUpdate+0x134>)
 8002990:	6013      	str	r3, [r2, #0]

}
 8002992:	bf00      	nop
 8002994:	371c      	adds	r7, #28
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	0800d2e0 	.word	0x0800d2e0
 80029a4:	20000010 	.word	0x20000010
 80029a8:	00f42400 	.word	0x00f42400
 80029ac:	01e84800 	.word	0x01e84800
 80029b0:	0800d280 	.word	0x0800d280

080029b4 <LL_APB2_GRP1_EnableClock>:
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80029bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80029cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4013      	ands	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029d8:	68fb      	ldr	r3, [r7, #12]
}
 80029da:	bf00      	nop
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 80029ec:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <MX_TIM16_Init+0x48>)
 80029ee:	4a11      	ldr	r2, [pc, #68]	; (8002a34 <MX_TIM16_Init+0x4c>)
 80029f0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1000;
 80029f2:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <MX_TIM16_Init+0x48>)
 80029f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029f8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029fa:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <MX_TIM16_Init+0x48>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 800;
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <MX_TIM16_Init+0x48>)
 8002a02:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002a06:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a08:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <MX_TIM16_Init+0x48>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002a0e:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <MX_TIM16_Init+0x48>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a14:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <MX_TIM16_Init+0x48>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002a1a:	4805      	ldr	r0, [pc, #20]	; (8002a30 <MX_TIM16_Init+0x48>)
 8002a1c:	f005 fa8a 	bl	8007f34 <HAL_TIM_Base_Init>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8002a26:	f7ff fa89 	bl	8001f3c <Error_Handler>
  }

}
 8002a2a:	bf00      	nop
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	2000041c 	.word	0x2000041c
 8002a34:	40014400 	.word	0x40014400

08002a38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a09      	ldr	r2, [pc, #36]	; (8002a6c <HAL_TIM_Base_MspInit+0x34>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d10b      	bne.n	8002a62 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002a4a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002a4e:	f7ff ffb1 	bl	80029b4 <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002a52:	2200      	movs	r2, #0
 8002a54:	2100      	movs	r1, #0
 8002a56:	2019      	movs	r0, #25
 8002a58:	f000 fb6e 	bl	8003138 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002a5c:	2019      	movs	r0, #25
 8002a5e:	f000 fb95 	bl	800318c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40014400 	.word	0x40014400

08002a70 <LL_AHB2_GRP1_EnableClock>:
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4013      	ands	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a94:	68fb      	ldr	r3, [r7, #12]
}
 8002a96:	bf00      	nop
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <LL_APB2_GRP1_EnableClock>:
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b085      	sub	sp, #20
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ab0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002abe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
}
 8002ac8:	bf00      	nop
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002ad8:	4b22      	ldr	r3, [pc, #136]	; (8002b64 <MX_USART1_UART_Init+0x90>)
 8002ada:	4a23      	ldr	r2, [pc, #140]	; (8002b68 <MX_USART1_UART_Init+0x94>)
 8002adc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002ade:	4b21      	ldr	r3, [pc, #132]	; (8002b64 <MX_USART1_UART_Init+0x90>)
 8002ae0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ae4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ae6:	4b1f      	ldr	r3, [pc, #124]	; (8002b64 <MX_USART1_UART_Init+0x90>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002aec:	4b1d      	ldr	r3, [pc, #116]	; (8002b64 <MX_USART1_UART_Init+0x90>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002af2:	4b1c      	ldr	r3, [pc, #112]	; (8002b64 <MX_USART1_UART_Init+0x90>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002af8:	4b1a      	ldr	r3, [pc, #104]	; (8002b64 <MX_USART1_UART_Init+0x90>)
 8002afa:	220c      	movs	r2, #12
 8002afc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002afe:	4b19      	ldr	r3, [pc, #100]	; (8002b64 <MX_USART1_UART_Init+0x90>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b04:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <MX_USART1_UART_Init+0x90>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b0a:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <MX_USART1_UART_Init+0x90>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b10:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <MX_USART1_UART_Init+0x90>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b16:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <MX_USART1_UART_Init+0x90>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b1c:	4811      	ldr	r0, [pc, #68]	; (8002b64 <MX_USART1_UART_Init+0x90>)
 8002b1e:	f005 fcc3 	bl	80084a8 <HAL_UART_Init>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002b28:	f7ff fa08 	bl	8001f3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	480d      	ldr	r0, [pc, #52]	; (8002b64 <MX_USART1_UART_Init+0x90>)
 8002b30:	f007 f8c6 	bl	8009cc0 <HAL_UARTEx_SetTxFifoThreshold>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002b3a:	f7ff f9ff 	bl	8001f3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b3e:	2100      	movs	r1, #0
 8002b40:	4808      	ldr	r0, [pc, #32]	; (8002b64 <MX_USART1_UART_Init+0x90>)
 8002b42:	f007 f92d 	bl	8009da0 <HAL_UARTEx_SetRxFifoThreshold>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002b4c:	f7ff f9f6 	bl	8001f3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002b50:	4804      	ldr	r0, [pc, #16]	; (8002b64 <MX_USART1_UART_Init+0x90>)
 8002b52:	f007 f869 	bl	8009c28 <HAL_UARTEx_DisableFifoMode>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002b5c:	f7ff f9ee 	bl	8001f3c <Error_Handler>
  }

}
 8002b60:	bf00      	nop
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	2000045c 	.word	0x2000045c
 8002b68:	40013800 	.word	0x40013800

08002b6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b088      	sub	sp, #32
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b74:	f107 030c 	add.w	r3, r7, #12
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a0e      	ldr	r2, [pc, #56]	; (8002bc4 <HAL_UART_MspInit+0x58>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d116      	bne.n	8002bbc <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b8e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002b92:	f7ff ff86 	bl	8002aa2 <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b96:	2002      	movs	r0, #2
 8002b98:	f7ff ff6a 	bl	8002a70 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002b9c:	23c0      	movs	r3, #192	; 0xc0
 8002b9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bac:	2307      	movs	r3, #7
 8002bae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb0:	f107 030c 	add.w	r3, r7, #12
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4804      	ldr	r0, [pc, #16]	; (8002bc8 <HAL_UART_MspInit+0x5c>)
 8002bb8:	f000 fb58 	bl	800326c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002bbc:	bf00      	nop
 8002bbe:	3720      	adds	r7, #32
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40013800 	.word	0x40013800
 8002bc8:	48000400 	.word	0x48000400

08002bcc <LL_AHB2_GRP1_EnableClock>:
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4013      	ands	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
}
 8002bf2:	bf00      	nop
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <LL_APB1_GRP1_EnableClock>:
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b085      	sub	sp, #20
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c0a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c22:	68fb      	ldr	r3, [r7, #12]
}
 8002c24:	bf00      	nop
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0

  hpcd_USB_FS.Instance = USB;
 8002c34:	4b10      	ldr	r3, [pc, #64]	; (8002c78 <MX_USB_PCD_Init+0x48>)
 8002c36:	4a11      	ldr	r2, [pc, #68]	; (8002c7c <MX_USB_PCD_Init+0x4c>)
 8002c38:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002c3a:	4b0f      	ldr	r3, [pc, #60]	; (8002c78 <MX_USB_PCD_Init+0x48>)
 8002c3c:	2208      	movs	r2, #8
 8002c3e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002c40:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <MX_USB_PCD_Init+0x48>)
 8002c42:	2202      	movs	r2, #2
 8002c44:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002c46:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <MX_USB_PCD_Init+0x48>)
 8002c48:	2202      	movs	r2, #2
 8002c4a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002c4c:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <MX_USB_PCD_Init+0x48>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002c52:	4b09      	ldr	r3, [pc, #36]	; (8002c78 <MX_USB_PCD_Init+0x48>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002c58:	4b07      	ldr	r3, [pc, #28]	; (8002c78 <MX_USB_PCD_Init+0x48>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002c5e:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <MX_USB_PCD_Init+0x48>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002c64:	4804      	ldr	r0, [pc, #16]	; (8002c78 <MX_USB_PCD_Init+0x48>)
 8002c66:	f001 fb9f 	bl	80043a8 <HAL_PCD_Init>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002c70:	f7ff f964 	bl	8001f3c <Error_Handler>
  }

}
 8002c74:	bf00      	nop
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	200004e8 	.word	0x200004e8
 8002c7c:	40006800 	.word	0x40006800

08002c80 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c88:	f107 030c 	add.w	r3, r7, #12
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a0f      	ldr	r2, [pc, #60]	; (8002cdc <HAL_PCD_MspInit+0x5c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d118      	bne.n	8002cd4 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca2:	2001      	movs	r0, #1
 8002ca4:	f7ff ff92 	bl	8002bcc <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002ca8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002cac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002cba:	230a      	movs	r3, #10
 8002cbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cbe:	f107 030c 	add.w	r3, r7, #12
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cc8:	f000 fad0 	bl	800326c <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002ccc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002cd0:	f7ff ff95 	bl	8002bfe <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002cd4:	bf00      	nop
 8002cd6:	3720      	adds	r7, #32
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40006800 	.word	0x40006800

08002ce0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002ce0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ce2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ce4:	3304      	adds	r3, #4

08002ce6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ce6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ce8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002cea:	d3f9      	bcc.n	8002ce0 <CopyDataInit>
  bx lr
 8002cec:	4770      	bx	lr

08002cee <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002cee:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002cf0:	3004      	adds	r0, #4

08002cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002cf2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002cf4:	d3fb      	bcc.n	8002cee <FillZerobss>
  bx lr
 8002cf6:	4770      	bx	lr

08002cf8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002cf8:	480c      	ldr	r0, [pc, #48]	; (8002d2c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002cfa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002cfc:	480c      	ldr	r0, [pc, #48]	; (8002d30 <LoopForever+0x8>)
 8002cfe:	490d      	ldr	r1, [pc, #52]	; (8002d34 <LoopForever+0xc>)
 8002d00:	4a0d      	ldr	r2, [pc, #52]	; (8002d38 <LoopForever+0x10>)
 8002d02:	2300      	movs	r3, #0
 8002d04:	f7ff ffef 	bl	8002ce6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002d08:	480c      	ldr	r0, [pc, #48]	; (8002d3c <LoopForever+0x14>)
 8002d0a:	490d      	ldr	r1, [pc, #52]	; (8002d40 <LoopForever+0x18>)
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f7ff fff0 	bl	8002cf2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002d12:	480c      	ldr	r0, [pc, #48]	; (8002d44 <LoopForever+0x1c>)
 8002d14:	490c      	ldr	r1, [pc, #48]	; (8002d48 <LoopForever+0x20>)
 8002d16:	2300      	movs	r3, #0
 8002d18:	f7ff ffeb 	bl	8002cf2 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002d1c:	f7ff fd52 	bl	80027c4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002d20:	f009 ff36 	bl	800cb90 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002d24:	f7fe ff56 	bl	8001bd4 <main>

08002d28 <LoopForever>:

LoopForever:
  b LoopForever
 8002d28:	e7fe      	b.n	8002d28 <LoopForever>
 8002d2a:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002d2c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002d30:	20000004 	.word	0x20000004
 8002d34:	2000002c 	.word	0x2000002c
 8002d38:	0800d360 	.word	0x0800d360
  INIT_BSS _sbss, _ebss
 8002d3c:	200001c4 	.word	0x200001c4
 8002d40:	20000764 	.word	0x20000764
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002d44:	200301c4 	.word	0x200301c4
 8002d48:	20030a44 	.word	0x20030a44

08002d4c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d4c:	e7fe      	b.n	8002d4c <ADC1_IRQHandler>
	...

08002d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d56:	2300      	movs	r3, #0
 8002d58:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d5a:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <HAL_Init+0x3c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a0b      	ldr	r2, [pc, #44]	; (8002d8c <HAL_Init+0x3c>)
 8002d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d64:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d66:	2003      	movs	r0, #3
 8002d68:	f000 f9c6 	bl	80030f8 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	f000 f80f 	bl	8002d90 <HAL_InitTick>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	71fb      	strb	r3, [r7, #7]
 8002d7c:	e001      	b.n	8002d82 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d7e:	f7ff fcb2 	bl	80026e6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d82:	79fb      	ldrb	r3, [r7, #7]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	58004000 	.word	0x58004000

08002d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002d9c:	4b17      	ldr	r3, [pc, #92]	; (8002dfc <HAL_InitTick+0x6c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d023      	beq.n	8002dec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 8002da4:	f002 ff3e 	bl	8005c24 <HAL_RCC_GetHCLKFreq>
 8002da8:	4601      	mov	r1, r0
 8002daa:	4b14      	ldr	r3, [pc, #80]	; (8002dfc <HAL_InitTick+0x6c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 fa16 	bl	80031ec <HAL_SYSTICK_Config>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10f      	bne.n	8002de6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b0f      	cmp	r3, #15
 8002dca:	d809      	bhi.n	8002de0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dcc:	2200      	movs	r2, #0
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dd4:	f000 f9b0 	bl	8003138 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002dd8:	4a09      	ldr	r2, [pc, #36]	; (8002e00 <HAL_InitTick+0x70>)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	e007      	b.n	8002df0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	73fb      	strb	r3, [r7, #15]
 8002de4:	e004      	b.n	8002df0 <HAL_InitTick+0x60>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	73fb      	strb	r3, [r7, #15]
 8002dea:	e001      	b.n	8002df0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000018 	.word	0x20000018
 8002e00:	20000014 	.word	0x20000014

08002e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e08:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <HAL_IncTick+0x1c>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <HAL_IncTick+0x20>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4413      	add	r3, r2
 8002e12:	4a03      	ldr	r2, [pc, #12]	; (8002e20 <HAL_IncTick+0x1c>)
 8002e14:	6013      	str	r3, [r2, #0]
}
 8002e16:	bf00      	nop
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	2000075c 	.word	0x2000075c
 8002e24:	20000018 	.word	0x20000018

08002e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e2c:	4b03      	ldr	r3, [pc, #12]	; (8002e3c <HAL_GetTick+0x14>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	2000075c 	.word	0x2000075c

08002e40 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002e44:	4b03      	ldr	r3, [pc, #12]	; (8002e54 <HAL_GetTickPrio+0x14>)
 8002e46:	681b      	ldr	r3, [r3, #0]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	20000014 	.word	0x20000014

08002e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8002e60:	f7ff ffe2 	bl	8002e28 <HAL_GetTick>
 8002e64:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e70:	d004      	beq.n	8002e7c <HAL_Delay+0x24>
    {
      wait += (uint32_t)(uwTickFreq);
 8002e72:	4b09      	ldr	r3, [pc, #36]	; (8002e98 <HAL_Delay+0x40>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4413      	add	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8002e7c:	bf00      	nop
 8002e7e:	f7ff ffd3 	bl	8002e28 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d8f7      	bhi.n	8002e7e <HAL_Delay+0x26>
    {
    }
  }
 8002e8e:	bf00      	nop
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	20000018 	.word	0x20000018

08002e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eac:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002eb8:	4013      	ands	r3, r2
 8002eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ec4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ece:	4a04      	ldr	r2, [pc, #16]	; (8002ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	60d3      	str	r3, [r2, #12]
}
 8002ed4:	bf00      	nop
 8002ed6:	3714      	adds	r7, #20
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	e000ed00 	.word	0xe000ed00

08002ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ee8:	4b04      	ldr	r3, [pc, #16]	; (8002efc <__NVIC_GetPriorityGrouping+0x18>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	0a1b      	lsrs	r3, r3, #8
 8002eee:	f003 0307 	and.w	r3, r3, #7
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	e000ed00 	.word	0xe000ed00

08002f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	db0b      	blt.n	8002f2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	f003 021f 	and.w	r2, r3, #31
 8002f18:	4907      	ldr	r1, [pc, #28]	; (8002f38 <__NVIC_EnableIRQ+0x38>)
 8002f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1e:	095b      	lsrs	r3, r3, #5
 8002f20:	2001      	movs	r0, #1
 8002f22:	fa00 f202 	lsl.w	r2, r0, r2
 8002f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	e000e100 	.word	0xe000e100

08002f3c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4603      	mov	r3, r0
 8002f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	db10      	blt.n	8002f70 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	f003 021f 	and.w	r2, r3, #31
 8002f54:	4909      	ldr	r1, [pc, #36]	; (8002f7c <__NVIC_DisableIRQ+0x40>)
 8002f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5a:	095b      	lsrs	r3, r3, #5
 8002f5c:	2001      	movs	r0, #1
 8002f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f62:	3320      	adds	r3, #32
 8002f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002f68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002f6c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	e000e100 	.word	0xe000e100

08002f80 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	db0c      	blt.n	8002fac <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f92:	79fb      	ldrb	r3, [r7, #7]
 8002f94:	f003 021f 	and.w	r2, r3, #31
 8002f98:	4907      	ldr	r1, [pc, #28]	; (8002fb8 <__NVIC_SetPendingIRQ+0x38>)
 8002f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	2001      	movs	r0, #1
 8002fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8002fa6:	3340      	adds	r3, #64	; 0x40
 8002fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	e000e100 	.word	0xe000e100

08002fbc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	db0c      	blt.n	8002fe8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fce:	79fb      	ldrb	r3, [r7, #7]
 8002fd0:	f003 021f 	and.w	r2, r3, #31
 8002fd4:	4907      	ldr	r1, [pc, #28]	; (8002ff4 <__NVIC_ClearPendingIRQ+0x38>)
 8002fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	2001      	movs	r0, #1
 8002fde:	fa00 f202 	lsl.w	r2, r0, r2
 8002fe2:	3360      	adds	r3, #96	; 0x60
 8002fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	e000e100 	.word	0xe000e100

08002ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	6039      	str	r1, [r7, #0]
 8003002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003008:	2b00      	cmp	r3, #0
 800300a:	db0a      	blt.n	8003022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	b2da      	uxtb	r2, r3
 8003010:	490c      	ldr	r1, [pc, #48]	; (8003044 <__NVIC_SetPriority+0x4c>)
 8003012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003016:	0112      	lsls	r2, r2, #4
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	440b      	add	r3, r1
 800301c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003020:	e00a      	b.n	8003038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	b2da      	uxtb	r2, r3
 8003026:	4908      	ldr	r1, [pc, #32]	; (8003048 <__NVIC_SetPriority+0x50>)
 8003028:	79fb      	ldrb	r3, [r7, #7]
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	3b04      	subs	r3, #4
 8003030:	0112      	lsls	r2, r2, #4
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	440b      	add	r3, r1
 8003036:	761a      	strb	r2, [r3, #24]
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	e000e100 	.word	0xe000e100
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800304c:	b480      	push	{r7}
 800304e:	b089      	sub	sp, #36	; 0x24
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f1c3 0307 	rsb	r3, r3, #7
 8003066:	2b04      	cmp	r3, #4
 8003068:	bf28      	it	cs
 800306a:	2304      	movcs	r3, #4
 800306c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	3304      	adds	r3, #4
 8003072:	2b06      	cmp	r3, #6
 8003074:	d902      	bls.n	800307c <NVIC_EncodePriority+0x30>
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	3b03      	subs	r3, #3
 800307a:	e000      	b.n	800307e <NVIC_EncodePriority+0x32>
 800307c:	2300      	movs	r3, #0
 800307e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003080:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	43da      	mvns	r2, r3
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	401a      	ands	r2, r3
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003094:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	fa01 f303 	lsl.w	r3, r1, r3
 800309e:	43d9      	mvns	r1, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a4:	4313      	orrs	r3, r2
         );
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3724      	adds	r7, #36	; 0x24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
	...

080030b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3b01      	subs	r3, #1
 80030c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030c4:	d301      	bcc.n	80030ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030c6:	2301      	movs	r3, #1
 80030c8:	e00f      	b.n	80030ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ca:	4a0a      	ldr	r2, [pc, #40]	; (80030f4 <SysTick_Config+0x40>)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030d2:	210f      	movs	r1, #15
 80030d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030d8:	f7ff ff8e 	bl	8002ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030dc:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <SysTick_Config+0x40>)
 80030de:	2200      	movs	r2, #0
 80030e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030e2:	4b04      	ldr	r3, [pc, #16]	; (80030f4 <SysTick_Config+0x40>)
 80030e4:	2207      	movs	r2, #7
 80030e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	e000e010 	.word	0xe000e010

080030f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b07      	cmp	r3, #7
 8003104:	d00f      	beq.n	8003126 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b06      	cmp	r3, #6
 800310a:	d00c      	beq.n	8003126 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b05      	cmp	r3, #5
 8003110:	d009      	beq.n	8003126 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b04      	cmp	r3, #4
 8003116:	d006      	beq.n	8003126 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b03      	cmp	r3, #3
 800311c:	d003      	beq.n	8003126 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800311e:	218d      	movs	r1, #141	; 0x8d
 8003120:	4804      	ldr	r0, [pc, #16]	; (8003134 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003122:	f7fe ff12 	bl	8001f4a <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7ff feb8 	bl	8002e9c <__NVIC_SetPriorityGrouping>
}
 800312c:	bf00      	nop
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	0800cc18 	.word	0x0800cc18

08003138 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
 8003144:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b0f      	cmp	r3, #15
 800314a:	d903      	bls.n	8003154 <HAL_NVIC_SetPriority+0x1c>
 800314c:	21a5      	movs	r1, #165	; 0xa5
 800314e:	480e      	ldr	r0, [pc, #56]	; (8003188 <HAL_NVIC_SetPriority+0x50>)
 8003150:	f7fe fefb 	bl	8001f4a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2b0f      	cmp	r3, #15
 8003158:	d903      	bls.n	8003162 <HAL_NVIC_SetPriority+0x2a>
 800315a:	21a6      	movs	r1, #166	; 0xa6
 800315c:	480a      	ldr	r0, [pc, #40]	; (8003188 <HAL_NVIC_SetPriority+0x50>)
 800315e:	f7fe fef4 	bl	8001f4a <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8003162:	f7ff febf 	bl	8002ee4 <__NVIC_GetPriorityGrouping>
 8003166:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	68b9      	ldr	r1, [r7, #8]
 800316c:	6978      	ldr	r0, [r7, #20]
 800316e:	f7ff ff6d 	bl	800304c <NVIC_EncodePriority>
 8003172:	4602      	mov	r2, r0
 8003174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003178:	4611      	mov	r1, r2
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff ff3c 	bl	8002ff8 <__NVIC_SetPriority>
}
 8003180:	bf00      	nop
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	0800cc18 	.word	0x0800cc18

0800318c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319a:	2b00      	cmp	r3, #0
 800319c:	da03      	bge.n	80031a6 <HAL_NVIC_EnableIRQ+0x1a>
 800319e:	21b7      	movs	r1, #183	; 0xb7
 80031a0:	4805      	ldr	r0, [pc, #20]	; (80031b8 <HAL_NVIC_EnableIRQ+0x2c>)
 80031a2:	f7fe fed2 	bl	8001f4a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff fea8 	bl	8002f00 <__NVIC_EnableIRQ>
}
 80031b0:	bf00      	nop
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	0800cc18 	.word	0x0800cc18

080031bc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80031c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	da03      	bge.n	80031d6 <HAL_NVIC_DisableIRQ+0x1a>
 80031ce:	21c7      	movs	r1, #199	; 0xc7
 80031d0:	4805      	ldr	r0, [pc, #20]	; (80031e8 <HAL_NVIC_DisableIRQ+0x2c>)
 80031d2:	f7fe feba 	bl	8001f4a <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80031d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff feae 	bl	8002f3c <__NVIC_DisableIRQ>
}
 80031e0:	bf00      	nop
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	0800cc18 	.word	0x0800cc18

080031ec <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff ff5d 	bl	80030b4 <SysTick_Config>
 80031fa:	4603      	mov	r3, r0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800320e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003212:	2b00      	cmp	r3, #0
 8003214:	da04      	bge.n	8003220 <HAL_NVIC_SetPendingIRQ+0x1c>
 8003216:	f44f 7194 	mov.w	r1, #296	; 0x128
 800321a:	4806      	ldr	r0, [pc, #24]	; (8003234 <HAL_NVIC_SetPendingIRQ+0x30>)
 800321c:	f7fe fe95 	bl	8001f4a <assert_failed>
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff feab 	bl	8002f80 <__NVIC_SetPendingIRQ>
}
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	0800cc18 	.word	0x0800cc18

08003238 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003246:	2b00      	cmp	r3, #0
 8003248:	da04      	bge.n	8003254 <HAL_NVIC_ClearPendingIRQ+0x1c>
 800324a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800324e:	4806      	ldr	r0, [pc, #24]	; (8003268 <HAL_NVIC_ClearPendingIRQ+0x30>)
 8003250:	f7fe fe7b 	bl	8001f4a <assert_failed>
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff feaf 	bl	8002fbc <__NVIC_ClearPendingIRQ>
}
 800325e:	bf00      	nop
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	0800cc18 	.word	0x0800cc18

0800326c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003276:	2300      	movs	r3, #0
 8003278:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003280:	d017      	beq.n	80032b2 <HAL_GPIO_Init+0x46>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a39      	ldr	r2, [pc, #228]	; (800336c <HAL_GPIO_Init+0x100>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d013      	beq.n	80032b2 <HAL_GPIO_Init+0x46>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a38      	ldr	r2, [pc, #224]	; (8003370 <HAL_GPIO_Init+0x104>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d00f      	beq.n	80032b2 <HAL_GPIO_Init+0x46>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a37      	ldr	r2, [pc, #220]	; (8003374 <HAL_GPIO_Init+0x108>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d00b      	beq.n	80032b2 <HAL_GPIO_Init+0x46>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a36      	ldr	r2, [pc, #216]	; (8003378 <HAL_GPIO_Init+0x10c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d007      	beq.n	80032b2 <HAL_GPIO_Init+0x46>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a35      	ldr	r2, [pc, #212]	; (800337c <HAL_GPIO_Init+0x110>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d003      	beq.n	80032b2 <HAL_GPIO_Init+0x46>
 80032aa:	21b1      	movs	r1, #177	; 0xb1
 80032ac:	4834      	ldr	r0, [pc, #208]	; (8003380 <HAL_GPIO_Init+0x114>)
 80032ae:	f7fe fe4c 	bl	8001f4a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_GPIO_Init+0x5c>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	0c1b      	lsrs	r3, r3, #16
 80032c2:	041b      	lsls	r3, r3, #16
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <HAL_GPIO_Init+0x64>
 80032c8:	21b2      	movs	r1, #178	; 0xb2
 80032ca:	482d      	ldr	r0, [pc, #180]	; (8003380 <HAL_GPIO_Init+0x114>)
 80032cc:	f7fe fe3d 	bl	8001f4a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d035      	beq.n	8003344 <HAL_GPIO_Init+0xd8>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d031      	beq.n	8003344 <HAL_GPIO_Init+0xd8>
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b11      	cmp	r3, #17
 80032e6:	d02d      	beq.n	8003344 <HAL_GPIO_Init+0xd8>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d029      	beq.n	8003344 <HAL_GPIO_Init+0xd8>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b12      	cmp	r3, #18
 80032f6:	d025      	beq.n	8003344 <HAL_GPIO_Init+0xd8>
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	4a21      	ldr	r2, [pc, #132]	; (8003384 <HAL_GPIO_Init+0x118>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d020      	beq.n	8003344 <HAL_GPIO_Init+0xd8>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	4a20      	ldr	r2, [pc, #128]	; (8003388 <HAL_GPIO_Init+0x11c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d01b      	beq.n	8003344 <HAL_GPIO_Init+0xd8>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	4a1e      	ldr	r2, [pc, #120]	; (800338c <HAL_GPIO_Init+0x120>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d016      	beq.n	8003344 <HAL_GPIO_Init+0xd8>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	4a1d      	ldr	r2, [pc, #116]	; (8003390 <HAL_GPIO_Init+0x124>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d011      	beq.n	8003344 <HAL_GPIO_Init+0xd8>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	4a1b      	ldr	r2, [pc, #108]	; (8003394 <HAL_GPIO_Init+0x128>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00c      	beq.n	8003344 <HAL_GPIO_Init+0xd8>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	4a1a      	ldr	r2, [pc, #104]	; (8003398 <HAL_GPIO_Init+0x12c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d007      	beq.n	8003344 <HAL_GPIO_Init+0xd8>
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b03      	cmp	r3, #3
 800333a:	d003      	beq.n	8003344 <HAL_GPIO_Init+0xd8>
 800333c:	21b3      	movs	r1, #179	; 0xb3
 800333e:	4810      	ldr	r0, [pc, #64]	; (8003380 <HAL_GPIO_Init+0x114>)
 8003340:	f7fe fe03 	bl	8001f4a <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 81ba 	beq.w	80036c2 <HAL_GPIO_Init+0x456>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	2b01      	cmp	r3, #1
 8003354:	f000 81b5 	beq.w	80036c2 <HAL_GPIO_Init+0x456>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b02      	cmp	r3, #2
 800335e:	f000 81b0 	beq.w	80036c2 <HAL_GPIO_Init+0x456>
 8003362:	21b4      	movs	r1, #180	; 0xb4
 8003364:	4806      	ldr	r0, [pc, #24]	; (8003380 <HAL_GPIO_Init+0x114>)
 8003366:	f7fe fdf0 	bl	8001f4a <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800336a:	e1aa      	b.n	80036c2 <HAL_GPIO_Init+0x456>
 800336c:	48000400 	.word	0x48000400
 8003370:	48000800 	.word	0x48000800
 8003374:	48000c00 	.word	0x48000c00
 8003378:	48001000 	.word	0x48001000
 800337c:	48001c00 	.word	0x48001c00
 8003380:	0800cc8c 	.word	0x0800cc8c
 8003384:	10110000 	.word	0x10110000
 8003388:	10210000 	.word	0x10210000
 800338c:	10310000 	.word	0x10310000
 8003390:	10120000 	.word	0x10120000
 8003394:	10220000 	.word	0x10220000
 8003398:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	2101      	movs	r1, #1
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	fa01 f303 	lsl.w	r3, r1, r3
 80033a8:	4013      	ands	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 8184 	beq.w	80036bc <HAL_GPIO_Init+0x450>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d003      	beq.n	80033c4 <HAL_GPIO_Init+0x158>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b12      	cmp	r3, #18
 80033c2:	d147      	bne.n	8003454 <HAL_GPIO_Init+0x1e8>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80033ca:	d017      	beq.n	80033fc <HAL_GPIO_Init+0x190>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a80      	ldr	r2, [pc, #512]	; (80035d0 <HAL_GPIO_Init+0x364>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d013      	beq.n	80033fc <HAL_GPIO_Init+0x190>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a7f      	ldr	r2, [pc, #508]	; (80035d4 <HAL_GPIO_Init+0x368>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d00f      	beq.n	80033fc <HAL_GPIO_Init+0x190>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a7e      	ldr	r2, [pc, #504]	; (80035d8 <HAL_GPIO_Init+0x36c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d00b      	beq.n	80033fc <HAL_GPIO_Init+0x190>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a7d      	ldr	r2, [pc, #500]	; (80035dc <HAL_GPIO_Init+0x370>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d007      	beq.n	80033fc <HAL_GPIO_Init+0x190>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a7c      	ldr	r2, [pc, #496]	; (80035e0 <HAL_GPIO_Init+0x374>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d003      	beq.n	80033fc <HAL_GPIO_Init+0x190>
 80033f4:	21c3      	movs	r1, #195	; 0xc3
 80033f6:	487b      	ldr	r0, [pc, #492]	; (80035e4 <HAL_GPIO_Init+0x378>)
 80033f8:	f7fe fda7 	bl	8001f4a <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	2b0f      	cmp	r3, #15
 8003402:	d903      	bls.n	800340c <HAL_GPIO_Init+0x1a0>
 8003404:	21c4      	movs	r1, #196	; 0xc4
 8003406:	4877      	ldr	r0, [pc, #476]	; (80035e4 <HAL_GPIO_Init+0x378>)
 8003408:	f7fe fd9f 	bl	8001f4a <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	08da      	lsrs	r2, r3, #3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3208      	adds	r2, #8
 8003414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003418:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	220f      	movs	r2, #15
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	43db      	mvns	r3, r3
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4013      	ands	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4313      	orrs	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	08da      	lsrs	r2, r3, #3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3208      	adds	r2, #8
 800344e:	6939      	ldr	r1, [r7, #16]
 8003450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	2203      	movs	r2, #3
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4013      	ands	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 0203 	and.w	r2, r3, #3
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d00b      	beq.n	80034a8 <HAL_GPIO_Init+0x23c>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2b02      	cmp	r3, #2
 8003496:	d007      	beq.n	80034a8 <HAL_GPIO_Init+0x23c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800349c:	2b11      	cmp	r3, #17
 800349e:	d003      	beq.n	80034a8 <HAL_GPIO_Init+0x23c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b12      	cmp	r3, #18
 80034a6:	d144      	bne.n	8003532 <HAL_GPIO_Init+0x2c6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00f      	beq.n	80034d0 <HAL_GPIO_Init+0x264>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d00b      	beq.n	80034d0 <HAL_GPIO_Init+0x264>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d007      	beq.n	80034d0 <HAL_GPIO_Init+0x264>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d003      	beq.n	80034d0 <HAL_GPIO_Init+0x264>
 80034c8:	21d8      	movs	r1, #216	; 0xd8
 80034ca:	4846      	ldr	r0, [pc, #280]	; (80035e4 <HAL_GPIO_Init+0x378>)
 80034cc:	f7fe fd3d 	bl	8001f4a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	2203      	movs	r2, #3
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	4013      	ands	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003506:	2201      	movs	r2, #1
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	43db      	mvns	r3, r3
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	4013      	ands	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	091b      	lsrs	r3, r3, #4
 800351c:	f003 0201 	and.w	r2, r3, #1
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	4313      	orrs	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	2203      	movs	r2, #3
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	43db      	mvns	r3, r3
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4013      	ands	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4313      	orrs	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 80a6 	beq.w	80036bc <HAL_GPIO_Init+0x450>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003570:	4a1d      	ldr	r2, [pc, #116]	; (80035e8 <HAL_GPIO_Init+0x37c>)
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	089b      	lsrs	r3, r3, #2
 8003576:	3302      	adds	r3, #2
 8003578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800357c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f003 0303 	and.w	r3, r3, #3
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	220f      	movs	r2, #15
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	4013      	ands	r3, r2
 8003592:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800359a:	d027      	beq.n	80035ec <HAL_GPIO_Init+0x380>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a0c      	ldr	r2, [pc, #48]	; (80035d0 <HAL_GPIO_Init+0x364>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d013      	beq.n	80035cc <HAL_GPIO_Init+0x360>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a0b      	ldr	r2, [pc, #44]	; (80035d4 <HAL_GPIO_Init+0x368>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d00d      	beq.n	80035c8 <HAL_GPIO_Init+0x35c>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a0a      	ldr	r2, [pc, #40]	; (80035d8 <HAL_GPIO_Init+0x36c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d007      	beq.n	80035c4 <HAL_GPIO_Init+0x358>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a09      	ldr	r2, [pc, #36]	; (80035dc <HAL_GPIO_Init+0x370>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d101      	bne.n	80035c0 <HAL_GPIO_Init+0x354>
 80035bc:	2304      	movs	r3, #4
 80035be:	e016      	b.n	80035ee <HAL_GPIO_Init+0x382>
 80035c0:	2307      	movs	r3, #7
 80035c2:	e014      	b.n	80035ee <HAL_GPIO_Init+0x382>
 80035c4:	2303      	movs	r3, #3
 80035c6:	e012      	b.n	80035ee <HAL_GPIO_Init+0x382>
 80035c8:	2302      	movs	r3, #2
 80035ca:	e010      	b.n	80035ee <HAL_GPIO_Init+0x382>
 80035cc:	2301      	movs	r3, #1
 80035ce:	e00e      	b.n	80035ee <HAL_GPIO_Init+0x382>
 80035d0:	48000400 	.word	0x48000400
 80035d4:	48000800 	.word	0x48000800
 80035d8:	48000c00 	.word	0x48000c00
 80035dc:	48001000 	.word	0x48001000
 80035e0:	48001c00 	.word	0x48001c00
 80035e4:	0800cc8c 	.word	0x0800cc8c
 80035e8:	40010000 	.word	0x40010000
 80035ec:	2300      	movs	r3, #0
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	f002 0203 	and.w	r2, r2, #3
 80035f4:	0092      	lsls	r2, r2, #2
 80035f6:	4093      	lsls	r3, r2
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035fe:	4937      	ldr	r1, [pc, #220]	; (80036dc <HAL_GPIO_Init+0x470>)
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	089b      	lsrs	r3, r3, #2
 8003604:	3302      	adds	r3, #2
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800360c:	4b34      	ldr	r3, [pc, #208]	; (80036e0 <HAL_GPIO_Init+0x474>)
 800360e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003612:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	43db      	mvns	r3, r3
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	4013      	ands	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_GPIO_Init+0x3c6>
        {
          temp |= iocurrent;
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003632:	4a2b      	ldr	r2, [pc, #172]	; (80036e0 <HAL_GPIO_Init+0x474>)
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800363a:	4b29      	ldr	r3, [pc, #164]	; (80036e0 <HAL_GPIO_Init+0x474>)
 800363c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	43db      	mvns	r3, r3
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4013      	ands	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_GPIO_Init+0x3f4>
        {
          temp |= iocurrent;
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4313      	orrs	r3, r2
 800365e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003660:	4a1f      	ldr	r2, [pc, #124]	; (80036e0 <HAL_GPIO_Init+0x474>)
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003668:	4b1d      	ldr	r3, [pc, #116]	; (80036e0 <HAL_GPIO_Init+0x474>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	43db      	mvns	r3, r3
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4013      	ands	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <HAL_GPIO_Init+0x420>
        {
          temp |= iocurrent;
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	4313      	orrs	r3, r2
 800368a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800368c:	4a14      	ldr	r2, [pc, #80]	; (80036e0 <HAL_GPIO_Init+0x474>)
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003692:	4b13      	ldr	r3, [pc, #76]	; (80036e0 <HAL_GPIO_Init+0x474>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	43db      	mvns	r3, r3
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	4013      	ands	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_GPIO_Init+0x44a>
        {
          temp |= iocurrent;
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036b6:	4a0a      	ldr	r2, [pc, #40]	; (80036e0 <HAL_GPIO_Init+0x474>)
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	3301      	adds	r3, #1
 80036c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	fa22 f303 	lsr.w	r3, r2, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f47f ae65 	bne.w	800339c <HAL_GPIO_Init+0x130>
  }
}
 80036d2:	bf00      	nop
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40010000 	.word	0x40010000
 80036e0:	58000800 	.word	0x58000800

080036e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	807b      	strh	r3, [r7, #2]
 80036f0:	4613      	mov	r3, r2
 80036f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80036f4:	887b      	ldrh	r3, [r7, #2]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d004      	beq.n	8003704 <HAL_GPIO_WritePin+0x20>
 80036fa:	887b      	ldrh	r3, [r7, #2]
 80036fc:	0c1b      	lsrs	r3, r3, #16
 80036fe:	041b      	lsls	r3, r3, #16
 8003700:	2b00      	cmp	r3, #0
 8003702:	d004      	beq.n	800370e <HAL_GPIO_WritePin+0x2a>
 8003704:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8003708:	480d      	ldr	r0, [pc, #52]	; (8003740 <HAL_GPIO_WritePin+0x5c>)
 800370a:	f7fe fc1e 	bl	8001f4a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800370e:	787b      	ldrb	r3, [r7, #1]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d007      	beq.n	8003724 <HAL_GPIO_WritePin+0x40>
 8003714:	787b      	ldrb	r3, [r7, #1]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d004      	beq.n	8003724 <HAL_GPIO_WritePin+0x40>
 800371a:	f240 119b 	movw	r1, #411	; 0x19b
 800371e:	4808      	ldr	r0, [pc, #32]	; (8003740 <HAL_GPIO_WritePin+0x5c>)
 8003720:	f7fe fc13 	bl	8001f4a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8003724:	787b      	ldrb	r3, [r7, #1]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800372a:	887a      	ldrh	r2, [r7, #2]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003730:	e002      	b.n	8003738 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003732:	887a      	ldrh	r2, [r7, #2]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003738:	bf00      	nop
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	0800cc8c 	.word	0x0800cc8c

08003744 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003750:	887b      	ldrh	r3, [r7, #2]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d004      	beq.n	8003760 <HAL_GPIO_TogglePin+0x1c>
 8003756:	887b      	ldrh	r3, [r7, #2]
 8003758:	0c1b      	lsrs	r3, r3, #16
 800375a:	041b      	lsls	r3, r3, #16
 800375c:	2b00      	cmp	r3, #0
 800375e:	d004      	beq.n	800376a <HAL_GPIO_TogglePin+0x26>
 8003760:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8003764:	4809      	ldr	r0, [pc, #36]	; (800378c <HAL_GPIO_TogglePin+0x48>)
 8003766:	f7fe fbf0 	bl	8001f4a <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695a      	ldr	r2, [r3, #20]
 800376e:	887b      	ldrh	r3, [r7, #2]
 8003770:	4013      	ands	r3, r2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_GPIO_TogglePin+0x3a>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003776:	887a      	ldrh	r2, [r7, #2]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800377c:	e002      	b.n	8003784 <HAL_GPIO_TogglePin+0x40>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800377e:	887a      	ldrh	r2, [r7, #2]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	619a      	str	r2, [r3, #24]
}
 8003784:	bf00      	nop
 8003786:	3708      	adds	r7, #8
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	0800cc8c 	.word	0x0800cc8c

08003790 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003796:	4b0a      	ldr	r3, [pc, #40]	; (80037c0 <HAL_HSEM_IRQHandler+0x30>)
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800379c:	4b08      	ldr	r3, [pc, #32]	; (80037c0 <HAL_HSEM_IRQHandler+0x30>)
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	43db      	mvns	r3, r3
 80037a4:	4906      	ldr	r1, [pc, #24]	; (80037c0 <HAL_HSEM_IRQHandler+0x30>)
 80037a6:	4013      	ands	r3, r2
 80037a8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80037aa:	4a05      	ldr	r2, [pc, #20]	; (80037c0 <HAL_HSEM_IRQHandler+0x30>)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f807 	bl	80037c4 <HAL_HSEM_FreeCallback>
}
 80037b6:	bf00      	nop
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	58001500 	.word	0x58001500

080037c4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e0ff      	b.n	80039ea <HAL_I2C_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a81      	ldr	r2, [pc, #516]	; (80039f4 <HAL_I2C_Init+0x21c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d009      	beq.n	8003808 <HAL_I2C_Init+0x30>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a7f      	ldr	r2, [pc, #508]	; (80039f8 <HAL_I2C_Init+0x220>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d004      	beq.n	8003808 <HAL_I2C_Init+0x30>
 80037fe:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8003802:	487e      	ldr	r0, [pc, #504]	; (80039fc <HAL_I2C_Init+0x224>)
 8003804:	f7fe fba1 	bl	8001f4a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003810:	d304      	bcc.n	800381c <HAL_I2C_Init+0x44>
 8003812:	f240 11df 	movw	r1, #479	; 0x1df
 8003816:	4879      	ldr	r0, [pc, #484]	; (80039fc <HAL_I2C_Init+0x224>)
 8003818:	f7fe fb97 	bl	8001f4a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d008      	beq.n	8003836 <HAL_I2C_Init+0x5e>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	2b02      	cmp	r3, #2
 800382a:	d004      	beq.n	8003836 <HAL_I2C_Init+0x5e>
 800382c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003830:	4872      	ldr	r0, [pc, #456]	; (80039fc <HAL_I2C_Init+0x224>)
 8003832:	f7fe fb8a 	bl	8001f4a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d009      	beq.n	8003852 <HAL_I2C_Init+0x7a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003846:	d004      	beq.n	8003852 <HAL_I2C_Init+0x7a>
 8003848:	f240 11e1 	movw	r1, #481	; 0x1e1
 800384c:	486b      	ldr	r0, [pc, #428]	; (80039fc <HAL_I2C_Init+0x224>)
 800384e:	f7fe fb7c 	bl	8001f4a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	2bff      	cmp	r3, #255	; 0xff
 8003858:	d904      	bls.n	8003864 <HAL_I2C_Init+0x8c>
 800385a:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800385e:	4867      	ldr	r0, [pc, #412]	; (80039fc <HAL_I2C_Init+0x224>)
 8003860:	f7fe fb73 	bl	8001f4a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d020      	beq.n	80038ae <HAL_I2C_Init+0xd6>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d01c      	beq.n	80038ae <HAL_I2C_Init+0xd6>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	2b02      	cmp	r3, #2
 800387a:	d018      	beq.n	80038ae <HAL_I2C_Init+0xd6>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	2b03      	cmp	r3, #3
 8003882:	d014      	beq.n	80038ae <HAL_I2C_Init+0xd6>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	2b04      	cmp	r3, #4
 800388a:	d010      	beq.n	80038ae <HAL_I2C_Init+0xd6>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	2b05      	cmp	r3, #5
 8003892:	d00c      	beq.n	80038ae <HAL_I2C_Init+0xd6>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	2b06      	cmp	r3, #6
 800389a:	d008      	beq.n	80038ae <HAL_I2C_Init+0xd6>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	2b07      	cmp	r3, #7
 80038a2:	d004      	beq.n	80038ae <HAL_I2C_Init+0xd6>
 80038a4:	f240 11e3 	movw	r1, #483	; 0x1e3
 80038a8:	4854      	ldr	r0, [pc, #336]	; (80039fc <HAL_I2C_Init+0x224>)
 80038aa:	f7fe fb4e 	bl	8001f4a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d009      	beq.n	80038ca <HAL_I2C_Init+0xf2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80038be:	d004      	beq.n	80038ca <HAL_I2C_Init+0xf2>
 80038c0:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 80038c4:	484d      	ldr	r0, [pc, #308]	; (80039fc <HAL_I2C_Init+0x224>)
 80038c6:	f7fe fb40 	bl	8001f4a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d009      	beq.n	80038e6 <HAL_I2C_Init+0x10e>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038da:	d004      	beq.n	80038e6 <HAL_I2C_Init+0x10e>
 80038dc:	f240 11e5 	movw	r1, #485	; 0x1e5
 80038e0:	4846      	ldr	r0, [pc, #280]	; (80039fc <HAL_I2C_Init+0x224>)
 80038e2:	f7fe fb32 	bl	8001f4a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d106      	bne.n	8003900 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7fe f924 	bl	8001b48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2224      	movs	r2, #36	; 0x24
 8003904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0201 	bic.w	r2, r2, #1
 8003916:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003924:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003934:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d107      	bne.n	800394e <HAL_I2C_Init+0x176>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800394a:	609a      	str	r2, [r3, #8]
 800394c:	e006      	b.n	800395c <HAL_I2C_Init+0x184>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800395a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	2b02      	cmp	r3, #2
 8003962:	d104      	bne.n	800396e <HAL_I2C_Init+0x196>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800396c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6812      	ldr	r2, [r2, #0]
 8003978:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800397c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003980:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003990:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	ea42 0103 	orr.w	r1, r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	021a      	lsls	r2, r3, #8
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	69d9      	ldr	r1, [r3, #28]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1a      	ldr	r2, [r3, #32]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0201 	orr.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	40005400 	.word	0x40005400
 80039f8:	40005c00 	.word	0x40005c00
 80039fc:	0800cd00 	.word	0x0800cd00

08003a00 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af02      	add	r7, sp, #8
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	607a      	str	r2, [r7, #4]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	817b      	strh	r3, [r7, #10]
 8003a10:	4613      	mov	r3, r2
 8003a12:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	f040 80da 	bne.w	8003bd6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_I2C_Master_Transmit+0x30>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e0d3      	b.n	8003bd8 <HAL_I2C_Master_Transmit+0x1d8>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a38:	f7ff f9f6 	bl	8002e28 <HAL_GetTick>
 8003a3c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	2319      	movs	r3, #25
 8003a44:	2201      	movs	r2, #1
 8003a46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 f9e6 	bl	8003e1c <I2C_WaitOnFlagUntilTimeout>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e0be      	b.n	8003bd8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2221      	movs	r2, #33	; 0x21
 8003a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2210      	movs	r2, #16
 8003a66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	893a      	ldrh	r2, [r7, #8]
 8003a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	2bff      	cmp	r3, #255	; 0xff
 8003a8a:	d90e      	bls.n	8003aaa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	22ff      	movs	r2, #255	; 0xff
 8003a90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	8979      	ldrh	r1, [r7, #10]
 8003a9a:	4b51      	ldr	r3, [pc, #324]	; (8003be0 <HAL_I2C_Master_Transmit+0x1e0>)
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 fb48 	bl	8004138 <I2C_TransferConfig>
 8003aa8:	e06c      	b.n	8003b84 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	8979      	ldrh	r1, [r7, #10]
 8003abc:	4b48      	ldr	r3, [pc, #288]	; (8003be0 <HAL_I2C_Master_Transmit+0x1e0>)
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 fb37 	bl	8004138 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003aca:	e05b      	b.n	8003b84 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	6a39      	ldr	r1, [r7, #32]
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 f9e3 	bl	8003e9c <I2C_WaitOnTXISFlagUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e07b      	b.n	8003bd8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	781a      	ldrb	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d034      	beq.n	8003b84 <HAL_I2C_Master_Transmit+0x184>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d130      	bne.n	8003b84 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	2180      	movs	r1, #128	; 0x80
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 f975 	bl	8003e1c <I2C_WaitOnFlagUntilTimeout>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e04d      	b.n	8003bd8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	2bff      	cmp	r3, #255	; 0xff
 8003b44:	d90e      	bls.n	8003b64 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	22ff      	movs	r2, #255	; 0xff
 8003b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	8979      	ldrh	r1, [r7, #10]
 8003b54:	2300      	movs	r3, #0
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 faeb 	bl	8004138 <I2C_TransferConfig>
 8003b62:	e00f      	b.n	8003b84 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	8979      	ldrh	r1, [r7, #10]
 8003b76:	2300      	movs	r3, #0
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 fada 	bl	8004138 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d19e      	bne.n	8003acc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	6a39      	ldr	r1, [r7, #32]
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 f9c2 	bl	8003f1c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e01a      	b.n	8003bd8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6859      	ldr	r1, [r3, #4]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <HAL_I2C_Master_Transmit+0x1e4>)
 8003bb6:	400b      	ands	r3, r1
 8003bb8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	e000      	b.n	8003bd8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003bd6:	2302      	movs	r3, #2
  }
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	80002000 	.word	0x80002000
 8003be4:	fe00e800 	.word	0xfe00e800

08003be8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	607a      	str	r2, [r7, #4]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	817b      	strh	r3, [r7, #10]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	f040 80db 	bne.w	8003dc0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_I2C_Master_Receive+0x30>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e0d4      	b.n	8003dc2 <HAL_I2C_Master_Receive+0x1da>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c20:	f7ff f902 	bl	8002e28 <HAL_GetTick>
 8003c24:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	2319      	movs	r3, #25
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 f8f2 	bl	8003e1c <I2C_WaitOnFlagUntilTimeout>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e0bf      	b.n	8003dc2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2222      	movs	r2, #34	; 0x22
 8003c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2210      	movs	r2, #16
 8003c4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	893a      	ldrh	r2, [r7, #8]
 8003c62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	2bff      	cmp	r3, #255	; 0xff
 8003c72:	d90e      	bls.n	8003c92 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	22ff      	movs	r2, #255	; 0xff
 8003c78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	8979      	ldrh	r1, [r7, #10]
 8003c82:	4b52      	ldr	r3, [pc, #328]	; (8003dcc <HAL_I2C_Master_Receive+0x1e4>)
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 fa54 	bl	8004138 <I2C_TransferConfig>
 8003c90:	e06d      	b.n	8003d6e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca0:	b2da      	uxtb	r2, r3
 8003ca2:	8979      	ldrh	r1, [r7, #10]
 8003ca4:	4b49      	ldr	r3, [pc, #292]	; (8003dcc <HAL_I2C_Master_Receive+0x1e4>)
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 fa43 	bl	8004138 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003cb2:	e05c      	b.n	8003d6e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	6a39      	ldr	r1, [r7, #32]
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 f96b 	bl	8003f94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e07c      	b.n	8003dc2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d034      	beq.n	8003d6e <HAL_I2C_Master_Receive+0x186>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d130      	bne.n	8003d6e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	6a3b      	ldr	r3, [r7, #32]
 8003d12:	2200      	movs	r2, #0
 8003d14:	2180      	movs	r1, #128	; 0x80
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 f880 	bl	8003e1c <I2C_WaitOnFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e04d      	b.n	8003dc2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	2bff      	cmp	r3, #255	; 0xff
 8003d2e:	d90e      	bls.n	8003d4e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	22ff      	movs	r2, #255	; 0xff
 8003d34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	8979      	ldrh	r1, [r7, #10]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 f9f6 	bl	8004138 <I2C_TransferConfig>
 8003d4c:	e00f      	b.n	8003d6e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	8979      	ldrh	r1, [r7, #10]
 8003d60:	2300      	movs	r3, #0
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 f9e5 	bl	8004138 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d19d      	bne.n	8003cb4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	6a39      	ldr	r1, [r7, #32]
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 f8cd 	bl	8003f1c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e01a      	b.n	8003dc2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2220      	movs	r2, #32
 8003d92:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6859      	ldr	r1, [r3, #4]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	4b0c      	ldr	r3, [pc, #48]	; (8003dd0 <HAL_I2C_Master_Receive+0x1e8>)
 8003da0:	400b      	ands	r3, r1
 8003da2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	e000      	b.n	8003dc2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003dc0:	2302      	movs	r3, #2
  }
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	80002400 	.word	0x80002400
 8003dd0:	fe00e800 	.word	0xfe00e800

08003dd4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d103      	bne.n	8003df2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2200      	movs	r2, #0
 8003df0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d007      	beq.n	8003e10 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	699a      	ldr	r2, [r3, #24]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0201 	orr.w	r2, r2, #1
 8003e0e:	619a      	str	r2, [r3, #24]
  }
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	603b      	str	r3, [r7, #0]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e2c:	e022      	b.n	8003e74 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e34:	d01e      	beq.n	8003e74 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e36:	f7fe fff7 	bl	8002e28 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d302      	bcc.n	8003e4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d113      	bne.n	8003e74 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e50:	f043 0220 	orr.w	r2, r3, #32
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e00f      	b.n	8003e94 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699a      	ldr	r2, [r3, #24]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	bf0c      	ite	eq
 8003e84:	2301      	moveq	r3, #1
 8003e86:	2300      	movne	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	79fb      	ldrb	r3, [r7, #7]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d0cd      	beq.n	8003e2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ea8:	e02c      	b.n	8003f04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	68b9      	ldr	r1, [r7, #8]
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 f8dc 	bl	800406c <I2C_IsAcknowledgeFailed>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e02a      	b.n	8003f14 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ec4:	d01e      	beq.n	8003f04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec6:	f7fe ffaf 	bl	8002e28 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d302      	bcc.n	8003edc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d113      	bne.n	8003f04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee0:	f043 0220 	orr.w	r2, r3, #32
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2220      	movs	r2, #32
 8003eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e007      	b.n	8003f14 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d1cb      	bne.n	8003eaa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f28:	e028      	b.n	8003f7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	68b9      	ldr	r1, [r7, #8]
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 f89c 	bl	800406c <I2C_IsAcknowledgeFailed>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e026      	b.n	8003f8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f3e:	f7fe ff73 	bl	8002e28 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d302      	bcc.n	8003f54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d113      	bne.n	8003f7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f58:	f043 0220 	orr.w	r2, r3, #32
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e007      	b.n	8003f8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b20      	cmp	r3, #32
 8003f88:	d1cf      	bne.n	8003f2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fa0:	e055      	b.n	800404e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	68b9      	ldr	r1, [r7, #8]
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 f860 	bl	800406c <I2C_IsAcknowledgeFailed>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e053      	b.n	800405e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	f003 0320 	and.w	r3, r3, #32
 8003fc0:	2b20      	cmp	r3, #32
 8003fc2:	d129      	bne.n	8004018 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	f003 0304 	and.w	r3, r3, #4
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	d105      	bne.n	8003fde <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	e03f      	b.n	800405e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6859      	ldr	r1, [r3, #4]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	4b1d      	ldr	r3, [pc, #116]	; (8004068 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003ff2:	400b      	ands	r3, r1
 8003ff4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e022      	b.n	800405e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004018:	f7fe ff06 	bl	8002e28 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	429a      	cmp	r2, r3
 8004026:	d302      	bcc.n	800402e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10f      	bne.n	800404e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004032:	f043 0220 	orr.w	r2, r3, #32
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2220      	movs	r2, #32
 800403e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e007      	b.n	800405e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b04      	cmp	r3, #4
 800405a:	d1a2      	bne.n	8003fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	fe00e800 	.word	0xfe00e800

0800406c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	f003 0310 	and.w	r3, r3, #16
 8004082:	2b10      	cmp	r3, #16
 8004084:	d151      	bne.n	800412a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004086:	e022      	b.n	80040ce <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800408e:	d01e      	beq.n	80040ce <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004090:	f7fe feca 	bl	8002e28 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	429a      	cmp	r2, r3
 800409e:	d302      	bcc.n	80040a6 <I2C_IsAcknowledgeFailed+0x3a>
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d113      	bne.n	80040ce <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040aa:	f043 0220 	orr.w	r2, r3, #32
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2220      	movs	r2, #32
 80040b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e02e      	b.n	800412c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	f003 0320 	and.w	r3, r3, #32
 80040d8:	2b20      	cmp	r3, #32
 80040da:	d1d5      	bne.n	8004088 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2210      	movs	r2, #16
 80040e2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2220      	movs	r2, #32
 80040ea:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f7ff fe71 	bl	8003dd4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6859      	ldr	r1, [r3, #4]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	4b0d      	ldr	r3, [pc, #52]	; (8004134 <I2C_IsAcknowledgeFailed+0xc8>)
 80040fe:	400b      	ands	r3, r1
 8004100:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004106:	f043 0204 	orr.w	r2, r3, #4
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2220      	movs	r2, #32
 8004112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e000      	b.n	800412c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	fe00e800 	.word	0xfe00e800

08004138 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	607b      	str	r3, [r7, #4]
 8004142:	460b      	mov	r3, r1
 8004144:	817b      	strh	r3, [r7, #10]
 8004146:	4613      	mov	r3, r2
 8004148:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a28      	ldr	r2, [pc, #160]	; (80041f0 <I2C_TransferConfig+0xb8>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d009      	beq.n	8004168 <I2C_TransferConfig+0x30>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a26      	ldr	r2, [pc, #152]	; (80041f4 <I2C_TransferConfig+0xbc>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d004      	beq.n	8004168 <I2C_TransferConfig+0x30>
 800415e:	f641 01ac 	movw	r1, #6316	; 0x18ac
 8004162:	4825      	ldr	r0, [pc, #148]	; (80041f8 <I2C_TransferConfig+0xc0>)
 8004164:	f7fd fef1 	bl	8001f4a <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800416e:	d00b      	beq.n	8004188 <I2C_TransferConfig+0x50>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004176:	d007      	beq.n	8004188 <I2C_TransferConfig+0x50>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d004      	beq.n	8004188 <I2C_TransferConfig+0x50>
 800417e:	f641 01ad 	movw	r1, #6317	; 0x18ad
 8004182:	481d      	ldr	r0, [pc, #116]	; (80041f8 <I2C_TransferConfig+0xc0>)
 8004184:	f7fd fee1 	bl	8001f4a <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	4a1c      	ldr	r2, [pc, #112]	; (80041fc <I2C_TransferConfig+0xc4>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d00f      	beq.n	80041b0 <I2C_TransferConfig+0x78>
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	4a1b      	ldr	r2, [pc, #108]	; (8004200 <I2C_TransferConfig+0xc8>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d00b      	beq.n	80041b0 <I2C_TransferConfig+0x78>
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	4a1a      	ldr	r2, [pc, #104]	; (8004204 <I2C_TransferConfig+0xcc>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d007      	beq.n	80041b0 <I2C_TransferConfig+0x78>
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d004      	beq.n	80041b0 <I2C_TransferConfig+0x78>
 80041a6:	f641 01ae 	movw	r1, #6318	; 0x18ae
 80041aa:	4813      	ldr	r0, [pc, #76]	; (80041f8 <I2C_TransferConfig+0xc0>)
 80041ac:	f7fd fecd 	bl	8001f4a <assert_failed>

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	0d5b      	lsrs	r3, r3, #21
 80041ba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80041be:	4b12      	ldr	r3, [pc, #72]	; (8004208 <I2C_TransferConfig+0xd0>)
 80041c0:	430b      	orrs	r3, r1
 80041c2:	43db      	mvns	r3, r3
 80041c4:	ea02 0103 	and.w	r1, r2, r3
 80041c8:	897b      	ldrh	r3, [r7, #10]
 80041ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80041ce:	7a7b      	ldrb	r3, [r7, #9]
 80041d0:	041b      	lsls	r3, r3, #16
 80041d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	431a      	orrs	r2, r3
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	431a      	orrs	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80041e8:	bf00      	nop
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	40005400 	.word	0x40005400
 80041f4:	40005c00 	.word	0x40005c00
 80041f8:	0800cd00 	.word	0x0800cd00
 80041fc:	80004000 	.word	0x80004000
 8004200:	80002400 	.word	0x80002400
 8004204:	80002000 	.word	0x80002000
 8004208:	03ff63ff 	.word	0x03ff63ff

0800420c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a2d      	ldr	r2, [pc, #180]	; (80042d0 <HAL_I2CEx_ConfigAnalogFilter+0xc4>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d008      	beq.n	8004232 <HAL_I2CEx_ConfigAnalogFilter+0x26>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a2b      	ldr	r2, [pc, #172]	; (80042d4 <HAL_I2CEx_ConfigAnalogFilter+0xc8>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d003      	beq.n	8004232 <HAL_I2CEx_ConfigAnalogFilter+0x26>
 800422a:	2164      	movs	r1, #100	; 0x64
 800422c:	482a      	ldr	r0, [pc, #168]	; (80042d8 <HAL_I2CEx_ConfigAnalogFilter+0xcc>)
 800422e:	f7fd fe8c 	bl	8001f4a <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d007      	beq.n	8004248 <HAL_I2CEx_ConfigAnalogFilter+0x3c>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800423e:	d003      	beq.n	8004248 <HAL_I2CEx_ConfigAnalogFilter+0x3c>
 8004240:	2165      	movs	r1, #101	; 0x65
 8004242:	4825      	ldr	r0, [pc, #148]	; (80042d8 <HAL_I2CEx_ConfigAnalogFilter+0xcc>)
 8004244:	f7fd fe81 	bl	8001f4a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b20      	cmp	r3, #32
 8004252:	d138      	bne.n	80042c6 <HAL_I2CEx_ConfigAnalogFilter+0xba>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800425a:	2b01      	cmp	r3, #1
 800425c:	d101      	bne.n	8004262 <HAL_I2CEx_ConfigAnalogFilter+0x56>
 800425e:	2302      	movs	r3, #2
 8004260:	e032      	b.n	80042c8 <HAL_I2CEx_ConfigAnalogFilter+0xbc>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2224      	movs	r2, #36	; 0x24
 800426e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0201 	bic.w	r2, r2, #1
 8004280:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004290:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6819      	ldr	r1, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f042 0201 	orr.w	r2, r2, #1
 80042b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2220      	movs	r2, #32
 80042b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	e000      	b.n	80042c8 <HAL_I2CEx_ConfigAnalogFilter+0xbc>
  }
  else
  {
    return HAL_BUSY;
 80042c6:	2302      	movs	r3, #2
  }
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40005400 	.word	0x40005400
 80042d4:	40005c00 	.word	0x40005c00
 80042d8:	0800cd70 	.word	0x0800cd70

080042dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a2c      	ldr	r2, [pc, #176]	; (800439c <HAL_I2CEx_ConfigDigitalFilter+0xc0>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d008      	beq.n	8004302 <HAL_I2CEx_ConfigDigitalFilter+0x26>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a2a      	ldr	r2, [pc, #168]	; (80043a0 <HAL_I2CEx_ConfigDigitalFilter+0xc4>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d003      	beq.n	8004302 <HAL_I2CEx_ConfigDigitalFilter+0x26>
 80042fa:	2192      	movs	r1, #146	; 0x92
 80042fc:	4829      	ldr	r0, [pc, #164]	; (80043a4 <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 80042fe:	f7fd fe24 	bl	8001f4a <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b0f      	cmp	r3, #15
 8004306:	d903      	bls.n	8004310 <HAL_I2CEx_ConfigDigitalFilter+0x34>
 8004308:	2193      	movs	r1, #147	; 0x93
 800430a:	4826      	ldr	r0, [pc, #152]	; (80043a4 <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 800430c:	f7fd fe1d 	bl	8001f4a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b20      	cmp	r3, #32
 800431a:	d139      	bne.n	8004390 <HAL_I2CEx_ConfigDigitalFilter+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004322:	2b01      	cmp	r3, #1
 8004324:	d101      	bne.n	800432a <HAL_I2CEx_ConfigDigitalFilter+0x4e>
 8004326:	2302      	movs	r3, #2
 8004328:	e033      	b.n	8004392 <HAL_I2CEx_ConfigDigitalFilter+0xb6>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2224      	movs	r2, #36	; 0x24
 8004336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0201 	bic.w	r2, r2, #1
 8004348:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004358:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	021b      	lsls	r3, r3, #8
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	4313      	orrs	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0201 	orr.w	r2, r2, #1
 800437a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2220      	movs	r2, #32
 8004380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800438c:	2300      	movs	r3, #0
 800438e:	e000      	b.n	8004392 <HAL_I2CEx_ConfigDigitalFilter+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004390:	2302      	movs	r3, #2
  }
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40005400 	.word	0x40005400
 80043a0:	40005c00 	.word	0x40005c00
 80043a4:	0800cd70 	.word	0x0800cd70

080043a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80043a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043aa:	b08b      	sub	sp, #44	; 0x2c
 80043ac:	af06      	add	r7, sp, #24
 80043ae:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e0b6      	b.n	8004528 <HAL_PCD_Init+0x180>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a5c      	ldr	r2, [pc, #368]	; (8004530 <HAL_PCD_Init+0x188>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d003      	beq.n	80043cc <HAL_PCD_Init+0x24>
 80043c4:	2183      	movs	r1, #131	; 0x83
 80043c6:	485b      	ldr	r0, [pc, #364]	; (8004534 <HAL_PCD_Init+0x18c>)
 80043c8:	f7fd fdbf 	bl	8001f4a <assert_failed>

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d106      	bne.n	80043e6 <HAL_PCD_Init+0x3e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f7fe fc4d 	bl	8002c80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2203      	movs	r2, #3
 80043ea:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f005 fdc4 	bl	8009f80 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043f8:	2300      	movs	r3, #0
 80043fa:	73fb      	strb	r3, [r7, #15]
 80043fc:	e035      	b.n	800446a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	015b      	lsls	r3, r3, #5
 8004404:	4413      	add	r3, r2
 8004406:	3329      	adds	r3, #41	; 0x29
 8004408:	2201      	movs	r2, #1
 800440a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	015b      	lsls	r3, r3, #5
 8004412:	4413      	add	r3, r2
 8004414:	3328      	adds	r3, #40	; 0x28
 8004416:	7bfa      	ldrb	r2, [r7, #15]
 8004418:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800441a:	7bfb      	ldrb	r3, [r7, #15]
 800441c:	7bfa      	ldrb	r2, [r7, #15]
 800441e:	b291      	uxth	r1, r2
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	015b      	lsls	r3, r3, #5
 8004424:	4413      	add	r3, r2
 8004426:	3336      	adds	r3, #54	; 0x36
 8004428:	460a      	mov	r2, r1
 800442a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800442c:	7bfb      	ldrb	r3, [r7, #15]
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	015b      	lsls	r3, r3, #5
 8004432:	4413      	add	r3, r2
 8004434:	332b      	adds	r3, #43	; 0x2b
 8004436:	2200      	movs	r2, #0
 8004438:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800443a:	7bfb      	ldrb	r3, [r7, #15]
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	015b      	lsls	r3, r3, #5
 8004440:	4413      	add	r3, r2
 8004442:	3338      	adds	r3, #56	; 0x38
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004448:	7bfb      	ldrb	r3, [r7, #15]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	015b      	lsls	r3, r3, #5
 800444e:	4413      	add	r3, r2
 8004450:	333c      	adds	r3, #60	; 0x3c
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004456:	7bfb      	ldrb	r3, [r7, #15]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	3302      	adds	r3, #2
 800445c:	015b      	lsls	r3, r3, #5
 800445e:	4413      	add	r3, r2
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004464:	7bfb      	ldrb	r3, [r7, #15]
 8004466:	3301      	adds	r3, #1
 8004468:	73fb      	strb	r3, [r7, #15]
 800446a:	7bfa      	ldrb	r2, [r7, #15]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	429a      	cmp	r2, r3
 8004472:	d3c4      	bcc.n	80043fe <HAL_PCD_Init+0x56>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004474:	2300      	movs	r3, #0
 8004476:	73fb      	strb	r3, [r7, #15]
 8004478:	e031      	b.n	80044de <HAL_PCD_Init+0x136>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800447a:	7bfb      	ldrb	r3, [r7, #15]
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	015b      	lsls	r3, r3, #5
 8004480:	4413      	add	r3, r2
 8004482:	f203 1329 	addw	r3, r3, #297	; 0x129
 8004486:	2200      	movs	r2, #0
 8004488:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800448a:	7bfb      	ldrb	r3, [r7, #15]
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	015b      	lsls	r3, r3, #5
 8004490:	4413      	add	r3, r2
 8004492:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004496:	7bfa      	ldrb	r2, [r7, #15]
 8004498:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800449a:	7bfb      	ldrb	r3, [r7, #15]
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	015b      	lsls	r3, r3, #5
 80044a0:	4413      	add	r3, r2
 80044a2:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80044a6:	2200      	movs	r2, #0
 80044a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80044aa:	7bfb      	ldrb	r3, [r7, #15]
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	015b      	lsls	r3, r3, #5
 80044b0:	4413      	add	r3, r2
 80044b2:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	015b      	lsls	r3, r3, #5
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80044c6:	2200      	movs	r2, #0
 80044c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80044ca:	7bfb      	ldrb	r3, [r7, #15]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	330a      	adds	r3, #10
 80044d0:	015b      	lsls	r3, r3, #5
 80044d2:	4413      	add	r3, r2
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	3301      	adds	r3, #1
 80044dc:	73fb      	strb	r3, [r7, #15]
 80044de:	7bfa      	ldrb	r2, [r7, #15]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d3c8      	bcc.n	800447a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	603b      	str	r3, [r7, #0]
 80044ee:	687e      	ldr	r6, [r7, #4]
 80044f0:	466d      	mov	r5, sp
 80044f2:	f106 0410 	add.w	r4, r6, #16
 80044f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044fa:	6823      	ldr	r3, [r4, #0]
 80044fc:	602b      	str	r3, [r5, #0]
 80044fe:	1d33      	adds	r3, r6, #4
 8004500:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004502:	6838      	ldr	r0, [r7, #0]
 8004504:	f005 fd59 	bl	8009fba <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d102      	bne.n	8004526 <HAL_PCD_Init+0x17e>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f809 	bl	8004538 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004530:	40006800 	.word	0x40006800
 8004534:	0800cde4 	.word	0x0800cde4

08004538 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800455c:	b29b      	uxth	r3, r3
 800455e:	f043 0301 	orr.w	r3, r3, #1
 8004562:	b29a      	uxth	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004570:	b29b      	uxth	r3, r3
 8004572:	f043 0302 	orr.w	r3, r3, #2
 8004576:	b29a      	uxth	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004590:	4b05      	ldr	r3, [pc, #20]	; (80045a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a04      	ldr	r2, [pc, #16]	; (80045a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800459a:	6013      	str	r3, [r2, #0]
}
 800459c:	bf00      	nop
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	58000400 	.word	0x58000400

080045ac <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80045b0:	4b04      	ldr	r3, [pc, #16]	; (80045c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	58000400 	.word	0x58000400

080045c8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80045cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045da:	d101      	bne.n	80045e0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80045dc:	2301      	movs	r3, #1
 80045de:	e000      	b.n	80045e2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <LL_RCC_HSE_EnableBypass>:
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80045f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045fe:	6013      	str	r3, [r2, #0]
}
 8004600:	bf00      	nop
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <LL_RCC_HSE_DisableBypass>:
{
 800460a:	b480      	push	{r7}
 800460c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800460e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004618:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800461c:	6013      	str	r3, [r2, #0]
}
 800461e:	bf00      	nop
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <LL_RCC_HSE_Enable>:
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800462c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800463a:	6013      	str	r3, [r2, #0]
}
 800463c:	bf00      	nop
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <LL_RCC_HSE_Disable>:
{
 8004646:	b480      	push	{r7}
 8004648:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800464a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004658:	6013      	str	r3, [r2, #0]
}
 800465a:	bf00      	nop
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <LL_RCC_HSE_IsReady>:
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004672:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004676:	d101      	bne.n	800467c <LL_RCC_HSE_IsReady+0x18>
 8004678:	2301      	movs	r3, #1
 800467a:	e000      	b.n	800467e <LL_RCC_HSE_IsReady+0x1a>
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <LL_RCC_HSI_Enable>:
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800468c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800469a:	6013      	str	r3, [r2, #0]
}
 800469c:	bf00      	nop
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <LL_RCC_HSI_Disable>:
{
 80046a6:	b480      	push	{r7}
 80046a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80046aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046b8:	6013      	str	r3, [r2, #0]
}
 80046ba:	bf00      	nop
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <LL_RCC_HSI_IsReady>:
{
 80046c4:	b480      	push	{r7}
 80046c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80046c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046d6:	d101      	bne.n	80046dc <LL_RCC_HSI_IsReady+0x18>
 80046d8:	2301      	movs	r3, #1
 80046da:	e000      	b.n	80046de <LL_RCC_HSI_IsReady+0x1a>
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <LL_RCC_HSI_SetCalibTrimming>:
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80046f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	061b      	lsls	r3, r3, #24
 80046fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004702:	4313      	orrs	r3, r2
 8004704:	604b      	str	r3, [r1, #4]
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <LL_RCC_HSI48_Enable>:
{
 8004712:	b480      	push	{r7}
 8004714:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800471a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800471e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004722:	f043 0301 	orr.w	r3, r3, #1
 8004726:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800472a:	bf00      	nop
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <LL_RCC_HSI48_Disable>:
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800473c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004740:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004744:	f023 0301 	bic.w	r3, r3, #1
 8004748:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800474c:	bf00      	nop
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <LL_RCC_HSI48_IsReady>:
{
 8004756:	b480      	push	{r7}
 8004758:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800475a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800475e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b02      	cmp	r3, #2
 8004768:	d101      	bne.n	800476e <LL_RCC_HSI48_IsReady+0x18>
 800476a:	2301      	movs	r3, #1
 800476c:	e000      	b.n	8004770 <LL_RCC_HSI48_IsReady+0x1a>
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <LL_RCC_LSE_Enable>:
{
 800477a:	b480      	push	{r7}
 800477c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800477e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004786:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800478a:	f043 0301 	orr.w	r3, r3, #1
 800478e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004792:	bf00      	nop
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <LL_RCC_LSE_Disable>:
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80047a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047ac:	f023 0301 	bic.w	r3, r3, #1
 80047b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80047b4:	bf00      	nop
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <LL_RCC_LSE_EnableBypass>:
{
 80047be:	b480      	push	{r7}
 80047c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80047c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047ce:	f043 0304 	orr.w	r3, r3, #4
 80047d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80047d6:	bf00      	nop
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <LL_RCC_LSE_DisableBypass>:
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80047e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047f0:	f023 0304 	bic.w	r3, r3, #4
 80047f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80047f8:	bf00      	nop
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <LL_RCC_LSE_IsReady>:
{
 8004802:	b480      	push	{r7}
 8004804:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800480a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b02      	cmp	r3, #2
 8004814:	d101      	bne.n	800481a <LL_RCC_LSE_IsReady+0x18>
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <LL_RCC_LSE_IsReady+0x1a>
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <LL_RCC_LSI1_Enable>:
{
 8004826:	b480      	push	{r7}
 8004828:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800482a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800482e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004832:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004836:	f043 0301 	orr.w	r3, r3, #1
 800483a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800483e:	bf00      	nop
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <LL_RCC_LSI1_Disable>:
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800484c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004850:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004854:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004858:	f023 0301 	bic.w	r3, r3, #1
 800485c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004860:	bf00      	nop
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <LL_RCC_LSI1_IsReady>:
{
 800486a:	b480      	push	{r7}
 800486c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800486e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b02      	cmp	r3, #2
 800487c:	d101      	bne.n	8004882 <LL_RCC_LSI1_IsReady+0x18>
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <LL_RCC_LSI1_IsReady+0x1a>
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <LL_RCC_LSI2_Enable>:
{
 800488e:	b480      	push	{r7}
 8004890:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800489a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800489e:	f043 0304 	orr.w	r3, r3, #4
 80048a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80048a6:	bf00      	nop
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <LL_RCC_LSI2_Disable>:
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80048b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048c0:	f023 0304 	bic.w	r3, r3, #4
 80048c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80048c8:	bf00      	nop
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <LL_RCC_LSI2_IsReady>:
{
 80048d2:	b480      	push	{r7}
 80048d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80048d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048de:	f003 0308 	and.w	r3, r3, #8
 80048e2:	2b08      	cmp	r3, #8
 80048e4:	d101      	bne.n	80048ea <LL_RCC_LSI2_IsReady+0x18>
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <LL_RCC_LSI2_IsReady+0x1a>
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <LL_RCC_LSI2_SetTrimming>:
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80048fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004906:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	021b      	lsls	r3, r3, #8
 800490e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004912:	4313      	orrs	r3, r2
 8004914:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <LL_RCC_MSI_Enable>:
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004932:	f043 0301 	orr.w	r3, r3, #1
 8004936:	6013      	str	r3, [r2, #0]
}
 8004938:	bf00      	nop
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <LL_RCC_MSI_Disable>:
{
 8004942:	b480      	push	{r7}
 8004944:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004950:	f023 0301 	bic.w	r3, r3, #1
 8004954:	6013      	str	r3, [r2, #0]
}
 8004956:	bf00      	nop
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <LL_RCC_MSI_IsReady>:
{
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b02      	cmp	r3, #2
 8004970:	d101      	bne.n	8004976 <LL_RCC_MSI_IsReady+0x16>
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <LL_RCC_MSI_IsReady+0x18>
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <LL_RCC_MSI_SetRange>:
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800498a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004994:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4313      	orrs	r3, r2
 800499c:	600b      	str	r3, [r1, #0]
}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <LL_RCC_MSI_GetRange>:
{
 80049aa:	b480      	push	{r7}
 80049ac:	b083      	sub	sp, #12
 80049ae:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80049b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049ba:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2bb0      	cmp	r3, #176	; 0xb0
 80049c0:	d901      	bls.n	80049c6 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80049c2:	23b0      	movs	r3, #176	; 0xb0
 80049c4:	607b      	str	r3, [r7, #4]
  return msiRange;
 80049c6:	687b      	ldr	r3, [r7, #4]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <LL_RCC_MSI_SetCalibTrimming>:
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80049dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	021b      	lsls	r3, r3, #8
 80049ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049ee:	4313      	orrs	r3, r2
 80049f0:	604b      	str	r3, [r1, #4]
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <LL_RCC_SetSysClkSource>:
{
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f023 0203 	bic.w	r2, r3, #3
 8004a10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	608b      	str	r3, [r1, #8]
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <LL_RCC_GetSysClkSource>:
{
 8004a26:	b480      	push	{r7}
 8004a28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f003 030c 	and.w	r3, r3, #12
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <LL_RCC_SetAHBPrescaler>:
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	608b      	str	r3, [r1, #8]
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <LL_C2_RCC_SetAHBPrescaler>:
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a72:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <LL_RCC_SetAHB4Prescaler>:
{
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a9e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004aa2:	f023 020f 	bic.w	r2, r3, #15
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	091b      	lsrs	r3, r3, #4
 8004aaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <LL_RCC_SetAPB1Prescaler>:
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ad2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	608b      	str	r3, [r1, #8]
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <LL_RCC_SetAPB2Prescaler>:
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004afa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	608b      	str	r3, [r1, #8]
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <LL_RCC_GetAHBPrescaler>:
{
 8004b10:	b480      	push	{r7}
 8004b12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <LL_RCC_GetAHB4Prescaler>:
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b30:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004b34:	011b      	lsls	r3, r3, #4
 8004b36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <LL_RCC_GetAPB1Prescaler>:
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <LL_RCC_GetAPB2Prescaler>:
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b86:	6013      	str	r3, [r2, #0]
}
 8004b88:	bf00      	nop
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004b92:	b480      	push	{r7}
 8004b94:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ba0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ba4:	6013      	str	r3, [r2, #0]
}
 8004ba6:	bf00      	nop
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bc2:	d101      	bne.n	8004bc8 <LL_RCC_PLL_IsReady+0x18>
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e000      	b.n	8004bca <LL_RCC_PLL_IsReady+0x1a>
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	0a1b      	lsrs	r3, r3, #8
 8004be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004c06:	b480      	push	{r7}
 8004c08:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f003 0303 	and.w	r3, r3, #3
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004c36:	b480      	push	{r7}
 8004c38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c48:	d101      	bne.n	8004c4e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e000      	b.n	8004c50 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c62:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c6e:	d101      	bne.n	8004c74 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004c70:	2301      	movs	r3, #1
 8004c72:	e000      	b.n	8004c76 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004c80:	b480      	push	{r7}
 8004c82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c88:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c94:	d101      	bne.n	8004c9a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cb8:	d101      	bne.n	8004cbe <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e000      	b.n	8004cc0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004cdc:	d101      	bne.n	8004ce2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e000      	b.n	8004ce4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
	...

08004cf0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cf0:	b590      	push	{r4, r7, lr}
 8004cf2:	b08b      	sub	sp, #44	; 0x2c
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d102      	bne.n	8004d04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	f000 bcbc 	b.w	800567c <HAL_RCC_OscConfig+0x98c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d02e      	beq.n	8004d6a <HAL_RCC_OscConfig+0x7a>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d128      	bne.n	8004d6a <HAL_RCC_OscConfig+0x7a>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d122      	bne.n	8004d6a <HAL_RCC_OscConfig+0x7a>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d11c      	bne.n	8004d6a <HAL_RCC_OscConfig+0x7a>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0320 	and.w	r3, r3, #32
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d116      	bne.n	8004d6a <HAL_RCC_OscConfig+0x7a>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0308 	and.w	r3, r3, #8
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d110      	bne.n	8004d6a <HAL_RCC_OscConfig+0x7a>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0310 	and.w	r3, r3, #16
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10a      	bne.n	8004d6a <HAL_RCC_OscConfig+0x7a>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d104      	bne.n	8004d6a <HAL_RCC_OscConfig+0x7a>
 8004d60:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8004d64:	48ac      	ldr	r0, [pc, #688]	; (8005018 <HAL_RCC_OscConfig+0x328>)
 8004d66:	f7fd f8f0 	bl	8001f4a <assert_failed>

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0320 	and.w	r3, r3, #32
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 80dc 	beq.w	8004f30 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d008      	beq.n	8004d92 <HAL_RCC_OscConfig+0xa2>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d004      	beq.n	8004d92 <HAL_RCC_OscConfig+0xa2>
 8004d88:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004d8c:	48a2      	ldr	r0, [pc, #648]	; (8005018 <HAL_RCC_OscConfig+0x328>)
 8004d8e:	f7fd f8dc 	bl	8001f4a <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	2bff      	cmp	r3, #255	; 0xff
 8004d98:	d904      	bls.n	8004da4 <HAL_RCC_OscConfig+0xb4>
 8004d9a:	f240 1191 	movw	r1, #401	; 0x191
 8004d9e:	489e      	ldr	r0, [pc, #632]	; (8005018 <HAL_RCC_OscConfig+0x328>)
 8004da0:	f7fd f8d3 	bl	8001f4a <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d030      	beq.n	8004e0e <HAL_RCC_OscConfig+0x11e>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	2b10      	cmp	r3, #16
 8004db2:	d02c      	beq.n	8004e0e <HAL_RCC_OscConfig+0x11e>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	2b20      	cmp	r3, #32
 8004dba:	d028      	beq.n	8004e0e <HAL_RCC_OscConfig+0x11e>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	2b30      	cmp	r3, #48	; 0x30
 8004dc2:	d024      	beq.n	8004e0e <HAL_RCC_OscConfig+0x11e>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	2b40      	cmp	r3, #64	; 0x40
 8004dca:	d020      	beq.n	8004e0e <HAL_RCC_OscConfig+0x11e>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	2b50      	cmp	r3, #80	; 0x50
 8004dd2:	d01c      	beq.n	8004e0e <HAL_RCC_OscConfig+0x11e>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	2b60      	cmp	r3, #96	; 0x60
 8004dda:	d018      	beq.n	8004e0e <HAL_RCC_OscConfig+0x11e>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	2b70      	cmp	r3, #112	; 0x70
 8004de2:	d014      	beq.n	8004e0e <HAL_RCC_OscConfig+0x11e>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	2b80      	cmp	r3, #128	; 0x80
 8004dea:	d010      	beq.n	8004e0e <HAL_RCC_OscConfig+0x11e>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	2b90      	cmp	r3, #144	; 0x90
 8004df2:	d00c      	beq.n	8004e0e <HAL_RCC_OscConfig+0x11e>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	2ba0      	cmp	r3, #160	; 0xa0
 8004dfa:	d008      	beq.n	8004e0e <HAL_RCC_OscConfig+0x11e>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	2bb0      	cmp	r3, #176	; 0xb0
 8004e02:	d004      	beq.n	8004e0e <HAL_RCC_OscConfig+0x11e>
 8004e04:	f44f 71c9 	mov.w	r1, #402	; 0x192
 8004e08:	4883      	ldr	r0, [pc, #524]	; (8005018 <HAL_RCC_OscConfig+0x328>)
 8004e0a:	f7fd f89e 	bl	8001f4a <assert_failed>

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e0e:	f7ff fe0a 	bl	8004a26 <LL_RCC_GetSysClkSource>
 8004e12:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e14:	f7ff ff03 	bl	8004c1e <LL_RCC_PLL_GetMainSource>
 8004e18:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d005      	beq.n	8004e2c <HAL_RCC_OscConfig+0x13c>
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	2b0c      	cmp	r3, #12
 8004e24:	d14b      	bne.n	8004ebe <HAL_RCC_OscConfig+0x1ce>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d148      	bne.n	8004ebe <HAL_RCC_OscConfig+0x1ce>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e2c:	f7ff fd98 	bl	8004960 <LL_RCC_MSI_IsReady>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d006      	beq.n	8004e44 <HAL_RCC_OscConfig+0x154>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d102      	bne.n	8004e44 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	f000 bc1c 	b.w	800567c <HAL_RCC_OscConfig+0x98c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004e48:	f7ff fdaf 	bl	80049aa <LL_RCC_MSI_GetRange>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	429c      	cmp	r4, r3
 8004e50:	d915      	bls.n	8004e7e <HAL_RCC_OscConfig+0x18e>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 ff24 	bl	8005ca4 <RCC_SetFlashLatencyFromMSIRange>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	f000 bc0a 	b.w	800567c <HAL_RCC_OscConfig+0x98c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7ff fd88 	bl	8004982 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff fdac 	bl	80049d4 <LL_RCC_MSI_SetCalibTrimming>
 8004e7c:	e013      	b.n	8004ea6 <HAL_RCC_OscConfig+0x1b6>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7ff fd7d 	bl	8004982 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7ff fda1 	bl	80049d4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 ff04 	bl	8005ca4 <RCC_SetFlashLatencyFromMSIRange>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x1b6>
          {
            return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e3ea      	b.n	800567c <HAL_RCC_OscConfig+0x98c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8004ea6:	f7fd fce3 	bl	8002870 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004eaa:	4b5c      	ldr	r3, [pc, #368]	; (800501c <HAL_RCC_OscConfig+0x32c>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fd ff6e 	bl	8002d90 <HAL_InitTick>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d039      	beq.n	8004f2e <HAL_RCC_OscConfig+0x23e>
        {
          return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e3de      	b.n	800567c <HAL_RCC_OscConfig+0x98c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d01e      	beq.n	8004f04 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ec6:	f7ff fd2d 	bl	8004924 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004eca:	f7fd ffad 	bl	8002e28 <HAL_GetTick>
 8004ece:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004ed0:	e008      	b.n	8004ee4 <HAL_RCC_OscConfig+0x1f4>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ed2:	f7fd ffa9 	bl	8002e28 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x1f4>
          {
            return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e3cb      	b.n	800567c <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004ee4:	f7ff fd3c 	bl	8004960 <LL_RCC_MSI_IsReady>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0f1      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x1e2>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7ff fd45 	bl	8004982 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7ff fd69 	bl	80049d4 <LL_RCC_MSI_SetCalibTrimming>
 8004f02:	e015      	b.n	8004f30 <HAL_RCC_OscConfig+0x240>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004f04:	f7ff fd1d 	bl	8004942 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f08:	f7fd ff8e 	bl	8002e28 <HAL_GetTick>
 8004f0c:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x232>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f10:	f7fd ff8a 	bl	8002e28 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x232>
          {
            return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e3ac      	b.n	800567c <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004f22:	f7ff fd1d 	bl	8004960 <LL_RCC_MSI_IsReady>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1f1      	bne.n	8004f10 <HAL_RCC_OscConfig+0x220>
 8004f2c:	e000      	b.n	8004f30 <HAL_RCC_OscConfig+0x240>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f2e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d072      	beq.n	8005022 <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00e      	beq.n	8004f62 <HAL_RCC_OscConfig+0x272>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f4c:	d009      	beq.n	8004f62 <HAL_RCC_OscConfig+0x272>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f56:	d004      	beq.n	8004f62 <HAL_RCC_OscConfig+0x272>
 8004f58:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8004f5c:	482e      	ldr	r0, [pc, #184]	; (8005018 <HAL_RCC_OscConfig+0x328>)
 8004f5e:	f7fc fff4 	bl	8001f4a <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f62:	f7ff fd60 	bl	8004a26 <LL_RCC_GetSysClkSource>
 8004f66:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f68:	f7ff fe59 	bl	8004c1e <LL_RCC_PLL_GetMainSource>
 8004f6c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d005      	beq.n	8004f80 <HAL_RCC_OscConfig+0x290>
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	2b0c      	cmp	r3, #12
 8004f78:	d10d      	bne.n	8004f96 <HAL_RCC_OscConfig+0x2a6>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2b03      	cmp	r3, #3
 8004f7e:	d10a      	bne.n	8004f96 <HAL_RCC_OscConfig+0x2a6>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f80:	f7ff fb70 	bl	8004664 <LL_RCC_HSE_IsReady>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d04a      	beq.n	8005020 <HAL_RCC_OscConfig+0x330>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d146      	bne.n	8005020 <HAL_RCC_OscConfig+0x330>
      {
        return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e372      	b.n	800567c <HAL_RCC_OscConfig+0x98c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f9e:	d102      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x2b6>
 8004fa0:	f7ff fb42 	bl	8004628 <LL_RCC_HSE_Enable>
 8004fa4:	e00d      	b.n	8004fc2 <HAL_RCC_OscConfig+0x2d2>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fae:	d104      	bne.n	8004fba <HAL_RCC_OscConfig+0x2ca>
 8004fb0:	f7ff fb1c 	bl	80045ec <LL_RCC_HSE_EnableBypass>
 8004fb4:	f7ff fb38 	bl	8004628 <LL_RCC_HSE_Enable>
 8004fb8:	e003      	b.n	8004fc2 <HAL_RCC_OscConfig+0x2d2>
 8004fba:	f7ff fb44 	bl	8004646 <LL_RCC_HSE_Disable>
 8004fbe:	f7ff fb24 	bl	800460a <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d012      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x300>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fca:	f7fd ff2d 	bl	8002e28 <HAL_GetTick>
 8004fce:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCC_OscConfig+0x2f4>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fd2:	f7fd ff29 	bl	8002e28 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b64      	cmp	r3, #100	; 0x64
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x2f4>
          {
            return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e34b      	b.n	800567c <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004fe4:	f7ff fb3e 	bl	8004664 <LL_RCC_HSE_IsReady>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0f1      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x2e2>
 8004fee:	e018      	b.n	8005022 <HAL_RCC_OscConfig+0x332>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff0:	f7fd ff1a 	bl	8002e28 <HAL_GetTick>
 8004ff4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004ff6:	e008      	b.n	800500a <HAL_RCC_OscConfig+0x31a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ff8:	f7fd ff16 	bl	8002e28 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b64      	cmp	r3, #100	; 0x64
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e338      	b.n	800567c <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_HSE_IsReady() != 0U)
 800500a:	f7ff fb2b 	bl	8004664 <LL_RCC_HSE_IsReady>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1f1      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x308>
 8005014:	e005      	b.n	8005022 <HAL_RCC_OscConfig+0x332>
 8005016:	bf00      	nop
 8005018:	0800ce54 	.word	0x0800ce54
 800501c:	20000014 	.word	0x20000014
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d068      	beq.n	8005100 <HAL_RCC_OscConfig+0x410>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d009      	beq.n	800504a <HAL_RCC_OscConfig+0x35a>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800503e:	d004      	beq.n	800504a <HAL_RCC_OscConfig+0x35a>
 8005040:	f240 212d 	movw	r1, #557	; 0x22d
 8005044:	48b0      	ldr	r0, [pc, #704]	; (8005308 <HAL_RCC_OscConfig+0x618>)
 8005046:	f7fc ff80 	bl	8001f4a <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	2b7f      	cmp	r3, #127	; 0x7f
 8005050:	d904      	bls.n	800505c <HAL_RCC_OscConfig+0x36c>
 8005052:	f240 212e 	movw	r1, #558	; 0x22e
 8005056:	48ac      	ldr	r0, [pc, #688]	; (8005308 <HAL_RCC_OscConfig+0x618>)
 8005058:	f7fc ff77 	bl	8001f4a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800505c:	f7ff fce3 	bl	8004a26 <LL_RCC_GetSysClkSource>
 8005060:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005062:	f7ff fddc 	bl	8004c1e <LL_RCC_PLL_GetMainSource>
 8005066:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	2b04      	cmp	r3, #4
 800506c:	d005      	beq.n	800507a <HAL_RCC_OscConfig+0x38a>
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	2b0c      	cmp	r3, #12
 8005072:	d113      	bne.n	800509c <HAL_RCC_OscConfig+0x3ac>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b02      	cmp	r3, #2
 8005078:	d110      	bne.n	800509c <HAL_RCC_OscConfig+0x3ac>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800507a:	f7ff fb23 	bl	80046c4 <LL_RCC_HSI_IsReady>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d005      	beq.n	8005090 <HAL_RCC_OscConfig+0x3a0>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d101      	bne.n	8005090 <HAL_RCC_OscConfig+0x3a0>
      {
        return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e2f5      	b.n	800567c <HAL_RCC_OscConfig+0x98c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	4618      	mov	r0, r3
 8005096:	f7ff fb27 	bl	80046e8 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800509a:	e031      	b.n	8005100 <HAL_RCC_OscConfig+0x410>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d019      	beq.n	80050d8 <HAL_RCC_OscConfig+0x3e8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050a4:	f7ff faf0 	bl	8004688 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a8:	f7fd febe 	bl	8002e28 <HAL_GetTick>
 80050ac:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050b0:	f7fd feba 	bl	8002e28 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e2dc      	b.n	800567c <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_HSI_IsReady() == 0U)
 80050c2:	f7ff faff 	bl	80046c4 <LL_RCC_HSI_IsReady>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0f1      	beq.n	80050b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7ff fb09 	bl	80046e8 <LL_RCC_HSI_SetCalibTrimming>
 80050d6:	e013      	b.n	8005100 <HAL_RCC_OscConfig+0x410>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050d8:	f7ff fae5 	bl	80046a6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050dc:	f7fd fea4 	bl	8002e28 <HAL_GetTick>
 80050e0:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80050e2:	e008      	b.n	80050f6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050e4:	f7fd fea0 	bl	8002e28 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e2c2      	b.n	800567c <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_HSI_IsReady() != 0U)
 80050f6:	f7ff fae5 	bl	80046c4 <LL_RCC_HSI_IsReady>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1f1      	bne.n	80050e4 <HAL_RCC_OscConfig+0x3f4>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0308 	and.w	r3, r3, #8
 8005108:	2b00      	cmp	r3, #0
 800510a:	d106      	bne.n	800511a <HAL_RCC_OscConfig+0x42a>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 80b5 	beq.w	8005284 <HAL_RCC_OscConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d008      	beq.n	8005134 <HAL_RCC_OscConfig+0x444>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	2b05      	cmp	r3, #5
 8005128:	d004      	beq.n	8005134 <HAL_RCC_OscConfig+0x444>
 800512a:	f240 2172 	movw	r1, #626	; 0x272
 800512e:	4876      	ldr	r0, [pc, #472]	; (8005308 <HAL_RCC_OscConfig+0x618>)
 8005130:	f7fc ff0b 	bl	8001f4a <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d07b      	beq.n	8005234 <HAL_RCC_OscConfig+0x544>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0310 	and.w	r3, r3, #16
 8005144:	2b00      	cmp	r3, #0
 8005146:	d04f      	beq.n	80051e8 <HAL_RCC_OscConfig+0x4f8>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	2b0f      	cmp	r3, #15
 800514e:	d904      	bls.n	800515a <HAL_RCC_OscConfig+0x46a>
 8005150:	f240 217a 	movw	r1, #634	; 0x27a
 8005154:	486c      	ldr	r0, [pc, #432]	; (8005308 <HAL_RCC_OscConfig+0x618>)
 8005156:	f7fc fef8 	bl	8001f4a <assert_failed>

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800515a:	f7ff fb86 	bl	800486a <LL_RCC_LSI1_IsReady>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d113      	bne.n	800518c <HAL_RCC_OscConfig+0x49c>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005164:	f7ff fb5f 	bl	8004826 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005168:	f7fd fe5e 	bl	8002e28 <HAL_GetTick>
 800516c:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800516e:	e008      	b.n	8005182 <HAL_RCC_OscConfig+0x492>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005170:	f7fd fe5a 	bl	8002e28 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	2b02      	cmp	r3, #2
 800517c:	d901      	bls.n	8005182 <HAL_RCC_OscConfig+0x492>
            {
              return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e27c      	b.n	800567c <HAL_RCC_OscConfig+0x98c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005182:	f7ff fb72 	bl	800486a <LL_RCC_LSI1_IsReady>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0f1      	beq.n	8005170 <HAL_RCC_OscConfig+0x480>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800518c:	f7ff fb7f 	bl	800488e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005190:	f7fd fe4a 	bl	8002e28 <HAL_GetTick>
 8005194:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005196:	e008      	b.n	80051aa <HAL_RCC_OscConfig+0x4ba>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005198:	f7fd fe46 	bl	8002e28 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b03      	cmp	r3, #3
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0x4ba>
          {
            return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e268      	b.n	800567c <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80051aa:	f7ff fb92 	bl	80048d2 <LL_RCC_LSI2_IsReady>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d0f1      	beq.n	8005198 <HAL_RCC_OscConfig+0x4a8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7ff fb9c 	bl	80048f6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80051be:	f7ff fb43 	bl	8004848 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c2:	f7fd fe31 	bl	8002e28 <HAL_GetTick>
 80051c6:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80051c8:	e008      	b.n	80051dc <HAL_RCC_OscConfig+0x4ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80051ca:	f7fd fe2d 	bl	8002e28 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d901      	bls.n	80051dc <HAL_RCC_OscConfig+0x4ec>
          {
            return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e24f      	b.n	800567c <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80051dc:	f7ff fb45 	bl	800486a <LL_RCC_LSI1_IsReady>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1f1      	bne.n	80051ca <HAL_RCC_OscConfig+0x4da>
 80051e6:	e04d      	b.n	8005284 <HAL_RCC_OscConfig+0x594>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80051e8:	f7ff fb1d 	bl	8004826 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ec:	f7fd fe1c 	bl	8002e28 <HAL_GetTick>
 80051f0:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80051f2:	e008      	b.n	8005206 <HAL_RCC_OscConfig+0x516>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80051f4:	f7fd fe18 	bl	8002e28 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x516>
          {
            return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e23a      	b.n	800567c <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005206:	f7ff fb30 	bl	800486a <LL_RCC_LSI1_IsReady>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0f1      	beq.n	80051f4 <HAL_RCC_OscConfig+0x504>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005210:	f7ff fb4e 	bl	80048b0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005214:	e008      	b.n	8005228 <HAL_RCC_OscConfig+0x538>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005216:	f7fd fe07 	bl	8002e28 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b03      	cmp	r3, #3
 8005222:	d901      	bls.n	8005228 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e229      	b.n	800567c <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005228:	f7ff fb53 	bl	80048d2 <LL_RCC_LSI2_IsReady>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1f1      	bne.n	8005216 <HAL_RCC_OscConfig+0x526>
 8005232:	e027      	b.n	8005284 <HAL_RCC_OscConfig+0x594>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005234:	f7ff fb3c 	bl	80048b0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005238:	f7fd fdf6 	bl	8002e28 <HAL_GetTick>
 800523c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800523e:	e008      	b.n	8005252 <HAL_RCC_OscConfig+0x562>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005240:	f7fd fdf2 	bl	8002e28 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b03      	cmp	r3, #3
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e214      	b.n	800567c <HAL_RCC_OscConfig+0x98c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005252:	f7ff fb3e 	bl	80048d2 <LL_RCC_LSI2_IsReady>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1f1      	bne.n	8005240 <HAL_RCC_OscConfig+0x550>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800525c:	f7ff faf4 	bl	8004848 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005260:	f7fd fde2 	bl	8002e28 <HAL_GetTick>
 8005264:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005268:	f7fd fdde 	bl	8002e28 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e200      	b.n	800567c <HAL_RCC_OscConfig+0x98c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800527a:	f7ff faf6 	bl	800486a <LL_RCC_LSI1_IsReady>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1f1      	bne.n	8005268 <HAL_RCC_OscConfig+0x578>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b00      	cmp	r3, #0
 800528e:	d070      	beq.n	8005372 <HAL_RCC_OscConfig+0x682>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00c      	beq.n	80052b2 <HAL_RCC_OscConfig+0x5c2>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d008      	beq.n	80052b2 <HAL_RCC_OscConfig+0x5c2>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	2b05      	cmp	r3, #5
 80052a6:	d004      	beq.n	80052b2 <HAL_RCC_OscConfig+0x5c2>
 80052a8:	f240 21f9 	movw	r1, #761	; 0x2f9
 80052ac:	4816      	ldr	r0, [pc, #88]	; (8005308 <HAL_RCC_OscConfig+0x618>)
 80052ae:	f7fc fe4c 	bl	8001f4a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052b2:	4b16      	ldr	r3, [pc, #88]	; (800530c <HAL_RCC_OscConfig+0x61c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d114      	bne.n	80052e8 <HAL_RCC_OscConfig+0x5f8>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80052be:	f7ff f965 	bl	800458c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052c2:	f7fd fdb1 	bl	8002e28 <HAL_GetTick>
 80052c6:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052c8:	e008      	b.n	80052dc <HAL_RCC_OscConfig+0x5ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ca:	f7fd fdad 	bl	8002e28 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d901      	bls.n	80052dc <HAL_RCC_OscConfig+0x5ec>
        {
          return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e1cf      	b.n	800567c <HAL_RCC_OscConfig+0x98c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052dc:	4b0b      	ldr	r3, [pc, #44]	; (800530c <HAL_RCC_OscConfig+0x61c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d0f0      	beq.n	80052ca <HAL_RCC_OscConfig+0x5da>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d102      	bne.n	80052f6 <HAL_RCC_OscConfig+0x606>
 80052f0:	f7ff fa43 	bl	800477a <LL_RCC_LSE_Enable>
 80052f4:	e010      	b.n	8005318 <HAL_RCC_OscConfig+0x628>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	2b05      	cmp	r3, #5
 80052fc:	d108      	bne.n	8005310 <HAL_RCC_OscConfig+0x620>
 80052fe:	f7ff fa5e 	bl	80047be <LL_RCC_LSE_EnableBypass>
 8005302:	f7ff fa3a 	bl	800477a <LL_RCC_LSE_Enable>
 8005306:	e007      	b.n	8005318 <HAL_RCC_OscConfig+0x628>
 8005308:	0800ce54 	.word	0x0800ce54
 800530c:	58000400 	.word	0x58000400
 8005310:	f7ff fa44 	bl	800479c <LL_RCC_LSE_Disable>
 8005314:	f7ff fa64 	bl	80047e0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d014      	beq.n	800534a <HAL_RCC_OscConfig+0x65a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005320:	f7fd fd82 	bl	8002e28 <HAL_GetTick>
 8005324:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005326:	e00a      	b.n	800533e <HAL_RCC_OscConfig+0x64e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005328:	f7fd fd7e 	bl	8002e28 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	f241 3288 	movw	r2, #5000	; 0x1388
 8005336:	4293      	cmp	r3, r2
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0x64e>
        {
          return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e19e      	b.n	800567c <HAL_RCC_OscConfig+0x98c>
      while (LL_RCC_LSE_IsReady() == 0U)
 800533e:	f7ff fa60 	bl	8004802 <LL_RCC_LSE_IsReady>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0ef      	beq.n	8005328 <HAL_RCC_OscConfig+0x638>
 8005348:	e013      	b.n	8005372 <HAL_RCC_OscConfig+0x682>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800534a:	f7fd fd6d 	bl	8002e28 <HAL_GetTick>
 800534e:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005350:	e00a      	b.n	8005368 <HAL_RCC_OscConfig+0x678>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005352:	f7fd fd69 	bl	8002e28 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005360:	4293      	cmp	r3, r2
 8005362:	d901      	bls.n	8005368 <HAL_RCC_OscConfig+0x678>
        {
          return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e189      	b.n	800567c <HAL_RCC_OscConfig+0x98c>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005368:	f7ff fa4b 	bl	8004802 <LL_RCC_LSE_IsReady>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1ef      	bne.n	8005352 <HAL_RCC_OscConfig+0x662>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537a:	2b00      	cmp	r3, #0
 800537c:	d039      	beq.n	80053f2 <HAL_RCC_OscConfig+0x702>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005382:	2b00      	cmp	r3, #0
 8005384:	d008      	beq.n	8005398 <HAL_RCC_OscConfig+0x6a8>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538a:	2b01      	cmp	r3, #1
 800538c:	d004      	beq.n	8005398 <HAL_RCC_OscConfig+0x6a8>
 800538e:	f240 3135 	movw	r1, #821	; 0x335
 8005392:	489f      	ldr	r0, [pc, #636]	; (8005610 <HAL_RCC_OscConfig+0x920>)
 8005394:	f7fc fdd9 	bl	8001f4a <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539c:	2b00      	cmp	r3, #0
 800539e:	d014      	beq.n	80053ca <HAL_RCC_OscConfig+0x6da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053a0:	f7ff f9b7 	bl	8004712 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a4:	f7fd fd40 	bl	8002e28 <HAL_GetTick>
 80053a8:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80053aa:	e008      	b.n	80053be <HAL_RCC_OscConfig+0x6ce>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053ac:	f7fd fd3c 	bl	8002e28 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_OscConfig+0x6ce>
        {
          return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e15e      	b.n	800567c <HAL_RCC_OscConfig+0x98c>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80053be:	f7ff f9ca 	bl	8004756 <LL_RCC_HSI48_IsReady>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0f1      	beq.n	80053ac <HAL_RCC_OscConfig+0x6bc>
 80053c8:	e013      	b.n	80053f2 <HAL_RCC_OscConfig+0x702>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80053ca:	f7ff f9b3 	bl	8004734 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ce:	f7fd fd2b 	bl	8002e28 <HAL_GetTick>
 80053d2:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80053d4:	e008      	b.n	80053e8 <HAL_RCC_OscConfig+0x6f8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053d6:	f7fd fd27 	bl	8002e28 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0x6f8>
        {
          return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e149      	b.n	800567c <HAL_RCC_OscConfig+0x98c>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80053e8:	f7ff f9b5 	bl	8004756 <LL_RCC_HSI48_IsReady>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1f1      	bne.n	80053d6 <HAL_RCC_OscConfig+0x6e6>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00c      	beq.n	8005414 <HAL_RCC_OscConfig+0x724>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d008      	beq.n	8005414 <HAL_RCC_OscConfig+0x724>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005406:	2b02      	cmp	r3, #2
 8005408:	d004      	beq.n	8005414 <HAL_RCC_OscConfig+0x724>
 800540a:	f240 315d 	movw	r1, #861	; 0x35d
 800540e:	4880      	ldr	r0, [pc, #512]	; (8005610 <HAL_RCC_OscConfig+0x920>)
 8005410:	f7fc fd9b 	bl	8001f4a <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005418:	2b00      	cmp	r3, #0
 800541a:	f000 812e 	beq.w	800567a <HAL_RCC_OscConfig+0x98a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800541e:	f7ff fb02 	bl	8004a26 <LL_RCC_GetSysClkSource>
 8005422:	4603      	mov	r3, r0
 8005424:	2b0c      	cmp	r3, #12
 8005426:	f000 80ec 	beq.w	8005602 <HAL_RCC_OscConfig+0x912>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542e:	2b02      	cmp	r3, #2
 8005430:	f040 80c0 	bne.w	80055b4 <HAL_RCC_OscConfig+0x8c4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005438:	2b00      	cmp	r3, #0
 800543a:	d010      	beq.n	800545e <HAL_RCC_OscConfig+0x76e>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005440:	2b01      	cmp	r3, #1
 8005442:	d00c      	beq.n	800545e <HAL_RCC_OscConfig+0x76e>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005448:	2b02      	cmp	r3, #2
 800544a:	d008      	beq.n	800545e <HAL_RCC_OscConfig+0x76e>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005450:	2b03      	cmp	r3, #3
 8005452:	d004      	beq.n	800545e <HAL_RCC_OscConfig+0x76e>
 8005454:	f240 3167 	movw	r1, #871	; 0x367
 8005458:	486d      	ldr	r0, [pc, #436]	; (8005610 <HAL_RCC_OscConfig+0x920>)
 800545a:	f7fc fd76 	bl	8001f4a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005462:	2b00      	cmp	r3, #0
 8005464:	d020      	beq.n	80054a8 <HAL_RCC_OscConfig+0x7b8>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546a:	2b10      	cmp	r3, #16
 800546c:	d01c      	beq.n	80054a8 <HAL_RCC_OscConfig+0x7b8>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005472:	2b20      	cmp	r3, #32
 8005474:	d018      	beq.n	80054a8 <HAL_RCC_OscConfig+0x7b8>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800547a:	2b30      	cmp	r3, #48	; 0x30
 800547c:	d014      	beq.n	80054a8 <HAL_RCC_OscConfig+0x7b8>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005482:	2b40      	cmp	r3, #64	; 0x40
 8005484:	d010      	beq.n	80054a8 <HAL_RCC_OscConfig+0x7b8>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800548a:	2b50      	cmp	r3, #80	; 0x50
 800548c:	d00c      	beq.n	80054a8 <HAL_RCC_OscConfig+0x7b8>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005492:	2b60      	cmp	r3, #96	; 0x60
 8005494:	d008      	beq.n	80054a8 <HAL_RCC_OscConfig+0x7b8>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549a:	2b70      	cmp	r3, #112	; 0x70
 800549c:	d004      	beq.n	80054a8 <HAL_RCC_OscConfig+0x7b8>
 800549e:	f44f 715a 	mov.w	r1, #872	; 0x368
 80054a2:	485b      	ldr	r0, [pc, #364]	; (8005610 <HAL_RCC_OscConfig+0x920>)
 80054a4:	f7fc fd51 	bl	8001f4a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ac:	2b05      	cmp	r3, #5
 80054ae:	d903      	bls.n	80054b8 <HAL_RCC_OscConfig+0x7c8>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b4:	2b7f      	cmp	r3, #127	; 0x7f
 80054b6:	d904      	bls.n	80054c2 <HAL_RCC_OscConfig+0x7d2>
 80054b8:	f240 3169 	movw	r1, #873	; 0x369
 80054bc:	4854      	ldr	r0, [pc, #336]	; (8005610 <HAL_RCC_OscConfig+0x920>)
 80054be:	f7fc fd44 	bl	8001f4a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054ca:	d304      	bcc.n	80054d6 <HAL_RCC_OscConfig+0x7e6>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d0:	f5b3 1f78 	cmp.w	r3, #4063232	; 0x3e0000
 80054d4:	d904      	bls.n	80054e0 <HAL_RCC_OscConfig+0x7f0>
 80054d6:	f240 316a 	movw	r1, #874	; 0x36a
 80054da:	484d      	ldr	r0, [pc, #308]	; (8005610 <HAL_RCC_OscConfig+0x920>)
 80054dc:	f7fc fd35 	bl	8001f4a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054e8:	d304      	bcc.n	80054f4 <HAL_RCC_OscConfig+0x804>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80054f2:	d904      	bls.n	80054fe <HAL_RCC_OscConfig+0x80e>
 80054f4:	f240 316b 	movw	r1, #875	; 0x36b
 80054f8:	4845      	ldr	r0, [pc, #276]	; (8005610 <HAL_RCC_OscConfig+0x920>)
 80054fa:	f7fc fd26 	bl	8001f4a <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005502:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005506:	d304      	bcc.n	8005512 <HAL_RCC_OscConfig+0x822>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550c:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8005510:	d904      	bls.n	800551c <HAL_RCC_OscConfig+0x82c>
 8005512:	f44f 715b 	mov.w	r1, #876	; 0x36c
 8005516:	483e      	ldr	r0, [pc, #248]	; (8005610 <HAL_RCC_OscConfig+0x920>)
 8005518:	f7fc fd17 	bl	8001f4a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800551c:	f7ff fb39 	bl	8004b92 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005520:	f7fd fc82 	bl	8002e28 <HAL_GetTick>
 8005524:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005526:	e008      	b.n	800553a <HAL_RCC_OscConfig+0x84a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005528:	f7fd fc7e 	bl	8002e28 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x84a>
          {
            return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e0a0      	b.n	800567c <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_PLL_IsReady() != 0U)
 800553a:	f7ff fb39 	bl	8004bb0 <LL_RCC_PLL_IsReady>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1f1      	bne.n	8005528 <HAL_RCC_OscConfig+0x838>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	4b32      	ldr	r3, [pc, #200]	; (8005614 <HAL_RCC_OscConfig+0x924>)
 800554c:	4013      	ands	r3, r2
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005556:	4311      	orrs	r1, r2
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800555c:	0212      	lsls	r2, r2, #8
 800555e:	4311      	orrs	r1, r2
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005564:	4311      	orrs	r1, r2
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800556a:	4311      	orrs	r1, r2
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005570:	430a      	orrs	r2, r1
 8005572:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005576:	4313      	orrs	r3, r2
 8005578:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800557a:	f7ff fafb 	bl	8004b74 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800557e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800558c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800558e:	f7fd fc4b 	bl	8002e28 <HAL_GetTick>
 8005592:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005594:	e008      	b.n	80055a8 <HAL_RCC_OscConfig+0x8b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005596:	f7fd fc47 	bl	8002e28 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d901      	bls.n	80055a8 <HAL_RCC_OscConfig+0x8b8>
          {
            return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e069      	b.n	800567c <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_PLL_IsReady() == 0U)
 80055a8:	f7ff fb02 	bl	8004bb0 <LL_RCC_PLL_IsReady>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d0f1      	beq.n	8005596 <HAL_RCC_OscConfig+0x8a6>
 80055b2:	e062      	b.n	800567a <HAL_RCC_OscConfig+0x98a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055b4:	f7ff faed 	bl	8004b92 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80055b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055c2:	f023 0303 	bic.w	r3, r3, #3
 80055c6:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80055c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055d2:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80055d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055da:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055dc:	f7fd fc24 	bl	8002e28 <HAL_GetTick>
 80055e0:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80055e2:	e008      	b.n	80055f6 <HAL_RCC_OscConfig+0x906>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055e4:	f7fd fc20 	bl	8002e28 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0x906>
          {
            return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e042      	b.n	800567c <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_PLL_IsReady() != 0U)
 80055f6:	f7ff fadb 	bl	8004bb0 <LL_RCC_PLL_IsReady>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1f1      	bne.n	80055e4 <HAL_RCC_OscConfig+0x8f4>
 8005600:	e03b      	b.n	800567a <HAL_RCC_OscConfig+0x98a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005606:	2b01      	cmp	r3, #1
 8005608:	d106      	bne.n	8005618 <HAL_RCC_OscConfig+0x928>
      {
        return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e036      	b.n	800567c <HAL_RCC_OscConfig+0x98c>
 800560e:	bf00      	nop
 8005610:	0800ce54 	.word	0x0800ce54
 8005614:	11c1808c 	.word	0x11c1808c
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8005618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f003 0203 	and.w	r2, r3, #3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562a:	429a      	cmp	r2, r3
 800562c:	d123      	bne.n	8005676 <HAL_RCC_OscConfig+0x986>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005638:	429a      	cmp	r2, r3
 800563a:	d11c      	bne.n	8005676 <HAL_RCC_OscConfig+0x986>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	0a1b      	lsrs	r3, r3, #8
 8005640:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005648:	429a      	cmp	r2, r3
 800564a:	d114      	bne.n	8005676 <HAL_RCC_OscConfig+0x986>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005656:	429a      	cmp	r2, r3
 8005658:	d10d      	bne.n	8005676 <HAL_RCC_OscConfig+0x986>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005664:	429a      	cmp	r2, r3
 8005666:	d106      	bne.n	8005676 <HAL_RCC_OscConfig+0x986>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005672:	429a      	cmp	r2, r3
 8005674:	d001      	beq.n	800567a <HAL_RCC_OscConfig+0x98a>
        {
          return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e000      	b.n	800567c <HAL_RCC_OscConfig+0x98c>
        }
      }
    }
  }
  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	372c      	adds	r7, #44	; 0x2c
 8005680:	46bd      	mov	sp, r7
 8005682:	bd90      	pop	{r4, r7, pc}

08005684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e253      	b.n	8005b40 <HAL_RCC_ClockConfig+0x4bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <HAL_RCC_ClockConfig+0x24>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b6f      	cmp	r3, #111	; 0x6f
 80056a6:	d904      	bls.n	80056b2 <HAL_RCC_ClockConfig+0x2e>
 80056a8:	f240 31fd 	movw	r1, #1021	; 0x3fd
 80056ac:	489b      	ldr	r0, [pc, #620]	; (800591c <HAL_RCC_ClockConfig+0x298>)
 80056ae:	f7fc fc4c 	bl	8001f4a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00d      	beq.n	80056d4 <HAL_RCC_ClockConfig+0x50>
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d00a      	beq.n	80056d4 <HAL_RCC_ClockConfig+0x50>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d007      	beq.n	80056d4 <HAL_RCC_ClockConfig+0x50>
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	2b03      	cmp	r3, #3
 80056c8:	d004      	beq.n	80056d4 <HAL_RCC_ClockConfig+0x50>
 80056ca:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80056ce:	4893      	ldr	r0, [pc, #588]	; (800591c <HAL_RCC_ClockConfig+0x298>)
 80056d0:	f7fc fc3b 	bl	8001f4a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056d4:	4b92      	ldr	r3, [pc, #584]	; (8005920 <HAL_RCC_ClockConfig+0x29c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d91b      	bls.n	800571a <HAL_RCC_ClockConfig+0x96>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056e2:	4b8f      	ldr	r3, [pc, #572]	; (8005920 <HAL_RCC_ClockConfig+0x29c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f023 0207 	bic.w	r2, r3, #7
 80056ea:	498d      	ldr	r1, [pc, #564]	; (8005920 <HAL_RCC_ClockConfig+0x29c>)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056f2:	f7fd fb99 	bl	8002e28 <HAL_GetTick>
 80056f6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056f8:	e008      	b.n	800570c <HAL_RCC_ClockConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80056fa:	f7fd fb95 	bl	8002e28 <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	2b02      	cmp	r3, #2
 8005706:	d901      	bls.n	800570c <HAL_RCC_ClockConfig+0x88>
      {
        return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e219      	b.n	8005b40 <HAL_RCC_ClockConfig+0x4bc>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800570c:	4b84      	ldr	r3, [pc, #528]	; (8005920 <HAL_RCC_ClockConfig+0x29c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0307 	and.w	r3, r3, #7
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	429a      	cmp	r2, r3
 8005718:	d1ef      	bne.n	80056fa <HAL_RCC_ClockConfig+0x76>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d053      	beq.n	80057ce <HAL_RCC_ClockConfig+0x14a>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d038      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x11c>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	2b80      	cmp	r3, #128	; 0x80
 8005734:	d034      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x11c>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	2b10      	cmp	r3, #16
 800573c:	d030      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x11c>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	2b90      	cmp	r3, #144	; 0x90
 8005744:	d02c      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x11c>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	2b20      	cmp	r3, #32
 800574c:	d028      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x11c>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	2b50      	cmp	r3, #80	; 0x50
 8005754:	d024      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x11c>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	2ba0      	cmp	r3, #160	; 0xa0
 800575c:	d020      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x11c>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	2b60      	cmp	r3, #96	; 0x60
 8005764:	d01c      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x11c>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	2bb0      	cmp	r3, #176	; 0xb0
 800576c:	d018      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x11c>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	2b70      	cmp	r3, #112	; 0x70
 8005774:	d014      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x11c>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	2bc0      	cmp	r3, #192	; 0xc0
 800577c:	d010      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x11c>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	2bd0      	cmp	r3, #208	; 0xd0
 8005784:	d00c      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x11c>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	2be0      	cmp	r3, #224	; 0xe0
 800578c:	d008      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x11c>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	2bf0      	cmp	r3, #240	; 0xf0
 8005794:	d004      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x11c>
 8005796:	f240 411b 	movw	r1, #1051	; 0x41b
 800579a:	4860      	ldr	r0, [pc, #384]	; (800591c <HAL_RCC_ClockConfig+0x298>)
 800579c:	f7fc fbd5 	bl	8001f4a <assert_failed>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff f94a 	bl	8004a3e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80057aa:	f7fd fb3d 	bl	8002e28 <HAL_GetTick>
 80057ae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80057b0:	e008      	b.n	80057c4 <HAL_RCC_ClockConfig+0x140>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80057b2:	f7fd fb39 	bl	8002e28 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_ClockConfig+0x140>
      {
        return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e1bd      	b.n	8005b40 <HAL_RCC_ClockConfig+0x4bc>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80057c4:	f7ff fa37 	bl	8004c36 <LL_RCC_IsActiveFlag_HPRE>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d0f1      	beq.n	80057b2 <HAL_RCC_ClockConfig+0x12e>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0320 	and.w	r3, r3, #32
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d053      	beq.n	8005882 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d038      	beq.n	8005854 <HAL_RCC_ClockConfig+0x1d0>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	2b80      	cmp	r3, #128	; 0x80
 80057e8:	d034      	beq.n	8005854 <HAL_RCC_ClockConfig+0x1d0>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	2b10      	cmp	r3, #16
 80057f0:	d030      	beq.n	8005854 <HAL_RCC_ClockConfig+0x1d0>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	2b90      	cmp	r3, #144	; 0x90
 80057f8:	d02c      	beq.n	8005854 <HAL_RCC_ClockConfig+0x1d0>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	2b20      	cmp	r3, #32
 8005800:	d028      	beq.n	8005854 <HAL_RCC_ClockConfig+0x1d0>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	2b50      	cmp	r3, #80	; 0x50
 8005808:	d024      	beq.n	8005854 <HAL_RCC_ClockConfig+0x1d0>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	2ba0      	cmp	r3, #160	; 0xa0
 8005810:	d020      	beq.n	8005854 <HAL_RCC_ClockConfig+0x1d0>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	2b60      	cmp	r3, #96	; 0x60
 8005818:	d01c      	beq.n	8005854 <HAL_RCC_ClockConfig+0x1d0>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	2bb0      	cmp	r3, #176	; 0xb0
 8005820:	d018      	beq.n	8005854 <HAL_RCC_ClockConfig+0x1d0>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	2b70      	cmp	r3, #112	; 0x70
 8005828:	d014      	beq.n	8005854 <HAL_RCC_ClockConfig+0x1d0>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	2bc0      	cmp	r3, #192	; 0xc0
 8005830:	d010      	beq.n	8005854 <HAL_RCC_ClockConfig+0x1d0>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	2bd0      	cmp	r3, #208	; 0xd0
 8005838:	d00c      	beq.n	8005854 <HAL_RCC_ClockConfig+0x1d0>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	2be0      	cmp	r3, #224	; 0xe0
 8005840:	d008      	beq.n	8005854 <HAL_RCC_ClockConfig+0x1d0>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	2bf0      	cmp	r3, #240	; 0xf0
 8005848:	d004      	beq.n	8005854 <HAL_RCC_ClockConfig+0x1d0>
 800584a:	f240 412c 	movw	r1, #1068	; 0x42c
 800584e:	4833      	ldr	r0, [pc, #204]	; (800591c <HAL_RCC_ClockConfig+0x298>)
 8005850:	f7fc fb7b 	bl	8001f4a <assert_failed>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	4618      	mov	r0, r3
 800585a:	f7ff f904 	bl	8004a66 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800585e:	f7fd fae3 	bl	8002e28 <HAL_GetTick>
 8005862:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005864:	e008      	b.n	8005878 <HAL_RCC_ClockConfig+0x1f4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005866:	f7fd fadf 	bl	8002e28 <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	2b02      	cmp	r3, #2
 8005872:	d901      	bls.n	8005878 <HAL_RCC_ClockConfig+0x1f4>
      {
        return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e163      	b.n	8005b40 <HAL_RCC_ClockConfig+0x4bc>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005878:	f7ff f9ef 	bl	8004c5a <LL_RCC_IsActiveFlag_C2HPRE>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d0f1      	beq.n	8005866 <HAL_RCC_ClockConfig+0x1e2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800588a:	2b00      	cmp	r3, #0
 800588c:	d058      	beq.n	8005940 <HAL_RCC_ClockConfig+0x2bc>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d038      	beq.n	8005908 <HAL_RCC_ClockConfig+0x284>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	2b80      	cmp	r3, #128	; 0x80
 800589c:	d034      	beq.n	8005908 <HAL_RCC_ClockConfig+0x284>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	2b10      	cmp	r3, #16
 80058a4:	d030      	beq.n	8005908 <HAL_RCC_ClockConfig+0x284>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	2b90      	cmp	r3, #144	; 0x90
 80058ac:	d02c      	beq.n	8005908 <HAL_RCC_ClockConfig+0x284>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	2b20      	cmp	r3, #32
 80058b4:	d028      	beq.n	8005908 <HAL_RCC_ClockConfig+0x284>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	2b50      	cmp	r3, #80	; 0x50
 80058bc:	d024      	beq.n	8005908 <HAL_RCC_ClockConfig+0x284>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	2ba0      	cmp	r3, #160	; 0xa0
 80058c4:	d020      	beq.n	8005908 <HAL_RCC_ClockConfig+0x284>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	2b60      	cmp	r3, #96	; 0x60
 80058cc:	d01c      	beq.n	8005908 <HAL_RCC_ClockConfig+0x284>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	2bb0      	cmp	r3, #176	; 0xb0
 80058d4:	d018      	beq.n	8005908 <HAL_RCC_ClockConfig+0x284>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	2b70      	cmp	r3, #112	; 0x70
 80058dc:	d014      	beq.n	8005908 <HAL_RCC_ClockConfig+0x284>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	2bc0      	cmp	r3, #192	; 0xc0
 80058e4:	d010      	beq.n	8005908 <HAL_RCC_ClockConfig+0x284>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	2bd0      	cmp	r3, #208	; 0xd0
 80058ec:	d00c      	beq.n	8005908 <HAL_RCC_ClockConfig+0x284>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	2be0      	cmp	r3, #224	; 0xe0
 80058f4:	d008      	beq.n	8005908 <HAL_RCC_ClockConfig+0x284>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	2bf0      	cmp	r3, #240	; 0xf0
 80058fc:	d004      	beq.n	8005908 <HAL_RCC_ClockConfig+0x284>
 80058fe:	f240 413c 	movw	r1, #1084	; 0x43c
 8005902:	4806      	ldr	r0, [pc, #24]	; (800591c <HAL_RCC_ClockConfig+0x298>)
 8005904:	f7fc fb21 	bl	8001f4a <assert_failed>
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	4618      	mov	r0, r3
 800590e:	f7ff f8c0 	bl	8004a92 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005912:	f7fd fa89 	bl	8002e28 <HAL_GetTick>
 8005916:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005918:	e00d      	b.n	8005936 <HAL_RCC_ClockConfig+0x2b2>
 800591a:	bf00      	nop
 800591c:	0800ce54 	.word	0x0800ce54
 8005920:	58004000 	.word	0x58004000
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005924:	f7fd fa80 	bl	8002e28 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_ClockConfig+0x2b2>
      {
        return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e104      	b.n	8005b40 <HAL_RCC_ClockConfig+0x4bc>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005936:	f7ff f9a3 	bl	8004c80 <LL_RCC_IsActiveFlag_SHDHPRE>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d0f1      	beq.n	8005924 <HAL_RCC_ClockConfig+0x2a0>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b00      	cmp	r3, #0
 800594a:	d033      	beq.n	80059b4 <HAL_RCC_ClockConfig+0x330>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d018      	beq.n	8005986 <HAL_RCC_ClockConfig+0x302>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800595c:	d013      	beq.n	8005986 <HAL_RCC_ClockConfig+0x302>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005966:	d00e      	beq.n	8005986 <HAL_RCC_ClockConfig+0x302>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005970:	d009      	beq.n	8005986 <HAL_RCC_ClockConfig+0x302>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800597a:	d004      	beq.n	8005986 <HAL_RCC_ClockConfig+0x302>
 800597c:	f240 414d 	movw	r1, #1101	; 0x44d
 8005980:	4871      	ldr	r0, [pc, #452]	; (8005b48 <HAL_RCC_ClockConfig+0x4c4>)
 8005982:	f7fc fae2 	bl	8001f4a <assert_failed>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	4618      	mov	r0, r3
 800598c:	f7ff f898 	bl	8004ac0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005990:	f7fd fa4a 	bl	8002e28 <HAL_GetTick>
 8005994:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005996:	e008      	b.n	80059aa <HAL_RCC_ClockConfig+0x326>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005998:	f7fd fa46 	bl	8002e28 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_ClockConfig+0x326>
      {
        return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e0ca      	b.n	8005b40 <HAL_RCC_ClockConfig+0x4bc>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80059aa:	f7ff f97c 	bl	8004ca6 <LL_RCC_IsActiveFlag_PPRE1>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d0f1      	beq.n	8005998 <HAL_RCC_ClockConfig+0x314>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0308 	and.w	r3, r3, #8
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d034      	beq.n	8005a2a <HAL_RCC_ClockConfig+0x3a6>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d018      	beq.n	80059fa <HAL_RCC_ClockConfig+0x376>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059d0:	d013      	beq.n	80059fa <HAL_RCC_ClockConfig+0x376>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80059da:	d00e      	beq.n	80059fa <HAL_RCC_ClockConfig+0x376>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80059e4:	d009      	beq.n	80059fa <HAL_RCC_ClockConfig+0x376>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059ee:	d004      	beq.n	80059fa <HAL_RCC_ClockConfig+0x376>
 80059f0:	f240 415e 	movw	r1, #1118	; 0x45e
 80059f4:	4854      	ldr	r0, [pc, #336]	; (8005b48 <HAL_RCC_ClockConfig+0x4c4>)
 80059f6:	f7fc faa8 	bl	8001f4a <assert_failed>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7ff f871 	bl	8004ae8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a06:	f7fd fa0f 	bl	8002e28 <HAL_GetTick>
 8005a0a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005a0c:	e008      	b.n	8005a20 <HAL_RCC_ClockConfig+0x39c>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a0e:	f7fd fa0b 	bl	8002e28 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d901      	bls.n	8005a20 <HAL_RCC_ClockConfig+0x39c>
      {
        return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e08f      	b.n	8005b40 <HAL_RCC_ClockConfig+0x4bc>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005a20:	f7ff f953 	bl	8004cca <LL_RCC_IsActiveFlag_PPRE2>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d0f1      	beq.n	8005a0e <HAL_RCC_ClockConfig+0x38a>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d058      	beq.n	8005ae8 <HAL_RCC_ClockConfig+0x464>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d010      	beq.n	8005a60 <HAL_RCC_ClockConfig+0x3dc>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d00c      	beq.n	8005a60 <HAL_RCC_ClockConfig+0x3dc>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d008      	beq.n	8005a60 <HAL_RCC_ClockConfig+0x3dc>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	2b03      	cmp	r3, #3
 8005a54:	d004      	beq.n	8005a60 <HAL_RCC_ClockConfig+0x3dc>
 8005a56:	f240 416f 	movw	r1, #1135	; 0x46f
 8005a5a:	483b      	ldr	r0, [pc, #236]	; (8005b48 <HAL_RCC_ClockConfig+0x4c4>)
 8005a5c:	f7fc fa75 	bl	8001f4a <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d106      	bne.n	8005a76 <HAL_RCC_ClockConfig+0x3f2>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005a68:	f7fe fdfc 	bl	8004664 <LL_RCC_HSE_IsReady>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d11e      	bne.n	8005ab0 <HAL_RCC_ClockConfig+0x42c>
      {
        return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e064      	b.n	8005b40 <HAL_RCC_ClockConfig+0x4bc>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	2b03      	cmp	r3, #3
 8005a7c:	d106      	bne.n	8005a8c <HAL_RCC_ClockConfig+0x408>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005a7e:	f7ff f897 	bl	8004bb0 <LL_RCC_PLL_IsReady>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d113      	bne.n	8005ab0 <HAL_RCC_ClockConfig+0x42c>
      {
        return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e059      	b.n	8005b40 <HAL_RCC_ClockConfig+0x4bc>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d106      	bne.n	8005aa2 <HAL_RCC_ClockConfig+0x41e>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005a94:	f7fe ff64 	bl	8004960 <LL_RCC_MSI_IsReady>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d108      	bne.n	8005ab0 <HAL_RCC_ClockConfig+0x42c>
      {
        return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e04e      	b.n	8005b40 <HAL_RCC_ClockConfig+0x4bc>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005aa2:	f7fe fe0f 	bl	80046c4 <LL_RCC_HSI_IsReady>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <HAL_RCC_ClockConfig+0x42c>
      {
        return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e047      	b.n	8005b40 <HAL_RCC_ClockConfig+0x4bc>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fe ffa2 	bl	80049fe <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aba:	f7fd f9b5 	bl	8002e28 <HAL_GetTick>
 8005abe:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ac0:	e00a      	b.n	8005ad8 <HAL_RCC_ClockConfig+0x454>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ac2:	f7fd f9b1 	bl	8002e28 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCC_ClockConfig+0x454>
      {
        return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e033      	b.n	8005b40 <HAL_RCC_ClockConfig+0x4bc>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ad8:	f7fe ffa5 	bl	8004a26 <LL_RCC_GetSysClkSource>
 8005adc:	4602      	mov	r2, r0
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d1ec      	bne.n	8005ac2 <HAL_RCC_ClockConfig+0x43e>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ae8:	4b18      	ldr	r3, [pc, #96]	; (8005b4c <HAL_RCC_ClockConfig+0x4c8>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0307 	and.w	r3, r3, #7
 8005af0:	683a      	ldr	r2, [r7, #0]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d21b      	bcs.n	8005b2e <HAL_RCC_ClockConfig+0x4aa>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005af6:	4b15      	ldr	r3, [pc, #84]	; (8005b4c <HAL_RCC_ClockConfig+0x4c8>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f023 0207 	bic.w	r2, r3, #7
 8005afe:	4913      	ldr	r1, [pc, #76]	; (8005b4c <HAL_RCC_ClockConfig+0x4c8>)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b06:	f7fd f98f 	bl	8002e28 <HAL_GetTick>
 8005b0a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b0c:	e008      	b.n	8005b20 <HAL_RCC_ClockConfig+0x49c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005b0e:	f7fd f98b 	bl	8002e28 <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d901      	bls.n	8005b20 <HAL_RCC_ClockConfig+0x49c>
      {
        return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e00f      	b.n	8005b40 <HAL_RCC_ClockConfig+0x4bc>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b20:	4b0a      	ldr	r3, [pc, #40]	; (8005b4c <HAL_RCC_ClockConfig+0x4c8>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0307 	and.w	r3, r3, #7
 8005b28:	683a      	ldr	r2, [r7, #0]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d1ef      	bne.n	8005b0e <HAL_RCC_ClockConfig+0x48a>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8005b2e:	f7fc fe9f 	bl	8002870 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005b32:	f7fd f985 	bl	8002e40 <HAL_GetTickPrio>
 8005b36:	4603      	mov	r3, r0
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7fd f929 	bl	8002d90 <HAL_InitTick>
 8005b3e:	4603      	mov	r3, r0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	0800ce54 	.word	0x0800ce54
 8005b4c:	58004000 	.word	0x58004000

08005b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b50:	b590      	push	{r4, r7, lr}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b56:	f7fe ff66 	bl	8004a26 <LL_RCC_GetSysClkSource>
 8005b5a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10a      	bne.n	8005b78 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005b62:	f7fe ff22 	bl	80049aa <LL_RCC_MSI_GetRange>
 8005b66:	4603      	mov	r3, r0
 8005b68:	091b      	lsrs	r3, r3, #4
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	4a2a      	ldr	r2, [pc, #168]	; (8005c18 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b74:	60fb      	str	r3, [r7, #12]
 8005b76:	e04a      	b.n	8005c0e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b04      	cmp	r3, #4
 8005b7c:	d102      	bne.n	8005b84 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b7e:	4b27      	ldr	r3, [pc, #156]	; (8005c1c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005b80:	60fb      	str	r3, [r7, #12]
 8005b82:	e044      	b.n	8005c0e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b08      	cmp	r3, #8
 8005b88:	d10a      	bne.n	8005ba0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005b8a:	f7fe fd1d 	bl	80045c8 <LL_RCC_HSE_IsEnabledDiv2>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d102      	bne.n	8005b9a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005b94:	4b21      	ldr	r3, [pc, #132]	; (8005c1c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	e039      	b.n	8005c0e <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005b9a:	4b21      	ldr	r3, [pc, #132]	; (8005c20 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005b9c:	60fb      	str	r3, [r7, #12]
 8005b9e:	e036      	b.n	8005c0e <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005ba0:	f7ff f83d 	bl	8004c1e <LL_RCC_PLL_GetMainSource>
 8005ba4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d002      	beq.n	8005bb2 <HAL_RCC_GetSysClockFreq+0x62>
 8005bac:	2b03      	cmp	r3, #3
 8005bae:	d003      	beq.n	8005bb8 <HAL_RCC_GetSysClockFreq+0x68>
 8005bb0:	e00d      	b.n	8005bce <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005bb2:	4b1a      	ldr	r3, [pc, #104]	; (8005c1c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005bb4:	60bb      	str	r3, [r7, #8]
        break;
 8005bb6:	e015      	b.n	8005be4 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005bb8:	f7fe fd06 	bl	80045c8 <LL_RCC_HSE_IsEnabledDiv2>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d102      	bne.n	8005bc8 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005bc2:	4b16      	ldr	r3, [pc, #88]	; (8005c1c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005bc4:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005bc6:	e00d      	b.n	8005be4 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8005bc8:	4b15      	ldr	r3, [pc, #84]	; (8005c20 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005bca:	60bb      	str	r3, [r7, #8]
        break;
 8005bcc:	e00a      	b.n	8005be4 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005bce:	f7fe feec 	bl	80049aa <LL_RCC_MSI_GetRange>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	091b      	lsrs	r3, r3, #4
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	4a0f      	ldr	r2, [pc, #60]	; (8005c18 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005be0:	60bb      	str	r3, [r7, #8]
        break;
 8005be2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8005be4:	f7fe fff6 	bl	8004bd4 <LL_RCC_PLL_GetN>
 8005be8:	4602      	mov	r2, r0
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	fb03 f402 	mul.w	r4, r3, r2
 8005bf0:	f7ff f809 	bl	8004c06 <LL_RCC_PLL_GetDivider>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	091b      	lsrs	r3, r3, #4
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	fbb4 f4f3 	udiv	r4, r4, r3
 8005bfe:	f7fe fff6 	bl	8004bee <LL_RCC_PLL_GetR>
 8005c02:	4603      	mov	r3, r0
 8005c04:	0f5b      	lsrs	r3, r3, #29
 8005c06:	3301      	adds	r3, #1
 8005c08:	fbb4 f3f3 	udiv	r3, r4, r3
 8005c0c:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3714      	adds	r7, #20
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd90      	pop	{r4, r7, pc}
 8005c18:	0800d2e0 	.word	0x0800d2e0
 8005c1c:	00f42400 	.word	0x00f42400
 8005c20:	01e84800 	.word	0x01e84800

08005c24 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c24:	b598      	push	{r3, r4, r7, lr}
 8005c26:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005c28:	f7ff ff92 	bl	8005b50 <HAL_RCC_GetSysClockFreq>
 8005c2c:	4604      	mov	r4, r0
 8005c2e:	f7fe ff6f 	bl	8004b10 <LL_RCC_GetAHBPrescaler>
 8005c32:	4603      	mov	r3, r0
 8005c34:	091b      	lsrs	r3, r3, #4
 8005c36:	f003 030f 	and.w	r3, r3, #15
 8005c3a:	4a03      	ldr	r2, [pc, #12]	; (8005c48 <HAL_RCC_GetHCLKFreq+0x24>)
 8005c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c40:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	bd98      	pop	{r3, r4, r7, pc}
 8005c48:	0800d280 	.word	0x0800d280

08005c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c4c:	b598      	push	{r3, r4, r7, lr}
 8005c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005c50:	f7ff ffe8 	bl	8005c24 <HAL_RCC_GetHCLKFreq>
 8005c54:	4604      	mov	r4, r0
 8005c56:	f7fe ff75 	bl	8004b44 <LL_RCC_GetAPB1Prescaler>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	0a1b      	lsrs	r3, r3, #8
 8005c5e:	f003 0307 	and.w	r3, r3, #7
 8005c62:	4a04      	ldr	r2, [pc, #16]	; (8005c74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c68:	f003 031f 	and.w	r3, r3, #31
 8005c6c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	bd98      	pop	{r3, r4, r7, pc}
 8005c74:	0800d2c0 	.word	0x0800d2c0

08005c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c78:	b598      	push	{r3, r4, r7, lr}
 8005c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005c7c:	f7ff ffd2 	bl	8005c24 <HAL_RCC_GetHCLKFreq>
 8005c80:	4604      	mov	r4, r0
 8005c82:	f7fe ff6b 	bl	8004b5c <LL_RCC_GetAPB2Prescaler>
 8005c86:	4603      	mov	r3, r0
 8005c88:	0adb      	lsrs	r3, r3, #11
 8005c8a:	f003 0307 	and.w	r3, r3, #7
 8005c8e:	4a04      	ldr	r2, [pc, #16]	; (8005ca0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c94:	f003 031f 	and.w	r3, r3, #31
 8005c98:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	bd98      	pop	{r3, r4, r7, pc}
 8005ca0:	0800d2c0 	.word	0x0800d2c0

08005ca4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005ca4:	b590      	push	{r4, r7, lr}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq, msifreq;

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d025      	beq.n	8005cfe <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b10      	cmp	r3, #16
 8005cb6:	d022      	beq.n	8005cfe <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b20      	cmp	r3, #32
 8005cbc:	d01f      	beq.n	8005cfe <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b30      	cmp	r3, #48	; 0x30
 8005cc2:	d01c      	beq.n	8005cfe <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b40      	cmp	r3, #64	; 0x40
 8005cc8:	d019      	beq.n	8005cfe <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b50      	cmp	r3, #80	; 0x50
 8005cce:	d016      	beq.n	8005cfe <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b60      	cmp	r3, #96	; 0x60
 8005cd4:	d013      	beq.n	8005cfe <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2b70      	cmp	r3, #112	; 0x70
 8005cda:	d010      	beq.n	8005cfe <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b80      	cmp	r3, #128	; 0x80
 8005ce0:	d00d      	beq.n	8005cfe <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b90      	cmp	r3, #144	; 0x90
 8005ce6:	d00a      	beq.n	8005cfe <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2ba0      	cmp	r3, #160	; 0xa0
 8005cec:	d007      	beq.n	8005cfe <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2bb0      	cmp	r3, #176	; 0xb0
 8005cf2:	d004      	beq.n	8005cfe <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005cf4:	f240 6191 	movw	r1, #1681	; 0x691
 8005cf8:	4817      	ldr	r0, [pc, #92]	; (8005d58 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005cfa:	f7fc f926 	bl	8001f4a <assert_failed>

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2bb0      	cmp	r3, #176	; 0xb0
 8005d02:	d903      	bls.n	8005d0c <RCC_SetFlashLatencyFromMSIRange+0x68>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005d04:	4b15      	ldr	r3, [pc, #84]	; (8005d5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	e007      	b.n	8005d1c <RCC_SetFlashLatencyFromMSIRange+0x78>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	091b      	lsrs	r3, r3, #4
 8005d10:	f003 030f 	and.w	r3, r3, #15
 8005d14:	4a11      	ldr	r2, [pc, #68]	; (8005d5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d1a:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005d1c:	f7fe ff04 	bl	8004b28 <LL_RCC_GetAHB4Prescaler>
 8005d20:	4603      	mov	r3, r0
 8005d22:	091b      	lsrs	r3, r3, #4
 8005d24:	f003 030f 	and.w	r3, r3, #15
 8005d28:	4a0d      	ldr	r2, [pc, #52]	; (8005d60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d34:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	4a0a      	ldr	r2, [pc, #40]	; (8005d64 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3e:	0c9c      	lsrs	r4, r3, #18
 8005d40:	f7fe fc34 	bl	80045ac <HAL_PWREx_GetVoltageRange>
 8005d44:	4603      	mov	r3, r0
 8005d46:	4619      	mov	r1, r3
 8005d48:	4620      	mov	r0, r4
 8005d4a:	f000 f80d 	bl	8005d68 <RCC_SetFlashLatency>
 8005d4e:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3714      	adds	r7, #20
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd90      	pop	{r4, r7, pc}
 8005d58:	0800ce54 	.word	0x0800ce54
 8005d5c:	0800d2e0 	.word	0x0800d2e0
 8005d60:	0800d280 	.word	0x0800d280
 8005d64:	431bde83 	.word	0x431bde83

08005d68 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005d68:	b590      	push	{r4, r7, lr}
 8005d6a:	b093      	sub	sp, #76	; 0x4c
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005d72:	4b39      	ldr	r3, [pc, #228]	; (8005e58 <RCC_SetFlashLatency+0xf0>)
 8005d74:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005d78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005d7e:	4a37      	ldr	r2, [pc, #220]	; (8005e5c <RCC_SetFlashLatency+0xf4>)
 8005d80:	f107 031c 	add.w	r3, r7, #28
 8005d84:	ca07      	ldmia	r2, {r0, r1, r2}
 8005d86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005d8a:	4b35      	ldr	r3, [pc, #212]	; (8005e60 <RCC_SetFlashLatency+0xf8>)
 8005d8c:	f107 040c 	add.w	r4, r7, #12
 8005d90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005d96:	2300      	movs	r3, #0
 8005d98:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005da0:	d11c      	bne.n	8005ddc <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005da2:	2300      	movs	r3, #0
 8005da4:	643b      	str	r3, [r7, #64]	; 0x40
 8005da6:	e015      	b.n	8005dd4 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005db0:	4413      	add	r3, r2
 8005db2:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d808      	bhi.n	8005dce <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005dca:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005dcc:	e022      	b.n	8005e14 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	643b      	str	r3, [r7, #64]	; 0x40
 8005dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dd6:	2b03      	cmp	r3, #3
 8005dd8:	d9e6      	bls.n	8005da8 <RCC_SetFlashLatency+0x40>
 8005dda:	e01b      	b.n	8005e14 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005ddc:	2300      	movs	r3, #0
 8005dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005de0:	e015      	b.n	8005e0e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005dea:	4413      	add	r3, r2
 8005dec:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d808      	bhi.n	8005e08 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005dfe:	4413      	add	r3, r2
 8005e00:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005e04:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005e06:	e005      	b.n	8005e14 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d9e6      	bls.n	8005de2 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8005e14:	4b13      	ldr	r3, [pc, #76]	; (8005e64 <RCC_SetFlashLatency+0xfc>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f023 0207 	bic.w	r2, r3, #7
 8005e1c:	4911      	ldr	r1, [pc, #68]	; (8005e64 <RCC_SetFlashLatency+0xfc>)
 8005e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e20:	4313      	orrs	r3, r2
 8005e22:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e24:	f7fd f800 	bl	8002e28 <HAL_GetTick>
 8005e28:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005e2a:	e008      	b.n	8005e3e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005e2c:	f7fc fffc 	bl	8002e28 <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d901      	bls.n	8005e3e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e007      	b.n	8005e4e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005e3e:	4b09      	ldr	r3, [pc, #36]	; (8005e64 <RCC_SetFlashLatency+0xfc>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0307 	and.w	r3, r3, #7
 8005e46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d1ef      	bne.n	8005e2c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	374c      	adds	r7, #76	; 0x4c
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd90      	pop	{r4, r7, pc}
 8005e56:	bf00      	nop
 8005e58:	0800cec4 	.word	0x0800cec4
 8005e5c:	0800ced4 	.word	0x0800ced4
 8005e60:	0800cee0 	.word	0x0800cee0
 8005e64:	58004000 	.word	0x58004000

08005e68 <LL_RCC_LSE_IsEnabled>:
{
 8005e68:	b480      	push	{r7}
 8005e6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d101      	bne.n	8005e80 <LL_RCC_LSE_IsEnabled+0x18>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e000      	b.n	8005e82 <LL_RCC_LSE_IsEnabled+0x1a>
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <LL_RCC_LSE_IsReady>:
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d101      	bne.n	8005ea4 <LL_RCC_LSE_IsReady+0x18>
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e000      	b.n	8005ea6 <LL_RCC_LSE_IsReady+0x1a>
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <LL_RCC_MSI_EnablePLLMode>:
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ebe:	f043 0304 	orr.w	r3, r3, #4
 8005ec2:	6013      	str	r3, [r2, #0]
}
 8005ec4:	bf00      	nop
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <LL_RCC_SetRFWKPClockSource>:
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b083      	sub	sp, #12
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ede:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ee2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005eee:	bf00      	nop
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <LL_RCC_SetSMPSClockSource>:
{
 8005efa:	b480      	push	{r7}
 8005efc:	b083      	sub	sp, #12
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	f023 0203 	bic.w	r2, r3, #3
 8005f0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005f16:	bf00      	nop
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <LL_RCC_SetSMPSPrescaler>:
{
 8005f22:	b480      	push	{r7}
 8005f24:	b083      	sub	sp, #12
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005f3e:	bf00      	nop
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <LL_RCC_SetUSARTClockSource>:
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b083      	sub	sp, #12
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f5a:	f023 0203 	bic.w	r2, r3, #3
 8005f5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005f6a:	bf00      	nop
 8005f6c:	370c      	adds	r7, #12
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <LL_RCC_SetLPUARTClockSource>:
{
 8005f76:	b480      	push	{r7}
 8005f78:	b083      	sub	sp, #12
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005f96:	bf00      	nop
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <LL_RCC_SetI2CClockSource>:
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b083      	sub	sp, #12
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	091b      	lsrs	r3, r3, #4
 8005fb6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005fba:	43db      	mvns	r3, r3
 8005fbc:	401a      	ands	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	011b      	lsls	r3, r3, #4
 8005fc2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005fc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <LL_RCC_SetLPTIMClockSource>:
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fe8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	0c1b      	lsrs	r3, r3, #16
 8005ff0:	041b      	lsls	r3, r3, #16
 8005ff2:	43db      	mvns	r3, r3
 8005ff4:	401a      	ands	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	041b      	lsls	r3, r3, #16
 8005ffa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ffe:	4313      	orrs	r3, r2
 8006000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <LL_RCC_SetSAIClockSource>:
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800601c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006020:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006024:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4313      	orrs	r3, r2
 800602c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <LL_RCC_SetRNGClockSource>:
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800604c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006050:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4313      	orrs	r3, r2
 8006058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <LL_RCC_SetCLK48ClockSource>:
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006078:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800607c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4313      	orrs	r3, r2
 8006084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <LL_RCC_SetUSBClockSource>:
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f7ff ffe3 	bl	8006068 <LL_RCC_SetCLK48ClockSource>
}
 80060a2:	bf00      	nop
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <LL_RCC_SetADCClockSource>:
{
 80060aa:	b480      	push	{r7}
 80060ac:	b083      	sub	sp, #12
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80060b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80060be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <LL_RCC_SetRTCClockSource>:
{
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80060de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <LL_RCC_GetRTCClockSource>:
{
 8006102:	b480      	push	{r7}
 8006104:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800610a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800610e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006112:	4618      	mov	r0, r3
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <LL_RCC_ForceBackupDomainReset>:
{
 800611c:	b480      	push	{r7}
 800611e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006128:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800612c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006134:	bf00      	nop
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <LL_RCC_ReleaseBackupDomainReset>:
{
 800613e:	b480      	push	{r7}
 8006140:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800614a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800614e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006152:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006156:	bf00      	nop
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <LL_RCC_PLLSAI1_Enable>:
{
 8006160:	b480      	push	{r7}
 8006162:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800616e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006172:	6013      	str	r3, [r2, #0]
}
 8006174:	bf00      	nop
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <LL_RCC_PLLSAI1_Disable>:
{
 800617e:	b480      	push	{r7}
 8006180:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800618c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006190:	6013      	str	r3, [r2, #0]
}
 8006192:	bf00      	nop
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <LL_RCC_PLLSAI1_IsReady>:
{
 800619c:	b480      	push	{r7}
 800619e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80061a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061ae:	d101      	bne.n	80061b4 <LL_RCC_PLLSAI1_IsReady+0x18>
 80061b0:	2301      	movs	r3, #1
 80061b2:	e000      	b.n	80061b6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b088      	sub	sp, #32
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80061c8:	2300      	movs	r3, #0
 80061ca:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80061cc:	2300      	movs	r3, #0
 80061ce:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d14b      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d145      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0304 	and.w	r3, r3, #4
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d13f      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0308 	and.w	r3, r3, #8
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d139      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0310 	and.w	r3, r3, #16
 8006208:	2b00      	cmp	r3, #0
 800620a:	d133      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0320 	and.w	r3, r3, #32
 8006214:	2b00      	cmp	r3, #0
 8006216:	d12d      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006220:	2b00      	cmp	r3, #0
 8006222:	d127      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800622c:	2b00      	cmp	r3, #0
 800622e:	d121      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006238:	2b00      	cmp	r3, #0
 800623a:	d11b      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006244:	2b00      	cmp	r3, #0
 8006246:	d115      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10f      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d109      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d103      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 800626c:	219b      	movs	r1, #155	; 0x9b
 800626e:	485b      	ldr	r0, [pc, #364]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8006270:	f7fb fe6b 	bl	8001f4a <assert_failed>

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627c:	2b00      	cmp	r3, #0
 800627e:	d04a      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006284:	2b00      	cmp	r3, #0
 8006286:	d012      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xee>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006290:	d00d      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xee>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006296:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800629a:	d008      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xee>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80062a4:	d003      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xee>
 80062a6:	21a2      	movs	r1, #162	; 0xa2
 80062a8:	484c      	ldr	r0, [pc, #304]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80062aa:	f7fb fe4e 	bl	8001f4a <assert_failed>

    switch (PeriphClkInit->Sai1ClockSelection)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062b6:	d00c      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80062b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062bc:	d802      	bhi.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d010      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
 80062c2:	e017      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x134>
 80062c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062c8:	d017      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x13a>
 80062ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80062ce:	d016      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80062d0:	e010      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x134>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80062d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062e0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80062e2:	e00d      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	3304      	adds	r3, #4
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 fa93 	bl	8006814 <RCCEx_PLLSAI1_ConfigNP>
 80062ee:	4603      	mov	r3, r0
 80062f0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80062f2:	e005      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x140>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	77fb      	strb	r3, [r7, #31]
        break;
 80062f8:	e002      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80062fa:	bf00      	nop
 80062fc:	e000      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80062fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006300:	7ffb      	ldrb	r3, [r7, #31]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d105      	bne.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x152>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630a:	4618      	mov	r0, r3
 800630c:	f7ff fe80 	bl	8006010 <LL_RCC_SetSAIClockSource>
 8006310:	e001      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x156>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006312:	7ffb      	ldrb	r3, [r7, #31]
 8006314:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800631e:	2b00      	cmp	r3, #0
 8006320:	d060      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006322:	f7ff feee 	bl	8006102 <LL_RCC_GetRTCClockSource>
 8006326:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632c:	2b00      	cmp	r3, #0
 800632e:	d012      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006338:	d00d      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006342:	d008      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006348:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800634c:	d003      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800634e:	21d4      	movs	r1, #212	; 0xd4
 8006350:	4822      	ldr	r0, [pc, #136]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8006352:	f7fb fdfa 	bl	8001f4a <assert_failed>

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635a:	69ba      	ldr	r2, [r7, #24]
 800635c:	429a      	cmp	r2, r3
 800635e:	d03f      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x220>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006360:	f7fe f914 	bl	800458c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d105      	bne.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636e:	4618      	mov	r0, r3
 8006370:	f7ff feb1 	bl	80060d6 <LL_RCC_SetRTCClockSource>
 8006374:	e02e      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x214>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800637a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800637e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006380:	f7ff fecc 	bl	800611c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006384:	f7ff fedb 	bl	800613e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	4313      	orrs	r3, r2
 8006394:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006396:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80063a0:	f7ff fd62 	bl	8005e68 <LL_RCC_LSE_IsEnabled>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d114      	bne.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x214>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80063aa:	f7fc fd3d 	bl	8002e28 <HAL_GetTick>
 80063ae:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80063b0:	e00b      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063b2:	f7fc fd39 	bl	8002e28 <HAL_GetTick>
 80063b6:	4602      	mov	r2, r0
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d902      	bls.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
            {
              ret = HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	77fb      	strb	r3, [r7, #31]
              break;
 80063c8:	e004      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x214>
          while (LL_RCC_LSE_IsReady() != 1U)
 80063ca:	f7ff fd5f 	bl	8005e8c <LL_RCC_LSE_IsReady>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d1ee      	bne.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80063d4:	7ffb      	ldrb	r3, [r7, #31]
 80063d6:	77bb      	strb	r3, [r7, #30]
 80063d8:	e004      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x224>
 80063da:	bf00      	nop
 80063dc:	0800cef0 	.word	0x0800cef0
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e0:	7ffb      	ldrb	r3, [r7, #31]
 80063e2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d019      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d010      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d00c      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	2b03      	cmp	r3, #3
 8006406:	d008      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	2b02      	cmp	r3, #2
 800640e:	d004      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8006410:	f44f 7189 	mov.w	r1, #274	; 0x112
 8006414:	4896      	ldr	r0, [pc, #600]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8006416:	f7fb fd98 	bl	8001f4a <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	4618      	mov	r0, r3
 8006420:	f7ff fd93 	bl	8005f4a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0302 	and.w	r3, r3, #2
 800642c:	2b00      	cmp	r3, #0
 800642e:	d01c      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d013      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	69db      	ldr	r3, [r3, #28]
 800643c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006440:	d00e      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	69db      	ldr	r3, [r3, #28]
 8006446:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800644a:	d009      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	69db      	ldr	r3, [r3, #28]
 8006450:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006454:	d004      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8006456:	f240 111d 	movw	r1, #285	; 0x11d
 800645a:	4885      	ldr	r0, [pc, #532]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800645c:	f7fb fd75 	bl	8001f4a <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	69db      	ldr	r3, [r3, #28]
 8006464:	4618      	mov	r0, r3
 8006466:	f7ff fd86 	bl	8005f76 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0310 	and.w	r3, r3, #16
 8006472:	2b00      	cmp	r3, #0
 8006474:	d01d      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800647e:	d013      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006484:	4a7b      	ldr	r2, [pc, #492]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d00e      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648e:	4a7a      	ldr	r2, [pc, #488]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d009      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006498:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 800649c:	d004      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800649e:	f240 1127 	movw	r1, #295	; 0x127
 80064a2:	4873      	ldr	r0, [pc, #460]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80064a4:	f7fb fd51 	bl	8001f4a <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7ff fd95 	bl	8005fdc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0320 	and.w	r3, r3, #32
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d01d      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x33a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064c6:	d013      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064cc:	4a6b      	ldr	r2, [pc, #428]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d00e      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d6:	4a6a      	ldr	r2, [pc, #424]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4c0>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d009      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e0:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80064e4:	d004      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80064e6:	f44f 7197 	mov.w	r1, #302	; 0x12e
 80064ea:	4861      	ldr	r0, [pc, #388]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80064ec:	f7fb fd2d 	bl	8001f4a <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7ff fd71 	bl	8005fdc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0304 	and.w	r3, r3, #4
 8006502:	2b00      	cmp	r3, #0
 8006504:	d018      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800650e:	d00e      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	4a5b      	ldr	r2, [pc, #364]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d009      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	4a5a      	ldr	r2, [pc, #360]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d004      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006524:	f44f 719b 	mov.w	r1, #310	; 0x136
 8006528:	4851      	ldr	r0, [pc, #324]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800652a:	f7fb fd0e 	bl	8001f4a <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	4618      	mov	r0, r3
 8006534:	f7ff fd35 	bl	8005fa2 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0308 	and.w	r3, r3, #8
 8006540:	2b00      	cmp	r3, #0
 8006542:	d018      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006548:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800654c:	d00e      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006552:	4a4e      	ldr	r2, [pc, #312]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d009      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655c:	4a4c      	ldr	r2, [pc, #304]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d004      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8006562:	f240 1141 	movw	r1, #321	; 0x141
 8006566:	4842      	ldr	r0, [pc, #264]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8006568:	f7fb fcef 	bl	8001f4a <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006570:	4618      	mov	r0, r3
 8006572:	f7ff fd16 	bl	8005fa2 <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800657e:	2b00      	cmp	r3, #0
 8006580:	d03a      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006586:	2b00      	cmp	r3, #0
 8006588:	d013      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800658e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006592:	d00e      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006598:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800659c:	d009      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80065a6:	d004      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80065a8:	f240 114b 	movw	r1, #331	; 0x14b
 80065ac:	4830      	ldr	r0, [pc, #192]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80065ae:	f7fb fccc 	bl	8001f4a <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7ff fd6c 	bl	8006094 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065c4:	d107      	bne.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x416>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80065c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065d4:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065de:	d10b      	bne.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3304      	adds	r3, #4
 80065e4:	4618      	mov	r0, r3
 80065e6:	f000 f9ad 	bl	8006944 <RCCEx_PLLSAI1_ConfigNQ>
 80065ea:	4603      	mov	r3, r0
 80065ec:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80065ee:	7ffb      	ldrb	r3, [r7, #31]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x438>
      {
        /* set overall return value */
        status = ret;
 80065f4:	7ffb      	ldrb	r3, [r7, #31]
 80065f6:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006600:	2b00      	cmp	r3, #0
 8006602:	d05f      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006608:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800660c:	d01c      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006612:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006616:	d017      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661c:	f1b3 5fe0 	cmp.w	r3, #469762048	; 0x1c000000
 8006620:	d012      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00e      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006632:	d009      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006638:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800663c:	d004      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800663e:	f240 1167 	movw	r1, #359	; 0x167
 8006642:	480b      	ldr	r0, [pc, #44]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8006644:	f7fb fc81 	bl	8001f4a <assert_failed>

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006650:	d008      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006656:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800665a:	d003      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006660:	2b00      	cmp	r3, #0
 8006662:	d117      	bne.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006668:	4618      	mov	r0, r3
 800666a:	f7ff fce7 	bl	800603c <LL_RCC_SetRNGClockSource>
 800666e:	e01c      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8006670:	0800cef0 	.word	0x0800cef0
 8006674:	000c0004 	.word	0x000c0004
 8006678:	000c0008 	.word	0x000c0008
 800667c:	00300010 	.word	0x00300010
 8006680:	00300020 	.word	0x00300020
 8006684:	00030100 	.word	0x00030100
 8006688:	00030200 	.word	0x00030200
 800668c:	00301000 	.word	0x00301000
 8006690:	00302000 	.word	0x00302000
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006698:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800669c:	60fb      	str	r3, [r7, #12]
 800669e:	2000      	movs	r0, #0
 80066a0:	f7ff fccc 	bl	800603c <LL_RCC_SetRNGClockSource>
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f7ff fcdf 	bl	8006068 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ae:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80066b2:	d107      	bne.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80066b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d03a      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x586>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d013      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x540>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066e0:	d00e      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x540>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066ea:	d009      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x540>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066f4:	d004      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x540>
 80066f6:	f240 1177 	movw	r1, #375	; 0x177
 80066fa:	4842      	ldr	r0, [pc, #264]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80066fc:	f7fb fc25 	bl	8001f4a <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006704:	4618      	mov	r0, r3
 8006706:	f7ff fcd0 	bl	80060aa <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800670e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006712:	d107      	bne.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x564>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800671e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006722:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006728:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800672c:	d10b      	bne.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x586>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	3304      	adds	r3, #4
 8006732:	4618      	mov	r0, r3
 8006734:	f000 f99e 	bl	8006a74 <RCCEx_PLLSAI1_ConfigNR>
 8006738:	4603      	mov	r3, r0
 800673a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800673c:	7ffb      	ldrb	r3, [r7, #31]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d001      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x586>
      {
        /* set overall return value */
        status = ret;
 8006742:	7ffb      	ldrb	r3, [r7, #31]
 8006744:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d01c      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006756:	2b00      	cmp	r3, #0
 8006758:	d013      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800675e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006762:	d00e      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800676c:	d009      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006772:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006776:	d004      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 8006778:	f240 1195 	movw	r1, #405	; 0x195
 800677c:	4821      	ldr	r0, [pc, #132]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800677e:	f7fb fbe4 	bl	8001f4a <assert_failed>

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006786:	4618      	mov	r0, r3
 8006788:	f7ff fba1 	bl	8005ece <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d02f      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x638>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800679c:	2b00      	cmp	r3, #0
 800679e:	d010      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x602>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067a4:	2b10      	cmp	r3, #16
 80067a6:	d00c      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x602>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ac:	2b20      	cmp	r3, #32
 80067ae:	d008      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x602>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067b4:	2b30      	cmp	r3, #48	; 0x30
 80067b6:	d004      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x602>
 80067b8:	f240 11a1 	movw	r1, #417	; 0x1a1
 80067bc:	4811      	ldr	r0, [pc, #68]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80067be:	f7fb fbc4 	bl	8001f4a <assert_failed>
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00c      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d008      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d004      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80067da:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 80067de:	4809      	ldr	r0, [pc, #36]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80067e0:	f7fb fbb3 	bl	8001f4a <assert_failed>

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7ff fb9a 	bl	8005f22 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7ff fb81 	bl	8005efa <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 80067f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3720      	adds	r7, #32
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	0800cef0 	.word	0x0800cef0

08006808 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800680c:	f7ff fb50 	bl	8005eb0 <LL_RCC_MSI_EnablePLLMode>
}
 8006810:	bf00      	nop
 8006812:	bd80      	pop	{r7, pc}

08006814 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800681c:	2300      	movs	r3, #0
 800681e:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b05      	cmp	r3, #5
 8006826:	d903      	bls.n	8006830 <RCCEx_PLLSAI1_ConfigNP+0x1c>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2b7f      	cmp	r3, #127	; 0x7f
 800682e:	d904      	bls.n	800683a <RCCEx_PLLSAI1_ConfigNP+0x26>
 8006830:	f240 718d 	movw	r1, #1933	; 0x78d
 8006834:	4842      	ldr	r0, [pc, #264]	; (8006940 <RCCEx_PLLSAI1_ConfigNP+0x12c>)
 8006836:	f7fb fb88 	bl	8001f4a <assert_failed>
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006842:	d304      	bcc.n	800684e <RCCEx_PLLSAI1_ConfigNP+0x3a>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f5b3 1f78 	cmp.w	r3, #4063232	; 0x3e0000
 800684c:	d904      	bls.n	8006858 <RCCEx_PLLSAI1_ConfigNP+0x44>
 800684e:	f240 718e 	movw	r1, #1934	; 0x78e
 8006852:	483b      	ldr	r0, [pc, #236]	; (8006940 <RCCEx_PLLSAI1_ConfigNP+0x12c>)
 8006854:	f7fb fb79 	bl	8001f4a <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d10b      	bne.n	800687c <RCCEx_PLLSAI1_ConfigNP+0x68>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d105      	bne.n	800687c <RCCEx_PLLSAI1_ConfigNP+0x68>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d007      	beq.n	800688c <RCCEx_PLLSAI1_ConfigNP+0x78>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8006884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006888:	2b00      	cmp	r3, #0
 800688a:	d004      	beq.n	8006896 <RCCEx_PLLSAI1_ConfigNP+0x82>
 800688c:	f240 718f 	movw	r1, #1935	; 0x78f
 8006890:	482b      	ldr	r0, [pc, #172]	; (8006940 <RCCEx_PLLSAI1_ConfigNP+0x12c>)
 8006892:	f7fb fb5a 	bl	8001f4a <assert_failed>

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006896:	f7ff fc72 	bl	800617e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800689a:	f7fc fac5 	bl	8002e28 <HAL_GetTick>
 800689e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80068a0:	e009      	b.n	80068b6 <RCCEx_PLLSAI1_ConfigNP+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80068a2:	f7fc fac1 	bl	8002e28 <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d902      	bls.n	80068b6 <RCCEx_PLLSAI1_ConfigNP+0xa2>
    {
      status = HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	73fb      	strb	r3, [r7, #15]
      break;
 80068b4:	e004      	b.n	80068c0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80068b6:	f7ff fc71 	bl	800619c <LL_RCC_PLLSAI1_IsReady>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1f0      	bne.n	80068a2 <RCCEx_PLLSAI1_ConfigNP+0x8e>
    }
  }

  if (status == HAL_OK)
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d137      	bne.n	8006936 <RCCEx_PLLSAI1_ConfigNP+0x122>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80068c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	021b      	lsls	r3, r3, #8
 80068d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068da:	4313      	orrs	r3, r2
 80068dc:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80068de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068f0:	4313      	orrs	r3, r2
 80068f2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80068f4:	f7ff fc34 	bl	8006160 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068f8:	f7fc fa96 	bl	8002e28 <HAL_GetTick>
 80068fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80068fe:	e009      	b.n	8006914 <RCCEx_PLLSAI1_ConfigNP+0x100>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006900:	f7fc fa92 	bl	8002e28 <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	2b02      	cmp	r3, #2
 800690c:	d902      	bls.n	8006914 <RCCEx_PLLSAI1_ConfigNP+0x100>
      {
        status = HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	73fb      	strb	r3, [r7, #15]
        break;
 8006912:	e004      	b.n	800691e <RCCEx_PLLSAI1_ConfigNP+0x10a>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006914:	f7ff fc42 	bl	800619c <LL_RCC_PLLSAI1_IsReady>
 8006918:	4603      	mov	r3, r0
 800691a:	2b01      	cmp	r3, #1
 800691c:	d1f0      	bne.n	8006900 <RCCEx_PLLSAI1_ConfigNP+0xec>
      }
    }

    if (status == HAL_OK)
 800691e:	7bfb      	ldrb	r3, [r7, #15]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d108      	bne.n	8006936 <RCCEx_PLLSAI1_ConfigNP+0x122>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006928:	691a      	ldr	r2, [r3, #16]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006932:	4313      	orrs	r3, r2
 8006934:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006936:	7bfb      	ldrb	r3, [r7, #15]
}
 8006938:	4618      	mov	r0, r3
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	0800cef0 	.word	0x0800cef0

08006944 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800694c:	2300      	movs	r3, #0
 800694e:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2b05      	cmp	r3, #5
 8006956:	d903      	bls.n	8006960 <RCCEx_PLLSAI1_ConfigNQ+0x1c>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b7f      	cmp	r3, #127	; 0x7f
 800695e:	d904      	bls.n	800696a <RCCEx_PLLSAI1_ConfigNQ+0x26>
 8006960:	f240 71d2 	movw	r1, #2002	; 0x7d2
 8006964:	4842      	ldr	r0, [pc, #264]	; (8006a70 <RCCEx_PLLSAI1_ConfigNQ+0x12c>)
 8006966:	f7fb faf0 	bl	8001f4a <assert_failed>
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006972:	d304      	bcc.n	800697e <RCCEx_PLLSAI1_ConfigNQ+0x3a>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 800697c:	d904      	bls.n	8006988 <RCCEx_PLLSAI1_ConfigNQ+0x44>
 800697e:	f240 71d3 	movw	r1, #2003	; 0x7d3
 8006982:	483b      	ldr	r0, [pc, #236]	; (8006a70 <RCCEx_PLLSAI1_ConfigNQ+0x12c>)
 8006984:	f7fb fae1 	bl	8001f4a <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d10b      	bne.n	80069ac <RCCEx_PLLSAI1_ConfigNQ+0x68>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d105      	bne.n	80069ac <RCCEx_PLLSAI1_ConfigNQ+0x68>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d007      	beq.n	80069bc <RCCEx_PLLSAI1_ConfigNQ+0x78>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80069b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d004      	beq.n	80069c6 <RCCEx_PLLSAI1_ConfigNQ+0x82>
 80069bc:	f240 71d4 	movw	r1, #2004	; 0x7d4
 80069c0:	482b      	ldr	r0, [pc, #172]	; (8006a70 <RCCEx_PLLSAI1_ConfigNQ+0x12c>)
 80069c2:	f7fb fac2 	bl	8001f4a <assert_failed>

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80069c6:	f7ff fbda 	bl	800617e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80069ca:	f7fc fa2d 	bl	8002e28 <HAL_GetTick>
 80069ce:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80069d0:	e009      	b.n	80069e6 <RCCEx_PLLSAI1_ConfigNQ+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069d2:	f7fc fa29 	bl	8002e28 <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d902      	bls.n	80069e6 <RCCEx_PLLSAI1_ConfigNQ+0xa2>
    {
      status = HAL_TIMEOUT;
 80069e0:	2303      	movs	r3, #3
 80069e2:	73fb      	strb	r3, [r7, #15]
      break;
 80069e4:	e004      	b.n	80069f0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80069e6:	f7ff fbd9 	bl	800619c <LL_RCC_PLLSAI1_IsReady>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1f0      	bne.n	80069d2 <RCCEx_PLLSAI1_ConfigNQ+0x8e>
    }
  }

  if (status == HAL_OK)
 80069f0:	7bfb      	ldrb	r3, [r7, #15]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d137      	bne.n	8006a66 <RCCEx_PLLSAI1_ConfigNQ+0x122>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80069f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	021b      	lsls	r3, r3, #8
 8006a06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a20:	4313      	orrs	r3, r2
 8006a22:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006a24:	f7ff fb9c 	bl	8006160 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a28:	f7fc f9fe 	bl	8002e28 <HAL_GetTick>
 8006a2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006a2e:	e009      	b.n	8006a44 <RCCEx_PLLSAI1_ConfigNQ+0x100>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a30:	f7fc f9fa 	bl	8002e28 <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d902      	bls.n	8006a44 <RCCEx_PLLSAI1_ConfigNQ+0x100>
      {
        status = HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	73fb      	strb	r3, [r7, #15]
        break;
 8006a42:	e004      	b.n	8006a4e <RCCEx_PLLSAI1_ConfigNQ+0x10a>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006a44:	f7ff fbaa 	bl	800619c <LL_RCC_PLLSAI1_IsReady>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d1f0      	bne.n	8006a30 <RCCEx_PLLSAI1_ConfigNQ+0xec>
      }
    }

    if (status == HAL_OK)
 8006a4e:	7bfb      	ldrb	r3, [r7, #15]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d108      	bne.n	8006a66 <RCCEx_PLLSAI1_ConfigNQ+0x122>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a58:	691a      	ldr	r2, [r3, #16]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a62:	4313      	orrs	r3, r2
 8006a64:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3710      	adds	r7, #16
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	0800cef0 	.word	0x0800cef0

08006a74 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b05      	cmp	r3, #5
 8006a86:	d903      	bls.n	8006a90 <RCCEx_PLLSAI1_ConfigNR+0x1c>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a8e:	d904      	bls.n	8006a9a <RCCEx_PLLSAI1_ConfigNR+0x26>
 8006a90:	f640 0116 	movw	r1, #2070	; 0x816
 8006a94:	4842      	ldr	r0, [pc, #264]	; (8006ba0 <RCCEx_PLLSAI1_ConfigNR+0x12c>)
 8006a96:	f7fb fa58 	bl	8001f4a <assert_failed>
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aa2:	d304      	bcc.n	8006aae <RCCEx_PLLSAI1_ConfigNR+0x3a>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8006aac:	d904      	bls.n	8006ab8 <RCCEx_PLLSAI1_ConfigNR+0x44>
 8006aae:	f640 0117 	movw	r1, #2071	; 0x817
 8006ab2:	483b      	ldr	r0, [pc, #236]	; (8006ba0 <RCCEx_PLLSAI1_ConfigNR+0x12c>)
 8006ab4:	f7fb fa49 	bl	8001f4a <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10b      	bne.n	8006adc <RCCEx_PLLSAI1_ConfigNR+0x68>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d105      	bne.n	8006adc <RCCEx_PLLSAI1_ConfigNR+0x68>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d007      	beq.n	8006aec <RCCEx_PLLSAI1_ConfigNR+0x78>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8006ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d004      	beq.n	8006af6 <RCCEx_PLLSAI1_ConfigNR+0x82>
 8006aec:	f640 0118 	movw	r1, #2072	; 0x818
 8006af0:	482b      	ldr	r0, [pc, #172]	; (8006ba0 <RCCEx_PLLSAI1_ConfigNR+0x12c>)
 8006af2:	f7fb fa2a 	bl	8001f4a <assert_failed>

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006af6:	f7ff fb42 	bl	800617e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006afa:	f7fc f995 	bl	8002e28 <HAL_GetTick>
 8006afe:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006b00:	e009      	b.n	8006b16 <RCCEx_PLLSAI1_ConfigNR+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b02:	f7fc f991 	bl	8002e28 <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d902      	bls.n	8006b16 <RCCEx_PLLSAI1_ConfigNR+0xa2>
    {
      status = HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	73fb      	strb	r3, [r7, #15]
      break;
 8006b14:	e004      	b.n	8006b20 <RCCEx_PLLSAI1_ConfigNR+0xac>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006b16:	f7ff fb41 	bl	800619c <LL_RCC_PLLSAI1_IsReady>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1f0      	bne.n	8006b02 <RCCEx_PLLSAI1_ConfigNR+0x8e>
    }
  }

  if (status == HAL_OK)
 8006b20:	7bfb      	ldrb	r3, [r7, #15]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d137      	bne.n	8006b96 <RCCEx_PLLSAI1_ConfigNR+0x122>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	021b      	lsls	r3, r3, #8
 8006b36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b50:	4313      	orrs	r3, r2
 8006b52:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006b54:	f7ff fb04 	bl	8006160 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b58:	f7fc f966 	bl	8002e28 <HAL_GetTick>
 8006b5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006b5e:	e009      	b.n	8006b74 <RCCEx_PLLSAI1_ConfigNR+0x100>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b60:	f7fc f962 	bl	8002e28 <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d902      	bls.n	8006b74 <RCCEx_PLLSAI1_ConfigNR+0x100>
      {
        status = HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	73fb      	strb	r3, [r7, #15]
        break;
 8006b72:	e004      	b.n	8006b7e <RCCEx_PLLSAI1_ConfigNR+0x10a>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006b74:	f7ff fb12 	bl	800619c <LL_RCC_PLLSAI1_IsReady>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d1f0      	bne.n	8006b60 <RCCEx_PLLSAI1_ConfigNR+0xec>
      }
    }

    if (status == HAL_OK)
 8006b7e:	7bfb      	ldrb	r3, [r7, #15]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d108      	bne.n	8006b96 <RCCEx_PLLSAI1_ConfigNR+0x122>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b88:	691a      	ldr	r2, [r3, #16]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b92:	4313      	orrs	r3, r2
 8006b94:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	0800cef0 	.word	0x0800cef0

08006ba4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e0f2      	b.n	8006d9c <HAL_RTC_Init+0x1f8>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a7a      	ldr	r2, [pc, #488]	; (8006da4 <HAL_RTC_Init+0x200>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d003      	beq.n	8006bc8 <HAL_RTC_Init+0x24>
 8006bc0:	21f0      	movs	r1, #240	; 0xf0
 8006bc2:	4879      	ldr	r0, [pc, #484]	; (8006da8 <HAL_RTC_Init+0x204>)
 8006bc4:	f7fb f9c1 	bl	8001f4a <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	2b40      	cmp	r3, #64	; 0x40
 8006bce:	d007      	beq.n	8006be0 <HAL_RTC_Init+0x3c>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d003      	beq.n	8006be0 <HAL_RTC_Init+0x3c>
 8006bd8:	21f1      	movs	r1, #241	; 0xf1
 8006bda:	4873      	ldr	r0, [pc, #460]	; (8006da8 <HAL_RTC_Init+0x204>)
 8006bdc:	f7fb f9b5 	bl	8001f4a <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	2b7f      	cmp	r3, #127	; 0x7f
 8006be6:	d903      	bls.n	8006bf0 <HAL_RTC_Init+0x4c>
 8006be8:	21f2      	movs	r1, #242	; 0xf2
 8006bea:	486f      	ldr	r0, [pc, #444]	; (8006da8 <HAL_RTC_Init+0x204>)
 8006bec:	f7fb f9ad 	bl	8001f4a <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bf8:	d303      	bcc.n	8006c02 <HAL_RTC_Init+0x5e>
 8006bfa:	21f3      	movs	r1, #243	; 0xf3
 8006bfc:	486a      	ldr	r0, [pc, #424]	; (8006da8 <HAL_RTC_Init+0x204>)
 8006bfe:	f7fb f9a4 	bl	8001f4a <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d012      	beq.n	8006c30 <HAL_RTC_Init+0x8c>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c12:	d00d      	beq.n	8006c30 <HAL_RTC_Init+0x8c>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c1c:	d008      	beq.n	8006c30 <HAL_RTC_Init+0x8c>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006c26:	d003      	beq.n	8006c30 <HAL_RTC_Init+0x8c>
 8006c28:	21f4      	movs	r1, #244	; 0xf4
 8006c2a:	485f      	ldr	r0, [pc, #380]	; (8006da8 <HAL_RTC_Init+0x204>)
 8006c2c:	f7fb f98d 	bl	8001f4a <assert_failed>
  assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d007      	beq.n	8006c48 <HAL_RTC_Init+0xa4>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d003      	beq.n	8006c48 <HAL_RTC_Init+0xa4>
 8006c40:	21f5      	movs	r1, #245	; 0xf5
 8006c42:	4859      	ldr	r0, [pc, #356]	; (8006da8 <HAL_RTC_Init+0x204>)
 8006c44:	f7fb f981 	bl	8001f4a <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d008      	beq.n	8006c62 <HAL_RTC_Init+0xbe>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c58:	d003      	beq.n	8006c62 <HAL_RTC_Init+0xbe>
 8006c5a:	21f6      	movs	r1, #246	; 0xf6
 8006c5c:	4852      	ldr	r0, [pc, #328]	; (8006da8 <HAL_RTC_Init+0x204>)
 8006c5e:	f7fb f974 	bl	8001f4a <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d007      	beq.n	8006c7a <HAL_RTC_Init+0xd6>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	69db      	ldr	r3, [r3, #28]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d003      	beq.n	8006c7a <HAL_RTC_Init+0xd6>
 8006c72:	21f7      	movs	r1, #247	; 0xf7
 8006c74:	484c      	ldr	r0, [pc, #304]	; (8006da8 <HAL_RTC_Init+0x204>)
 8006c76:	f7fb f968 	bl	8001f4a <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d106      	bne.n	8006c94 <HAL_RTC_Init+0xf0>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7fb f9a6 	bl	8001fe0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2202      	movs	r2, #2
 8006c98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	22ca      	movs	r2, #202	; 0xca
 8006ca2:	625a      	str	r2, [r3, #36]	; 0x24
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2253      	movs	r2, #83	; 0x53
 8006caa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f8a3 	bl	8006df8 <RTC_EnterInitMode>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d009      	beq.n	8006ccc <HAL_RTC_Init+0x128>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	22ff      	movs	r2, #255	; 0xff
 8006cbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2204      	movs	r2, #4
 8006cc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e067      	b.n	8006d9c <HAL_RTC_Init+0x1f8>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	6812      	ldr	r2, [r2, #0]
 8006cd6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006cda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cde:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6899      	ldr	r1, [r3, #8]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685a      	ldr	r2, [r3, #4]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	431a      	orrs	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	431a      	orrs	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	68d2      	ldr	r2, [r2, #12]
 8006d06:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6919      	ldr	r1, [r3, #16]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	041a      	lsls	r2, r3, #16
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68da      	ldr	r2, [r3, #12]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d2a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f022 0203 	bic.w	r2, r2, #3
 8006d3a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	69da      	ldr	r2, [r3, #28]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	430a      	orrs	r2, r1
 8006d52:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f003 0320 	and.w	r3, r3, #32
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d113      	bne.n	8006d8a <HAL_RTC_Init+0x1e6>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f822 	bl	8006dac <HAL_RTC_WaitForSynchro>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00d      	beq.n	8006d8a <HAL_RTC_Init+0x1e6>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	22ff      	movs	r2, #255	; 0xff
 8006d74:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2204      	movs	r2, #4
 8006d7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e008      	b.n	8006d9c <HAL_RTC_Init+0x1f8>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	22ff      	movs	r2, #255	; 0xff
 8006d90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2201      	movs	r2, #1
 8006d96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
  }
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	40002800 	.word	0x40002800
 8006da8:	0800cf64 	.word	0x0800cf64

08006dac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68da      	ldr	r2, [r3, #12]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006dc2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006dc4:	f7fc f830 	bl	8002e28 <HAL_GetTick>
 8006dc8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006dca:	e009      	b.n	8006de0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006dcc:	f7fc f82c 	bl	8002e28 <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006dda:	d901      	bls.n	8006de0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e007      	b.n	8006df0 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	f003 0320 	and.w	r3, r3, #32
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d0ee      	beq.n	8006dcc <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d119      	bne.n	8006e42 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e16:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006e18:	f7fc f806 	bl	8002e28 <HAL_GetTick>
 8006e1c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006e1e:	e009      	b.n	8006e34 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8006e20:	f7fc f802 	bl	8002e28 <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e2e:	d901      	bls.n	8006e34 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e007      	b.n	8006e44 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d0ee      	beq.n	8006e20 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d013      	beq.n	8006e86 <HAL_RTCEx_SetWakeUpTimer+0x3a>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d010      	beq.n	8006e86 <HAL_RTCEx_SetWakeUpTimer+0x3a>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d00d      	beq.n	8006e86 <HAL_RTCEx_SetWakeUpTimer+0x3a>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2b03      	cmp	r3, #3
 8006e6e:	d00a      	beq.n	8006e86 <HAL_RTCEx_SetWakeUpTimer+0x3a>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b04      	cmp	r3, #4
 8006e74:	d007      	beq.n	8006e86 <HAL_RTCEx_SetWakeUpTimer+0x3a>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b06      	cmp	r3, #6
 8006e7a:	d004      	beq.n	8006e86 <HAL_RTCEx_SetWakeUpTimer+0x3a>
 8006e7c:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8006e80:	4850      	ldr	r0, [pc, #320]	; (8006fc4 <HAL_RTCEx_SetWakeUpTimer+0x178>)
 8006e82:	f7fb f862 	bl	8001f4a <assert_failed>
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e8c:	d304      	bcc.n	8006e98 <HAL_RTCEx_SetWakeUpTimer+0x4c>
 8006e8e:	f240 4109 	movw	r1, #1033	; 0x409
 8006e92:	484c      	ldr	r0, [pc, #304]	; (8006fc4 <HAL_RTCEx_SetWakeUpTimer+0x178>)
 8006e94:	f7fb f859 	bl	8001f4a <assert_failed>

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d101      	bne.n	8006ea6 <HAL_RTCEx_SetWakeUpTimer+0x5a>
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	e089      	b.n	8006fba <HAL_RTCEx_SetWakeUpTimer+0x16e>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2202      	movs	r2, #2
 8006eb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	22ca      	movs	r2, #202	; 0xca
 8006ebc:	625a      	str	r2, [r3, #36]	; 0x24
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2253      	movs	r2, #83	; 0x53
 8006ec4:	625a      	str	r2, [r3, #36]	; 0x24
 
  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != 0U){
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d020      	beq.n	8006f16 <HAL_RTCEx_SetWakeUpTimer+0xca>
    tickstart = HAL_GetTick();
 8006ed4:	f7fb ffa8 	bl	8002e28 <HAL_GetTick>
 8006ed8:	6178      	str	r0, [r7, #20]

   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006eda:	e015      	b.n	8006f08 <HAL_RTCEx_SetWakeUpTimer+0xbc>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006edc:	f7fb ffa4 	bl	8002e28 <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006eea:	d90d      	bls.n	8006f08 <HAL_RTCEx_SetWakeUpTimer+0xbc>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	22ff      	movs	r2, #255	; 0xff
 8006ef2:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2203      	movs	r2, #3
 8006ef8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 2020 	strb.w	r2, [r3, #32]

       return HAL_TIMEOUT;
 8006f04:	2303      	movs	r3, #3
 8006f06:	e058      	b.n	8006fba <HAL_RTCEx_SetWakeUpTimer+0x16e>
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	f003 0304 	and.w	r3, r3, #4
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1e2      	bne.n	8006edc <HAL_RTCEx_SetWakeUpTimer+0x90>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	689a      	ldr	r2, [r3, #8]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f24:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8006f26:	f7fb ff7f 	bl	8002e28 <HAL_GetTick>
 8006f2a:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006f2c:	e015      	b.n	8006f5a <HAL_RTCEx_SetWakeUpTimer+0x10e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006f2e:	f7fb ff7b 	bl	8002e28 <HAL_GetTick>
 8006f32:	4602      	mov	r2, r0
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f3c:	d90d      	bls.n	8006f5a <HAL_RTCEx_SetWakeUpTimer+0x10e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	22ff      	movs	r2, #255	; 0xff
 8006f44:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2203      	movs	r2, #3
 8006f4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e02f      	b.n	8006fba <HAL_RTCEx_SetWakeUpTimer+0x16e>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	f003 0304 	and.w	r3, r3, #4
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d0e2      	beq.n	8006f2e <HAL_RTCEx_SetWakeUpTimer+0xe2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	689a      	ldr	r2, [r3, #8]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f022 0207 	bic.w	r2, r2, #7
 8006f76:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6899      	ldr	r1, [r3, #8]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	430a      	orrs	r2, r1
 8006f86:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	615a      	str	r2, [r3, #20]

   /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689a      	ldr	r2, [r3, #8]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f9e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	22ff      	movs	r2, #255	; 0xff
 8006fa6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3718      	adds	r7, #24
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	0800cfd4 	.word	0x0800cfd4

08006fc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d101      	bne.n	8006fda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e176      	b.n	80072c8 <HAL_SPI_Init+0x300>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a99      	ldr	r2, [pc, #612]	; (8007244 <HAL_SPI_Init+0x27c>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d009      	beq.n	8006ff8 <HAL_SPI_Init+0x30>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a97      	ldr	r2, [pc, #604]	; (8007248 <HAL_SPI_Init+0x280>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d004      	beq.n	8006ff8 <HAL_SPI_Init+0x30>
 8006fee:	f240 1147 	movw	r1, #327	; 0x147
 8006ff2:	4896      	ldr	r0, [pc, #600]	; (800724c <HAL_SPI_Init+0x284>)
 8006ff4:	f7fa ffa9 	bl	8001f4a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d009      	beq.n	8007014 <HAL_SPI_Init+0x4c>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007008:	d004      	beq.n	8007014 <HAL_SPI_Init+0x4c>
 800700a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800700e:	488f      	ldr	r0, [pc, #572]	; (800724c <HAL_SPI_Init+0x284>)
 8007010:	f7fa ff9b 	bl	8001f4a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00e      	beq.n	800703a <HAL_SPI_Init+0x72>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007024:	d009      	beq.n	800703a <HAL_SPI_Init+0x72>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800702e:	d004      	beq.n	800703a <HAL_SPI_Init+0x72>
 8007030:	f240 1149 	movw	r1, #329	; 0x149
 8007034:	4885      	ldr	r0, [pc, #532]	; (800724c <HAL_SPI_Init+0x284>)
 8007036:	f7fa ff88 	bl	8001f4a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007042:	d040      	beq.n	80070c6 <HAL_SPI_Init+0xfe>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800704c:	d03b      	beq.n	80070c6 <HAL_SPI_Init+0xfe>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8007056:	d036      	beq.n	80070c6 <HAL_SPI_Init+0xfe>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007060:	d031      	beq.n	80070c6 <HAL_SPI_Init+0xfe>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 800706a:	d02c      	beq.n	80070c6 <HAL_SPI_Init+0xfe>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007074:	d027      	beq.n	80070c6 <HAL_SPI_Init+0xfe>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 800707e:	d022      	beq.n	80070c6 <HAL_SPI_Init+0xfe>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007088:	d01d      	beq.n	80070c6 <HAL_SPI_Init+0xfe>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007092:	d018      	beq.n	80070c6 <HAL_SPI_Init+0xfe>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800709c:	d013      	beq.n	80070c6 <HAL_SPI_Init+0xfe>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80070a6:	d00e      	beq.n	80070c6 <HAL_SPI_Init+0xfe>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070b0:	d009      	beq.n	80070c6 <HAL_SPI_Init+0xfe>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070ba:	d004      	beq.n	80070c6 <HAL_SPI_Init+0xfe>
 80070bc:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80070c0:	4862      	ldr	r0, [pc, #392]	; (800724c <HAL_SPI_Init+0x284>)
 80070c2:	f7fa ff42 	bl	8001f4a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070ce:	d00d      	beq.n	80070ec <HAL_SPI_Init+0x124>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d009      	beq.n	80070ec <HAL_SPI_Init+0x124>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80070e0:	d004      	beq.n	80070ec <HAL_SPI_Init+0x124>
 80070e2:	f240 114b 	movw	r1, #331	; 0x14b
 80070e6:	4859      	ldr	r0, [pc, #356]	; (800724c <HAL_SPI_Init+0x284>)
 80070e8:	f7fa ff2f 	bl	8001f4a <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f0:	2b08      	cmp	r3, #8
 80070f2:	d008      	beq.n	8007106 <HAL_SPI_Init+0x13e>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d004      	beq.n	8007106 <HAL_SPI_Init+0x13e>
 80070fc:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8007100:	4852      	ldr	r0, [pc, #328]	; (800724c <HAL_SPI_Init+0x284>)
 8007102:	f7fa ff22 	bl	8001f4a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	69db      	ldr	r3, [r3, #28]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d020      	beq.n	8007150 <HAL_SPI_Init+0x188>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	2b08      	cmp	r3, #8
 8007114:	d01c      	beq.n	8007150 <HAL_SPI_Init+0x188>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	69db      	ldr	r3, [r3, #28]
 800711a:	2b10      	cmp	r3, #16
 800711c:	d018      	beq.n	8007150 <HAL_SPI_Init+0x188>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	2b18      	cmp	r3, #24
 8007124:	d014      	beq.n	8007150 <HAL_SPI_Init+0x188>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	69db      	ldr	r3, [r3, #28]
 800712a:	2b20      	cmp	r3, #32
 800712c:	d010      	beq.n	8007150 <HAL_SPI_Init+0x188>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	69db      	ldr	r3, [r3, #28]
 8007132:	2b28      	cmp	r3, #40	; 0x28
 8007134:	d00c      	beq.n	8007150 <HAL_SPI_Init+0x188>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	69db      	ldr	r3, [r3, #28]
 800713a:	2b30      	cmp	r3, #48	; 0x30
 800713c:	d008      	beq.n	8007150 <HAL_SPI_Init+0x188>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	2b38      	cmp	r3, #56	; 0x38
 8007144:	d004      	beq.n	8007150 <HAL_SPI_Init+0x188>
 8007146:	f240 114d 	movw	r1, #333	; 0x14d
 800714a:	4840      	ldr	r0, [pc, #256]	; (800724c <HAL_SPI_Init+0x284>)
 800714c:	f7fa fefd 	bl	8001f4a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a1b      	ldr	r3, [r3, #32]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d008      	beq.n	800716a <HAL_SPI_Init+0x1a2>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a1b      	ldr	r3, [r3, #32]
 800715c:	2b80      	cmp	r3, #128	; 0x80
 800715e:	d004      	beq.n	800716a <HAL_SPI_Init+0x1a2>
 8007160:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8007164:	4839      	ldr	r0, [pc, #228]	; (800724c <HAL_SPI_Init+0x284>)
 8007166:	f7fa fef0 	bl	8001f4a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716e:	2b00      	cmp	r3, #0
 8007170:	d008      	beq.n	8007184 <HAL_SPI_Init+0x1bc>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007176:	2b10      	cmp	r3, #16
 8007178:	d004      	beq.n	8007184 <HAL_SPI_Init+0x1bc>
 800717a:	f240 114f 	movw	r1, #335	; 0x14f
 800717e:	4833      	ldr	r0, [pc, #204]	; (800724c <HAL_SPI_Init+0x284>)
 8007180:	f7fa fee3 	bl	8001f4a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007188:	2b00      	cmp	r3, #0
 800718a:	d119      	bne.n	80071c0 <HAL_SPI_Init+0x1f8>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d008      	beq.n	80071a6 <HAL_SPI_Init+0x1de>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	2b02      	cmp	r3, #2
 800719a:	d004      	beq.n	80071a6 <HAL_SPI_Init+0x1de>
 800719c:	f44f 71a9 	mov.w	r1, #338	; 0x152
 80071a0:	482a      	ldr	r0, [pc, #168]	; (800724c <HAL_SPI_Init+0x284>)
 80071a2:	f7fa fed2 	bl	8001f4a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	695b      	ldr	r3, [r3, #20]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d008      	beq.n	80071c0 <HAL_SPI_Init+0x1f8>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d004      	beq.n	80071c0 <HAL_SPI_Init+0x1f8>
 80071b6:	f240 1153 	movw	r1, #339	; 0x153
 80071ba:	4824      	ldr	r0, [pc, #144]	; (800724c <HAL_SPI_Init+0x284>)
 80071bc:	f7fa fec5 	bl	8001f4a <assert_failed>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d106      	bne.n	80071e0 <HAL_SPI_Init+0x218>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f7fa ff82 	bl	80020e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2202      	movs	r2, #2
 80071e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007200:	d902      	bls.n	8007208 <HAL_SPI_Init+0x240>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007202:	2300      	movs	r3, #0
 8007204:	60fb      	str	r3, [r7, #12]
 8007206:	e002      	b.n	800720e <HAL_SPI_Init+0x246>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800720c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007216:	d007      	beq.n	8007228 <HAL_SPI_Init+0x260>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007220:	d002      	beq.n	8007228 <HAL_SPI_Init+0x260>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722c:	2b00      	cmp	r3, #0
 800722e:	d112      	bne.n	8007256 <HAL_SPI_Init+0x28e>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007238:	d90a      	bls.n	8007250 <HAL_SPI_Init+0x288>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2202      	movs	r2, #2
 800723e:	631a      	str	r2, [r3, #48]	; 0x30
 8007240:	e009      	b.n	8007256 <HAL_SPI_Init+0x28e>
 8007242:	bf00      	nop
 8007244:	40013000 	.word	0x40013000
 8007248:	40003800 	.word	0x40003800
 800724c:	0800d048 	.word	0x0800d048
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685a      	ldr	r2, [r3, #4]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	431a      	orrs	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	431a      	orrs	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	431a      	orrs	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	699b      	ldr	r3, [r3, #24]
 8007270:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007274:	431a      	orrs	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	69db      	ldr	r3, [r3, #28]
 800727a:	431a      	orrs	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a1b      	ldr	r3, [r3, #32]
 8007280:	ea42 0103 	orr.w	r1, r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	0c1b      	lsrs	r3, r3, #16
 8007296:	f003 0204 	and.w	r2, r3, #4
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729e:	431a      	orrs	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a4:	431a      	orrs	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	ea42 0103 	orr.w	r1, r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	430a      	orrs	r2, r1
 80072b6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b088      	sub	sp, #32
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	603b      	str	r3, [r7, #0]
 80072dc:	4613      	mov	r3, r2
 80072de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80072e0:	2300      	movs	r3, #0
 80072e2:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d009      	beq.n	8007300 <HAL_SPI_Transmit+0x30>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072f4:	d004      	beq.n	8007300 <HAL_SPI_Transmit+0x30>
 80072f6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80072fa:	4895      	ldr	r0, [pc, #596]	; (8007550 <HAL_SPI_Transmit+0x280>)
 80072fc:	f7fa fe25 	bl	8001f4a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007306:	2b01      	cmp	r3, #1
 8007308:	d101      	bne.n	800730e <HAL_SPI_Transmit+0x3e>
 800730a:	2302      	movs	r3, #2
 800730c:	e152      	b.n	80075b4 <HAL_SPI_Transmit+0x2e4>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007316:	f7fb fd87 	bl	8002e28 <HAL_GetTick>
 800731a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800731c:	88fb      	ldrh	r3, [r7, #6]
 800731e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007326:	b2db      	uxtb	r3, r3
 8007328:	2b01      	cmp	r3, #1
 800732a:	d002      	beq.n	8007332 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 800732c:	2302      	movs	r3, #2
 800732e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007330:	e137      	b.n	80075a2 <HAL_SPI_Transmit+0x2d2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d002      	beq.n	800733e <HAL_SPI_Transmit+0x6e>
 8007338:	88fb      	ldrh	r3, [r7, #6]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d102      	bne.n	8007344 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007342:	e12e      	b.n	80075a2 <HAL_SPI_Transmit+0x2d2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2203      	movs	r2, #3
 8007348:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	88fa      	ldrh	r2, [r7, #6]
 800735c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	88fa      	ldrh	r2, [r7, #6]
 8007362:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800738e:	d107      	bne.n	80073a0 <HAL_SPI_Transmit+0xd0>
  {
    SPI_1LINE_TX(hspi);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800739e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073aa:	2b40      	cmp	r3, #64	; 0x40
 80073ac:	d007      	beq.n	80073be <HAL_SPI_Transmit+0xee>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073c6:	d94b      	bls.n	8007460 <HAL_SPI_Transmit+0x190>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d002      	beq.n	80073d6 <HAL_SPI_Transmit+0x106>
 80073d0:	8afb      	ldrh	r3, [r7, #22]
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d13e      	bne.n	8007454 <HAL_SPI_Transmit+0x184>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073da:	881a      	ldrh	r2, [r3, #0]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e6:	1c9a      	adds	r2, r3, #2
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	3b01      	subs	r3, #1
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80073fa:	e02b      	b.n	8007454 <HAL_SPI_Transmit+0x184>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	f003 0302 	and.w	r3, r3, #2
 8007406:	2b02      	cmp	r3, #2
 8007408:	d112      	bne.n	8007430 <HAL_SPI_Transmit+0x160>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740e:	881a      	ldrh	r2, [r3, #0]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741a:	1c9a      	adds	r2, r3, #2
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007424:	b29b      	uxth	r3, r3
 8007426:	3b01      	subs	r3, #1
 8007428:	b29a      	uxth	r2, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800742e:	e011      	b.n	8007454 <HAL_SPI_Transmit+0x184>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007430:	f7fb fcfa 	bl	8002e28 <HAL_GetTick>
 8007434:	4602      	mov	r2, r0
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	429a      	cmp	r2, r3
 800743e:	d803      	bhi.n	8007448 <HAL_SPI_Transmit+0x178>
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007446:	d102      	bne.n	800744e <HAL_SPI_Transmit+0x17e>
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d102      	bne.n	8007454 <HAL_SPI_Transmit+0x184>
        {
          errorcode = HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007452:	e0a6      	b.n	80075a2 <HAL_SPI_Transmit+0x2d2>
    while (hspi->TxXferCount > 0U)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007458:	b29b      	uxth	r3, r3
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1ce      	bne.n	80073fc <HAL_SPI_Transmit+0x12c>
 800745e:	e07e      	b.n	800755e <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d002      	beq.n	800746e <HAL_SPI_Transmit+0x19e>
 8007468:	8afb      	ldrh	r3, [r7, #22]
 800746a:	2b01      	cmp	r3, #1
 800746c:	d172      	bne.n	8007554 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007472:	b29b      	uxth	r3, r3
 8007474:	2b01      	cmp	r3, #1
 8007476:	d912      	bls.n	800749e <HAL_SPI_Transmit+0x1ce>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747c:	881a      	ldrh	r2, [r3, #0]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007488:	1c9a      	adds	r2, r3, #2
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007492:	b29b      	uxth	r3, r3
 8007494:	3b02      	subs	r3, #2
 8007496:	b29a      	uxth	r2, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800749c:	e05a      	b.n	8007554 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	330c      	adds	r3, #12
 80074a8:	7812      	ldrb	r2, [r2, #0]
 80074aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b0:	1c5a      	adds	r2, r3, #1
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	3b01      	subs	r3, #1
 80074be:	b29a      	uxth	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80074c4:	e046      	b.n	8007554 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	f003 0302 	and.w	r3, r3, #2
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d12b      	bne.n	800752c <HAL_SPI_Transmit+0x25c>
      {
        if (hspi->TxXferCount > 1U)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074d8:	b29b      	uxth	r3, r3
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d912      	bls.n	8007504 <HAL_SPI_Transmit+0x234>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e2:	881a      	ldrh	r2, [r3, #0]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ee:	1c9a      	adds	r2, r3, #2
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	3b02      	subs	r3, #2
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007502:	e027      	b.n	8007554 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	330c      	adds	r3, #12
 800750e:	7812      	ldrb	r2, [r2, #0]
 8007510:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007516:	1c5a      	adds	r2, r3, #1
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007520:	b29b      	uxth	r3, r3
 8007522:	3b01      	subs	r3, #1
 8007524:	b29a      	uxth	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	87da      	strh	r2, [r3, #62]	; 0x3e
 800752a:	e013      	b.n	8007554 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800752c:	f7fb fc7c 	bl	8002e28 <HAL_GetTick>
 8007530:	4602      	mov	r2, r0
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	683a      	ldr	r2, [r7, #0]
 8007538:	429a      	cmp	r2, r3
 800753a:	d803      	bhi.n	8007544 <HAL_SPI_Transmit+0x274>
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007542:	d102      	bne.n	800754a <HAL_SPI_Transmit+0x27a>
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d104      	bne.n	8007554 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800754e:	e028      	b.n	80075a2 <HAL_SPI_Transmit+0x2d2>
 8007550:	0800d048 	.word	0x0800d048
    while (hspi->TxXferCount > 0U)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007558:	b29b      	uxth	r3, r3
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1b3      	bne.n	80074c6 <HAL_SPI_Transmit+0x1f6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800755e:	69ba      	ldr	r2, [r7, #24]
 8007560:	6839      	ldr	r1, [r7, #0]
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f000 fc9f 	bl	8007ea6 <SPI_EndRxTxTransaction>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d002      	beq.n	8007574 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2220      	movs	r2, #32
 8007572:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d10a      	bne.n	8007592 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800757c:	2300      	movs	r3, #0
 800757e:	613b      	str	r3, [r7, #16]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	613b      	str	r3, [r7, #16]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	613b      	str	r3, [r7, #16]
 8007590:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007596:	2b00      	cmp	r3, #0
 8007598:	d002      	beq.n	80075a0 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	77fb      	strb	r3, [r7, #31]
 800759e:	e000      	b.n	80075a2 <HAL_SPI_Transmit+0x2d2>
  }

error:
 80075a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80075b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3720      	adds	r7, #32
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b088      	sub	sp, #32
 80075c0:	af02      	add	r7, sp, #8
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	603b      	str	r3, [r7, #0]
 80075c8:	4613      	mov	r3, r2
 80075ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80075cc:	2300      	movs	r3, #0
 80075ce:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075d8:	d112      	bne.n	8007600 <HAL_SPI_Receive+0x44>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10e      	bne.n	8007600 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2204      	movs	r2, #4
 80075e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80075ea:	88fa      	ldrh	r2, [r7, #6]
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	4613      	mov	r3, r2
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	68b9      	ldr	r1, [r7, #8]
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f000 f908 	bl	800780c <HAL_SPI_TransmitReceive>
 80075fc:	4603      	mov	r3, r0
 80075fe:	e101      	b.n	8007804 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007606:	2b01      	cmp	r3, #1
 8007608:	d101      	bne.n	800760e <HAL_SPI_Receive+0x52>
 800760a:	2302      	movs	r3, #2
 800760c:	e0fa      	b.n	8007804 <HAL_SPI_Receive+0x248>
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007616:	f7fb fc07 	bl	8002e28 <HAL_GetTick>
 800761a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007622:	b2db      	uxtb	r3, r3
 8007624:	2b01      	cmp	r3, #1
 8007626:	d002      	beq.n	800762e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007628:	2302      	movs	r3, #2
 800762a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800762c:	e0e1      	b.n	80077f2 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d002      	beq.n	800763a <HAL_SPI_Receive+0x7e>
 8007634:	88fb      	ldrh	r3, [r7, #6]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d102      	bne.n	8007640 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800763e:	e0d8      	b.n	80077f2 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2204      	movs	r2, #4
 8007644:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2200      	movs	r2, #0
 800764c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	88fa      	ldrh	r2, [r7, #6]
 8007658:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	88fa      	ldrh	r2, [r7, #6]
 8007660:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2200      	movs	r2, #0
 8007674:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800768a:	d908      	bls.n	800769e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	685a      	ldr	r2, [r3, #4]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800769a:	605a      	str	r2, [r3, #4]
 800769c:	e007      	b.n	80076ae <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	685a      	ldr	r2, [r3, #4]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076ac:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076b6:	d107      	bne.n	80076c8 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80076c6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d2:	2b40      	cmp	r3, #64	; 0x40
 80076d4:	d007      	beq.n	80076e6 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076e4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80076ee:	d867      	bhi.n	80077c0 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80076f0:	e030      	b.n	8007754 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f003 0301 	and.w	r3, r3, #1
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d117      	bne.n	8007730 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f103 020c 	add.w	r2, r3, #12
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770c:	7812      	ldrb	r2, [r2, #0]
 800770e:	b2d2      	uxtb	r2, r2
 8007710:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007716:	1c5a      	adds	r2, r3, #1
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007722:	b29b      	uxth	r3, r3
 8007724:	3b01      	subs	r3, #1
 8007726:	b29a      	uxth	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800772e:	e011      	b.n	8007754 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007730:	f7fb fb7a 	bl	8002e28 <HAL_GetTick>
 8007734:	4602      	mov	r2, r0
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	683a      	ldr	r2, [r7, #0]
 800773c:	429a      	cmp	r2, r3
 800773e:	d803      	bhi.n	8007748 <HAL_SPI_Receive+0x18c>
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007746:	d102      	bne.n	800774e <HAL_SPI_Receive+0x192>
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d102      	bne.n	8007754 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007752:	e04e      	b.n	80077f2 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800775a:	b29b      	uxth	r3, r3
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1c8      	bne.n	80076f2 <HAL_SPI_Receive+0x136>
 8007760:	e034      	b.n	80077cc <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f003 0301 	and.w	r3, r3, #1
 800776c:	2b01      	cmp	r3, #1
 800776e:	d115      	bne.n	800779c <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68da      	ldr	r2, [r3, #12]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777a:	b292      	uxth	r2, r2
 800777c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007782:	1c9a      	adds	r2, r3, #2
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800778e:	b29b      	uxth	r3, r3
 8007790:	3b01      	subs	r3, #1
 8007792:	b29a      	uxth	r2, r3
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800779a:	e011      	b.n	80077c0 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800779c:	f7fb fb44 	bl	8002e28 <HAL_GetTick>
 80077a0:	4602      	mov	r2, r0
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	1ad3      	subs	r3, r2, r3
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d803      	bhi.n	80077b4 <HAL_SPI_Receive+0x1f8>
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077b2:	d102      	bne.n	80077ba <HAL_SPI_Receive+0x1fe>
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d102      	bne.n	80077c0 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80077be:	e018      	b.n	80077f2 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1ca      	bne.n	8007762 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	6839      	ldr	r1, [r7, #0]
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f000 fb10 	bl	8007df6 <SPI_EndRxTransaction>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d002      	beq.n	80077e2 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2220      	movs	r2, #32
 80077e0:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d002      	beq.n	80077f0 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	75fb      	strb	r3, [r7, #23]
 80077ee:	e000      	b.n	80077f2 <HAL_SPI_Receive+0x236>
  }

error :
 80077f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007802:	7dfb      	ldrb	r3, [r7, #23]
}
 8007804:	4618      	mov	r0, r3
 8007806:	3718      	adds	r7, #24
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b08a      	sub	sp, #40	; 0x28
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
 8007818:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800781a:	2301      	movs	r3, #1
 800781c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800781e:	2300      	movs	r3, #0
 8007820:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d004      	beq.n	8007836 <HAL_SPI_TransmitReceive+0x2a>
 800782c:	f240 41c3 	movw	r1, #1219	; 0x4c3
 8007830:	4895      	ldr	r0, [pc, #596]	; (8007a88 <HAL_SPI_TransmitReceive+0x27c>)
 8007832:	f7fa fb8a 	bl	8001f4a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800783c:	2b01      	cmp	r3, #1
 800783e:	d101      	bne.n	8007844 <HAL_SPI_TransmitReceive+0x38>
 8007840:	2302      	movs	r3, #2
 8007842:	e1fd      	b.n	8007c40 <HAL_SPI_TransmitReceive+0x434>
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800784c:	f7fb faec 	bl	8002e28 <HAL_GetTick>
 8007850:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007858:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007860:	887b      	ldrh	r3, [r7, #2]
 8007862:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007864:	887b      	ldrh	r3, [r7, #2]
 8007866:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007868:	7efb      	ldrb	r3, [r7, #27]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d00e      	beq.n	800788c <HAL_SPI_TransmitReceive+0x80>
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007874:	d106      	bne.n	8007884 <HAL_SPI_TransmitReceive+0x78>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d102      	bne.n	8007884 <HAL_SPI_TransmitReceive+0x78>
 800787e:	7efb      	ldrb	r3, [r7, #27]
 8007880:	2b04      	cmp	r3, #4
 8007882:	d003      	beq.n	800788c <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 8007884:	2302      	movs	r3, #2
 8007886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800788a:	e1cf      	b.n	8007c2c <HAL_SPI_TransmitReceive+0x420>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d005      	beq.n	800789e <HAL_SPI_TransmitReceive+0x92>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d002      	beq.n	800789e <HAL_SPI_TransmitReceive+0x92>
 8007898:	887b      	ldrh	r3, [r7, #2]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d103      	bne.n	80078a6 <HAL_SPI_TransmitReceive+0x9a>
  {
    errorcode = HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80078a4:	e1c2      	b.n	8007c2c <HAL_SPI_TransmitReceive+0x420>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	2b04      	cmp	r3, #4
 80078b0:	d003      	beq.n	80078ba <HAL_SPI_TransmitReceive+0xae>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2205      	movs	r2, #5
 80078b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	887a      	ldrh	r2, [r7, #2]
 80078ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	887a      	ldrh	r2, [r7, #2]
 80078d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	887a      	ldrh	r2, [r7, #2]
 80078e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	887a      	ldrh	r2, [r7, #2]
 80078e6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2200      	movs	r2, #0
 80078ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80078fc:	d802      	bhi.n	8007904 <HAL_SPI_TransmitReceive+0xf8>
 80078fe:	8a3b      	ldrh	r3, [r7, #16]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d908      	bls.n	8007916 <HAL_SPI_TransmitReceive+0x10a>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	685a      	ldr	r2, [r3, #4]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007912:	605a      	str	r2, [r3, #4]
 8007914:	e007      	b.n	8007926 <HAL_SPI_TransmitReceive+0x11a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	685a      	ldr	r2, [r3, #4]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007924:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007930:	2b40      	cmp	r3, #64	; 0x40
 8007932:	d007      	beq.n	8007944 <HAL_SPI_TransmitReceive+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007942:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800794c:	d97c      	bls.n	8007a48 <HAL_SPI_TransmitReceive+0x23c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d002      	beq.n	800795c <HAL_SPI_TransmitReceive+0x150>
 8007956:	8a7b      	ldrh	r3, [r7, #18]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d169      	bne.n	8007a30 <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007960:	881a      	ldrh	r2, [r3, #0]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796c:	1c9a      	adds	r2, r3, #2
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007976:	b29b      	uxth	r3, r3
 8007978:	3b01      	subs	r3, #1
 800797a:	b29a      	uxth	r2, r3
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007980:	e056      	b.n	8007a30 <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	f003 0302 	and.w	r3, r3, #2
 800798c:	2b02      	cmp	r3, #2
 800798e:	d11b      	bne.n	80079c8 <HAL_SPI_TransmitReceive+0x1bc>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007994:	b29b      	uxth	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d016      	beq.n	80079c8 <HAL_SPI_TransmitReceive+0x1bc>
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	2b01      	cmp	r3, #1
 800799e:	d113      	bne.n	80079c8 <HAL_SPI_TransmitReceive+0x1bc>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a4:	881a      	ldrh	r2, [r3, #0]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b0:	1c9a      	adds	r2, r3, #2
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	3b01      	subs	r3, #1
 80079be:	b29a      	uxth	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d11c      	bne.n	8007a10 <HAL_SPI_TransmitReceive+0x204>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079dc:	b29b      	uxth	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d016      	beq.n	8007a10 <HAL_SPI_TransmitReceive+0x204>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68da      	ldr	r2, [r3, #12]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ec:	b292      	uxth	r2, r2
 80079ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f4:	1c9a      	adds	r2, r3, #2
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	3b01      	subs	r3, #1
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a10:	f7fb fa0a 	bl	8002e28 <HAL_GetTick>
 8007a14:	4602      	mov	r2, r0
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d807      	bhi.n	8007a30 <HAL_SPI_TransmitReceive+0x224>
 8007a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a26:	d003      	beq.n	8007a30 <HAL_SPI_TransmitReceive+0x224>
      {
        errorcode = HAL_TIMEOUT;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007a2e:	e0fd      	b.n	8007c2c <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1a3      	bne.n	8007982 <HAL_SPI_TransmitReceive+0x176>
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d19d      	bne.n	8007982 <HAL_SPI_TransmitReceive+0x176>
 8007a46:	e0e1      	b.n	8007c0c <HAL_SPI_TransmitReceive+0x400>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d003      	beq.n	8007a58 <HAL_SPI_TransmitReceive+0x24c>
 8007a50:	8a7b      	ldrh	r3, [r7, #18]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	f040 80cd 	bne.w	8007bf2 <HAL_SPI_TransmitReceive+0x3e6>
    {
      if (hspi->TxXferCount > 1U)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d914      	bls.n	8007a8c <HAL_SPI_TransmitReceive+0x280>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a66:	881a      	ldrh	r2, [r3, #0]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a72:	1c9a      	adds	r2, r3, #2
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	3b02      	subs	r3, #2
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a86:	e0b4      	b.n	8007bf2 <HAL_SPI_TransmitReceive+0x3e6>
 8007a88:	0800d048 	.word	0x0800d048
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	330c      	adds	r3, #12
 8007a96:	7812      	ldrb	r2, [r2, #0]
 8007a98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a9e:	1c5a      	adds	r2, r3, #1
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ab2:	e09e      	b.n	8007bf2 <HAL_SPI_TransmitReceive+0x3e6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	f003 0302 	and.w	r3, r3, #2
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d134      	bne.n	8007b2c <HAL_SPI_TransmitReceive+0x320>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d02f      	beq.n	8007b2c <HAL_SPI_TransmitReceive+0x320>
 8007acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d12c      	bne.n	8007b2c <HAL_SPI_TransmitReceive+0x320>
      {
        if (hspi->TxXferCount > 1U)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d912      	bls.n	8007b02 <HAL_SPI_TransmitReceive+0x2f6>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae0:	881a      	ldrh	r2, [r3, #0]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aec:	1c9a      	adds	r2, r3, #2
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	3b02      	subs	r3, #2
 8007afa:	b29a      	uxth	r2, r3
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b00:	e012      	b.n	8007b28 <HAL_SPI_TransmitReceive+0x31c>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	330c      	adds	r3, #12
 8007b0c:	7812      	ldrb	r2, [r2, #0]
 8007b0e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b14:	1c5a      	adds	r2, r3, #1
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	3b01      	subs	r3, #1
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f003 0301 	and.w	r3, r3, #1
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d148      	bne.n	8007bcc <HAL_SPI_TransmitReceive+0x3c0>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d042      	beq.n	8007bcc <HAL_SPI_TransmitReceive+0x3c0>
      {
        if (hspi->RxXferCount > 1U)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d923      	bls.n	8007b9a <HAL_SPI_TransmitReceive+0x38e>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68da      	ldr	r2, [r3, #12]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5c:	b292      	uxth	r2, r2
 8007b5e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b64:	1c9a      	adds	r2, r3, #2
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	3b02      	subs	r3, #2
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d81f      	bhi.n	8007bc8 <HAL_SPI_TransmitReceive+0x3bc>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b96:	605a      	str	r2, [r3, #4]
 8007b98:	e016      	b.n	8007bc8 <HAL_SPI_TransmitReceive+0x3bc>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f103 020c 	add.w	r2, r3, #12
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba6:	7812      	ldrb	r2, [r2, #0]
 8007ba8:	b2d2      	uxtb	r2, r2
 8007baa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb0:	1c5a      	adds	r2, r3, #1
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007bcc:	f7fb f92c 	bl	8002e28 <HAL_GetTick>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d803      	bhi.n	8007be4 <HAL_SPI_TransmitReceive+0x3d8>
 8007bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007be2:	d102      	bne.n	8007bea <HAL_SPI_TransmitReceive+0x3de>
 8007be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d103      	bne.n	8007bf2 <HAL_SPI_TransmitReceive+0x3e6>
      {
        errorcode = HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007bf0:	e01c      	b.n	8007c2c <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f47f af5b 	bne.w	8007ab4 <HAL_SPI_TransmitReceive+0x2a8>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f47f af54 	bne.w	8007ab4 <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c0c:	69fa      	ldr	r2, [r7, #28]
 8007c0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f000 f948 	bl	8007ea6 <SPI_EndRxTxTransaction>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d006      	beq.n	8007c2a <HAL_SPI_TransmitReceive+0x41e>
  {
    errorcode = HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2220      	movs	r2, #32
 8007c26:	661a      	str	r2, [r3, #96]	; 0x60
 8007c28:	e000      	b.n	8007c2c <HAL_SPI_TransmitReceive+0x420>
  }

error :
 8007c2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007c3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3728      	adds	r7, #40	; 0x28
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	603b      	str	r3, [r7, #0]
 8007c54:	4613      	mov	r3, r2
 8007c56:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c58:	e04c      	b.n	8007cf4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c60:	d048      	beq.n	8007cf4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007c62:	f7fb f8e1 	bl	8002e28 <HAL_GetTick>
 8007c66:	4602      	mov	r2, r0
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	1ad3      	subs	r3, r2, r3
 8007c6c:	683a      	ldr	r2, [r7, #0]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d902      	bls.n	8007c78 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d13d      	bne.n	8007cf4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	685a      	ldr	r2, [r3, #4]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c86:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c90:	d111      	bne.n	8007cb6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c9a:	d004      	beq.n	8007ca6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ca4:	d107      	bne.n	8007cb6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cb4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cbe:	d10f      	bne.n	8007ce0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007cce:	601a      	str	r2, [r3, #0]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cde:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	e00f      	b.n	8007d14 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	689a      	ldr	r2, [r3, #8]
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	68ba      	ldr	r2, [r7, #8]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	bf0c      	ite	eq
 8007d04:	2301      	moveq	r3, #1
 8007d06:	2300      	movne	r3, #0
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	79fb      	ldrb	r3, [r7, #7]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d1a3      	bne.n	8007c5a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
 8007d28:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8007d2a:	e057      	b.n	8007ddc <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007d32:	d106      	bne.n	8007d42 <SPI_WaitFifoStateUntilTimeout+0x26>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d103      	bne.n	8007d42 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	330c      	adds	r3, #12
 8007d40:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d48:	d048      	beq.n	8007ddc <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007d4a:	f7fb f86d 	bl	8002e28 <HAL_GetTick>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	683a      	ldr	r2, [r7, #0]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d902      	bls.n	8007d60 <SPI_WaitFifoStateUntilTimeout+0x44>
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d13d      	bne.n	8007ddc <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	685a      	ldr	r2, [r3, #4]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007d6e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d78:	d111      	bne.n	8007d9e <SPI_WaitFifoStateUntilTimeout+0x82>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d82:	d004      	beq.n	8007d8e <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d8c:	d107      	bne.n	8007d9e <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007da6:	d10f      	bne.n	8007dc8 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007db6:	601a      	str	r2, [r3, #0]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007dc6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e008      	b.n	8007dee <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	689a      	ldr	r2, [r3, #8]
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	4013      	ands	r3, r2
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d19f      	bne.n	8007d2c <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b086      	sub	sp, #24
 8007dfa:	af02      	add	r7, sp, #8
 8007dfc:	60f8      	str	r0, [r7, #12]
 8007dfe:	60b9      	str	r1, [r7, #8]
 8007e00:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e0a:	d111      	bne.n	8007e30 <SPI_EndRxTransaction+0x3a>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e14:	d004      	beq.n	8007e20 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e1e:	d107      	bne.n	8007e30 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e2e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	2200      	movs	r2, #0
 8007e38:	2180      	movs	r1, #128	; 0x80
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f7ff ff04 	bl	8007c48 <SPI_WaitFlagStateUntilTimeout>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d007      	beq.n	8007e56 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e4a:	f043 0220 	orr.w	r2, r3, #32
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007e52:	2303      	movs	r3, #3
 8007e54:	e023      	b.n	8007e9e <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e5e:	d11d      	bne.n	8007e9c <SPI_EndRxTransaction+0xa6>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e68:	d004      	beq.n	8007e74 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e72:	d113      	bne.n	8007e9c <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	9300      	str	r3, [sp, #0]
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f7ff ff4b 	bl	8007d1c <SPI_WaitFifoStateUntilTimeout>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d007      	beq.n	8007e9c <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e90:	f043 0220 	orr.w	r2, r3, #32
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e000      	b.n	8007e9e <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b086      	sub	sp, #24
 8007eaa:	af02      	add	r7, sp, #8
 8007eac:	60f8      	str	r0, [r7, #12]
 8007eae:	60b9      	str	r1, [r7, #8]
 8007eb0:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f7ff ff2c 	bl	8007d1c <SPI_WaitFifoStateUntilTimeout>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d007      	beq.n	8007eda <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ece:	f043 0220 	orr.w	r2, r3, #32
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e027      	b.n	8007f2a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	9300      	str	r3, [sp, #0]
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	2180      	movs	r1, #128	; 0x80
 8007ee4:	68f8      	ldr	r0, [r7, #12]
 8007ee6:	f7ff feaf 	bl	8007c48 <SPI_WaitFlagStateUntilTimeout>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d007      	beq.n	8007f00 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ef4:	f043 0220 	orr.w	r2, r3, #32
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007efc:	2303      	movs	r3, #3
 8007efe:	e014      	b.n	8007f2a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	9300      	str	r3, [sp, #0]
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f7ff ff05 	bl	8007d1c <SPI_WaitFifoStateUntilTimeout>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d007      	beq.n	8007f28 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f1c:	f043 0220 	orr.w	r2, r3, #32
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007f24:	2303      	movs	r3, #3
 8007f26:	e000      	b.n	8007f2a <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
	...

08007f34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d101      	bne.n	8007f46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e06f      	b.n	8008026 <HAL_TIM_Base_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a39      	ldr	r2, [pc, #228]	; (8008030 <HAL_TIM_Base_Init+0xfc>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d013      	beq.n	8007f78 <HAL_TIM_Base_Init+0x44>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f58:	d00e      	beq.n	8007f78 <HAL_TIM_Base_Init+0x44>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a35      	ldr	r2, [pc, #212]	; (8008034 <HAL_TIM_Base_Init+0x100>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d009      	beq.n	8007f78 <HAL_TIM_Base_Init+0x44>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a33      	ldr	r2, [pc, #204]	; (8008038 <HAL_TIM_Base_Init+0x104>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d004      	beq.n	8007f78 <HAL_TIM_Base_Init+0x44>
 8007f6e:	f240 111d 	movw	r1, #285	; 0x11d
 8007f72:	4832      	ldr	r0, [pc, #200]	; (800803c <HAL_TIM_Base_Init+0x108>)
 8007f74:	f7f9 ffe9 	bl	8001f4a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d014      	beq.n	8007faa <HAL_TIM_Base_Init+0x76>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	2b10      	cmp	r3, #16
 8007f86:	d010      	beq.n	8007faa <HAL_TIM_Base_Init+0x76>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	2b20      	cmp	r3, #32
 8007f8e:	d00c      	beq.n	8007faa <HAL_TIM_Base_Init+0x76>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	2b40      	cmp	r3, #64	; 0x40
 8007f96:	d008      	beq.n	8007faa <HAL_TIM_Base_Init+0x76>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	2b60      	cmp	r3, #96	; 0x60
 8007f9e:	d004      	beq.n	8007faa <HAL_TIM_Base_Init+0x76>
 8007fa0:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8007fa4:	4825      	ldr	r0, [pc, #148]	; (800803c <HAL_TIM_Base_Init+0x108>)
 8007fa6:	f7f9 ffd0 	bl	8001f4a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d00e      	beq.n	8007fd0 <HAL_TIM_Base_Init+0x9c>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fba:	d009      	beq.n	8007fd0 <HAL_TIM_Base_Init+0x9c>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fc4:	d004      	beq.n	8007fd0 <HAL_TIM_Base_Init+0x9c>
 8007fc6:	f240 111f 	movw	r1, #287	; 0x11f
 8007fca:	481c      	ldr	r0, [pc, #112]	; (800803c <HAL_TIM_Base_Init+0x108>)
 8007fcc:	f7f9 ffbd 	bl	8001f4a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	699b      	ldr	r3, [r3, #24]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d008      	beq.n	8007fea <HAL_TIM_Base_Init+0xb6>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	2b80      	cmp	r3, #128	; 0x80
 8007fde:	d004      	beq.n	8007fea <HAL_TIM_Base_Init+0xb6>
 8007fe0:	f44f 7190 	mov.w	r1, #288	; 0x120
 8007fe4:	4815      	ldr	r0, [pc, #84]	; (800803c <HAL_TIM_Base_Init+0x108>)
 8007fe6:	f7f9 ffb0 	bl	8001f4a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d106      	bne.n	8008004 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f7fa fd1a 	bl	8002a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2202      	movs	r2, #2
 8008008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	3304      	adds	r3, #4
 8008014:	4619      	mov	r1, r3
 8008016:	4610      	mov	r0, r2
 8008018:	f000 f9a4 	bl	8008364 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3708      	adds	r7, #8
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	40012c00 	.word	0x40012c00
 8008034:	40014400 	.word	0x40014400
 8008038:	40014800 	.word	0x40014800
 800803c:	0800d0b8 	.word	0x0800d0b8

08008040 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a1c      	ldr	r2, [pc, #112]	; (80080c0 <HAL_TIM_Base_Start_IT+0x80>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d013      	beq.n	800807a <HAL_TIM_Base_Start_IT+0x3a>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800805a:	d00e      	beq.n	800807a <HAL_TIM_Base_Start_IT+0x3a>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a18      	ldr	r2, [pc, #96]	; (80080c4 <HAL_TIM_Base_Start_IT+0x84>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d009      	beq.n	800807a <HAL_TIM_Base_Start_IT+0x3a>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a17      	ldr	r2, [pc, #92]	; (80080c8 <HAL_TIM_Base_Start_IT+0x88>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d004      	beq.n	800807a <HAL_TIM_Base_Start_IT+0x3a>
 8008070:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8008074:	4815      	ldr	r0, [pc, #84]	; (80080cc <HAL_TIM_Base_Start_IT+0x8c>)
 8008076:	f7f9 ff68 	bl	8001f4a <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68da      	ldr	r2, [r3, #12]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f042 0201 	orr.w	r2, r2, #1
 8008088:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	689a      	ldr	r2, [r3, #8]
 8008090:	4b0f      	ldr	r3, [pc, #60]	; (80080d0 <HAL_TIM_Base_Start_IT+0x90>)
 8008092:	4013      	ands	r3, r2
 8008094:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2b06      	cmp	r3, #6
 800809a:	d00b      	beq.n	80080b4 <HAL_TIM_Base_Start_IT+0x74>
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080a2:	d007      	beq.n	80080b4 <HAL_TIM_Base_Start_IT+0x74>
  {
    __HAL_TIM_ENABLE(htim);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f042 0201 	orr.w	r2, r2, #1
 80080b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	40012c00 	.word	0x40012c00
 80080c4:	40014400 	.word	0x40014400
 80080c8:	40014800 	.word	0x40014800
 80080cc:	0800d0b8 	.word	0x0800d0b8
 80080d0:	00010007 	.word	0x00010007

080080d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	f003 0302 	and.w	r3, r3, #2
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d122      	bne.n	8008130 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	f003 0302 	and.w	r3, r3, #2
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d11b      	bne.n	8008130 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f06f 0202 	mvn.w	r2, #2
 8008100:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2201      	movs	r2, #1
 8008106:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	f003 0303 	and.w	r3, r3, #3
 8008112:	2b00      	cmp	r3, #0
 8008114:	d003      	beq.n	800811e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f905 	bl	8008326 <HAL_TIM_IC_CaptureCallback>
 800811c:	e005      	b.n	800812a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f8f7 	bl	8008312 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 f908 	bl	800833a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	f003 0304 	and.w	r3, r3, #4
 800813a:	2b04      	cmp	r3, #4
 800813c:	d122      	bne.n	8008184 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	f003 0304 	and.w	r3, r3, #4
 8008148:	2b04      	cmp	r3, #4
 800814a:	d11b      	bne.n	8008184 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f06f 0204 	mvn.w	r2, #4
 8008154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2202      	movs	r2, #2
 800815a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008166:	2b00      	cmp	r3, #0
 8008168:	d003      	beq.n	8008172 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f8db 	bl	8008326 <HAL_TIM_IC_CaptureCallback>
 8008170:	e005      	b.n	800817e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f8cd 	bl	8008312 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 f8de 	bl	800833a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	f003 0308 	and.w	r3, r3, #8
 800818e:	2b08      	cmp	r3, #8
 8008190:	d122      	bne.n	80081d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	f003 0308 	and.w	r3, r3, #8
 800819c:	2b08      	cmp	r3, #8
 800819e:	d11b      	bne.n	80081d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f06f 0208 	mvn.w	r2, #8
 80081a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2204      	movs	r2, #4
 80081ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	69db      	ldr	r3, [r3, #28]
 80081b6:	f003 0303 	and.w	r3, r3, #3
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d003      	beq.n	80081c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f8b1 	bl	8008326 <HAL_TIM_IC_CaptureCallback>
 80081c4:	e005      	b.n	80081d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f8a3 	bl	8008312 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 f8b4 	bl	800833a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	f003 0310 	and.w	r3, r3, #16
 80081e2:	2b10      	cmp	r3, #16
 80081e4:	d122      	bne.n	800822c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	f003 0310 	and.w	r3, r3, #16
 80081f0:	2b10      	cmp	r3, #16
 80081f2:	d11b      	bne.n	800822c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f06f 0210 	mvn.w	r2, #16
 80081fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2208      	movs	r2, #8
 8008202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	69db      	ldr	r3, [r3, #28]
 800820a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800820e:	2b00      	cmp	r3, #0
 8008210:	d003      	beq.n	800821a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f887 	bl	8008326 <HAL_TIM_IC_CaptureCallback>
 8008218:	e005      	b.n	8008226 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 f879 	bl	8008312 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 f88a 	bl	800833a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	f003 0301 	and.w	r3, r3, #1
 8008236:	2b01      	cmp	r3, #1
 8008238:	d10e      	bne.n	8008258 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	f003 0301 	and.w	r3, r3, #1
 8008244:	2b01      	cmp	r3, #1
 8008246:	d107      	bne.n	8008258 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f06f 0201 	mvn.w	r2, #1
 8008250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f7f9 fe5c 	bl	8001f10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008262:	2b80      	cmp	r3, #128	; 0x80
 8008264:	d10e      	bne.n	8008284 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008270:	2b80      	cmp	r3, #128	; 0x80
 8008272:	d107      	bne.n	8008284 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800827c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f8de 	bl	8008440 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800828e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008292:	d10e      	bne.n	80082b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800829e:	2b80      	cmp	r3, #128	; 0x80
 80082a0:	d107      	bne.n	80082b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80082aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 f8d1 	bl	8008454 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082bc:	2b40      	cmp	r3, #64	; 0x40
 80082be:	d10e      	bne.n	80082de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ca:	2b40      	cmp	r3, #64	; 0x40
 80082cc:	d107      	bne.n	80082de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80082d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f838 	bl	800834e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	f003 0320 	and.w	r3, r3, #32
 80082e8:	2b20      	cmp	r3, #32
 80082ea:	d10e      	bne.n	800830a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	f003 0320 	and.w	r3, r3, #32
 80082f6:	2b20      	cmp	r3, #32
 80082f8:	d107      	bne.n	800830a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f06f 0220 	mvn.w	r2, #32
 8008302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f891 	bl	800842c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800830a:	bf00      	nop
 800830c:	3708      	adds	r7, #8
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008312:	b480      	push	{r7}
 8008314:	b083      	sub	sp, #12
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800831a:	bf00      	nop
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008326:	b480      	push	{r7}
 8008328:	b083      	sub	sp, #12
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800832e:	bf00      	nop
 8008330:	370c      	adds	r7, #12
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr

0800833a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800833a:	b480      	push	{r7}
 800833c:	b083      	sub	sp, #12
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008342:	bf00      	nop
 8008344:	370c      	adds	r7, #12
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr

0800834e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800834e:	b480      	push	{r7}
 8008350:	b083      	sub	sp, #12
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008356:	bf00      	nop
 8008358:	370c      	adds	r7, #12
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
	...

08008364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a2a      	ldr	r2, [pc, #168]	; (8008420 <TIM_Base_SetConfig+0xbc>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d003      	beq.n	8008384 <TIM_Base_SetConfig+0x20>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008382:	d108      	bne.n	8008396 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800838a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	4313      	orrs	r3, r2
 8008394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a21      	ldr	r2, [pc, #132]	; (8008420 <TIM_Base_SetConfig+0xbc>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d00b      	beq.n	80083b6 <TIM_Base_SetConfig+0x52>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083a4:	d007      	beq.n	80083b6 <TIM_Base_SetConfig+0x52>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a1e      	ldr	r2, [pc, #120]	; (8008424 <TIM_Base_SetConfig+0xc0>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d003      	beq.n	80083b6 <TIM_Base_SetConfig+0x52>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a1d      	ldr	r2, [pc, #116]	; (8008428 <TIM_Base_SetConfig+0xc4>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d108      	bne.n	80083c8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	68fa      	ldr	r2, [r7, #12]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	689a      	ldr	r2, [r3, #8]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a0c      	ldr	r2, [pc, #48]	; (8008420 <TIM_Base_SetConfig+0xbc>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d007      	beq.n	8008404 <TIM_Base_SetConfig+0xa0>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a0b      	ldr	r2, [pc, #44]	; (8008424 <TIM_Base_SetConfig+0xc0>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d003      	beq.n	8008404 <TIM_Base_SetConfig+0xa0>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a0a      	ldr	r2, [pc, #40]	; (8008428 <TIM_Base_SetConfig+0xc4>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d103      	bne.n	800840c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	691a      	ldr	r2, [r3, #16]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	615a      	str	r2, [r3, #20]
}
 8008412:	bf00      	nop
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	40012c00 	.word	0x40012c00
 8008424:	40014400 	.word	0x40014400
 8008428:	40014800 	.word	0x40014800

0800842c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008434:	bf00      	nop
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008448:	bf00      	nop
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800845c:	bf00      	nop
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <LL_RCC_GetUSARTClockSource>:
{
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8008470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008474:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4013      	ands	r3, r2
}
 800847c:	4618      	mov	r0, r3
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <LL_RCC_GetLPUARTClockSource>:
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008494:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4013      	ands	r3, r2
}
 800849c:	4618      	mov	r0, r3
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d101      	bne.n	80084ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	e065      	b.n	8008586 <HAL_UART_Init+0xde>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	699b      	ldr	r3, [r3, #24]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00f      	beq.n	80084e2 <HAL_UART_Init+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a32      	ldr	r2, [pc, #200]	; (8008590 <HAL_UART_Init+0xe8>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d019      	beq.n	8008500 <HAL_UART_Init+0x58>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a30      	ldr	r2, [pc, #192]	; (8008594 <HAL_UART_Init+0xec>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d014      	beq.n	8008500 <HAL_UART_Init+0x58>
 80084d6:	f44f 719a 	mov.w	r1, #308	; 0x134
 80084da:	482f      	ldr	r0, [pc, #188]	; (8008598 <HAL_UART_Init+0xf0>)
 80084dc:	f7f9 fd35 	bl	8001f4a <assert_failed>
 80084e0:	e00e      	b.n	8008500 <HAL_UART_Init+0x58>
  }
  else
  {
    /* Check the parameters */
#if defined(LPUART1)
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a2a      	ldr	r2, [pc, #168]	; (8008590 <HAL_UART_Init+0xe8>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d009      	beq.n	8008500 <HAL_UART_Init+0x58>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a28      	ldr	r2, [pc, #160]	; (8008594 <HAL_UART_Init+0xec>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d004      	beq.n	8008500 <HAL_UART_Init+0x58>
 80084f6:	f44f 719d 	mov.w	r1, #314	; 0x13a
 80084fa:	4827      	ldr	r0, [pc, #156]	; (8008598 <HAL_UART_Init+0xf0>)
 80084fc:	f7f9 fd25 	bl	8001f4a <assert_failed>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008506:	2b00      	cmp	r3, #0
 8008508:	d106      	bne.n	8008518 <HAL_UART_Init+0x70>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f7fa fb2a 	bl	8002b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2224      	movs	r2, #36	; 0x24
 800851c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f022 0201 	bic.w	r2, r2, #1
 800852e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f835 	bl	80085a0 <UART_SetConfig>
 8008536:	4603      	mov	r3, r0
 8008538:	2b01      	cmp	r3, #1
 800853a:	d101      	bne.n	8008540 <HAL_UART_Init+0x98>
  {
    return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	e022      	b.n	8008586 <HAL_UART_Init+0xde>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008544:	2b00      	cmp	r3, #0
 8008546:	d002      	beq.n	800854e <HAL_UART_Init+0xa6>
  {
    UART_AdvFeatureConfig(huart);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f001 f965 	bl	8009818 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	685a      	ldr	r2, [r3, #4]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800855c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	689a      	ldr	r2, [r3, #8]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800856c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f042 0201 	orr.w	r2, r2, #1
 800857c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f001 fa8a 	bl	8009a98 <UART_CheckIdleState>
 8008584:	4603      	mov	r3, r0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3708      	adds	r7, #8
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	40013800 	.word	0x40013800
 8008594:	40008000 	.word	0x40008000
 8008598:	0800d128 	.word	0x0800d128
 800859c:	00000000 	.word	0x00000000

080085a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085a0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80085a4:	b08a      	sub	sp, #40	; 0x28
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80085aa:	2300      	movs	r3, #0
 80085ac:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	76fb      	strb	r3, [r7, #27]
#if defined(LPUART1)
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80085b2:	2300      	movs	r3, #0
 80085b4:	617b      	str	r3, [r7, #20]
#endif
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	4a9f      	ldr	r2, [pc, #636]	; (8008838 <UART_SetConfig+0x298>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d904      	bls.n	80085ca <UART_SetConfig+0x2a>
 80085c0:	f640 313e 	movw	r1, #2878	; 0xb3e
 80085c4:	489d      	ldr	r0, [pc, #628]	; (800883c <UART_SetConfig+0x29c>)
 80085c6:	f7f9 fcc0 	bl	8001f4a <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085d2:	d00d      	beq.n	80085f0 <UART_SetConfig+0x50>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d009      	beq.n	80085f0 <UART_SetConfig+0x50>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085e4:	d004      	beq.n	80085f0 <UART_SetConfig+0x50>
 80085e6:	f640 313f 	movw	r1, #2879	; 0xb3f
 80085ea:	4894      	ldr	r0, [pc, #592]	; (800883c <UART_SetConfig+0x29c>)
 80085ec:	f7f9 fcad 	bl	8001f4a <assert_failed>
#if defined(LPUART1)
  if (UART_INSTANCE_LOWPOWER(huart))
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a92      	ldr	r2, [pc, #584]	; (8008840 <UART_SetConfig+0x2a0>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d10e      	bne.n	8008618 <UART_SetConfig+0x78>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d030      	beq.n	8008664 <UART_SetConfig+0xc4>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800860a:	d02b      	beq.n	8008664 <UART_SetConfig+0xc4>
 800860c:	f640 3143 	movw	r1, #2883	; 0xb43
 8008610:	488a      	ldr	r0, [pc, #552]	; (800883c <UART_SetConfig+0x29c>)
 8008612:	f7f9 fc9a 	bl	8001f4a <assert_failed>
 8008616:	e025      	b.n	8008664 <UART_SetConfig+0xc4>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008620:	d012      	beq.n	8008648 <UART_SetConfig+0xa8>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00e      	beq.n	8008648 <UART_SetConfig+0xa8>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008632:	d009      	beq.n	8008648 <UART_SetConfig+0xa8>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800863c:	d004      	beq.n	8008648 <UART_SetConfig+0xa8>
 800863e:	f640 3147 	movw	r1, #2887	; 0xb47
 8008642:	487e      	ldr	r0, [pc, #504]	; (800883c <UART_SetConfig+0x29c>)
 8008644:	f7f9 fc81 	bl	8001f4a <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a1b      	ldr	r3, [r3, #32]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d009      	beq.n	8008664 <UART_SetConfig+0xc4>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a1b      	ldr	r3, [r3, #32]
 8008654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008658:	d004      	beq.n	8008664 <UART_SetConfig+0xc4>
 800865a:	f640 3148 	movw	r1, #2888	; 0xb48
 800865e:	4877      	ldr	r0, [pc, #476]	; (800883c <UART_SetConfig+0x29c>)
 8008660:	f7f9 fc73 	bl	8001f4a <assert_failed>
#else
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
#endif

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00e      	beq.n	800868a <UART_SetConfig+0xea>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008674:	d009      	beq.n	800868a <UART_SetConfig+0xea>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800867e:	d004      	beq.n	800868a <UART_SetConfig+0xea>
 8008680:	f640 314f 	movw	r1, #2895	; 0xb4f
 8008684:	486d      	ldr	r0, [pc, #436]	; (800883c <UART_SetConfig+0x29c>)
 8008686:	f7f9 fc60 	bl	8001f4a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	f023 030c 	bic.w	r3, r3, #12
 8008692:	2b00      	cmp	r3, #0
 8008694:	d103      	bne.n	800869e <UART_SetConfig+0xfe>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d104      	bne.n	80086a8 <UART_SetConfig+0x108>
 800869e:	f44f 6135 	mov.w	r1, #2896	; 0xb50
 80086a2:	4866      	ldr	r0, [pc, #408]	; (800883c <UART_SetConfig+0x29c>)
 80086a4:	f7f9 fc51 	bl	8001f4a <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	699b      	ldr	r3, [r3, #24]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d013      	beq.n	80086d8 <UART_SetConfig+0x138>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	699b      	ldr	r3, [r3, #24]
 80086b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086b8:	d00e      	beq.n	80086d8 <UART_SetConfig+0x138>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	699b      	ldr	r3, [r3, #24]
 80086be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086c2:	d009      	beq.n	80086d8 <UART_SetConfig+0x138>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	699b      	ldr	r3, [r3, #24]
 80086c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086cc:	d004      	beq.n	80086d8 <UART_SetConfig+0x138>
 80086ce:	f640 3151 	movw	r1, #2897	; 0xb51
 80086d2:	485a      	ldr	r0, [pc, #360]	; (800883c <UART_SetConfig+0x29c>)
 80086d4:	f7f9 fc39 	bl	8001f4a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	69db      	ldr	r3, [r3, #28]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d009      	beq.n	80086f4 <UART_SetConfig+0x154>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	69db      	ldr	r3, [r3, #28]
 80086e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086e8:	d004      	beq.n	80086f4 <UART_SetConfig+0x154>
 80086ea:	f640 3152 	movw	r1, #2898	; 0xb52
 80086ee:	4853      	ldr	r0, [pc, #332]	; (800883c <UART_SetConfig+0x29c>)
 80086f0:	f7f9 fc2b 	bl	8001f4a <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d030      	beq.n	800875e <UART_SetConfig+0x1be>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008700:	2b01      	cmp	r3, #1
 8008702:	d02c      	beq.n	800875e <UART_SetConfig+0x1be>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008708:	2b02      	cmp	r3, #2
 800870a:	d028      	beq.n	800875e <UART_SetConfig+0x1be>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008710:	2b03      	cmp	r3, #3
 8008712:	d024      	beq.n	800875e <UART_SetConfig+0x1be>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008718:	2b04      	cmp	r3, #4
 800871a:	d020      	beq.n	800875e <UART_SetConfig+0x1be>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008720:	2b05      	cmp	r3, #5
 8008722:	d01c      	beq.n	800875e <UART_SetConfig+0x1be>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008728:	2b06      	cmp	r3, #6
 800872a:	d018      	beq.n	800875e <UART_SetConfig+0x1be>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008730:	2b07      	cmp	r3, #7
 8008732:	d014      	beq.n	800875e <UART_SetConfig+0x1be>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008738:	2b08      	cmp	r3, #8
 800873a:	d010      	beq.n	800875e <UART_SetConfig+0x1be>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008740:	2b09      	cmp	r3, #9
 8008742:	d00c      	beq.n	800875e <UART_SetConfig+0x1be>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008748:	2b0a      	cmp	r3, #10
 800874a:	d008      	beq.n	800875e <UART_SetConfig+0x1be>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008750:	2b0b      	cmp	r3, #11
 8008752:	d004      	beq.n	800875e <UART_SetConfig+0x1be>
 8008754:	f640 3153 	movw	r1, #2899	; 0xb53
 8008758:	4838      	ldr	r0, [pc, #224]	; (800883c <UART_SetConfig+0x29c>)
 800875a:	f7f9 fbf6 	bl	8001f4a <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	689a      	ldr	r2, [r3, #8]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	431a      	orrs	r2, r3
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	695b      	ldr	r3, [r3, #20]
 800876c:	431a      	orrs	r2, r3
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	4313      	orrs	r3, r2
 8008774:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800877a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800877c:	4313      	orrs	r3, r2
 800877e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	4b2f      	ldr	r3, [pc, #188]	; (8008844 <UART_SetConfig+0x2a4>)
 8008788:	4013      	ands	r3, r2
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	6812      	ldr	r2, [r2, #0]
 800878e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008790:	430b      	orrs	r3, r1
 8008792:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	68da      	ldr	r2, [r3, #12]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	430a      	orrs	r2, r1
 80087a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	699b      	ldr	r3, [r3, #24]
 80087ae:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a22      	ldr	r2, [pc, #136]	; (8008840 <UART_SetConfig+0x2a0>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d004      	beq.n	80087c4 <UART_SetConfig+0x224>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a1b      	ldr	r3, [r3, #32]
 80087be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087c0:	4313      	orrs	r3, r2
 80087c2:	627b      	str	r3, [r7, #36]	; 0x24
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80087ce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	6812      	ldr	r2, [r2, #0]
 80087d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087d8:	430b      	orrs	r3, r1
 80087da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e2:	f023 010f 	bic.w	r1, r3, #15
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	430a      	orrs	r2, r1
 80087f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a14      	ldr	r2, [pc, #80]	; (8008848 <UART_SetConfig+0x2a8>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d130      	bne.n	800885e <UART_SetConfig+0x2be>
 80087fc:	2003      	movs	r0, #3
 80087fe:	f7ff fe33 	bl	8008468 <LL_RCC_GetUSARTClockSource>
 8008802:	4603      	mov	r3, r0
 8008804:	2b03      	cmp	r3, #3
 8008806:	d825      	bhi.n	8008854 <UART_SetConfig+0x2b4>
 8008808:	a201      	add	r2, pc, #4	; (adr r2, 8008810 <UART_SetConfig+0x270>)
 800880a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800880e:	bf00      	nop
 8008810:	08008821 	.word	0x08008821
 8008814:	08008831 	.word	0x08008831
 8008818:	08008829 	.word	0x08008829
 800881c:	0800884d 	.word	0x0800884d
 8008820:	2301      	movs	r3, #1
 8008822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008826:	e04c      	b.n	80088c2 <UART_SetConfig+0x322>
 8008828:	2302      	movs	r3, #2
 800882a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800882e:	e048      	b.n	80088c2 <UART_SetConfig+0x322>
 8008830:	2304      	movs	r3, #4
 8008832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008836:	e044      	b.n	80088c2 <UART_SetConfig+0x322>
 8008838:	007a1200 	.word	0x007a1200
 800883c:	0800d128 	.word	0x0800d128
 8008840:	40008000 	.word	0x40008000
 8008844:	cfff69f3 	.word	0xcfff69f3
 8008848:	40013800 	.word	0x40013800
 800884c:	2308      	movs	r3, #8
 800884e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008852:	e036      	b.n	80088c2 <UART_SetConfig+0x322>
 8008854:	2310      	movs	r3, #16
 8008856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800885a:	bf00      	nop
 800885c:	e031      	b.n	80088c2 <UART_SetConfig+0x322>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a9f      	ldr	r2, [pc, #636]	; (8008ae0 <UART_SetConfig+0x540>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d129      	bne.n	80088bc <UART_SetConfig+0x31c>
 8008868:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800886c:	f7ff fe0c 	bl	8008488 <LL_RCC_GetLPUARTClockSource>
 8008870:	4603      	mov	r3, r0
 8008872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008876:	d014      	beq.n	80088a2 <UART_SetConfig+0x302>
 8008878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800887c:	d802      	bhi.n	8008884 <UART_SetConfig+0x2e4>
 800887e:	2b00      	cmp	r3, #0
 8008880:	d007      	beq.n	8008892 <UART_SetConfig+0x2f2>
 8008882:	e016      	b.n	80088b2 <UART_SetConfig+0x312>
 8008884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008888:	d007      	beq.n	800889a <UART_SetConfig+0x2fa>
 800888a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800888e:	d00c      	beq.n	80088aa <UART_SetConfig+0x30a>
 8008890:	e00f      	b.n	80088b2 <UART_SetConfig+0x312>
 8008892:	2300      	movs	r3, #0
 8008894:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008898:	e013      	b.n	80088c2 <UART_SetConfig+0x322>
 800889a:	2302      	movs	r3, #2
 800889c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088a0:	e00f      	b.n	80088c2 <UART_SetConfig+0x322>
 80088a2:	2304      	movs	r3, #4
 80088a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088a8:	e00b      	b.n	80088c2 <UART_SetConfig+0x322>
 80088aa:	2308      	movs	r3, #8
 80088ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088b0:	e007      	b.n	80088c2 <UART_SetConfig+0x322>
 80088b2:	2310      	movs	r3, #16
 80088b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088b8:	bf00      	nop
 80088ba:	e002      	b.n	80088c2 <UART_SetConfig+0x322>
 80088bc:	2310      	movs	r3, #16
 80088be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a86      	ldr	r2, [pc, #536]	; (8008ae0 <UART_SetConfig+0x540>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	f040 8422 	bne.w	8009112 <UART_SetConfig+0xb72>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80088ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088d2:	2b08      	cmp	r3, #8
 80088d4:	f200 8173 	bhi.w	8008bbe <UART_SetConfig+0x61e>
 80088d8:	a201      	add	r2, pc, #4	; (adr r2, 80088e0 <UART_SetConfig+0x340>)
 80088da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088de:	bf00      	nop
 80088e0:	08008905 	.word	0x08008905
 80088e4:	08008bbf 	.word	0x08008bbf
 80088e8:	080089a7 	.word	0x080089a7
 80088ec:	08008bbf 	.word	0x08008bbf
 80088f0:	08008a3f 	.word	0x08008a3f
 80088f4:	08008bbf 	.word	0x08008bbf
 80088f8:	08008bbf 	.word	0x08008bbf
 80088fc:	08008bbf 	.word	0x08008bbf
 8008900:	08008b11 	.word	0x08008b11
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008904:	f7fd f9a2 	bl	8005c4c <HAL_RCC_GetPCLK1Freq>
 8008908:	4602      	mov	r2, r0
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890e:	2b00      	cmp	r3, #0
 8008910:	d044      	beq.n	800899c <UART_SetConfig+0x3fc>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008916:	2b01      	cmp	r3, #1
 8008918:	d03e      	beq.n	8008998 <UART_SetConfig+0x3f8>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891e:	2b02      	cmp	r3, #2
 8008920:	d038      	beq.n	8008994 <UART_SetConfig+0x3f4>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008926:	2b03      	cmp	r3, #3
 8008928:	d032      	beq.n	8008990 <UART_SetConfig+0x3f0>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892e:	2b04      	cmp	r3, #4
 8008930:	d02c      	beq.n	800898c <UART_SetConfig+0x3ec>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008936:	2b05      	cmp	r3, #5
 8008938:	d026      	beq.n	8008988 <UART_SetConfig+0x3e8>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893e:	2b06      	cmp	r3, #6
 8008940:	d020      	beq.n	8008984 <UART_SetConfig+0x3e4>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008946:	2b07      	cmp	r3, #7
 8008948:	d01a      	beq.n	8008980 <UART_SetConfig+0x3e0>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894e:	2b08      	cmp	r3, #8
 8008950:	d014      	beq.n	800897c <UART_SetConfig+0x3dc>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008956:	2b09      	cmp	r3, #9
 8008958:	d00e      	beq.n	8008978 <UART_SetConfig+0x3d8>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895e:	2b0a      	cmp	r3, #10
 8008960:	d008      	beq.n	8008974 <UART_SetConfig+0x3d4>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008966:	2b0b      	cmp	r3, #11
 8008968:	d102      	bne.n	8008970 <UART_SetConfig+0x3d0>
 800896a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800896e:	e016      	b.n	800899e <UART_SetConfig+0x3fe>
 8008970:	2301      	movs	r3, #1
 8008972:	e014      	b.n	800899e <UART_SetConfig+0x3fe>
 8008974:	2380      	movs	r3, #128	; 0x80
 8008976:	e012      	b.n	800899e <UART_SetConfig+0x3fe>
 8008978:	2340      	movs	r3, #64	; 0x40
 800897a:	e010      	b.n	800899e <UART_SetConfig+0x3fe>
 800897c:	2320      	movs	r3, #32
 800897e:	e00e      	b.n	800899e <UART_SetConfig+0x3fe>
 8008980:	2310      	movs	r3, #16
 8008982:	e00c      	b.n	800899e <UART_SetConfig+0x3fe>
 8008984:	230c      	movs	r3, #12
 8008986:	e00a      	b.n	800899e <UART_SetConfig+0x3fe>
 8008988:	230a      	movs	r3, #10
 800898a:	e008      	b.n	800899e <UART_SetConfig+0x3fe>
 800898c:	2308      	movs	r3, #8
 800898e:	e006      	b.n	800899e <UART_SetConfig+0x3fe>
 8008990:	2306      	movs	r3, #6
 8008992:	e004      	b.n	800899e <UART_SetConfig+0x3fe>
 8008994:	2304      	movs	r3, #4
 8008996:	e002      	b.n	800899e <UART_SetConfig+0x3fe>
 8008998:	2302      	movs	r3, #2
 800899a:	e000      	b.n	800899e <UART_SetConfig+0x3fe>
 800899c:	2301      	movs	r3, #1
 800899e:	fbb2 f3f3 	udiv	r3, r2, r3
 80089a2:	617b      	str	r3, [r7, #20]
        break;
 80089a4:	e10e      	b.n	8008bc4 <UART_SetConfig+0x624>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d044      	beq.n	8008a38 <UART_SetConfig+0x498>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d03e      	beq.n	8008a34 <UART_SetConfig+0x494>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d038      	beq.n	8008a30 <UART_SetConfig+0x490>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c2:	2b03      	cmp	r3, #3
 80089c4:	d032      	beq.n	8008a2c <UART_SetConfig+0x48c>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ca:	2b04      	cmp	r3, #4
 80089cc:	d02c      	beq.n	8008a28 <UART_SetConfig+0x488>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d2:	2b05      	cmp	r3, #5
 80089d4:	d026      	beq.n	8008a24 <UART_SetConfig+0x484>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089da:	2b06      	cmp	r3, #6
 80089dc:	d020      	beq.n	8008a20 <UART_SetConfig+0x480>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e2:	2b07      	cmp	r3, #7
 80089e4:	d01a      	beq.n	8008a1c <UART_SetConfig+0x47c>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ea:	2b08      	cmp	r3, #8
 80089ec:	d014      	beq.n	8008a18 <UART_SetConfig+0x478>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f2:	2b09      	cmp	r3, #9
 80089f4:	d00e      	beq.n	8008a14 <UART_SetConfig+0x474>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fa:	2b0a      	cmp	r3, #10
 80089fc:	d008      	beq.n	8008a10 <UART_SetConfig+0x470>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a02:	2b0b      	cmp	r3, #11
 8008a04:	d102      	bne.n	8008a0c <UART_SetConfig+0x46c>
 8008a06:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008a0a:	e016      	b.n	8008a3a <UART_SetConfig+0x49a>
 8008a0c:	4b35      	ldr	r3, [pc, #212]	; (8008ae4 <UART_SetConfig+0x544>)
 8008a0e:	e014      	b.n	8008a3a <UART_SetConfig+0x49a>
 8008a10:	4b35      	ldr	r3, [pc, #212]	; (8008ae8 <UART_SetConfig+0x548>)
 8008a12:	e012      	b.n	8008a3a <UART_SetConfig+0x49a>
 8008a14:	4b35      	ldr	r3, [pc, #212]	; (8008aec <UART_SetConfig+0x54c>)
 8008a16:	e010      	b.n	8008a3a <UART_SetConfig+0x49a>
 8008a18:	4b35      	ldr	r3, [pc, #212]	; (8008af0 <UART_SetConfig+0x550>)
 8008a1a:	e00e      	b.n	8008a3a <UART_SetConfig+0x49a>
 8008a1c:	4b35      	ldr	r3, [pc, #212]	; (8008af4 <UART_SetConfig+0x554>)
 8008a1e:	e00c      	b.n	8008a3a <UART_SetConfig+0x49a>
 8008a20:	4b35      	ldr	r3, [pc, #212]	; (8008af8 <UART_SetConfig+0x558>)
 8008a22:	e00a      	b.n	8008a3a <UART_SetConfig+0x49a>
 8008a24:	4b35      	ldr	r3, [pc, #212]	; (8008afc <UART_SetConfig+0x55c>)
 8008a26:	e008      	b.n	8008a3a <UART_SetConfig+0x49a>
 8008a28:	4b35      	ldr	r3, [pc, #212]	; (8008b00 <UART_SetConfig+0x560>)
 8008a2a:	e006      	b.n	8008a3a <UART_SetConfig+0x49a>
 8008a2c:	4b35      	ldr	r3, [pc, #212]	; (8008b04 <UART_SetConfig+0x564>)
 8008a2e:	e004      	b.n	8008a3a <UART_SetConfig+0x49a>
 8008a30:	4b35      	ldr	r3, [pc, #212]	; (8008b08 <UART_SetConfig+0x568>)
 8008a32:	e002      	b.n	8008a3a <UART_SetConfig+0x49a>
 8008a34:	4b35      	ldr	r3, [pc, #212]	; (8008b0c <UART_SetConfig+0x56c>)
 8008a36:	e000      	b.n	8008a3a <UART_SetConfig+0x49a>
 8008a38:	4b2a      	ldr	r3, [pc, #168]	; (8008ae4 <UART_SetConfig+0x544>)
 8008a3a:	617b      	str	r3, [r7, #20]
        break;
 8008a3c:	e0c2      	b.n	8008bc4 <UART_SetConfig+0x624>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008a3e:	f7fd f887 	bl	8005b50 <HAL_RCC_GetSysClockFreq>
 8008a42:	4602      	mov	r2, r0
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d044      	beq.n	8008ad6 <UART_SetConfig+0x536>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d03e      	beq.n	8008ad2 <UART_SetConfig+0x532>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	d038      	beq.n	8008ace <UART_SetConfig+0x52e>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a60:	2b03      	cmp	r3, #3
 8008a62:	d032      	beq.n	8008aca <UART_SetConfig+0x52a>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a68:	2b04      	cmp	r3, #4
 8008a6a:	d02c      	beq.n	8008ac6 <UART_SetConfig+0x526>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a70:	2b05      	cmp	r3, #5
 8008a72:	d026      	beq.n	8008ac2 <UART_SetConfig+0x522>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a78:	2b06      	cmp	r3, #6
 8008a7a:	d020      	beq.n	8008abe <UART_SetConfig+0x51e>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a80:	2b07      	cmp	r3, #7
 8008a82:	d01a      	beq.n	8008aba <UART_SetConfig+0x51a>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a88:	2b08      	cmp	r3, #8
 8008a8a:	d014      	beq.n	8008ab6 <UART_SetConfig+0x516>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a90:	2b09      	cmp	r3, #9
 8008a92:	d00e      	beq.n	8008ab2 <UART_SetConfig+0x512>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a98:	2b0a      	cmp	r3, #10
 8008a9a:	d008      	beq.n	8008aae <UART_SetConfig+0x50e>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa0:	2b0b      	cmp	r3, #11
 8008aa2:	d102      	bne.n	8008aaa <UART_SetConfig+0x50a>
 8008aa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008aa8:	e016      	b.n	8008ad8 <UART_SetConfig+0x538>
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e014      	b.n	8008ad8 <UART_SetConfig+0x538>
 8008aae:	2380      	movs	r3, #128	; 0x80
 8008ab0:	e012      	b.n	8008ad8 <UART_SetConfig+0x538>
 8008ab2:	2340      	movs	r3, #64	; 0x40
 8008ab4:	e010      	b.n	8008ad8 <UART_SetConfig+0x538>
 8008ab6:	2320      	movs	r3, #32
 8008ab8:	e00e      	b.n	8008ad8 <UART_SetConfig+0x538>
 8008aba:	2310      	movs	r3, #16
 8008abc:	e00c      	b.n	8008ad8 <UART_SetConfig+0x538>
 8008abe:	230c      	movs	r3, #12
 8008ac0:	e00a      	b.n	8008ad8 <UART_SetConfig+0x538>
 8008ac2:	230a      	movs	r3, #10
 8008ac4:	e008      	b.n	8008ad8 <UART_SetConfig+0x538>
 8008ac6:	2308      	movs	r3, #8
 8008ac8:	e006      	b.n	8008ad8 <UART_SetConfig+0x538>
 8008aca:	2306      	movs	r3, #6
 8008acc:	e004      	b.n	8008ad8 <UART_SetConfig+0x538>
 8008ace:	2304      	movs	r3, #4
 8008ad0:	e002      	b.n	8008ad8 <UART_SetConfig+0x538>
 8008ad2:	2302      	movs	r3, #2
 8008ad4:	e000      	b.n	8008ad8 <UART_SetConfig+0x538>
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008adc:	617b      	str	r3, [r7, #20]
        break;
 8008ade:	e071      	b.n	8008bc4 <UART_SetConfig+0x624>
 8008ae0:	40008000 	.word	0x40008000
 8008ae4:	00f42400 	.word	0x00f42400
 8008ae8:	0001e848 	.word	0x0001e848
 8008aec:	0003d090 	.word	0x0003d090
 8008af0:	0007a120 	.word	0x0007a120
 8008af4:	000f4240 	.word	0x000f4240
 8008af8:	00145855 	.word	0x00145855
 8008afc:	00186a00 	.word	0x00186a00
 8008b00:	001e8480 	.word	0x001e8480
 8008b04:	0028b0aa 	.word	0x0028b0aa
 8008b08:	003d0900 	.word	0x003d0900
 8008b0c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d04e      	beq.n	8008bb6 <UART_SetConfig+0x616>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d047      	beq.n	8008bb0 <UART_SetConfig+0x610>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d040      	beq.n	8008baa <UART_SetConfig+0x60a>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2c:	2b03      	cmp	r3, #3
 8008b2e:	d039      	beq.n	8008ba4 <UART_SetConfig+0x604>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b34:	2b04      	cmp	r3, #4
 8008b36:	d032      	beq.n	8008b9e <UART_SetConfig+0x5fe>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3c:	2b05      	cmp	r3, #5
 8008b3e:	d02b      	beq.n	8008b98 <UART_SetConfig+0x5f8>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b44:	2b06      	cmp	r3, #6
 8008b46:	d024      	beq.n	8008b92 <UART_SetConfig+0x5f2>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4c:	2b07      	cmp	r3, #7
 8008b4e:	d01d      	beq.n	8008b8c <UART_SetConfig+0x5ec>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b54:	2b08      	cmp	r3, #8
 8008b56:	d016      	beq.n	8008b86 <UART_SetConfig+0x5e6>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5c:	2b09      	cmp	r3, #9
 8008b5e:	d00f      	beq.n	8008b80 <UART_SetConfig+0x5e0>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b64:	2b0a      	cmp	r3, #10
 8008b66:	d008      	beq.n	8008b7a <UART_SetConfig+0x5da>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6c:	2b0b      	cmp	r3, #11
 8008b6e:	d101      	bne.n	8008b74 <UART_SetConfig+0x5d4>
 8008b70:	2380      	movs	r3, #128	; 0x80
 8008b72:	e022      	b.n	8008bba <UART_SetConfig+0x61a>
 8008b74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b78:	e01f      	b.n	8008bba <UART_SetConfig+0x61a>
 8008b7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b7e:	e01c      	b.n	8008bba <UART_SetConfig+0x61a>
 8008b80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b84:	e019      	b.n	8008bba <UART_SetConfig+0x61a>
 8008b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b8a:	e016      	b.n	8008bba <UART_SetConfig+0x61a>
 8008b8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b90:	e013      	b.n	8008bba <UART_SetConfig+0x61a>
 8008b92:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008b96:	e010      	b.n	8008bba <UART_SetConfig+0x61a>
 8008b98:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008b9c:	e00d      	b.n	8008bba <UART_SetConfig+0x61a>
 8008b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ba2:	e00a      	b.n	8008bba <UART_SetConfig+0x61a>
 8008ba4:	f241 5355 	movw	r3, #5461	; 0x1555
 8008ba8:	e007      	b.n	8008bba <UART_SetConfig+0x61a>
 8008baa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008bae:	e004      	b.n	8008bba <UART_SetConfig+0x61a>
 8008bb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008bb4:	e001      	b.n	8008bba <UART_SetConfig+0x61a>
 8008bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bba:	617b      	str	r3, [r7, #20]
        break;
 8008bbc:	e002      	b.n	8008bc4 <UART_SetConfig+0x624>
      default:
        ret = HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	76fb      	strb	r3, [r7, #27]
        break;
 8008bc2:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	f000 85fc 	beq.w	80097c4 <UART_SetConfig+0x1224>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	685a      	ldr	r2, [r3, #4]
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	005b      	lsls	r3, r3, #1
 8008bd4:	4413      	add	r3, r2
 8008bd6:	697a      	ldr	r2, [r7, #20]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d305      	bcc.n	8008be8 <UART_SetConfig+0x648>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008be2:	697a      	ldr	r2, [r7, #20]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d903      	bls.n	8008bf0 <UART_SetConfig+0x650>
      {
        ret = HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	76fb      	strb	r3, [r7, #27]
 8008bec:	f000 bdea 	b.w	80097c4 <UART_SetConfig+0x1224>
      }
      else
      {
        switch (clocksource)
 8008bf0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008bf4:	2b08      	cmp	r3, #8
 8008bf6:	f200 8279 	bhi.w	80090ec <UART_SetConfig+0xb4c>
 8008bfa:	a201      	add	r2, pc, #4	; (adr r2, 8008c00 <UART_SetConfig+0x660>)
 8008bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c00:	08008c25 	.word	0x08008c25
 8008c04:	080090ed 	.word	0x080090ed
 8008c08:	08008d63 	.word	0x08008d63
 8008c0c:	080090ed 	.word	0x080090ed
 8008c10:	08008e59 	.word	0x08008e59
 8008c14:	080090ed 	.word	0x080090ed
 8008c18:	080090ed 	.word	0x080090ed
 8008c1c:	080090ed 	.word	0x080090ed
 8008c20:	08008f97 	.word	0x08008f97
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8008c24:	f7fd f812 	bl	8005c4c <HAL_RCC_GetPCLK1Freq>
 8008c28:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f04f 0100 	mov.w	r1, #0
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d067      	beq.n	8008d0a <UART_SetConfig+0x76a>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d05e      	beq.n	8008d00 <UART_SetConfig+0x760>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	d055      	beq.n	8008cf6 <UART_SetConfig+0x756>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4e:	2b03      	cmp	r3, #3
 8008c50:	d04c      	beq.n	8008cec <UART_SetConfig+0x74c>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c56:	2b04      	cmp	r3, #4
 8008c58:	d043      	beq.n	8008ce2 <UART_SetConfig+0x742>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5e:	2b05      	cmp	r3, #5
 8008c60:	d03a      	beq.n	8008cd8 <UART_SetConfig+0x738>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c66:	2b06      	cmp	r3, #6
 8008c68:	d031      	beq.n	8008cce <UART_SetConfig+0x72e>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6e:	2b07      	cmp	r3, #7
 8008c70:	d028      	beq.n	8008cc4 <UART_SetConfig+0x724>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c76:	2b08      	cmp	r3, #8
 8008c78:	d01f      	beq.n	8008cba <UART_SetConfig+0x71a>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7e:	2b09      	cmp	r3, #9
 8008c80:	d016      	beq.n	8008cb0 <UART_SetConfig+0x710>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c86:	2b0a      	cmp	r3, #10
 8008c88:	d00d      	beq.n	8008ca6 <UART_SetConfig+0x706>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8e:	2b0b      	cmp	r3, #11
 8008c90:	d104      	bne.n	8008c9c <UART_SetConfig+0x6fc>
 8008c92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c96:	f04f 0400 	mov.w	r4, #0
 8008c9a:	e03a      	b.n	8008d12 <UART_SetConfig+0x772>
 8008c9c:	f04f 0301 	mov.w	r3, #1
 8008ca0:	f04f 0400 	mov.w	r4, #0
 8008ca4:	e035      	b.n	8008d12 <UART_SetConfig+0x772>
 8008ca6:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008caa:	f04f 0400 	mov.w	r4, #0
 8008cae:	e030      	b.n	8008d12 <UART_SetConfig+0x772>
 8008cb0:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008cb4:	f04f 0400 	mov.w	r4, #0
 8008cb8:	e02b      	b.n	8008d12 <UART_SetConfig+0x772>
 8008cba:	f04f 0320 	mov.w	r3, #32
 8008cbe:	f04f 0400 	mov.w	r4, #0
 8008cc2:	e026      	b.n	8008d12 <UART_SetConfig+0x772>
 8008cc4:	f04f 0310 	mov.w	r3, #16
 8008cc8:	f04f 0400 	mov.w	r4, #0
 8008ccc:	e021      	b.n	8008d12 <UART_SetConfig+0x772>
 8008cce:	f04f 030c 	mov.w	r3, #12
 8008cd2:	f04f 0400 	mov.w	r4, #0
 8008cd6:	e01c      	b.n	8008d12 <UART_SetConfig+0x772>
 8008cd8:	f04f 030a 	mov.w	r3, #10
 8008cdc:	f04f 0400 	mov.w	r4, #0
 8008ce0:	e017      	b.n	8008d12 <UART_SetConfig+0x772>
 8008ce2:	f04f 0308 	mov.w	r3, #8
 8008ce6:	f04f 0400 	mov.w	r4, #0
 8008cea:	e012      	b.n	8008d12 <UART_SetConfig+0x772>
 8008cec:	f04f 0306 	mov.w	r3, #6
 8008cf0:	f04f 0400 	mov.w	r4, #0
 8008cf4:	e00d      	b.n	8008d12 <UART_SetConfig+0x772>
 8008cf6:	f04f 0304 	mov.w	r3, #4
 8008cfa:	f04f 0400 	mov.w	r4, #0
 8008cfe:	e008      	b.n	8008d12 <UART_SetConfig+0x772>
 8008d00:	f04f 0302 	mov.w	r3, #2
 8008d04:	f04f 0400 	mov.w	r4, #0
 8008d08:	e003      	b.n	8008d12 <UART_SetConfig+0x772>
 8008d0a:	f04f 0301 	mov.w	r3, #1
 8008d0e:	f04f 0400 	mov.w	r4, #0
 8008d12:	461a      	mov	r2, r3
 8008d14:	4623      	mov	r3, r4
 8008d16:	f7f7 fa3b 	bl	8000190 <__aeabi_uldivmod>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	460c      	mov	r4, r1
 8008d1e:	4619      	mov	r1, r3
 8008d20:	4622      	mov	r2, r4
 8008d22:	f04f 0300 	mov.w	r3, #0
 8008d26:	f04f 0400 	mov.w	r4, #0
 8008d2a:	0214      	lsls	r4, r2, #8
 8008d2c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008d30:	020b      	lsls	r3, r1, #8
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	6852      	ldr	r2, [r2, #4]
 8008d36:	0852      	lsrs	r2, r2, #1
 8008d38:	4611      	mov	r1, r2
 8008d3a:	f04f 0200 	mov.w	r2, #0
 8008d3e:	eb13 0b01 	adds.w	fp, r3, r1
 8008d42:	eb44 0c02 	adc.w	ip, r4, r2
 8008d46:	4658      	mov	r0, fp
 8008d48:	4661      	mov	r1, ip
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	f04f 0400 	mov.w	r4, #0
 8008d52:	461a      	mov	r2, r3
 8008d54:	4623      	mov	r3, r4
 8008d56:	f7f7 fa1b 	bl	8000190 <__aeabi_uldivmod>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	460c      	mov	r4, r1
 8008d5e:	61fb      	str	r3, [r7, #28]
            break;
 8008d60:	e1c7      	b.n	80090f2 <UART_SetConfig+0xb52>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d05b      	beq.n	8008e22 <UART_SetConfig+0x882>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d053      	beq.n	8008e1a <UART_SetConfig+0x87a>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d04b      	beq.n	8008e12 <UART_SetConfig+0x872>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7e:	2b03      	cmp	r3, #3
 8008d80:	d043      	beq.n	8008e0a <UART_SetConfig+0x86a>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d86:	2b04      	cmp	r3, #4
 8008d88:	d03b      	beq.n	8008e02 <UART_SetConfig+0x862>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8e:	2b05      	cmp	r3, #5
 8008d90:	d033      	beq.n	8008dfa <UART_SetConfig+0x85a>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d96:	2b06      	cmp	r3, #6
 8008d98:	d02b      	beq.n	8008df2 <UART_SetConfig+0x852>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9e:	2b07      	cmp	r3, #7
 8008da0:	d023      	beq.n	8008dea <UART_SetConfig+0x84a>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da6:	2b08      	cmp	r3, #8
 8008da8:	d01b      	beq.n	8008de2 <UART_SetConfig+0x842>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dae:	2b09      	cmp	r3, #9
 8008db0:	d013      	beq.n	8008dda <UART_SetConfig+0x83a>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db6:	2b0a      	cmp	r3, #10
 8008db8:	d00b      	beq.n	8008dd2 <UART_SetConfig+0x832>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dbe:	2b0b      	cmp	r3, #11
 8008dc0:	d103      	bne.n	8008dca <UART_SetConfig+0x82a>
 8008dc2:	4baf      	ldr	r3, [pc, #700]	; (8009080 <UART_SetConfig+0xae0>)
 8008dc4:	f04f 0400 	mov.w	r4, #0
 8008dc8:	e02e      	b.n	8008e28 <UART_SetConfig+0x888>
 8008dca:	4bae      	ldr	r3, [pc, #696]	; (8009084 <UART_SetConfig+0xae4>)
 8008dcc:	f04f 0400 	mov.w	r4, #0
 8008dd0:	e02a      	b.n	8008e28 <UART_SetConfig+0x888>
 8008dd2:	4bad      	ldr	r3, [pc, #692]	; (8009088 <UART_SetConfig+0xae8>)
 8008dd4:	f04f 0400 	mov.w	r4, #0
 8008dd8:	e026      	b.n	8008e28 <UART_SetConfig+0x888>
 8008dda:	4bac      	ldr	r3, [pc, #688]	; (800908c <UART_SetConfig+0xaec>)
 8008ddc:	f04f 0400 	mov.w	r4, #0
 8008de0:	e022      	b.n	8008e28 <UART_SetConfig+0x888>
 8008de2:	4bab      	ldr	r3, [pc, #684]	; (8009090 <UART_SetConfig+0xaf0>)
 8008de4:	f04f 0400 	mov.w	r4, #0
 8008de8:	e01e      	b.n	8008e28 <UART_SetConfig+0x888>
 8008dea:	4baa      	ldr	r3, [pc, #680]	; (8009094 <UART_SetConfig+0xaf4>)
 8008dec:	f04f 0400 	mov.w	r4, #0
 8008df0:	e01a      	b.n	8008e28 <UART_SetConfig+0x888>
 8008df2:	a49f      	add	r4, pc, #636	; (adr r4, 8009070 <UART_SetConfig+0xad0>)
 8008df4:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008df8:	e016      	b.n	8008e28 <UART_SetConfig+0x888>
 8008dfa:	4ba7      	ldr	r3, [pc, #668]	; (8009098 <UART_SetConfig+0xaf8>)
 8008dfc:	f04f 0400 	mov.w	r4, #0
 8008e00:	e012      	b.n	8008e28 <UART_SetConfig+0x888>
 8008e02:	4ba6      	ldr	r3, [pc, #664]	; (800909c <UART_SetConfig+0xafc>)
 8008e04:	f04f 0400 	mov.w	r4, #0
 8008e08:	e00e      	b.n	8008e28 <UART_SetConfig+0x888>
 8008e0a:	a49b      	add	r4, pc, #620	; (adr r4, 8009078 <UART_SetConfig+0xad8>)
 8008e0c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008e10:	e00a      	b.n	8008e28 <UART_SetConfig+0x888>
 8008e12:	4ba3      	ldr	r3, [pc, #652]	; (80090a0 <UART_SetConfig+0xb00>)
 8008e14:	f04f 0400 	mov.w	r4, #0
 8008e18:	e006      	b.n	8008e28 <UART_SetConfig+0x888>
 8008e1a:	4ba2      	ldr	r3, [pc, #648]	; (80090a4 <UART_SetConfig+0xb04>)
 8008e1c:	f04f 0400 	mov.w	r4, #0
 8008e20:	e002      	b.n	8008e28 <UART_SetConfig+0x888>
 8008e22:	4b98      	ldr	r3, [pc, #608]	; (8009084 <UART_SetConfig+0xae4>)
 8008e24:	f04f 0400 	mov.w	r4, #0
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	6852      	ldr	r2, [r2, #4]
 8008e2c:	0852      	lsrs	r2, r2, #1
 8008e2e:	4611      	mov	r1, r2
 8008e30:	f04f 0200 	mov.w	r2, #0
 8008e34:	eb13 0b01 	adds.w	fp, r3, r1
 8008e38:	eb44 0c02 	adc.w	ip, r4, r2
 8008e3c:	4658      	mov	r0, fp
 8008e3e:	4661      	mov	r1, ip
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	f04f 0400 	mov.w	r4, #0
 8008e48:	461a      	mov	r2, r3
 8008e4a:	4623      	mov	r3, r4
 8008e4c:	f7f7 f9a0 	bl	8000190 <__aeabi_uldivmod>
 8008e50:	4603      	mov	r3, r0
 8008e52:	460c      	mov	r4, r1
 8008e54:	61fb      	str	r3, [r7, #28]
            break;
 8008e56:	e14c      	b.n	80090f2 <UART_SetConfig+0xb52>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8008e58:	f7fc fe7a 	bl	8005b50 <HAL_RCC_GetSysClockFreq>
 8008e5c:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	4618      	mov	r0, r3
 8008e62:	f04f 0100 	mov.w	r1, #0
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d067      	beq.n	8008f3e <UART_SetConfig+0x99e>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d05e      	beq.n	8008f34 <UART_SetConfig+0x994>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	d055      	beq.n	8008f2a <UART_SetConfig+0x98a>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e82:	2b03      	cmp	r3, #3
 8008e84:	d04c      	beq.n	8008f20 <UART_SetConfig+0x980>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8a:	2b04      	cmp	r3, #4
 8008e8c:	d043      	beq.n	8008f16 <UART_SetConfig+0x976>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e92:	2b05      	cmp	r3, #5
 8008e94:	d03a      	beq.n	8008f0c <UART_SetConfig+0x96c>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9a:	2b06      	cmp	r3, #6
 8008e9c:	d031      	beq.n	8008f02 <UART_SetConfig+0x962>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea2:	2b07      	cmp	r3, #7
 8008ea4:	d028      	beq.n	8008ef8 <UART_SetConfig+0x958>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eaa:	2b08      	cmp	r3, #8
 8008eac:	d01f      	beq.n	8008eee <UART_SetConfig+0x94e>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb2:	2b09      	cmp	r3, #9
 8008eb4:	d016      	beq.n	8008ee4 <UART_SetConfig+0x944>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eba:	2b0a      	cmp	r3, #10
 8008ebc:	d00d      	beq.n	8008eda <UART_SetConfig+0x93a>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec2:	2b0b      	cmp	r3, #11
 8008ec4:	d104      	bne.n	8008ed0 <UART_SetConfig+0x930>
 8008ec6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008eca:	f04f 0400 	mov.w	r4, #0
 8008ece:	e03a      	b.n	8008f46 <UART_SetConfig+0x9a6>
 8008ed0:	f04f 0301 	mov.w	r3, #1
 8008ed4:	f04f 0400 	mov.w	r4, #0
 8008ed8:	e035      	b.n	8008f46 <UART_SetConfig+0x9a6>
 8008eda:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008ede:	f04f 0400 	mov.w	r4, #0
 8008ee2:	e030      	b.n	8008f46 <UART_SetConfig+0x9a6>
 8008ee4:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008ee8:	f04f 0400 	mov.w	r4, #0
 8008eec:	e02b      	b.n	8008f46 <UART_SetConfig+0x9a6>
 8008eee:	f04f 0320 	mov.w	r3, #32
 8008ef2:	f04f 0400 	mov.w	r4, #0
 8008ef6:	e026      	b.n	8008f46 <UART_SetConfig+0x9a6>
 8008ef8:	f04f 0310 	mov.w	r3, #16
 8008efc:	f04f 0400 	mov.w	r4, #0
 8008f00:	e021      	b.n	8008f46 <UART_SetConfig+0x9a6>
 8008f02:	f04f 030c 	mov.w	r3, #12
 8008f06:	f04f 0400 	mov.w	r4, #0
 8008f0a:	e01c      	b.n	8008f46 <UART_SetConfig+0x9a6>
 8008f0c:	f04f 030a 	mov.w	r3, #10
 8008f10:	f04f 0400 	mov.w	r4, #0
 8008f14:	e017      	b.n	8008f46 <UART_SetConfig+0x9a6>
 8008f16:	f04f 0308 	mov.w	r3, #8
 8008f1a:	f04f 0400 	mov.w	r4, #0
 8008f1e:	e012      	b.n	8008f46 <UART_SetConfig+0x9a6>
 8008f20:	f04f 0306 	mov.w	r3, #6
 8008f24:	f04f 0400 	mov.w	r4, #0
 8008f28:	e00d      	b.n	8008f46 <UART_SetConfig+0x9a6>
 8008f2a:	f04f 0304 	mov.w	r3, #4
 8008f2e:	f04f 0400 	mov.w	r4, #0
 8008f32:	e008      	b.n	8008f46 <UART_SetConfig+0x9a6>
 8008f34:	f04f 0302 	mov.w	r3, #2
 8008f38:	f04f 0400 	mov.w	r4, #0
 8008f3c:	e003      	b.n	8008f46 <UART_SetConfig+0x9a6>
 8008f3e:	f04f 0301 	mov.w	r3, #1
 8008f42:	f04f 0400 	mov.w	r4, #0
 8008f46:	461a      	mov	r2, r3
 8008f48:	4623      	mov	r3, r4
 8008f4a:	f7f7 f921 	bl	8000190 <__aeabi_uldivmod>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	460c      	mov	r4, r1
 8008f52:	4619      	mov	r1, r3
 8008f54:	4622      	mov	r2, r4
 8008f56:	f04f 0300 	mov.w	r3, #0
 8008f5a:	f04f 0400 	mov.w	r4, #0
 8008f5e:	0214      	lsls	r4, r2, #8
 8008f60:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008f64:	020b      	lsls	r3, r1, #8
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	6852      	ldr	r2, [r2, #4]
 8008f6a:	0852      	lsrs	r2, r2, #1
 8008f6c:	4611      	mov	r1, r2
 8008f6e:	f04f 0200 	mov.w	r2, #0
 8008f72:	eb13 0b01 	adds.w	fp, r3, r1
 8008f76:	eb44 0c02 	adc.w	ip, r4, r2
 8008f7a:	4658      	mov	r0, fp
 8008f7c:	4661      	mov	r1, ip
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	f04f 0400 	mov.w	r4, #0
 8008f86:	461a      	mov	r2, r3
 8008f88:	4623      	mov	r3, r4
 8008f8a:	f7f7 f901 	bl	8000190 <__aeabi_uldivmod>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	460c      	mov	r4, r1
 8008f92:	61fb      	str	r3, [r7, #28]
            break;
 8008f94:	e0ad      	b.n	80090f2 <UART_SetConfig+0xb52>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f000 808a 	beq.w	80090b4 <UART_SetConfig+0xb14>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d05b      	beq.n	8009060 <UART_SetConfig+0xac0>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	d052      	beq.n	8009056 <UART_SetConfig+0xab6>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb4:	2b03      	cmp	r3, #3
 8008fb6:	d04a      	beq.n	800904e <UART_SetConfig+0xaae>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fbc:	2b04      	cmp	r3, #4
 8008fbe:	d041      	beq.n	8009044 <UART_SetConfig+0xaa4>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc4:	2b05      	cmp	r3, #5
 8008fc6:	d039      	beq.n	800903c <UART_SetConfig+0xa9c>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fcc:	2b06      	cmp	r3, #6
 8008fce:	d031      	beq.n	8009034 <UART_SetConfig+0xa94>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd4:	2b07      	cmp	r3, #7
 8008fd6:	d028      	beq.n	800902a <UART_SetConfig+0xa8a>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fdc:	2b08      	cmp	r3, #8
 8008fde:	d01f      	beq.n	8009020 <UART_SetConfig+0xa80>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe4:	2b09      	cmp	r3, #9
 8008fe6:	d016      	beq.n	8009016 <UART_SetConfig+0xa76>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fec:	2b0a      	cmp	r3, #10
 8008fee:	d00d      	beq.n	800900c <UART_SetConfig+0xa6c>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff4:	2b0b      	cmp	r3, #11
 8008ff6:	d104      	bne.n	8009002 <UART_SetConfig+0xa62>
 8008ff8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ffc:	f04f 0400 	mov.w	r4, #0
 8009000:	e05c      	b.n	80090bc <UART_SetConfig+0xb1c>
 8009002:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009006:	f04f 0400 	mov.w	r4, #0
 800900a:	e057      	b.n	80090bc <UART_SetConfig+0xb1c>
 800900c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009010:	f04f 0400 	mov.w	r4, #0
 8009014:	e052      	b.n	80090bc <UART_SetConfig+0xb1c>
 8009016:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800901a:	f04f 0400 	mov.w	r4, #0
 800901e:	e04d      	b.n	80090bc <UART_SetConfig+0xb1c>
 8009020:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009024:	f04f 0400 	mov.w	r4, #0
 8009028:	e048      	b.n	80090bc <UART_SetConfig+0xb1c>
 800902a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800902e:	f04f 0400 	mov.w	r4, #0
 8009032:	e043      	b.n	80090bc <UART_SetConfig+0xb1c>
 8009034:	4b1c      	ldr	r3, [pc, #112]	; (80090a8 <UART_SetConfig+0xb08>)
 8009036:	f04f 0400 	mov.w	r4, #0
 800903a:	e03f      	b.n	80090bc <UART_SetConfig+0xb1c>
 800903c:	4b1b      	ldr	r3, [pc, #108]	; (80090ac <UART_SetConfig+0xb0c>)
 800903e:	f04f 0400 	mov.w	r4, #0
 8009042:	e03b      	b.n	80090bc <UART_SetConfig+0xb1c>
 8009044:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009048:	f04f 0400 	mov.w	r4, #0
 800904c:	e036      	b.n	80090bc <UART_SetConfig+0xb1c>
 800904e:	4b18      	ldr	r3, [pc, #96]	; (80090b0 <UART_SetConfig+0xb10>)
 8009050:	f04f 0400 	mov.w	r4, #0
 8009054:	e032      	b.n	80090bc <UART_SetConfig+0xb1c>
 8009056:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800905a:	f04f 0400 	mov.w	r4, #0
 800905e:	e02d      	b.n	80090bc <UART_SetConfig+0xb1c>
 8009060:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009064:	f04f 0400 	mov.w	r4, #0
 8009068:	e028      	b.n	80090bc <UART_SetConfig+0xb1c>
 800906a:	bf00      	nop
 800906c:	f3af 8000 	nop.w
 8009070:	14585500 	.word	0x14585500
 8009074:	00000000 	.word	0x00000000
 8009078:	28b0aa00 	.word	0x28b0aa00
 800907c:	00000000 	.word	0x00000000
 8009080:	00f42400 	.word	0x00f42400
 8009084:	f4240000 	.word	0xf4240000
 8009088:	01e84800 	.word	0x01e84800
 800908c:	03d09000 	.word	0x03d09000
 8009090:	07a12000 	.word	0x07a12000
 8009094:	0f424000 	.word	0x0f424000
 8009098:	186a0000 	.word	0x186a0000
 800909c:	1e848000 	.word	0x1e848000
 80090a0:	3d090000 	.word	0x3d090000
 80090a4:	7a120000 	.word	0x7a120000
 80090a8:	000aaa00 	.word	0x000aaa00
 80090ac:	000ccc00 	.word	0x000ccc00
 80090b0:	00155500 	.word	0x00155500
 80090b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80090b8:	f04f 0400 	mov.w	r4, #0
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	6852      	ldr	r2, [r2, #4]
 80090c0:	0852      	lsrs	r2, r2, #1
 80090c2:	4611      	mov	r1, r2
 80090c4:	f04f 0200 	mov.w	r2, #0
 80090c8:	eb13 0b01 	adds.w	fp, r3, r1
 80090cc:	eb44 0c02 	adc.w	ip, r4, r2
 80090d0:	4658      	mov	r0, fp
 80090d2:	4661      	mov	r1, ip
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	f04f 0400 	mov.w	r4, #0
 80090dc:	461a      	mov	r2, r3
 80090de:	4623      	mov	r3, r4
 80090e0:	f7f7 f856 	bl	8000190 <__aeabi_uldivmod>
 80090e4:	4603      	mov	r3, r0
 80090e6:	460c      	mov	r4, r1
 80090e8:	61fb      	str	r3, [r7, #28]
            break;
 80090ea:	e002      	b.n	80090f2 <UART_SetConfig+0xb52>
          default:
            ret = HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	76fb      	strb	r3, [r7, #27]
            break;
 80090f0:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090f8:	d308      	bcc.n	800910c <UART_SetConfig+0xb6c>
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009100:	d204      	bcs.n	800910c <UART_SetConfig+0xb6c>
        {
          huart->Instance->BRR = usartdiv;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	69fa      	ldr	r2, [r7, #28]
 8009108:	60da      	str	r2, [r3, #12]
 800910a:	e35b      	b.n	80097c4 <UART_SetConfig+0x1224>
        }
        else
        {
          ret = HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	76fb      	strb	r3, [r7, #27]
 8009110:	e358      	b.n	80097c4 <UART_SetConfig+0x1224>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	69db      	ldr	r3, [r3, #28]
 8009116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800911a:	f040 81a6 	bne.w	800946a <UART_SetConfig+0xeca>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800911e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009122:	3b01      	subs	r3, #1
 8009124:	2b07      	cmp	r3, #7
 8009126:	f200 8180 	bhi.w	800942a <UART_SetConfig+0xe8a>
 800912a:	a201      	add	r2, pc, #4	; (adr r2, 8009130 <UART_SetConfig+0xb90>)
 800912c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009130:	08009151 	.word	0x08009151
 8009134:	08009209 	.word	0x08009209
 8009138:	0800942b 	.word	0x0800942b
 800913c:	080092b1 	.word	0x080092b1
 8009140:	0800942b 	.word	0x0800942b
 8009144:	0800942b 	.word	0x0800942b
 8009148:	0800942b 	.word	0x0800942b
 800914c:	08009369 	.word	0x08009369
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009150:	f7fc fd92 	bl	8005c78 <HAL_RCC_GetPCLK2Freq>
 8009154:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915a:	2b00      	cmp	r3, #0
 800915c:	d044      	beq.n	80091e8 <UART_SetConfig+0xc48>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009162:	2b01      	cmp	r3, #1
 8009164:	d03e      	beq.n	80091e4 <UART_SetConfig+0xc44>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916a:	2b02      	cmp	r3, #2
 800916c:	d038      	beq.n	80091e0 <UART_SetConfig+0xc40>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009172:	2b03      	cmp	r3, #3
 8009174:	d032      	beq.n	80091dc <UART_SetConfig+0xc3c>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917a:	2b04      	cmp	r3, #4
 800917c:	d02c      	beq.n	80091d8 <UART_SetConfig+0xc38>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009182:	2b05      	cmp	r3, #5
 8009184:	d026      	beq.n	80091d4 <UART_SetConfig+0xc34>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918a:	2b06      	cmp	r3, #6
 800918c:	d020      	beq.n	80091d0 <UART_SetConfig+0xc30>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009192:	2b07      	cmp	r3, #7
 8009194:	d01a      	beq.n	80091cc <UART_SetConfig+0xc2c>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919a:	2b08      	cmp	r3, #8
 800919c:	d014      	beq.n	80091c8 <UART_SetConfig+0xc28>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a2:	2b09      	cmp	r3, #9
 80091a4:	d00e      	beq.n	80091c4 <UART_SetConfig+0xc24>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091aa:	2b0a      	cmp	r3, #10
 80091ac:	d008      	beq.n	80091c0 <UART_SetConfig+0xc20>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b2:	2b0b      	cmp	r3, #11
 80091b4:	d102      	bne.n	80091bc <UART_SetConfig+0xc1c>
 80091b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091ba:	e016      	b.n	80091ea <UART_SetConfig+0xc4a>
 80091bc:	2301      	movs	r3, #1
 80091be:	e014      	b.n	80091ea <UART_SetConfig+0xc4a>
 80091c0:	2380      	movs	r3, #128	; 0x80
 80091c2:	e012      	b.n	80091ea <UART_SetConfig+0xc4a>
 80091c4:	2340      	movs	r3, #64	; 0x40
 80091c6:	e010      	b.n	80091ea <UART_SetConfig+0xc4a>
 80091c8:	2320      	movs	r3, #32
 80091ca:	e00e      	b.n	80091ea <UART_SetConfig+0xc4a>
 80091cc:	2310      	movs	r3, #16
 80091ce:	e00c      	b.n	80091ea <UART_SetConfig+0xc4a>
 80091d0:	230c      	movs	r3, #12
 80091d2:	e00a      	b.n	80091ea <UART_SetConfig+0xc4a>
 80091d4:	230a      	movs	r3, #10
 80091d6:	e008      	b.n	80091ea <UART_SetConfig+0xc4a>
 80091d8:	2308      	movs	r3, #8
 80091da:	e006      	b.n	80091ea <UART_SetConfig+0xc4a>
 80091dc:	2306      	movs	r3, #6
 80091de:	e004      	b.n	80091ea <UART_SetConfig+0xc4a>
 80091e0:	2304      	movs	r3, #4
 80091e2:	e002      	b.n	80091ea <UART_SetConfig+0xc4a>
 80091e4:	2302      	movs	r3, #2
 80091e6:	e000      	b.n	80091ea <UART_SetConfig+0xc4a>
 80091e8:	2301      	movs	r3, #1
 80091ea:	693a      	ldr	r2, [r7, #16]
 80091ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80091f0:	005a      	lsls	r2, r3, #1
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	085b      	lsrs	r3, r3, #1
 80091f8:	441a      	add	r2, r3
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009202:	b29b      	uxth	r3, r3
 8009204:	61fb      	str	r3, [r7, #28]
        break;
 8009206:	e113      	b.n	8009430 <UART_SetConfig+0xe90>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920c:	2b00      	cmp	r3, #0
 800920e:	d043      	beq.n	8009298 <UART_SetConfig+0xcf8>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009214:	2b01      	cmp	r3, #1
 8009216:	d03d      	beq.n	8009294 <UART_SetConfig+0xcf4>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921c:	2b02      	cmp	r3, #2
 800921e:	d037      	beq.n	8009290 <UART_SetConfig+0xcf0>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009224:	2b03      	cmp	r3, #3
 8009226:	d031      	beq.n	800928c <UART_SetConfig+0xcec>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922c:	2b04      	cmp	r3, #4
 800922e:	d02b      	beq.n	8009288 <UART_SetConfig+0xce8>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009234:	2b05      	cmp	r3, #5
 8009236:	d025      	beq.n	8009284 <UART_SetConfig+0xce4>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923c:	2b06      	cmp	r3, #6
 800923e:	d01f      	beq.n	8009280 <UART_SetConfig+0xce0>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009244:	2b07      	cmp	r3, #7
 8009246:	d019      	beq.n	800927c <UART_SetConfig+0xcdc>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924c:	2b08      	cmp	r3, #8
 800924e:	d013      	beq.n	8009278 <UART_SetConfig+0xcd8>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009254:	2b09      	cmp	r3, #9
 8009256:	d00d      	beq.n	8009274 <UART_SetConfig+0xcd4>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925c:	2b0a      	cmp	r3, #10
 800925e:	d007      	beq.n	8009270 <UART_SetConfig+0xcd0>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009264:	2b0b      	cmp	r3, #11
 8009266:	d101      	bne.n	800926c <UART_SetConfig+0xccc>
 8009268:	4b8c      	ldr	r3, [pc, #560]	; (800949c <UART_SetConfig+0xefc>)
 800926a:	e016      	b.n	800929a <UART_SetConfig+0xcfa>
 800926c:	4b8c      	ldr	r3, [pc, #560]	; (80094a0 <UART_SetConfig+0xf00>)
 800926e:	e014      	b.n	800929a <UART_SetConfig+0xcfa>
 8009270:	4b8c      	ldr	r3, [pc, #560]	; (80094a4 <UART_SetConfig+0xf04>)
 8009272:	e012      	b.n	800929a <UART_SetConfig+0xcfa>
 8009274:	4b8c      	ldr	r3, [pc, #560]	; (80094a8 <UART_SetConfig+0xf08>)
 8009276:	e010      	b.n	800929a <UART_SetConfig+0xcfa>
 8009278:	4b8c      	ldr	r3, [pc, #560]	; (80094ac <UART_SetConfig+0xf0c>)
 800927a:	e00e      	b.n	800929a <UART_SetConfig+0xcfa>
 800927c:	4b8c      	ldr	r3, [pc, #560]	; (80094b0 <UART_SetConfig+0xf10>)
 800927e:	e00c      	b.n	800929a <UART_SetConfig+0xcfa>
 8009280:	4b8c      	ldr	r3, [pc, #560]	; (80094b4 <UART_SetConfig+0xf14>)
 8009282:	e00a      	b.n	800929a <UART_SetConfig+0xcfa>
 8009284:	4b8c      	ldr	r3, [pc, #560]	; (80094b8 <UART_SetConfig+0xf18>)
 8009286:	e008      	b.n	800929a <UART_SetConfig+0xcfa>
 8009288:	4b8c      	ldr	r3, [pc, #560]	; (80094bc <UART_SetConfig+0xf1c>)
 800928a:	e006      	b.n	800929a <UART_SetConfig+0xcfa>
 800928c:	4b8c      	ldr	r3, [pc, #560]	; (80094c0 <UART_SetConfig+0xf20>)
 800928e:	e004      	b.n	800929a <UART_SetConfig+0xcfa>
 8009290:	4b8c      	ldr	r3, [pc, #560]	; (80094c4 <UART_SetConfig+0xf24>)
 8009292:	e002      	b.n	800929a <UART_SetConfig+0xcfa>
 8009294:	4b8c      	ldr	r3, [pc, #560]	; (80094c8 <UART_SetConfig+0xf28>)
 8009296:	e000      	b.n	800929a <UART_SetConfig+0xcfa>
 8009298:	4b81      	ldr	r3, [pc, #516]	; (80094a0 <UART_SetConfig+0xf00>)
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	6852      	ldr	r2, [r2, #4]
 800929e:	0852      	lsrs	r2, r2, #1
 80092a0:	441a      	add	r2, r3
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	61fb      	str	r3, [r7, #28]
        break;
 80092ae:	e0bf      	b.n	8009430 <UART_SetConfig+0xe90>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80092b0:	f7fc fc4e 	bl	8005b50 <HAL_RCC_GetSysClockFreq>
 80092b4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d044      	beq.n	8009348 <UART_SetConfig+0xda8>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d03e      	beq.n	8009344 <UART_SetConfig+0xda4>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ca:	2b02      	cmp	r3, #2
 80092cc:	d038      	beq.n	8009340 <UART_SetConfig+0xda0>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d2:	2b03      	cmp	r3, #3
 80092d4:	d032      	beq.n	800933c <UART_SetConfig+0xd9c>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092da:	2b04      	cmp	r3, #4
 80092dc:	d02c      	beq.n	8009338 <UART_SetConfig+0xd98>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e2:	2b05      	cmp	r3, #5
 80092e4:	d026      	beq.n	8009334 <UART_SetConfig+0xd94>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ea:	2b06      	cmp	r3, #6
 80092ec:	d020      	beq.n	8009330 <UART_SetConfig+0xd90>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f2:	2b07      	cmp	r3, #7
 80092f4:	d01a      	beq.n	800932c <UART_SetConfig+0xd8c>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092fa:	2b08      	cmp	r3, #8
 80092fc:	d014      	beq.n	8009328 <UART_SetConfig+0xd88>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009302:	2b09      	cmp	r3, #9
 8009304:	d00e      	beq.n	8009324 <UART_SetConfig+0xd84>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930a:	2b0a      	cmp	r3, #10
 800930c:	d008      	beq.n	8009320 <UART_SetConfig+0xd80>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009312:	2b0b      	cmp	r3, #11
 8009314:	d102      	bne.n	800931c <UART_SetConfig+0xd7c>
 8009316:	f44f 7380 	mov.w	r3, #256	; 0x100
 800931a:	e016      	b.n	800934a <UART_SetConfig+0xdaa>
 800931c:	2301      	movs	r3, #1
 800931e:	e014      	b.n	800934a <UART_SetConfig+0xdaa>
 8009320:	2380      	movs	r3, #128	; 0x80
 8009322:	e012      	b.n	800934a <UART_SetConfig+0xdaa>
 8009324:	2340      	movs	r3, #64	; 0x40
 8009326:	e010      	b.n	800934a <UART_SetConfig+0xdaa>
 8009328:	2320      	movs	r3, #32
 800932a:	e00e      	b.n	800934a <UART_SetConfig+0xdaa>
 800932c:	2310      	movs	r3, #16
 800932e:	e00c      	b.n	800934a <UART_SetConfig+0xdaa>
 8009330:	230c      	movs	r3, #12
 8009332:	e00a      	b.n	800934a <UART_SetConfig+0xdaa>
 8009334:	230a      	movs	r3, #10
 8009336:	e008      	b.n	800934a <UART_SetConfig+0xdaa>
 8009338:	2308      	movs	r3, #8
 800933a:	e006      	b.n	800934a <UART_SetConfig+0xdaa>
 800933c:	2306      	movs	r3, #6
 800933e:	e004      	b.n	800934a <UART_SetConfig+0xdaa>
 8009340:	2304      	movs	r3, #4
 8009342:	e002      	b.n	800934a <UART_SetConfig+0xdaa>
 8009344:	2302      	movs	r3, #2
 8009346:	e000      	b.n	800934a <UART_SetConfig+0xdaa>
 8009348:	2301      	movs	r3, #1
 800934a:	693a      	ldr	r2, [r7, #16]
 800934c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009350:	005a      	lsls	r2, r3, #1
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	085b      	lsrs	r3, r3, #1
 8009358:	441a      	add	r2, r3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009362:	b29b      	uxth	r3, r3
 8009364:	61fb      	str	r3, [r7, #28]
        break;
 8009366:	e063      	b.n	8009430 <UART_SetConfig+0xe90>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936c:	2b00      	cmp	r3, #0
 800936e:	d04f      	beq.n	8009410 <UART_SetConfig+0xe70>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009374:	2b01      	cmp	r3, #1
 8009376:	d048      	beq.n	800940a <UART_SetConfig+0xe6a>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937c:	2b02      	cmp	r3, #2
 800937e:	d041      	beq.n	8009404 <UART_SetConfig+0xe64>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009384:	2b03      	cmp	r3, #3
 8009386:	d03a      	beq.n	80093fe <UART_SetConfig+0xe5e>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938c:	2b04      	cmp	r3, #4
 800938e:	d033      	beq.n	80093f8 <UART_SetConfig+0xe58>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009394:	2b05      	cmp	r3, #5
 8009396:	d02c      	beq.n	80093f2 <UART_SetConfig+0xe52>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939c:	2b06      	cmp	r3, #6
 800939e:	d025      	beq.n	80093ec <UART_SetConfig+0xe4c>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a4:	2b07      	cmp	r3, #7
 80093a6:	d01e      	beq.n	80093e6 <UART_SetConfig+0xe46>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ac:	2b08      	cmp	r3, #8
 80093ae:	d017      	beq.n	80093e0 <UART_SetConfig+0xe40>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b4:	2b09      	cmp	r3, #9
 80093b6:	d010      	beq.n	80093da <UART_SetConfig+0xe3a>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093bc:	2b0a      	cmp	r3, #10
 80093be:	d009      	beq.n	80093d4 <UART_SetConfig+0xe34>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c4:	2b0b      	cmp	r3, #11
 80093c6:	d102      	bne.n	80093ce <UART_SetConfig+0xe2e>
 80093c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093cc:	e022      	b.n	8009414 <UART_SetConfig+0xe74>
 80093ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80093d2:	e01f      	b.n	8009414 <UART_SetConfig+0xe74>
 80093d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093d8:	e01c      	b.n	8009414 <UART_SetConfig+0xe74>
 80093da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093de:	e019      	b.n	8009414 <UART_SetConfig+0xe74>
 80093e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80093e4:	e016      	b.n	8009414 <UART_SetConfig+0xe74>
 80093e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093ea:	e013      	b.n	8009414 <UART_SetConfig+0xe74>
 80093ec:	f241 5354 	movw	r3, #5460	; 0x1554
 80093f0:	e010      	b.n	8009414 <UART_SetConfig+0xe74>
 80093f2:	f641 1398 	movw	r3, #6552	; 0x1998
 80093f6:	e00d      	b.n	8009414 <UART_SetConfig+0xe74>
 80093f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80093fc:	e00a      	b.n	8009414 <UART_SetConfig+0xe74>
 80093fe:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8009402:	e007      	b.n	8009414 <UART_SetConfig+0xe74>
 8009404:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009408:	e004      	b.n	8009414 <UART_SetConfig+0xe74>
 800940a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800940e:	e001      	b.n	8009414 <UART_SetConfig+0xe74>
 8009410:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	6852      	ldr	r2, [r2, #4]
 8009418:	0852      	lsrs	r2, r2, #1
 800941a:	441a      	add	r2, r3
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	fbb2 f3f3 	udiv	r3, r2, r3
 8009424:	b29b      	uxth	r3, r3
 8009426:	61fb      	str	r3, [r7, #28]
        break;
 8009428:	e002      	b.n	8009430 <UART_SetConfig+0xe90>
      default:
        ret = HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	76fb      	strb	r3, [r7, #27]
        break;
 800942e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	2b0f      	cmp	r3, #15
 8009434:	d916      	bls.n	8009464 <UART_SetConfig+0xec4>
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800943c:	d212      	bcs.n	8009464 <UART_SetConfig+0xec4>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	b29b      	uxth	r3, r3
 8009442:	f023 030f 	bic.w	r3, r3, #15
 8009446:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	085b      	lsrs	r3, r3, #1
 800944c:	b29b      	uxth	r3, r3
 800944e:	f003 0307 	and.w	r3, r3, #7
 8009452:	b29a      	uxth	r2, r3
 8009454:	89fb      	ldrh	r3, [r7, #14]
 8009456:	4313      	orrs	r3, r2
 8009458:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	89fa      	ldrh	r2, [r7, #14]
 8009460:	60da      	str	r2, [r3, #12]
 8009462:	e1af      	b.n	80097c4 <UART_SetConfig+0x1224>
    }
    else
    {
      ret = HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	76fb      	strb	r3, [r7, #27]
 8009468:	e1ac      	b.n	80097c4 <UART_SetConfig+0x1224>
    }
  }
  else
  {
    switch (clocksource)
 800946a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800946e:	3b01      	subs	r3, #1
 8009470:	2b07      	cmp	r3, #7
 8009472:	f200 8196 	bhi.w	80097a2 <UART_SetConfig+0x1202>
 8009476:	a201      	add	r2, pc, #4	; (adr r2, 800947c <UART_SetConfig+0xedc>)
 8009478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800947c:	080094cd 	.word	0x080094cd
 8009480:	08009583 	.word	0x08009583
 8009484:	080097a3 	.word	0x080097a3
 8009488:	0800962d 	.word	0x0800962d
 800948c:	080097a3 	.word	0x080097a3
 8009490:	080097a3 	.word	0x080097a3
 8009494:	080097a3 	.word	0x080097a3
 8009498:	080096e3 	.word	0x080096e3
 800949c:	0001e848 	.word	0x0001e848
 80094a0:	01e84800 	.word	0x01e84800
 80094a4:	0003d090 	.word	0x0003d090
 80094a8:	0007a120 	.word	0x0007a120
 80094ac:	000f4240 	.word	0x000f4240
 80094b0:	001e8480 	.word	0x001e8480
 80094b4:	0028b0aa 	.word	0x0028b0aa
 80094b8:	0030d400 	.word	0x0030d400
 80094bc:	003d0900 	.word	0x003d0900
 80094c0:	00516154 	.word	0x00516154
 80094c4:	007a1200 	.word	0x007a1200
 80094c8:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094cc:	f7fc fbd4 	bl	8005c78 <HAL_RCC_GetPCLK2Freq>
 80094d0:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d044      	beq.n	8009564 <UART_SetConfig+0xfc4>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d03e      	beq.n	8009560 <UART_SetConfig+0xfc0>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	d038      	beq.n	800955c <UART_SetConfig+0xfbc>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ee:	2b03      	cmp	r3, #3
 80094f0:	d032      	beq.n	8009558 <UART_SetConfig+0xfb8>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f6:	2b04      	cmp	r3, #4
 80094f8:	d02c      	beq.n	8009554 <UART_SetConfig+0xfb4>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fe:	2b05      	cmp	r3, #5
 8009500:	d026      	beq.n	8009550 <UART_SetConfig+0xfb0>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009506:	2b06      	cmp	r3, #6
 8009508:	d020      	beq.n	800954c <UART_SetConfig+0xfac>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950e:	2b07      	cmp	r3, #7
 8009510:	d01a      	beq.n	8009548 <UART_SetConfig+0xfa8>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009516:	2b08      	cmp	r3, #8
 8009518:	d014      	beq.n	8009544 <UART_SetConfig+0xfa4>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951e:	2b09      	cmp	r3, #9
 8009520:	d00e      	beq.n	8009540 <UART_SetConfig+0xfa0>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009526:	2b0a      	cmp	r3, #10
 8009528:	d008      	beq.n	800953c <UART_SetConfig+0xf9c>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952e:	2b0b      	cmp	r3, #11
 8009530:	d102      	bne.n	8009538 <UART_SetConfig+0xf98>
 8009532:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009536:	e016      	b.n	8009566 <UART_SetConfig+0xfc6>
 8009538:	2301      	movs	r3, #1
 800953a:	e014      	b.n	8009566 <UART_SetConfig+0xfc6>
 800953c:	2380      	movs	r3, #128	; 0x80
 800953e:	e012      	b.n	8009566 <UART_SetConfig+0xfc6>
 8009540:	2340      	movs	r3, #64	; 0x40
 8009542:	e010      	b.n	8009566 <UART_SetConfig+0xfc6>
 8009544:	2320      	movs	r3, #32
 8009546:	e00e      	b.n	8009566 <UART_SetConfig+0xfc6>
 8009548:	2310      	movs	r3, #16
 800954a:	e00c      	b.n	8009566 <UART_SetConfig+0xfc6>
 800954c:	230c      	movs	r3, #12
 800954e:	e00a      	b.n	8009566 <UART_SetConfig+0xfc6>
 8009550:	230a      	movs	r3, #10
 8009552:	e008      	b.n	8009566 <UART_SetConfig+0xfc6>
 8009554:	2308      	movs	r3, #8
 8009556:	e006      	b.n	8009566 <UART_SetConfig+0xfc6>
 8009558:	2306      	movs	r3, #6
 800955a:	e004      	b.n	8009566 <UART_SetConfig+0xfc6>
 800955c:	2304      	movs	r3, #4
 800955e:	e002      	b.n	8009566 <UART_SetConfig+0xfc6>
 8009560:	2302      	movs	r3, #2
 8009562:	e000      	b.n	8009566 <UART_SetConfig+0xfc6>
 8009564:	2301      	movs	r3, #1
 8009566:	693a      	ldr	r2, [r7, #16]
 8009568:	fbb2 f2f3 	udiv	r2, r2, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	085b      	lsrs	r3, r3, #1
 8009572:	441a      	add	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	fbb2 f3f3 	udiv	r3, r2, r3
 800957c:	b29b      	uxth	r3, r3
 800957e:	61fb      	str	r3, [r7, #28]
        break;
 8009580:	e112      	b.n	80097a8 <UART_SetConfig+0x1208>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009586:	2b00      	cmp	r3, #0
 8009588:	d044      	beq.n	8009614 <UART_SetConfig+0x1074>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800958e:	2b01      	cmp	r3, #1
 8009590:	d03e      	beq.n	8009610 <UART_SetConfig+0x1070>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009596:	2b02      	cmp	r3, #2
 8009598:	d038      	beq.n	800960c <UART_SetConfig+0x106c>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959e:	2b03      	cmp	r3, #3
 80095a0:	d032      	beq.n	8009608 <UART_SetConfig+0x1068>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a6:	2b04      	cmp	r3, #4
 80095a8:	d02c      	beq.n	8009604 <UART_SetConfig+0x1064>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ae:	2b05      	cmp	r3, #5
 80095b0:	d026      	beq.n	8009600 <UART_SetConfig+0x1060>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b6:	2b06      	cmp	r3, #6
 80095b8:	d020      	beq.n	80095fc <UART_SetConfig+0x105c>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095be:	2b07      	cmp	r3, #7
 80095c0:	d01a      	beq.n	80095f8 <UART_SetConfig+0x1058>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c6:	2b08      	cmp	r3, #8
 80095c8:	d014      	beq.n	80095f4 <UART_SetConfig+0x1054>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ce:	2b09      	cmp	r3, #9
 80095d0:	d00e      	beq.n	80095f0 <UART_SetConfig+0x1050>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d6:	2b0a      	cmp	r3, #10
 80095d8:	d008      	beq.n	80095ec <UART_SetConfig+0x104c>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095de:	2b0b      	cmp	r3, #11
 80095e0:	d102      	bne.n	80095e8 <UART_SetConfig+0x1048>
 80095e2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80095e6:	e016      	b.n	8009616 <UART_SetConfig+0x1076>
 80095e8:	4b80      	ldr	r3, [pc, #512]	; (80097ec <UART_SetConfig+0x124c>)
 80095ea:	e014      	b.n	8009616 <UART_SetConfig+0x1076>
 80095ec:	4b80      	ldr	r3, [pc, #512]	; (80097f0 <UART_SetConfig+0x1250>)
 80095ee:	e012      	b.n	8009616 <UART_SetConfig+0x1076>
 80095f0:	4b80      	ldr	r3, [pc, #512]	; (80097f4 <UART_SetConfig+0x1254>)
 80095f2:	e010      	b.n	8009616 <UART_SetConfig+0x1076>
 80095f4:	4b80      	ldr	r3, [pc, #512]	; (80097f8 <UART_SetConfig+0x1258>)
 80095f6:	e00e      	b.n	8009616 <UART_SetConfig+0x1076>
 80095f8:	4b80      	ldr	r3, [pc, #512]	; (80097fc <UART_SetConfig+0x125c>)
 80095fa:	e00c      	b.n	8009616 <UART_SetConfig+0x1076>
 80095fc:	4b80      	ldr	r3, [pc, #512]	; (8009800 <UART_SetConfig+0x1260>)
 80095fe:	e00a      	b.n	8009616 <UART_SetConfig+0x1076>
 8009600:	4b80      	ldr	r3, [pc, #512]	; (8009804 <UART_SetConfig+0x1264>)
 8009602:	e008      	b.n	8009616 <UART_SetConfig+0x1076>
 8009604:	4b80      	ldr	r3, [pc, #512]	; (8009808 <UART_SetConfig+0x1268>)
 8009606:	e006      	b.n	8009616 <UART_SetConfig+0x1076>
 8009608:	4b80      	ldr	r3, [pc, #512]	; (800980c <UART_SetConfig+0x126c>)
 800960a:	e004      	b.n	8009616 <UART_SetConfig+0x1076>
 800960c:	4b80      	ldr	r3, [pc, #512]	; (8009810 <UART_SetConfig+0x1270>)
 800960e:	e002      	b.n	8009616 <UART_SetConfig+0x1076>
 8009610:	4b80      	ldr	r3, [pc, #512]	; (8009814 <UART_SetConfig+0x1274>)
 8009612:	e000      	b.n	8009616 <UART_SetConfig+0x1076>
 8009614:	4b75      	ldr	r3, [pc, #468]	; (80097ec <UART_SetConfig+0x124c>)
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	6852      	ldr	r2, [r2, #4]
 800961a:	0852      	lsrs	r2, r2, #1
 800961c:	441a      	add	r2, r3
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	fbb2 f3f3 	udiv	r3, r2, r3
 8009626:	b29b      	uxth	r3, r3
 8009628:	61fb      	str	r3, [r7, #28]
        break;
 800962a:	e0bd      	b.n	80097a8 <UART_SetConfig+0x1208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800962c:	f7fc fa90 	bl	8005b50 <HAL_RCC_GetSysClockFreq>
 8009630:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009636:	2b00      	cmp	r3, #0
 8009638:	d044      	beq.n	80096c4 <UART_SetConfig+0x1124>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800963e:	2b01      	cmp	r3, #1
 8009640:	d03e      	beq.n	80096c0 <UART_SetConfig+0x1120>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009646:	2b02      	cmp	r3, #2
 8009648:	d038      	beq.n	80096bc <UART_SetConfig+0x111c>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964e:	2b03      	cmp	r3, #3
 8009650:	d032      	beq.n	80096b8 <UART_SetConfig+0x1118>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009656:	2b04      	cmp	r3, #4
 8009658:	d02c      	beq.n	80096b4 <UART_SetConfig+0x1114>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965e:	2b05      	cmp	r3, #5
 8009660:	d026      	beq.n	80096b0 <UART_SetConfig+0x1110>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009666:	2b06      	cmp	r3, #6
 8009668:	d020      	beq.n	80096ac <UART_SetConfig+0x110c>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966e:	2b07      	cmp	r3, #7
 8009670:	d01a      	beq.n	80096a8 <UART_SetConfig+0x1108>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009676:	2b08      	cmp	r3, #8
 8009678:	d014      	beq.n	80096a4 <UART_SetConfig+0x1104>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967e:	2b09      	cmp	r3, #9
 8009680:	d00e      	beq.n	80096a0 <UART_SetConfig+0x1100>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009686:	2b0a      	cmp	r3, #10
 8009688:	d008      	beq.n	800969c <UART_SetConfig+0x10fc>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968e:	2b0b      	cmp	r3, #11
 8009690:	d102      	bne.n	8009698 <UART_SetConfig+0x10f8>
 8009692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009696:	e016      	b.n	80096c6 <UART_SetConfig+0x1126>
 8009698:	2301      	movs	r3, #1
 800969a:	e014      	b.n	80096c6 <UART_SetConfig+0x1126>
 800969c:	2380      	movs	r3, #128	; 0x80
 800969e:	e012      	b.n	80096c6 <UART_SetConfig+0x1126>
 80096a0:	2340      	movs	r3, #64	; 0x40
 80096a2:	e010      	b.n	80096c6 <UART_SetConfig+0x1126>
 80096a4:	2320      	movs	r3, #32
 80096a6:	e00e      	b.n	80096c6 <UART_SetConfig+0x1126>
 80096a8:	2310      	movs	r3, #16
 80096aa:	e00c      	b.n	80096c6 <UART_SetConfig+0x1126>
 80096ac:	230c      	movs	r3, #12
 80096ae:	e00a      	b.n	80096c6 <UART_SetConfig+0x1126>
 80096b0:	230a      	movs	r3, #10
 80096b2:	e008      	b.n	80096c6 <UART_SetConfig+0x1126>
 80096b4:	2308      	movs	r3, #8
 80096b6:	e006      	b.n	80096c6 <UART_SetConfig+0x1126>
 80096b8:	2306      	movs	r3, #6
 80096ba:	e004      	b.n	80096c6 <UART_SetConfig+0x1126>
 80096bc:	2304      	movs	r3, #4
 80096be:	e002      	b.n	80096c6 <UART_SetConfig+0x1126>
 80096c0:	2302      	movs	r3, #2
 80096c2:	e000      	b.n	80096c6 <UART_SetConfig+0x1126>
 80096c4:	2301      	movs	r3, #1
 80096c6:	693a      	ldr	r2, [r7, #16]
 80096c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	085b      	lsrs	r3, r3, #1
 80096d2:	441a      	add	r2, r3
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80096dc:	b29b      	uxth	r3, r3
 80096de:	61fb      	str	r3, [r7, #28]
        break;
 80096e0:	e062      	b.n	80097a8 <UART_SetConfig+0x1208>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d04e      	beq.n	8009788 <UART_SetConfig+0x11e8>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d047      	beq.n	8009782 <UART_SetConfig+0x11e2>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d040      	beq.n	800977c <UART_SetConfig+0x11dc>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fe:	2b03      	cmp	r3, #3
 8009700:	d039      	beq.n	8009776 <UART_SetConfig+0x11d6>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009706:	2b04      	cmp	r3, #4
 8009708:	d032      	beq.n	8009770 <UART_SetConfig+0x11d0>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970e:	2b05      	cmp	r3, #5
 8009710:	d02b      	beq.n	800976a <UART_SetConfig+0x11ca>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009716:	2b06      	cmp	r3, #6
 8009718:	d024      	beq.n	8009764 <UART_SetConfig+0x11c4>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971e:	2b07      	cmp	r3, #7
 8009720:	d01d      	beq.n	800975e <UART_SetConfig+0x11be>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009726:	2b08      	cmp	r3, #8
 8009728:	d016      	beq.n	8009758 <UART_SetConfig+0x11b8>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972e:	2b09      	cmp	r3, #9
 8009730:	d00f      	beq.n	8009752 <UART_SetConfig+0x11b2>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009736:	2b0a      	cmp	r3, #10
 8009738:	d008      	beq.n	800974c <UART_SetConfig+0x11ac>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973e:	2b0b      	cmp	r3, #11
 8009740:	d101      	bne.n	8009746 <UART_SetConfig+0x11a6>
 8009742:	2380      	movs	r3, #128	; 0x80
 8009744:	e022      	b.n	800978c <UART_SetConfig+0x11ec>
 8009746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800974a:	e01f      	b.n	800978c <UART_SetConfig+0x11ec>
 800974c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009750:	e01c      	b.n	800978c <UART_SetConfig+0x11ec>
 8009752:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009756:	e019      	b.n	800978c <UART_SetConfig+0x11ec>
 8009758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800975c:	e016      	b.n	800978c <UART_SetConfig+0x11ec>
 800975e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009762:	e013      	b.n	800978c <UART_SetConfig+0x11ec>
 8009764:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8009768:	e010      	b.n	800978c <UART_SetConfig+0x11ec>
 800976a:	f640 43cc 	movw	r3, #3276	; 0xccc
 800976e:	e00d      	b.n	800978c <UART_SetConfig+0x11ec>
 8009770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009774:	e00a      	b.n	800978c <UART_SetConfig+0x11ec>
 8009776:	f241 5355 	movw	r3, #5461	; 0x1555
 800977a:	e007      	b.n	800978c <UART_SetConfig+0x11ec>
 800977c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009780:	e004      	b.n	800978c <UART_SetConfig+0x11ec>
 8009782:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009786:	e001      	b.n	800978c <UART_SetConfig+0x11ec>
 8009788:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	6852      	ldr	r2, [r2, #4]
 8009790:	0852      	lsrs	r2, r2, #1
 8009792:	441a      	add	r2, r3
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	fbb2 f3f3 	udiv	r3, r2, r3
 800979c:	b29b      	uxth	r3, r3
 800979e:	61fb      	str	r3, [r7, #28]
        break;
 80097a0:	e002      	b.n	80097a8 <UART_SetConfig+0x1208>
      default:
        ret = HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	76fb      	strb	r3, [r7, #27]
        break;
 80097a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	2b0f      	cmp	r3, #15
 80097ac:	d908      	bls.n	80097c0 <UART_SetConfig+0x1220>
 80097ae:	69fb      	ldr	r3, [r7, #28]
 80097b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097b4:	d204      	bcs.n	80097c0 <UART_SetConfig+0x1220>
    {
      huart->Instance->BRR = usartdiv;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	69fa      	ldr	r2, [r7, #28]
 80097bc:	60da      	str	r2, [r3, #12]
 80097be:	e001      	b.n	80097c4 <UART_SetConfig+0x1224>
    }
    else
    {
      ret = HAL_ERROR;
 80097c0:	2301      	movs	r3, #1
 80097c2:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2200      	movs	r2, #0
 80097de:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80097e0:	7efb      	ldrb	r3, [r7, #27]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3728      	adds	r7, #40	; 0x28
 80097e6:	46bd      	mov	sp, r7
 80097e8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80097ec:	00f42400 	.word	0x00f42400
 80097f0:	0001e848 	.word	0x0001e848
 80097f4:	0003d090 	.word	0x0003d090
 80097f8:	0007a120 	.word	0x0007a120
 80097fc:	000f4240 	.word	0x000f4240
 8009800:	00145855 	.word	0x00145855
 8009804:	00186a00 	.word	0x00186a00
 8009808:	001e8480 	.word	0x001e8480
 800980c:	0028b0aa 	.word	0x0028b0aa
 8009810:	003d0900 	.word	0x003d0900
 8009814:	007a1200 	.word	0x007a1200

08009818 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009824:	2bff      	cmp	r3, #255	; 0xff
 8009826:	d904      	bls.n	8009832 <UART_AdvFeatureConfig+0x1a>
 8009828:	f640 411f 	movw	r1, #3103	; 0xc1f
 800982c:	4898      	ldr	r0, [pc, #608]	; (8009a90 <UART_AdvFeatureConfig+0x278>)
 800982e:	f7f8 fb8c 	bl	8001f4a <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009836:	f003 0301 	and.w	r3, r3, #1
 800983a:	2b00      	cmp	r3, #0
 800983c:	d018      	beq.n	8009870 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009842:	2b00      	cmp	r3, #0
 8009844:	d009      	beq.n	800985a <UART_AdvFeatureConfig+0x42>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800984e:	d004      	beq.n	800985a <UART_AdvFeatureConfig+0x42>
 8009850:	f640 4124 	movw	r1, #3108	; 0xc24
 8009854:	488e      	ldr	r0, [pc, #568]	; (8009a90 <UART_AdvFeatureConfig+0x278>)
 8009856:	f7f8 fb78 	bl	8001f4a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	430a      	orrs	r2, r1
 800986e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009874:	f003 0302 	and.w	r3, r3, #2
 8009878:	2b00      	cmp	r3, #0
 800987a:	d018      	beq.n	80098ae <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009880:	2b00      	cmp	r3, #0
 8009882:	d009      	beq.n	8009898 <UART_AdvFeatureConfig+0x80>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800988c:	d004      	beq.n	8009898 <UART_AdvFeatureConfig+0x80>
 800988e:	f640 412b 	movw	r1, #3115	; 0xc2b
 8009892:	487f      	ldr	r0, [pc, #508]	; (8009a90 <UART_AdvFeatureConfig+0x278>)
 8009894:	f7f8 fb59 	bl	8001f4a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	430a      	orrs	r2, r1
 80098ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098b2:	f003 0304 	and.w	r3, r3, #4
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d018      	beq.n	80098ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d009      	beq.n	80098d6 <UART_AdvFeatureConfig+0xbe>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80098ca:	d004      	beq.n	80098d6 <UART_AdvFeatureConfig+0xbe>
 80098cc:	f640 4132 	movw	r1, #3122	; 0xc32
 80098d0:	486f      	ldr	r0, [pc, #444]	; (8009a90 <UART_AdvFeatureConfig+0x278>)
 80098d2:	f7f8 fb3a 	bl	8001f4a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	430a      	orrs	r2, r1
 80098ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f0:	f003 0308 	and.w	r3, r3, #8
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d018      	beq.n	800992a <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d009      	beq.n	8009914 <UART_AdvFeatureConfig+0xfc>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009908:	d004      	beq.n	8009914 <UART_AdvFeatureConfig+0xfc>
 800990a:	f640 4139 	movw	r1, #3129	; 0xc39
 800990e:	4860      	ldr	r0, [pc, #384]	; (8009a90 <UART_AdvFeatureConfig+0x278>)
 8009910:	f7f8 fb1b 	bl	8001f4a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	430a      	orrs	r2, r1
 8009928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800992e:	f003 0310 	and.w	r3, r3, #16
 8009932:	2b00      	cmp	r3, #0
 8009934:	d018      	beq.n	8009968 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800993a:	2b00      	cmp	r3, #0
 800993c:	d009      	beq.n	8009952 <UART_AdvFeatureConfig+0x13a>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009946:	d004      	beq.n	8009952 <UART_AdvFeatureConfig+0x13a>
 8009948:	f44f 6144 	mov.w	r1, #3136	; 0xc40
 800994c:	4850      	ldr	r0, [pc, #320]	; (8009a90 <UART_AdvFeatureConfig+0x278>)
 800994e:	f7f8 fafc 	bl	8001f4a <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	430a      	orrs	r2, r1
 8009966:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800996c:	f003 0320 	and.w	r3, r3, #32
 8009970:	2b00      	cmp	r3, #0
 8009972:	d018      	beq.n	80099a6 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009978:	2b00      	cmp	r3, #0
 800997a:	d009      	beq.n	8009990 <UART_AdvFeatureConfig+0x178>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009980:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009984:	d004      	beq.n	8009990 <UART_AdvFeatureConfig+0x178>
 8009986:	f640 4147 	movw	r1, #3143	; 0xc47
 800998a:	4841      	ldr	r0, [pc, #260]	; (8009a90 <UART_AdvFeatureConfig+0x278>)
 800998c:	f7f8 fadd 	bl	8001f4a <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	430a      	orrs	r2, r1
 80099a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d04a      	beq.n	8009a48 <UART_AdvFeatureConfig+0x230>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a37      	ldr	r2, [pc, #220]	; (8009a94 <UART_AdvFeatureConfig+0x27c>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d004      	beq.n	80099c6 <UART_AdvFeatureConfig+0x1ae>
 80099bc:	f640 414e 	movw	r1, #3150	; 0xc4e
 80099c0:	4833      	ldr	r0, [pc, #204]	; (8009a90 <UART_AdvFeatureConfig+0x278>)
 80099c2:	f7f8 fac2 	bl	8001f4a <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d009      	beq.n	80099e2 <UART_AdvFeatureConfig+0x1ca>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099d6:	d004      	beq.n	80099e2 <UART_AdvFeatureConfig+0x1ca>
 80099d8:	f640 414f 	movw	r1, #3151	; 0xc4f
 80099dc:	482c      	ldr	r0, [pc, #176]	; (8009a90 <UART_AdvFeatureConfig+0x278>)
 80099de:	f7f8 fab4 	bl	8001f4a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	430a      	orrs	r2, r1
 80099f6:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a00:	d122      	bne.n	8009a48 <UART_AdvFeatureConfig+0x230>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d013      	beq.n	8009a32 <UART_AdvFeatureConfig+0x21a>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a12:	d00e      	beq.n	8009a32 <UART_AdvFeatureConfig+0x21a>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a1c:	d009      	beq.n	8009a32 <UART_AdvFeatureConfig+0x21a>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a22:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009a26:	d004      	beq.n	8009a32 <UART_AdvFeatureConfig+0x21a>
 8009a28:	f640 4154 	movw	r1, #3156	; 0xc54
 8009a2c:	4818      	ldr	r0, [pc, #96]	; (8009a90 <UART_AdvFeatureConfig+0x278>)
 8009a2e:	f7f8 fa8c 	bl	8001f4a <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	430a      	orrs	r2, r1
 8009a46:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d018      	beq.n	8009a86 <UART_AdvFeatureConfig+0x26e>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d009      	beq.n	8009a70 <UART_AdvFeatureConfig+0x258>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a60:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009a64:	d004      	beq.n	8009a70 <UART_AdvFeatureConfig+0x258>
 8009a66:	f640 415c 	movw	r1, #3164	; 0xc5c
 8009a6a:	4809      	ldr	r0, [pc, #36]	; (8009a90 <UART_AdvFeatureConfig+0x278>)
 8009a6c:	f7f8 fa6d 	bl	8001f4a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	430a      	orrs	r2, r1
 8009a84:	605a      	str	r2, [r3, #4]
  }
}
 8009a86:	bf00      	nop
 8009a88:	3708      	adds	r7, #8
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	0800d128 	.word	0x0800d128
 8009a94:	40013800 	.word	0x40013800

08009a98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b086      	sub	sp, #24
 8009a9c:	af02      	add	r7, sp, #8
 8009a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009aa8:	f7f9 f9be 	bl	8002e28 <HAL_GetTick>
 8009aac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f003 0308 	and.w	r3, r3, #8
 8009ab8:	2b08      	cmp	r3, #8
 8009aba:	d10e      	bne.n	8009ada <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009abc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ac0:	9300      	str	r3, [sp, #0]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f82c 	bl	8009b28 <UART_WaitOnFlagUntilTimeout>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d001      	beq.n	8009ada <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ad6:	2303      	movs	r3, #3
 8009ad8:	e022      	b.n	8009b20 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f003 0304 	and.w	r3, r3, #4
 8009ae4:	2b04      	cmp	r3, #4
 8009ae6:	d10e      	bne.n	8009b06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ae8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009aec:	9300      	str	r3, [sp, #0]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2200      	movs	r2, #0
 8009af2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 f816 	bl	8009b28 <UART_WaitOnFlagUntilTimeout>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d001      	beq.n	8009b06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b02:	2303      	movs	r3, #3
 8009b04:	e00c      	b.n	8009b20 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2220      	movs	r2, #32
 8009b0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2220      	movs	r2, #32
 8009b12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3710      	adds	r7, #16
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	60b9      	str	r1, [r7, #8]
 8009b32:	603b      	str	r3, [r7, #0]
 8009b34:	4613      	mov	r3, r2
 8009b36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b38:	e062      	b.n	8009c00 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b40:	d05e      	beq.n	8009c00 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b42:	f7f9 f971 	bl	8002e28 <HAL_GetTick>
 8009b46:	4602      	mov	r2, r0
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	1ad3      	subs	r3, r2, r3
 8009b4c:	69ba      	ldr	r2, [r7, #24]
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d302      	bcc.n	8009b58 <UART_WaitOnFlagUntilTimeout+0x30>
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d11d      	bne.n	8009b94 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009b66:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	689a      	ldr	r2, [r3, #8]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f022 0201 	bic.w	r2, r2, #1
 8009b76:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2220      	movs	r2, #32
 8009b7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2220      	movs	r2, #32
 8009b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009b90:	2303      	movs	r3, #3
 8009b92:	e045      	b.n	8009c20 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f003 0304 	and.w	r3, r3, #4
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d02e      	beq.n	8009c00 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	69db      	ldr	r3, [r3, #28]
 8009ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009bac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bb0:	d126      	bne.n	8009c00 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009bba:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009bca:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	689a      	ldr	r2, [r3, #8]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f022 0201 	bic.w	r2, r2, #1
 8009bda:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2220      	movs	r2, #32
 8009be0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2220      	movs	r2, #32
 8009be8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2220      	movs	r2, #32
 8009bf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8009bfc:	2303      	movs	r3, #3
 8009bfe:	e00f      	b.n	8009c20 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	69da      	ldr	r2, [r3, #28]
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	4013      	ands	r3, r2
 8009c0a:	68ba      	ldr	r2, [r7, #8]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	bf0c      	ite	eq
 8009c10:	2301      	moveq	r3, #1
 8009c12:	2300      	movne	r3, #0
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	461a      	mov	r2, r3
 8009c18:	79fb      	ldrb	r3, [r7, #7]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d08d      	beq.n	8009b3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c1e:	2300      	movs	r3, #0
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3710      	adds	r7, #16
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a1f      	ldr	r2, [pc, #124]	; (8009cb4 <HAL_UARTEx_DisableFifoMode+0x8c>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d009      	beq.n	8009c4e <HAL_UARTEx_DisableFifoMode+0x26>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a1e      	ldr	r2, [pc, #120]	; (8009cb8 <HAL_UARTEx_DisableFifoMode+0x90>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d004      	beq.n	8009c4e <HAL_UARTEx_DisableFifoMode+0x26>
 8009c44:	f240 2111 	movw	r1, #529	; 0x211
 8009c48:	481c      	ldr	r0, [pc, #112]	; (8009cbc <HAL_UARTEx_DisableFifoMode+0x94>)
 8009c4a:	f7f8 f97e 	bl	8001f4a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d101      	bne.n	8009c5c <HAL_UARTEx_DisableFifoMode+0x34>
 8009c58:	2302      	movs	r3, #2
 8009c5a:	e027      	b.n	8009cac <HAL_UARTEx_DisableFifoMode+0x84>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2224      	movs	r2, #36	; 0x24
 8009c68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f022 0201 	bic.w	r2, r2, #1
 8009c82:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009c8a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	68fa      	ldr	r2, [r7, #12]
 8009c98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2220      	movs	r2, #32
 8009c9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009caa:	2300      	movs	r3, #0
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3710      	adds	r7, #16
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	40013800 	.word	0x40013800
 8009cb8:	40008000 	.word	0x40008000
 8009cbc:	0800d19c 	.word	0x0800d19c

08009cc0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a31      	ldr	r2, [pc, #196]	; (8009d94 <HAL_UARTEx_SetTxFifoThreshold+0xd4>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d009      	beq.n	8009ce8 <HAL_UARTEx_SetTxFifoThreshold+0x28>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a2f      	ldr	r2, [pc, #188]	; (8009d98 <HAL_UARTEx_SetTxFifoThreshold+0xd8>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d004      	beq.n	8009ce8 <HAL_UARTEx_SetTxFifoThreshold+0x28>
 8009cde:	f240 213f 	movw	r1, #575	; 0x23f
 8009ce2:	482e      	ldr	r0, [pc, #184]	; (8009d9c <HAL_UARTEx_SetTxFifoThreshold+0xdc>)
 8009ce4:	f7f8 f931 	bl	8001f4a <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d018      	beq.n	8009d20 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cf4:	d014      	beq.n	8009d20 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cfc:	d010      	beq.n	8009d20 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8009d04:	d00c      	beq.n	8009d20 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d0c:	d008      	beq.n	8009d20 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 8009d14:	d004      	beq.n	8009d20 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 8009d16:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009d1a:	4820      	ldr	r0, [pc, #128]	; (8009d9c <HAL_UARTEx_SetTxFifoThreshold+0xdc>)
 8009d1c:	f7f8 f915 	bl	8001f4a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d101      	bne.n	8009d2e <HAL_UARTEx_SetTxFifoThreshold+0x6e>
 8009d2a:	2302      	movs	r3, #2
 8009d2c:	e02d      	b.n	8009d8a <HAL_UARTEx_SetTxFifoThreshold+0xca>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2201      	movs	r2, #1
 8009d32:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2224      	movs	r2, #36	; 0x24
 8009d3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f022 0201 	bic.w	r2, r2, #1
 8009d54:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	683a      	ldr	r2, [r7, #0]
 8009d66:	430a      	orrs	r2, r1
 8009d68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 f888 	bl	8009e80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2220      	movs	r2, #32
 8009d7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3710      	adds	r7, #16
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	40013800 	.word	0x40013800
 8009d98:	40008000 	.word	0x40008000
 8009d9c:	0800d19c 	.word	0x0800d19c

08009da0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a31      	ldr	r2, [pc, #196]	; (8009e74 <HAL_UARTEx_SetRxFifoThreshold+0xd4>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d009      	beq.n	8009dc8 <HAL_UARTEx_SetRxFifoThreshold+0x28>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a2f      	ldr	r2, [pc, #188]	; (8009e78 <HAL_UARTEx_SetRxFifoThreshold+0xd8>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d004      	beq.n	8009dc8 <HAL_UARTEx_SetRxFifoThreshold+0x28>
 8009dbe:	f44f 711c 	mov.w	r1, #624	; 0x270
 8009dc2:	482e      	ldr	r0, [pc, #184]	; (8009e7c <HAL_UARTEx_SetRxFifoThreshold+0xdc>)
 8009dc4:	f7f8 f8c1 	bl	8001f4a <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d018      	beq.n	8009e00 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009dd4:	d014      	beq.n	8009e00 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009ddc:	d010      	beq.n	8009e00 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8009de4:	d00c      	beq.n	8009e00 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009dec:	d008      	beq.n	8009e00 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8009df4:	d004      	beq.n	8009e00 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 8009df6:	f240 2171 	movw	r1, #625	; 0x271
 8009dfa:	4820      	ldr	r0, [pc, #128]	; (8009e7c <HAL_UARTEx_SetRxFifoThreshold+0xdc>)
 8009dfc:	f7f8 f8a5 	bl	8001f4a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d101      	bne.n	8009e0e <HAL_UARTEx_SetRxFifoThreshold+0x6e>
 8009e0a:	2302      	movs	r3, #2
 8009e0c:	e02d      	b.n	8009e6a <HAL_UARTEx_SetRxFifoThreshold+0xca>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2201      	movs	r2, #1
 8009e12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2224      	movs	r2, #36	; 0x24
 8009e1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f022 0201 	bic.w	r2, r2, #1
 8009e34:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	689b      	ldr	r3, [r3, #8]
 8009e3c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	683a      	ldr	r2, [r7, #0]
 8009e46:	430a      	orrs	r2, r1
 8009e48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 f818 	bl	8009e80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	68fa      	ldr	r2, [r7, #12]
 8009e56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2220      	movs	r2, #32
 8009e5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009e68:	2300      	movs	r3, #0
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	40013800 	.word	0x40013800
 8009e78:	40008000 	.word	0x40008000
 8009e7c:	0800d19c 	.word	0x0800d19c

08009e80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b089      	sub	sp, #36	; 0x24
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009e88:	4a2f      	ldr	r2, [pc, #188]	; (8009f48 <UARTEx_SetNbDataToProcess+0xc8>)
 8009e8a:	f107 0314 	add.w	r3, r7, #20
 8009e8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e92:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009e96:	4a2d      	ldr	r2, [pc, #180]	; (8009f4c <UARTEx_SetNbDataToProcess+0xcc>)
 8009e98:	f107 030c 	add.w	r3, r7, #12
 8009e9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009ea0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d108      	bne.n	8009ebe <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009ebc:	e03d      	b.n	8009f3a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009ebe:	2308      	movs	r3, #8
 8009ec0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009ec2:	2308      	movs	r3, #8
 8009ec4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	0e5b      	lsrs	r3, r3, #25
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	f003 0307 	and.w	r3, r3, #7
 8009ed4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	689b      	ldr	r3, [r3, #8]
 8009edc:	0f5b      	lsrs	r3, r3, #29
 8009ede:	b2db      	uxtb	r3, r3
 8009ee0:	f003 0307 	and.w	r3, r3, #7
 8009ee4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009ee6:	7fbb      	ldrb	r3, [r7, #30]
 8009ee8:	7f3a      	ldrb	r2, [r7, #28]
 8009eea:	f107 0120 	add.w	r1, r7, #32
 8009eee:	440a      	add	r2, r1
 8009ef0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009ef4:	fb02 f303 	mul.w	r3, r2, r3
 8009ef8:	7f3a      	ldrb	r2, [r7, #28]
 8009efa:	f107 0120 	add.w	r1, r7, #32
 8009efe:	440a      	add	r2, r1
 8009f00:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009f04:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f08:	b29a      	uxth	r2, r3
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009f10:	7ffb      	ldrb	r3, [r7, #31]
 8009f12:	7f7a      	ldrb	r2, [r7, #29]
 8009f14:	f107 0120 	add.w	r1, r7, #32
 8009f18:	440a      	add	r2, r1
 8009f1a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009f1e:	fb02 f303 	mul.w	r3, r2, r3
 8009f22:	7f7a      	ldrb	r2, [r7, #29]
 8009f24:	f107 0120 	add.w	r1, r7, #32
 8009f28:	440a      	add	r2, r1
 8009f2a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009f2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f32:	b29a      	uxth	r2, r3
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009f3a:	bf00      	nop
 8009f3c:	3724      	adds	r7, #36	; 0x24
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr
 8009f46:	bf00      	nop
 8009f48:	0800d210 	.word	0x0800d210
 8009f4c:	0800d218 	.word	0x0800d218

08009f50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009f58:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009f5c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009f64:	b29a      	uxth	r2, r3
 8009f66:	89fb      	ldrh	r3, [r7, #14]
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	b29a      	uxth	r2, r3
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009f72:	2300      	movs	r3, #0
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3714      	adds	r7, #20
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009f88:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009f8c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	b21a      	sxth	r2, r3
 8009f98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009f9c:	43db      	mvns	r3, r3
 8009f9e:	b21b      	sxth	r3, r3
 8009fa0:	4013      	ands	r3, r2
 8009fa2:	b21b      	sxth	r3, r3
 8009fa4:	b29a      	uxth	r2, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009fac:	2300      	movs	r3, #0
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3714      	adds	r7, #20
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr

08009fba <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009fba:	b084      	sub	sp, #16
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	f107 0014 	add.w	r0, r7, #20
 8009fc8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f7ff ffaf 	bl	8009f50 <USB_EnableGlobalInt>

  return HAL_OK;
 8009ff2:	2300      	movs	r3, #0
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3708      	adds	r7, #8
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ffe:	b004      	add	sp, #16
 800a000:	4770      	bx	lr

0800a002 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable(void)
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b088      	sub	sp, #32
 800a006:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a008:	2300      	movs	r3, #0
 800a00a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800a00c:	f107 0308 	add.w	r3, r7, #8
 800a010:	2218      	movs	r2, #24
 800a012:	2100      	movs	r1, #0
 800a014:	4618      	mov	r0, r3
 800a016:	f001 f97f 	bl	800b318 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a01a:	233f      	movs	r3, #63	; 0x3f
 800a01c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800a01e:	2381      	movs	r3, #129	; 0x81
 800a020:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a022:	1dfb      	adds	r3, r7, #7
 800a024:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a026:	2301      	movs	r3, #1
 800a028:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800a02a:	f107 0308 	add.w	r3, r7, #8
 800a02e:	2100      	movs	r1, #0
 800a030:	4618      	mov	r0, r3
 800a032:	f001 f835 	bl	800b0a0 <hci_send_req>
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	da01      	bge.n	800a040 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a03c:	23ff      	movs	r3, #255	; 0xff
 800a03e:	e005      	b.n	800a04c <aci_gap_set_non_discoverable+0x4a>
  if (status) 
 800a040:	79fb      	ldrb	r3, [r7, #7]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d001      	beq.n	800a04a <aci_gap_set_non_discoverable+0x48>
  {
    return status;
 800a046:	79fb      	ldrb	r3, [r7, #7]
 800a048:	e000      	b.n	800a04c <aci_gap_set_non_discoverable+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3720      	adds	r7, #32
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 800a054:	b5b0      	push	{r4, r5, r7, lr}
 800a056:	b0ce      	sub	sp, #312	; 0x138
 800a058:	af00      	add	r7, sp, #0
 800a05a:	4605      	mov	r5, r0
 800a05c:	460c      	mov	r4, r1
 800a05e:	4610      	mov	r0, r2
 800a060:	4619      	mov	r1, r3
 800a062:	1dfb      	adds	r3, r7, #7
 800a064:	462a      	mov	r2, r5
 800a066:	701a      	strb	r2, [r3, #0]
 800a068:	1d3b      	adds	r3, r7, #4
 800a06a:	4622      	mov	r2, r4
 800a06c:	801a      	strh	r2, [r3, #0]
 800a06e:	1cbb      	adds	r3, r7, #2
 800a070:	4602      	mov	r2, r0
 800a072:	801a      	strh	r2, [r3, #0]
 800a074:	1dbb      	adds	r3, r7, #6
 800a076:	460a      	mov	r2, r1
 800a078:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800a07a:	f107 0310 	add.w	r3, r7, #16
 800a07e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800a082:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800a086:	3308      	adds	r3, #8
 800a088:	f107 0210 	add.w	r2, r7, #16
 800a08c:	4413      	add	r3, r2
 800a08e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800a092:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800a096:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800a09a:	4413      	add	r3, r2
 800a09c:	3309      	adds	r3, #9
 800a09e:	f107 0210 	add.w	r2, r7, #16
 800a0a2:	4413      	add	r3, r2
 800a0a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a0a8:	f107 030f 	add.w	r3, r7, #15
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 800a0b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a0ba:	1dfa      	adds	r2, r7, #7
 800a0bc:	7812      	ldrb	r2, [r2, #0]
 800a0be:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a0c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 800a0ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a0ce:	1d3a      	adds	r2, r7, #4
 800a0d0:	8812      	ldrh	r2, [r2, #0]
 800a0d2:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800a0d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a0da:	3302      	adds	r3, #2
 800a0dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 800a0e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a0e4:	1cba      	adds	r2, r7, #2
 800a0e6:	8812      	ldrh	r2, [r2, #0]
 800a0e8:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800a0ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a0f0:	3302      	adds	r3, #2
 800a0f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800a0f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a0fa:	1dba      	adds	r2, r7, #6
 800a0fc:	7812      	ldrb	r2, [r2, #0]
 800a0fe:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a100:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a104:	3301      	adds	r3, #1
 800a106:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 800a10a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a10e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800a112:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800a114:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a118:	3301      	adds	r3, #1
 800a11a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 800a11e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a122:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800a126:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800a128:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a12c:	3301      	adds	r3, #1
 800a12e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 800a132:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a136:	3308      	adds	r3, #8
 800a138:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800a13c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800a140:	4618      	mov	r0, r3
 800a142:	f001 f8d9 	bl	800b2f8 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800a146:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800a14a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a14e:	4413      	add	r3, r2
 800a150:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 800a154:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a158:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800a15c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800a15e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a162:	3301      	adds	r3, #1
 800a164:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length);
 800a168:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a16c:	3301      	adds	r3, #1
 800a16e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800a172:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800a176:	4618      	mov	r0, r3
 800a178:	f001 f8be 	bl	800b2f8 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800a17c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800a180:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a184:	4413      	add	r3, r2
 800a186:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 800a18a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a18e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800a192:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800a194:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a198:	3302      	adds	r3, #2
 800a19a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 800a19e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1a2:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800a1a6:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800a1a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a1ac:	3302      	adds	r3, #2
 800a1ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 800a1b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a1b6:	2218      	movs	r2, #24
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f001 f8ac 	bl	800b318 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a1c0:	233f      	movs	r3, #63	; 0x3f
 800a1c2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800a1c6:	2383      	movs	r3, #131	; 0x83
 800a1c8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a1cc:	f107 0310 	add.w	r3, r7, #16
 800a1d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a1d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a1d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a1dc:	f107 030f 	add.w	r3, r7, #15
 800a1e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800a1ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f000 ff55 	bl	800b0a0 <hci_send_req>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	da01      	bge.n	800a200 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 800a1fc:	23ff      	movs	r3, #255	; 0xff
 800a1fe:	e009      	b.n	800a214 <aci_gap_set_discoverable+0x1c0>
  if (status) 
 800a200:	f107 030f 	add.w	r3, r7, #15
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d003      	beq.n	800a212 <aci_gap_set_discoverable+0x1be>
  {
    return status;
 800a20a:	f107 030f 	add.w	r3, r7, #15
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	e000      	b.n	800a214 <aci_gap_set_discoverable+0x1c0>
  }
  return BLE_STATUS_SUCCESS;
 800a212:	2300      	movs	r3, #0
}
 800a214:	4618      	mov	r0, r3
 800a216:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bdb0      	pop	{r4, r5, r7, pc}

0800a21e <aci_gap_set_io_capability>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 800a21e:	b580      	push	{r7, lr}
 800a220:	b0cc      	sub	sp, #304	; 0x130
 800a222:	af00      	add	r7, sp, #0
 800a224:	4602      	mov	r2, r0
 800a226:	1dfb      	adds	r3, r7, #7
 800a228:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800a22a:	f107 0310 	add.w	r3, r7, #16
 800a22e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a232:	f107 030f 	add.w	r3, r7, #15
 800a236:	2200      	movs	r2, #0
 800a238:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a23a:	2300      	movs	r3, #0
 800a23c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = htob(IO_Capability, 1);
 800a240:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a244:	1dfa      	adds	r2, r7, #7
 800a246:	7812      	ldrb	r2, [r2, #0]
 800a248:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a24a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a24e:	3301      	adds	r3, #1
 800a250:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800a254:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a258:	2218      	movs	r2, #24
 800a25a:	2100      	movs	r1, #0
 800a25c:	4618      	mov	r0, r3
 800a25e:	f001 f85b 	bl	800b318 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a262:	233f      	movs	r3, #63	; 0x3f
 800a264:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800a268:	2385      	movs	r3, #133	; 0x85
 800a26a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a26e:	f107 0310 	add.w	r3, r7, #16
 800a272:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a276:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a27a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a27e:	f107 030f 	add.w	r3, r7, #15
 800a282:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a286:	2301      	movs	r3, #1
 800a288:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800a28c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a290:	2100      	movs	r1, #0
 800a292:	4618      	mov	r0, r3
 800a294:	f000 ff04 	bl	800b0a0 <hci_send_req>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	da01      	bge.n	800a2a2 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 800a29e:	23ff      	movs	r3, #255	; 0xff
 800a2a0:	e009      	b.n	800a2b6 <aci_gap_set_io_capability+0x98>
  if (status) 
 800a2a2:	f107 030f 	add.w	r3, r7, #15
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d003      	beq.n	800a2b4 <aci_gap_set_io_capability+0x96>
  {
    return status;
 800a2ac:	f107 030f 	add.w	r3, r7, #15
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	e000      	b.n	800a2b6 <aci_gap_set_io_capability+0x98>
  }
  return BLE_STATUS_SUCCESS;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 800a2c0:	b5b0      	push	{r4, r5, r7, lr}
 800a2c2:	b0cc      	sub	sp, #304	; 0x130
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	4605      	mov	r5, r0
 800a2c8:	460c      	mov	r4, r1
 800a2ca:	4610      	mov	r0, r2
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	1dfb      	adds	r3, r7, #7
 800a2d0:	462a      	mov	r2, r5
 800a2d2:	701a      	strb	r2, [r3, #0]
 800a2d4:	1dbb      	adds	r3, r7, #6
 800a2d6:	4622      	mov	r2, r4
 800a2d8:	701a      	strb	r2, [r3, #0]
 800a2da:	1d7b      	adds	r3, r7, #5
 800a2dc:	4602      	mov	r2, r0
 800a2de:	701a      	strb	r2, [r3, #0]
 800a2e0:	1d3b      	adds	r3, r7, #4
 800a2e2:	460a      	mov	r2, r1
 800a2e4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800a2e6:	f107 0310 	add.w	r3, r7, #16
 800a2ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a2ee:	f107 030f 	add.w	r3, r7, #15
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 800a2fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a300:	1dfa      	adds	r2, r7, #7
 800a302:	7812      	ldrb	r2, [r2, #0]
 800a304:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a306:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a30a:	3301      	adds	r3, #1
 800a30c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 800a310:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a314:	1dba      	adds	r2, r7, #6
 800a316:	7812      	ldrb	r2, [r2, #0]
 800a318:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a31a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a31e:	3301      	adds	r3, #1
 800a320:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = htob(SC_Support, 1);
 800a324:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a328:	1d7a      	adds	r2, r7, #5
 800a32a:	7812      	ldrb	r2, [r2, #0]
 800a32c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a32e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a332:	3301      	adds	r3, #1
 800a334:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 800a338:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a33c:	1d3a      	adds	r2, r7, #4
 800a33e:	7812      	ldrb	r2, [r2, #0]
 800a340:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800a342:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a346:	3301      	adds	r3, #1
 800a348:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 800a34c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a350:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800a354:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a356:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a35a:	3301      	adds	r3, #1
 800a35c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 800a360:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a364:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800a368:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a36a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a36e:	3301      	adds	r3, #1
 800a370:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 800a374:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a378:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800a37c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800a37e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a382:	3301      	adds	r3, #1
 800a384:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 800a388:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a38c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800a390:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800a394:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a398:	3304      	adds	r3, #4
 800a39a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 800a39e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3a2:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800a3a6:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800a3a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800a3b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a3b6:	2218      	movs	r2, #24
 800a3b8:	2100      	movs	r1, #0
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f000 ffac 	bl	800b318 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a3c0:	233f      	movs	r3, #63	; 0x3f
 800a3c2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800a3c6:	2386      	movs	r3, #134	; 0x86
 800a3c8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a3cc:	f107 0310 	add.w	r3, r7, #16
 800a3d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a3d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a3d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a3dc:	f107 030f 	add.w	r3, r7, #15
 800a3e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800a3ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a3ee:	2100      	movs	r1, #0
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f000 fe55 	bl	800b0a0 <hci_send_req>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	da01      	bge.n	800a400 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800a3fc:	23ff      	movs	r3, #255	; 0xff
 800a3fe:	e009      	b.n	800a414 <aci_gap_set_authentication_requirement+0x154>
  if (status) 
 800a400:	f107 030f 	add.w	r3, r7, #15
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d003      	beq.n	800a412 <aci_gap_set_authentication_requirement+0x152>
  {
    return status;
 800a40a:	f107 030f 	add.w	r3, r7, #15
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	e000      	b.n	800a414 <aci_gap_set_authentication_requirement+0x154>
  }
  return BLE_STATUS_SUCCESS;
 800a412:	2300      	movs	r3, #0
}
 800a414:	4618      	mov	r0, r3
 800a416:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bdb0      	pop	{r4, r5, r7, pc}

0800a41e <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 800a41e:	b590      	push	{r4, r7, lr}
 800a420:	b0cd      	sub	sp, #308	; 0x134
 800a422:	af00      	add	r7, sp, #0
 800a424:	4604      	mov	r4, r0
 800a426:	4608      	mov	r0, r1
 800a428:	4611      	mov	r1, r2
 800a42a:	463a      	mov	r2, r7
 800a42c:	6013      	str	r3, [r2, #0]
 800a42e:	1dfb      	adds	r3, r7, #7
 800a430:	4622      	mov	r2, r4
 800a432:	701a      	strb	r2, [r3, #0]
 800a434:	1dbb      	adds	r3, r7, #6
 800a436:	4602      	mov	r2, r0
 800a438:	701a      	strb	r2, [r3, #0]
 800a43a:	1d7b      	adds	r3, r7, #5
 800a43c:	460a      	mov	r2, r1
 800a43e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800a440:	f107 0310 	add.w	r3, r7, #16
 800a444:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800a448:	f107 0308 	add.w	r3, r7, #8
 800a44c:	2207      	movs	r2, #7
 800a44e:	2100      	movs	r1, #0
 800a450:	4618      	mov	r0, r3
 800a452:	f000 ff61 	bl	800b318 <Osal_MemSet>
  int index_input = 0;
 800a456:	2300      	movs	r3, #0
 800a458:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = htob(Role, 1);
 800a45c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a460:	1dfa      	adds	r2, r7, #7
 800a462:	7812      	ldrb	r2, [r2, #0]
 800a464:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a466:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a46a:	3301      	adds	r3, #1
 800a46c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 800a470:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a474:	1dba      	adds	r2, r7, #6
 800a476:	7812      	ldrb	r2, [r2, #0]
 800a478:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a47a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a47e:	3301      	adds	r3, #1
 800a480:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 800a484:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a488:	1d7a      	adds	r2, r7, #5
 800a48a:	7812      	ldrb	r2, [r2, #0]
 800a48c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a48e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a492:	3301      	adds	r3, #1
 800a494:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800a498:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a49c:	2218      	movs	r2, #24
 800a49e:	2100      	movs	r1, #0
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f000 ff39 	bl	800b318 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a4a6:	233f      	movs	r3, #63	; 0x3f
 800a4a8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800a4ac:	238a      	movs	r3, #138	; 0x8a
 800a4ae:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a4b2:	f107 0310 	add.w	r3, r7, #16
 800a4b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a4ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a4be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800a4c2:	f107 0308 	add.w	r3, r7, #8
 800a4c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800a4ca:	2307      	movs	r3, #7
 800a4cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800a4d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a4d4:	2100      	movs	r1, #0
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f000 fde2 	bl	800b0a0 <hci_send_req>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	da01      	bge.n	800a4e6 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 800a4e2:	23ff      	movs	r3, #255	; 0xff
 800a4e4:	e021      	b.n	800a52a <aci_gap_init+0x10c>
  if (resp.Status) 
 800a4e6:	f107 0308 	add.w	r3, r7, #8
 800a4ea:	781b      	ldrb	r3, [r3, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d003      	beq.n	800a4f8 <aci_gap_init+0xda>
  {
    return resp.Status;
 800a4f0:	f107 0308 	add.w	r3, r7, #8
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	e018      	b.n	800a52a <aci_gap_init+0x10c>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800a4f8:	f107 0308 	add.w	r3, r7, #8
 800a4fc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a500:	b29a      	uxth	r2, r3
 800a502:	463b      	mov	r3, r7
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800a508:	f107 0308 	add.w	r3, r7, #8
 800a50c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800a510:	b29a      	uxth	r2, r3
 800a512:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800a516:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 800a518:	f107 0308 	add.w	r3, r7, #8
 800a51c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800a520:	b29a      	uxth	r2, r3
 800a522:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800a526:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a528:	2300      	movs	r3, #0
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800a530:	46bd      	mov	sp, r7
 800a532:	bd90      	pop	{r4, r7, pc}

0800a534 <aci_gap_update_adv_data>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b0cc      	sub	sp, #304	; 0x130
 800a538:	af00      	add	r7, sp, #0
 800a53a:	4602      	mov	r2, r0
 800a53c:	463b      	mov	r3, r7
 800a53e:	6019      	str	r1, [r3, #0]
 800a540:	1dfb      	adds	r3, r7, #7
 800a542:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800a544:	f107 0310 	add.w	r3, r7, #16
 800a548:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a54c:	f107 030f 	add.w	r3, r7, #15
 800a550:	2200      	movs	r2, #0
 800a552:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a554:	2300      	movs	r3, #0
 800a556:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 800a55a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a55e:	1dfa      	adds	r2, r7, #7
 800a560:	7812      	ldrb	r2, [r2, #0]
 800a562:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a564:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a568:	3301      	adds	r3, #1
 800a56a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen);
 800a56e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a572:	1c58      	adds	r0, r3, #1
 800a574:	1dfb      	adds	r3, r7, #7
 800a576:	781a      	ldrb	r2, [r3, #0]
 800a578:	463b      	mov	r3, r7
 800a57a:	6819      	ldr	r1, [r3, #0]
 800a57c:	f000 febc 	bl	800b2f8 <Osal_MemCpy>
  index_input += AdvDataLen;
 800a580:	1dfb      	adds	r3, r7, #7
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a588:	4413      	add	r3, r2
 800a58a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800a58e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a592:	2218      	movs	r2, #24
 800a594:	2100      	movs	r1, #0
 800a596:	4618      	mov	r0, r3
 800a598:	f000 febe 	bl	800b318 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a59c:	233f      	movs	r3, #63	; 0x3f
 800a59e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800a5a2:	238e      	movs	r3, #142	; 0x8e
 800a5a4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a5a8:	f107 0310 	add.w	r3, r7, #16
 800a5ac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a5b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a5b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a5b8:	f107 030f 	add.w	r3, r7, #15
 800a5bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800a5c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a5ca:	2100      	movs	r1, #0
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f000 fd67 	bl	800b0a0 <hci_send_req>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	da01      	bge.n	800a5dc <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 800a5d8:	23ff      	movs	r3, #255	; 0xff
 800a5da:	e009      	b.n	800a5f0 <aci_gap_update_adv_data+0xbc>
  if (status) 
 800a5dc:	f107 030f 	add.w	r3, r7, #15
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d003      	beq.n	800a5ee <aci_gap_update_adv_data+0xba>
  {
    return status;
 800a5e6:	f107 030f 	add.w	r3, r7, #15
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	e000      	b.n	800a5f0 <aci_gap_update_adv_data+0xbc>
  }
  return BLE_STATUS_SUCCESS;
 800a5ee:	2300      	movs	r3, #0
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <aci_gap_configure_whitelist>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_configure_whitelist(void)
{
 800a5fa:	b580      	push	{r7, lr}
 800a5fc:	b088      	sub	sp, #32
 800a5fe:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a600:	2300      	movs	r3, #0
 800a602:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800a604:	f107 0308 	add.w	r3, r7, #8
 800a608:	2218      	movs	r2, #24
 800a60a:	2100      	movs	r1, #0
 800a60c:	4618      	mov	r0, r3
 800a60e:	f000 fe83 	bl	800b318 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a612:	233f      	movs	r3, #63	; 0x3f
 800a614:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800a616:	2392      	movs	r3, #146	; 0x92
 800a618:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a61a:	1dfb      	adds	r3, r7, #7
 800a61c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a61e:	2301      	movs	r3, #1
 800a620:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800a622:	f107 0308 	add.w	r3, r7, #8
 800a626:	2100      	movs	r1, #0
 800a628:	4618      	mov	r0, r3
 800a62a:	f000 fd39 	bl	800b0a0 <hci_send_req>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b00      	cmp	r3, #0
 800a632:	da01      	bge.n	800a638 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a634:	23ff      	movs	r3, #255	; 0xff
 800a636:	e005      	b.n	800a644 <aci_gap_configure_whitelist+0x4a>
  if (status) 
 800a638:	79fb      	ldrb	r3, [r7, #7]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d001      	beq.n	800a642 <aci_gap_configure_whitelist+0x48>
  {
    return status;
 800a63e:	79fb      	ldrb	r3, [r7, #7]
 800a640:	e000      	b.n	800a644 <aci_gap_configure_whitelist+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3720      	adds	r7, #32
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init(void)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b088      	sub	sp, #32
 800a650:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a652:	2300      	movs	r3, #0
 800a654:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800a656:	f107 0308 	add.w	r3, r7, #8
 800a65a:	2218      	movs	r2, #24
 800a65c:	2100      	movs	r1, #0
 800a65e:	4618      	mov	r0, r3
 800a660:	f000 fe5a 	bl	800b318 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a664:	233f      	movs	r3, #63	; 0x3f
 800a666:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800a668:	f240 1301 	movw	r3, #257	; 0x101
 800a66c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a66e:	1dfb      	adds	r3, r7, #7
 800a670:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a672:	2301      	movs	r3, #1
 800a674:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800a676:	f107 0308 	add.w	r3, r7, #8
 800a67a:	2100      	movs	r1, #0
 800a67c:	4618      	mov	r0, r3
 800a67e:	f000 fd0f 	bl	800b0a0 <hci_send_req>
 800a682:	4603      	mov	r3, r0
 800a684:	2b00      	cmp	r3, #0
 800a686:	da01      	bge.n	800a68c <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800a688:	23ff      	movs	r3, #255	; 0xff
 800a68a:	e005      	b.n	800a698 <aci_gatt_init+0x4c>
  if (status) 
 800a68c:	79fb      	ldrb	r3, [r7, #7]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d001      	beq.n	800a696 <aci_gatt_init+0x4a>
  {
    return status;
 800a692:	79fb      	ldrb	r3, [r7, #7]
 800a694:	e000      	b.n	800a698 <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 800a696:	2300      	movs	r3, #0
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3720      	adds	r7, #32
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 800a6a0:	b590      	push	{r4, r7, lr}
 800a6a2:	b0cf      	sub	sp, #316	; 0x13c
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	4604      	mov	r4, r0
 800a6a8:	4638      	mov	r0, r7
 800a6aa:	6001      	str	r1, [r0, #0]
 800a6ac:	4610      	mov	r0, r2
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	1dfb      	adds	r3, r7, #7
 800a6b2:	4622      	mov	r2, r4
 800a6b4:	701a      	strb	r2, [r3, #0]
 800a6b6:	1dbb      	adds	r3, r7, #6
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	701a      	strb	r2, [r3, #0]
 800a6bc:	1d7b      	adds	r3, r7, #5
 800a6be:	460a      	mov	r2, r1
 800a6c0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800a6c2:	f107 0310 	add.w	r3, r7, #16
 800a6c6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800a6ca:	1dfb      	adds	r3, r7, #7
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	d007      	beq.n	800a6e2 <aci_gatt_add_service+0x42>
 800a6d2:	1dfb      	adds	r3, r7, #7
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	2b02      	cmp	r3, #2
 800a6d8:	d101      	bne.n	800a6de <aci_gatt_add_service+0x3e>
 800a6da:	2311      	movs	r3, #17
 800a6dc:	e002      	b.n	800a6e4 <aci_gatt_add_service+0x44>
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e000      	b.n	800a6e4 <aci_gatt_add_service+0x44>
 800a6e2:	2303      	movs	r3, #3
 800a6e4:	f107 0210 	add.w	r2, r7, #16
 800a6e8:	4413      	add	r3, r2
 800a6ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800a6ee:	f107 030c 	add.w	r3, r7, #12
 800a6f2:	2203      	movs	r2, #3
 800a6f4:	2100      	movs	r1, #0
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f000 fe0e 	bl	800b318 <Osal_MemSet>
  int index_input = 0;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 800a702:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a706:	1dfa      	adds	r2, r7, #7
 800a708:	7812      	ldrb	r2, [r2, #0]
 800a70a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a70c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a710:	3301      	adds	r3, #1
 800a712:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 800a716:	1dfb      	adds	r3, r7, #7
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d002      	beq.n	800a724 <aci_gatt_add_service+0x84>
 800a71e:	2b02      	cmp	r3, #2
 800a720:	d004      	beq.n	800a72c <aci_gatt_add_service+0x8c>
 800a722:	e007      	b.n	800a734 <aci_gatt_add_service+0x94>
      case 1: size = 2; break;
 800a724:	2302      	movs	r3, #2
 800a726:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800a72a:	e005      	b.n	800a738 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800a72c:	2310      	movs	r3, #16
 800a72e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800a732:	e001      	b.n	800a738 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 800a734:	2347      	movs	r3, #71	; 0x47
 800a736:	e05d      	b.n	800a7f4 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 800a738:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a73c:	1c58      	adds	r0, r3, #1
 800a73e:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800a742:	463b      	mov	r3, r7
 800a744:	6819      	ldr	r1, [r3, #0]
 800a746:	f000 fdd7 	bl	800b2f8 <Osal_MemCpy>
    index_input += size;
 800a74a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800a74e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a752:	4413      	add	r3, r2
 800a754:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = htob(Service_Type, 1);
 800a758:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a75c:	1dba      	adds	r2, r7, #6
 800a75e:	7812      	ldrb	r2, [r2, #0]
 800a760:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800a762:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a766:	3301      	adds	r3, #1
 800a768:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 800a76c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a770:	1d7a      	adds	r2, r7, #5
 800a772:	7812      	ldrb	r2, [r2, #0]
 800a774:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800a776:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a77a:	3301      	adds	r3, #1
 800a77c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 800a780:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a784:	2218      	movs	r2, #24
 800a786:	2100      	movs	r1, #0
 800a788:	4618      	mov	r0, r3
 800a78a:	f000 fdc5 	bl	800b318 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a78e:	233f      	movs	r3, #63	; 0x3f
 800a790:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800a794:	f44f 7381 	mov.w	r3, #258	; 0x102
 800a798:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a79c:	f107 0310 	add.w	r3, r7, #16
 800a7a0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a7a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a7a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800a7ac:	f107 030c 	add.w	r3, r7, #12
 800a7b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800a7b4:	2303      	movs	r3, #3
 800a7b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800a7ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a7be:	2100      	movs	r1, #0
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f000 fc6d 	bl	800b0a0 <hci_send_req>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	da01      	bge.n	800a7d0 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 800a7cc:	23ff      	movs	r3, #255	; 0xff
 800a7ce:	e011      	b.n	800a7f4 <aci_gatt_add_service+0x154>
  if (resp.Status) 
 800a7d0:	f107 030c 	add.w	r3, r7, #12
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d003      	beq.n	800a7e2 <aci_gatt_add_service+0x142>
  {
    return resp.Status;
 800a7da:	f107 030c 	add.w	r3, r7, #12
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	e008      	b.n	800a7f4 <aci_gatt_add_service+0x154>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800a7e2:	f107 030c 	add.w	r3, r7, #12
 800a7e6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a7ea:	b29a      	uxth	r2, r3
 800a7ec:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a7f0:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a7f2:	2300      	movs	r3, #0
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd90      	pop	{r4, r7, pc}

0800a7fe <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 800a7fe:	b590      	push	{r4, r7, lr}
 800a800:	b0d1      	sub	sp, #324	; 0x144
 800a802:	af00      	add	r7, sp, #0
 800a804:	4604      	mov	r4, r0
 800a806:	4608      	mov	r0, r1
 800a808:	f107 0108 	add.w	r1, r7, #8
 800a80c:	600a      	str	r2, [r1, #0]
 800a80e:	4619      	mov	r1, r3
 800a810:	f107 030e 	add.w	r3, r7, #14
 800a814:	4622      	mov	r2, r4
 800a816:	801a      	strh	r2, [r3, #0]
 800a818:	f107 030d 	add.w	r3, r7, #13
 800a81c:	4602      	mov	r2, r0
 800a81e:	701a      	strb	r2, [r3, #0]
 800a820:	1dbb      	adds	r3, r7, #6
 800a822:	460a      	mov	r2, r1
 800a824:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800a826:	f107 0318 	add.w	r3, r7, #24
 800a82a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800a82e:	f107 030d 	add.w	r3, r7, #13
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	2b01      	cmp	r3, #1
 800a836:	d008      	beq.n	800a84a <aci_gatt_add_char+0x4c>
 800a838:	f107 030d 	add.w	r3, r7, #13
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	2b02      	cmp	r3, #2
 800a840:	d101      	bne.n	800a846 <aci_gatt_add_char+0x48>
 800a842:	2313      	movs	r3, #19
 800a844:	e002      	b.n	800a84c <aci_gatt_add_char+0x4e>
 800a846:	2303      	movs	r3, #3
 800a848:	e000      	b.n	800a84c <aci_gatt_add_char+0x4e>
 800a84a:	2305      	movs	r3, #5
 800a84c:	f107 0218 	add.w	r2, r7, #24
 800a850:	4413      	add	r3, r2
 800a852:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800a856:	f107 0314 	add.w	r3, r7, #20
 800a85a:	2203      	movs	r2, #3
 800a85c:	2100      	movs	r1, #0
 800a85e:	4618      	mov	r0, r3
 800a860:	f000 fd5a 	bl	800b318 <Osal_MemSet>
  int index_input = 0;
 800a864:	2300      	movs	r3, #0
 800a866:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = htob(Service_Handle, 2);
 800a86a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a86e:	f107 020e 	add.w	r2, r7, #14
 800a872:	8812      	ldrh	r2, [r2, #0]
 800a874:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a876:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a87a:	3302      	adds	r3, #2
 800a87c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 800a880:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a884:	f107 020d 	add.w	r2, r7, #13
 800a888:	7812      	ldrb	r2, [r2, #0]
 800a88a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a88c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a890:	3301      	adds	r3, #1
 800a892:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 800a896:	f107 030d 	add.w	r3, r7, #13
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d002      	beq.n	800a8a6 <aci_gatt_add_char+0xa8>
 800a8a0:	2b02      	cmp	r3, #2
 800a8a2:	d004      	beq.n	800a8ae <aci_gatt_add_char+0xb0>
 800a8a4:	e007      	b.n	800a8b6 <aci_gatt_add_char+0xb8>
      case 1: size = 2; break;
 800a8a6:	2302      	movs	r3, #2
 800a8a8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800a8ac:	e005      	b.n	800a8ba <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 800a8ae:	2310      	movs	r3, #16
 800a8b0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800a8b4:	e001      	b.n	800a8ba <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 800a8b6:	2347      	movs	r3, #71	; 0x47
 800a8b8:	e086      	b.n	800a9c8 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 800a8ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a8be:	1cd8      	adds	r0, r3, #3
 800a8c0:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800a8c4:	f107 0308 	add.w	r3, r7, #8
 800a8c8:	6819      	ldr	r1, [r3, #0]
 800a8ca:	f000 fd15 	bl	800b2f8 <Osal_MemCpy>
    index_input += size;
 800a8ce:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800a8d2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800a8d6:	4413      	add	r3, r2
 800a8d8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 800a8dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a8e0:	1dba      	adds	r2, r7, #6
 800a8e2:	8812      	ldrh	r2, [r2, #0]
 800a8e4:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800a8e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a8ea:	3302      	adds	r3, #2
 800a8ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 800a8f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a8f4:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800a8f8:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800a8fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a8fe:	3301      	adds	r3, #1
 800a900:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 800a904:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a908:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800a90c:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800a90e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a912:	3301      	adds	r3, #1
 800a914:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 800a918:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a91c:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800a920:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800a922:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a926:	3301      	adds	r3, #1
 800a928:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 800a92c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a930:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800a934:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800a936:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a93a:	3301      	adds	r3, #1
 800a93c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 800a940:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a944:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800a948:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800a94a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a94e:	3301      	adds	r3, #1
 800a950:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 800a954:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a958:	2218      	movs	r2, #24
 800a95a:	2100      	movs	r1, #0
 800a95c:	4618      	mov	r0, r3
 800a95e:	f000 fcdb 	bl	800b318 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a962:	233f      	movs	r3, #63	; 0x3f
 800a964:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800a968:	f44f 7382 	mov.w	r3, #260	; 0x104
 800a96c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800a970:	f107 0318 	add.w	r3, r7, #24
 800a974:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800a978:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a97c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800a980:	f107 0314 	add.w	r3, r7, #20
 800a984:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800a988:	2303      	movs	r3, #3
 800a98a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800a98e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a992:	2100      	movs	r1, #0
 800a994:	4618      	mov	r0, r3
 800a996:	f000 fb83 	bl	800b0a0 <hci_send_req>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	da01      	bge.n	800a9a4 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 800a9a0:	23ff      	movs	r3, #255	; 0xff
 800a9a2:	e011      	b.n	800a9c8 <aci_gatt_add_char+0x1ca>
  if (resp.Status) 
 800a9a4:	f107 0314 	add.w	r3, r7, #20
 800a9a8:	781b      	ldrb	r3, [r3, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d003      	beq.n	800a9b6 <aci_gatt_add_char+0x1b8>
  {
    return resp.Status;
 800a9ae:	f107 0314 	add.w	r3, r7, #20
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	e008      	b.n	800a9c8 <aci_gatt_add_char+0x1ca>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 800a9b6:	f107 0314 	add.w	r3, r7, #20
 800a9ba:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a9be:	b29a      	uxth	r2, r3
 800a9c0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800a9c4:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a9c6:	2300      	movs	r3, #0
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd90      	pop	{r4, r7, pc}

0800a9d2 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 800a9d2:	b5b0      	push	{r4, r5, r7, lr}
 800a9d4:	b0cc      	sub	sp, #304	; 0x130
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	4605      	mov	r5, r0
 800a9da:	460c      	mov	r4, r1
 800a9dc:	4610      	mov	r0, r2
 800a9de:	4619      	mov	r1, r3
 800a9e0:	1dbb      	adds	r3, r7, #6
 800a9e2:	462a      	mov	r2, r5
 800a9e4:	801a      	strh	r2, [r3, #0]
 800a9e6:	1d3b      	adds	r3, r7, #4
 800a9e8:	4622      	mov	r2, r4
 800a9ea:	801a      	strh	r2, [r3, #0]
 800a9ec:	1cfb      	adds	r3, r7, #3
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	701a      	strb	r2, [r3, #0]
 800a9f2:	1cbb      	adds	r3, r7, #2
 800a9f4:	460a      	mov	r2, r1
 800a9f6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800a9f8:	f107 0310 	add.w	r3, r7, #16
 800a9fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800aa00:	f107 030f 	add.w	r3, r7, #15
 800aa04:	2200      	movs	r2, #0
 800aa06:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = htob(Service_Handle, 2);
 800aa0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa12:	1dba      	adds	r2, r7, #6
 800aa14:	8812      	ldrh	r2, [r2, #0]
 800aa16:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800aa18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa1c:	3302      	adds	r3, #2
 800aa1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = htob(Char_Handle, 2);
 800aa22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa26:	1d3a      	adds	r2, r7, #4
 800aa28:	8812      	ldrh	r2, [r2, #0]
 800aa2a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800aa2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa30:	3302      	adds	r3, #2
 800aa32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = htob(Val_Offset, 1);
 800aa36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa3a:	1cfa      	adds	r2, r7, #3
 800aa3c:	7812      	ldrb	r2, [r2, #0]
 800aa3e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800aa40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa44:	3301      	adds	r3, #1
 800aa46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 800aa4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa4e:	1cba      	adds	r2, r7, #2
 800aa50:	7812      	ldrb	r2, [r2, #0]
 800aa52:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800aa54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa58:	3301      	adds	r3, #1
 800aa5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 800aa5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa62:	1d98      	adds	r0, r3, #6
 800aa64:	1cbb      	adds	r3, r7, #2
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	461a      	mov	r2, r3
 800aa6a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800aa6e:	f000 fc43 	bl	800b2f8 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800aa72:	1cbb      	adds	r3, r7, #2
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800aa7a:	4413      	add	r3, r2
 800aa7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800aa80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aa84:	2218      	movs	r2, #24
 800aa86:	2100      	movs	r1, #0
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f000 fc45 	bl	800b318 <Osal_MemSet>
  rq.ogf = 0x3f;
 800aa8e:	233f      	movs	r3, #63	; 0x3f
 800aa90:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800aa94:	f44f 7383 	mov.w	r3, #262	; 0x106
 800aa98:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800aa9c:	f107 0310 	add.w	r3, r7, #16
 800aaa0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800aaa4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aaa8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800aaac:	f107 030f 	add.w	r3, r7, #15
 800aab0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800aab4:	2301      	movs	r3, #1
 800aab6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800aaba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aabe:	2100      	movs	r1, #0
 800aac0:	4618      	mov	r0, r3
 800aac2:	f000 faed 	bl	800b0a0 <hci_send_req>
 800aac6:	4603      	mov	r3, r0
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	da01      	bge.n	800aad0 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800aacc:	23ff      	movs	r3, #255	; 0xff
 800aace:	e009      	b.n	800aae4 <aci_gatt_update_char_value+0x112>
  if (status) 
 800aad0:	f107 030f 	add.w	r3, r7, #15
 800aad4:	781b      	ldrb	r3, [r3, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d003      	beq.n	800aae2 <aci_gatt_update_char_value+0x110>
  {
    return status;
 800aada:	f107 030f 	add.w	r3, r7, #15
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	e000      	b.n	800aae4 <aci_gatt_update_char_value+0x112>
  }
  return BLE_STATUS_SUCCESS;
 800aae2:	2300      	movs	r3, #0
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bdb0      	pop	{r4, r5, r7, pc}

0800aaee <aci_gatt_exchange_config>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gatt_exchange_config(uint16_t Connection_Handle)
{
 800aaee:	b580      	push	{r7, lr}
 800aaf0:	b0cc      	sub	sp, #304	; 0x130
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	1dbb      	adds	r3, r7, #6
 800aaf8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_exchange_config_cp0 *cp0 = (aci_gatt_exchange_config_cp0*)(cmd_buffer);
 800aafa:	f107 0310 	add.w	r3, r7, #16
 800aafe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ab02:	f107 030f 	add.w	r3, r7, #15
 800ab06:	2200      	movs	r2, #0
 800ab08:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800ab10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab14:	1dba      	adds	r2, r7, #6
 800ab16:	8812      	ldrh	r2, [r2, #0]
 800ab18:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ab1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab1e:	3302      	adds	r3, #2
 800ab20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800ab24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ab28:	2218      	movs	r2, #24
 800ab2a:	2100      	movs	r1, #0
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f000 fbf3 	bl	800b318 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ab32:	233f      	movs	r3, #63	; 0x3f
 800ab34:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x10b;
 800ab38:	f240 130b 	movw	r3, #267	; 0x10b
 800ab3c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800ab40:	230f      	movs	r3, #15
 800ab42:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800ab46:	f107 0310 	add.w	r3, r7, #16
 800ab4a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ab4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab52:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ab56:	f107 030f 	add.w	r3, r7, #15
 800ab5a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ab64:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ab68:	2100      	movs	r1, #0
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f000 fa98 	bl	800b0a0 <hci_send_req>
 800ab70:	4603      	mov	r3, r0
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	da01      	bge.n	800ab7a <aci_gatt_exchange_config+0x8c>
    return BLE_STATUS_TIMEOUT;
 800ab76:	23ff      	movs	r3, #255	; 0xff
 800ab78:	e009      	b.n	800ab8e <aci_gatt_exchange_config+0xa0>
  if (status) 
 800ab7a:	f107 030f 	add.w	r3, r7, #15
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d003      	beq.n	800ab8c <aci_gatt_exchange_config+0x9e>
  {
    return status;
 800ab84:	f107 030f 	add.w	r3, r7, #15
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	e000      	b.n	800ab8e <aci_gatt_exchange_config+0xa0>
  }
  return BLE_STATUS_SUCCESS;
 800ab8c:	2300      	movs	r3, #0
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b0cc      	sub	sp, #304	; 0x130
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	463b      	mov	r3, r7
 800aba0:	601a      	str	r2, [r3, #0]
 800aba2:	1dfb      	adds	r3, r7, #7
 800aba4:	4602      	mov	r2, r0
 800aba6:	701a      	strb	r2, [r3, #0]
 800aba8:	1dbb      	adds	r3, r7, #6
 800abaa:	460a      	mov	r2, r1
 800abac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800abae:	f107 0310 	add.w	r3, r7, #16
 800abb2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800abb6:	f107 030f 	add.w	r3, r7, #15
 800abba:	2200      	movs	r2, #0
 800abbc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800abbe:	2300      	movs	r3, #0
 800abc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = htob(Offset, 1);
 800abc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abc8:	1dfa      	adds	r2, r7, #7
 800abca:	7812      	ldrb	r2, [r2, #0]
 800abcc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800abce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800abd2:	3301      	adds	r3, #1
 800abd4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = htob(Length, 1);
 800abd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abdc:	1dba      	adds	r2, r7, #6
 800abde:	7812      	ldrb	r2, [r2, #0]
 800abe0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800abe2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800abe6:	3301      	adds	r3, #1
 800abe8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 800abec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abf0:	1c98      	adds	r0, r3, #2
 800abf2:	1dbb      	adds	r3, r7, #6
 800abf4:	781a      	ldrb	r2, [r3, #0]
 800abf6:	463b      	mov	r3, r7
 800abf8:	6819      	ldr	r1, [r3, #0]
 800abfa:	f000 fb7d 	bl	800b2f8 <Osal_MemCpy>
  index_input += Length;
 800abfe:	1dbb      	adds	r3, r7, #6
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800ac06:	4413      	add	r3, r2
 800ac08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800ac0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ac10:	2218      	movs	r2, #24
 800ac12:	2100      	movs	r1, #0
 800ac14:	4618      	mov	r0, r3
 800ac16:	f000 fb7f 	bl	800b318 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ac1a:	233f      	movs	r3, #63	; 0x3f
 800ac1c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800ac20:	230c      	movs	r3, #12
 800ac22:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ac26:	f107 0310 	add.w	r3, r7, #16
 800ac2a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ac2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac32:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ac36:	f107 030f 	add.w	r3, r7, #15
 800ac3a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ac44:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ac48:	2100      	movs	r1, #0
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f000 fa28 	bl	800b0a0 <hci_send_req>
 800ac50:	4603      	mov	r3, r0
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	da01      	bge.n	800ac5a <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800ac56:	23ff      	movs	r3, #255	; 0xff
 800ac58:	e009      	b.n	800ac6e <aci_hal_write_config_data+0xd6>
  if (status) 
 800ac5a:	f107 030f 	add.w	r3, r7, #15
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d003      	beq.n	800ac6c <aci_hal_write_config_data+0xd4>
  {
    return status;
 800ac64:	f107 030f 	add.w	r3, r7, #15
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	e000      	b.n	800ac6e <aci_hal_write_config_data+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 800ac6c:	2300      	movs	r3, #0
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b0cc      	sub	sp, #304	; 0x130
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	4602      	mov	r2, r0
 800ac80:	1dfb      	adds	r3, r7, #7
 800ac82:	701a      	strb	r2, [r3, #0]
 800ac84:	1dbb      	adds	r3, r7, #6
 800ac86:	460a      	mov	r2, r1
 800ac88:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800ac8a:	f107 0310 	add.w	r3, r7, #16
 800ac8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ac92:	f107 030f 	add.w	r3, r7, #15
 800ac96:	2200      	movs	r2, #0
 800ac98:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = htob(En_High_Power, 1);
 800aca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aca4:	1dfa      	adds	r2, r7, #7
 800aca6:	7812      	ldrb	r2, [r2, #0]
 800aca8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800acaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800acae:	3301      	adds	r3, #1
 800acb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = htob(PA_Level, 1);
 800acb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800acb8:	1dba      	adds	r2, r7, #6
 800acba:	7812      	ldrb	r2, [r2, #0]
 800acbc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800acbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800acc2:	3301      	adds	r3, #1
 800acc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800acc8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800accc:	2218      	movs	r2, #24
 800acce:	2100      	movs	r1, #0
 800acd0:	4618      	mov	r0, r3
 800acd2:	f000 fb21 	bl	800b318 <Osal_MemSet>
  rq.ogf = 0x3f;
 800acd6:	233f      	movs	r3, #63	; 0x3f
 800acd8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800acdc:	230f      	movs	r3, #15
 800acde:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ace2:	f107 0310 	add.w	r3, r7, #16
 800ace6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800acea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800acee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800acf2:	f107 030f 	add.w	r3, r7, #15
 800acf6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800acfa:	2301      	movs	r3, #1
 800acfc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ad00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ad04:	2100      	movs	r1, #0
 800ad06:	4618      	mov	r0, r3
 800ad08:	f000 f9ca 	bl	800b0a0 <hci_send_req>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	da01      	bge.n	800ad16 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 800ad12:	23ff      	movs	r3, #255	; 0xff
 800ad14:	e009      	b.n	800ad2a <aci_hal_set_tx_power_level+0xb2>
  if (status) 
 800ad16:	f107 030f 	add.w	r3, r7, #15
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d003      	beq.n	800ad28 <aci_hal_set_tx_power_level+0xb0>
  {
    return status;
 800ad20:	f107 030f 	add.w	r3, r7, #15
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	e000      	b.n	800ad2a <aci_hal_set_tx_power_level+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 800ad28:	2300      	movs	r3, #0
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy((void *) Link_Connection_Handle, (const void *) resp.Link_Connection_Handle, 16);
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask(uint16_t Radio_Activity_Mask)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b0cc      	sub	sp, #304	; 0x130
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	1dbb      	adds	r3, r7, #6
 800ad3e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800ad40:	f107 0310 	add.w	r3, r7, #16
 800ad44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ad48:	f107 030f 	add.w	r3, r7, #15
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ad50:	2300      	movs	r3, #0
 800ad52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = htob(Radio_Activity_Mask, 2);
 800ad56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad5a:	1dba      	adds	r2, r7, #6
 800ad5c:	8812      	ldrh	r2, [r2, #0]
 800ad5e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ad60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad64:	3302      	adds	r3, #2
 800ad66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800ad6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ad6e:	2218      	movs	r2, #24
 800ad70:	2100      	movs	r1, #0
 800ad72:	4618      	mov	r0, r3
 800ad74:	f000 fad0 	bl	800b318 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ad78:	233f      	movs	r3, #63	; 0x3f
 800ad7a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800ad7e:	2318      	movs	r3, #24
 800ad80:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ad84:	f107 0310 	add.w	r3, r7, #16
 800ad88:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ad8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ad94:	f107 030f 	add.w	r3, r7, #15
 800ad98:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ada2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ada6:	2100      	movs	r1, #0
 800ada8:	4618      	mov	r0, r3
 800adaa:	f000 f979 	bl	800b0a0 <hci_send_req>
 800adae:	4603      	mov	r3, r0
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	da01      	bge.n	800adb8 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 800adb4:	23ff      	movs	r3, #255	; 0xff
 800adb6:	e009      	b.n	800adcc <aci_hal_set_radio_activity_mask+0x98>
  if (status) 
 800adb8:	f107 030f 	add.w	r3, r7, #15
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d003      	beq.n	800adca <aci_hal_set_radio_activity_mask+0x96>
  {
    return status;
 800adc2:	f107 030f 	add.w	r3, r7, #15
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	e000      	b.n	800adcc <aci_hal_set_radio_activity_mask+0x98>
  }
  return BLE_STATUS_SUCCESS;
 800adca:	2300      	movs	r3, #0
}
 800adcc:	4618      	mov	r0, r3
 800adce:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}

0800add6 <hci_reset>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_reset(void)
{
 800add6:	b580      	push	{r7, lr}
 800add8:	b088      	sub	sp, #32
 800adda:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800addc:	2300      	movs	r3, #0
 800adde:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800ade0:	f107 0308 	add.w	r3, r7, #8
 800ade4:	2218      	movs	r2, #24
 800ade6:	2100      	movs	r1, #0
 800ade8:	4618      	mov	r0, r3
 800adea:	f000 fa95 	bl	800b318 <Osal_MemSet>
  rq.ogf = 0x03;
 800adee:	2303      	movs	r3, #3
 800adf0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800adf2:	2303      	movs	r3, #3
 800adf4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800adf6:	1dfb      	adds	r3, r7, #7
 800adf8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800adfa:	2301      	movs	r3, #1
 800adfc:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800adfe:	f107 0308 	add.w	r3, r7, #8
 800ae02:	2100      	movs	r1, #0
 800ae04:	4618      	mov	r0, r3
 800ae06:	f000 f94b 	bl	800b0a0 <hci_send_req>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	da01      	bge.n	800ae14 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800ae10:	23ff      	movs	r3, #255	; 0xff
 800ae12:	e005      	b.n	800ae20 <hci_reset+0x4a>
  if (status) 
 800ae14:	79fb      	ldrb	r3, [r7, #7]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d001      	beq.n	800ae1e <hci_reset+0x48>
  {
    return status;
 800ae1a:	79fb      	ldrb	r3, [r7, #7]
 800ae1c:	e000      	b.n	800ae20 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800ae1e:	2300      	movs	r3, #0
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3720      	adds	r7, #32
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy(uint16_t Connection_Handle,
                           uint8_t *TX_PHY,
                           uint8_t *RX_PHY)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b0ce      	sub	sp, #312	; 0x138
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	f107 0308 	add.w	r3, r7, #8
 800ae32:	6019      	str	r1, [r3, #0]
 800ae34:	1d3b      	adds	r3, r7, #4
 800ae36:	601a      	str	r2, [r3, #0]
 800ae38:	f107 030e 	add.w	r3, r7, #14
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800ae40:	f107 0318 	add.w	r3, r7, #24
 800ae44:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800ae48:	f107 0310 	add.w	r3, r7, #16
 800ae4c:	2205      	movs	r2, #5
 800ae4e:	2100      	movs	r1, #0
 800ae50:	4618      	mov	r0, r3
 800ae52:	f000 fa61 	bl	800b318 <Osal_MemSet>
  int index_input = 0;
 800ae56:	2300      	movs	r3, #0
 800ae58:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800ae5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ae60:	f107 020e 	add.w	r2, r7, #14
 800ae64:	8812      	ldrh	r2, [r2, #0]
 800ae66:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ae68:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ae6c:	3302      	adds	r3, #2
 800ae6e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet(&rq, 0, sizeof(rq));
 800ae72:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800ae76:	2218      	movs	r2, #24
 800ae78:	2100      	movs	r1, #0
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f000 fa4c 	bl	800b318 <Osal_MemSet>
  rq.ogf = 0x08;
 800ae80:	2308      	movs	r3, #8
 800ae82:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800ae86:	2330      	movs	r3, #48	; 0x30
 800ae88:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800ae8c:	f107 0318 	add.w	r3, r7, #24
 800ae90:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800ae94:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ae98:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800ae9c:	f107 0310 	add.w	r3, r7, #16
 800aea0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800aea4:	2305      	movs	r3, #5
 800aea6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800aeaa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800aeae:	2100      	movs	r1, #0
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f000 f8f5 	bl	800b0a0 <hci_send_req>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	da01      	bge.n	800aec0 <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 800aebc:	23ff      	movs	r3, #255	; 0xff
 800aebe:	e016      	b.n	800aeee <hci_le_read_phy+0xc6>
  if (resp.Status) 
 800aec0:	f107 0310 	add.w	r3, r7, #16
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d003      	beq.n	800aed2 <hci_le_read_phy+0xaa>
  {
    return resp.Status;
 800aeca:	f107 0310 	add.w	r3, r7, #16
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	e00d      	b.n	800aeee <hci_le_read_phy+0xc6>
  }
  *TX_PHY = btoh(resp.TX_PHY, 1);
 800aed2:	f107 0310 	add.w	r3, r7, #16
 800aed6:	78da      	ldrb	r2, [r3, #3]
 800aed8:	f107 0308 	add.w	r3, r7, #8
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	701a      	strb	r2, [r3, #0]
  *RX_PHY = btoh(resp.RX_PHY, 1);
 800aee0:	f107 0310 	add.w	r3, r7, #16
 800aee4:	791a      	ldrb	r2, [r3, #4]
 800aee6:	1d3b      	adds	r3, r7, #4
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800aeec:	2300      	movs	r3, #0
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy(uint8_t ALL_PHYS,
                                  uint8_t TX_PHYS,
                                  uint8_t RX_PHYS)
{
 800aef8:	b590      	push	{r4, r7, lr}
 800aefa:	b0cd      	sub	sp, #308	; 0x134
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	4604      	mov	r4, r0
 800af00:	4608      	mov	r0, r1
 800af02:	4611      	mov	r1, r2
 800af04:	1dfb      	adds	r3, r7, #7
 800af06:	4622      	mov	r2, r4
 800af08:	701a      	strb	r2, [r3, #0]
 800af0a:	1dbb      	adds	r3, r7, #6
 800af0c:	4602      	mov	r2, r0
 800af0e:	701a      	strb	r2, [r3, #0]
 800af10:	1d7b      	adds	r3, r7, #5
 800af12:	460a      	mov	r2, r1
 800af14:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800af16:	f107 0310 	add.w	r3, r7, #16
 800af1a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800af1e:	f107 030f 	add.w	r3, r7, #15
 800af22:	2200      	movs	r2, #0
 800af24:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800af26:	2300      	movs	r3, #0
 800af28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = htob(ALL_PHYS, 1);
 800af2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af30:	1dfa      	adds	r2, r7, #7
 800af32:	7812      	ldrb	r2, [r2, #0]
 800af34:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800af36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af3a:	3301      	adds	r3, #1
 800af3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = htob(TX_PHYS, 1);
 800af40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af44:	1dba      	adds	r2, r7, #6
 800af46:	7812      	ldrb	r2, [r2, #0]
 800af48:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800af4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af4e:	3301      	adds	r3, #1
 800af50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = htob(RX_PHYS, 1);
 800af54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af58:	1d7a      	adds	r2, r7, #5
 800af5a:	7812      	ldrb	r2, [r2, #0]
 800af5c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800af5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af62:	3301      	adds	r3, #1
 800af64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800af68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800af6c:	2218      	movs	r2, #24
 800af6e:	2100      	movs	r1, #0
 800af70:	4618      	mov	r0, r3
 800af72:	f000 f9d1 	bl	800b318 <Osal_MemSet>
  rq.ogf = 0x08;
 800af76:	2308      	movs	r3, #8
 800af78:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800af7c:	2331      	movs	r3, #49	; 0x31
 800af7e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800af82:	f107 0310 	add.w	r3, r7, #16
 800af86:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800af8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af8e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800af92:	f107 030f 	add.w	r3, r7, #15
 800af96:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800af9a:	2301      	movs	r3, #1
 800af9c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800afa0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800afa4:	2100      	movs	r1, #0
 800afa6:	4618      	mov	r0, r3
 800afa8:	f000 f87a 	bl	800b0a0 <hci_send_req>
 800afac:	4603      	mov	r3, r0
 800afae:	2b00      	cmp	r3, #0
 800afb0:	da01      	bge.n	800afb6 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 800afb2:	23ff      	movs	r3, #255	; 0xff
 800afb4:	e009      	b.n	800afca <hci_le_set_default_phy+0xd2>
  if (status) 
 800afb6:	f107 030f 	add.w	r3, r7, #15
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d003      	beq.n	800afc8 <hci_le_set_default_phy+0xd0>
  {
    return status;
 800afc0:	f107 030f 	add.w	r3, r7, #15
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	e000      	b.n	800afca <hci_le_set_default_phy+0xd2>
  }
  return BLE_STATUS_SUCCESS;
 800afc8:	2300      	movs	r3, #0
}
 800afca:	4618      	mov	r0, r3
 800afcc:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd90      	pop	{r4, r7, pc}

0800afd4 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	4a08      	ldr	r2, [pc, #32]	; (800b004 <hci_init+0x30>)
 800afe4:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800afe6:	4a08      	ldr	r2, [pc, #32]	; (800b008 <hci_init+0x34>)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800afec:	4806      	ldr	r0, [pc, #24]	; (800b008 <hci_init+0x34>)
 800afee:	f000 f96f 	bl	800b2d0 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	4618      	mov	r0, r3
 800aff8:	f000 f8d0 	bl	800b19c <TlInit>

  return;
 800affc:	bf00      	nop
}
 800affe:	3708      	adds	r7, #8
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}
 800b004:	200002f8 	.word	0x200002f8
 800b008:	200002d0 	.word	0x200002d0

0800b00c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800b012:	4820      	ldr	r0, [pc, #128]	; (800b094 <hci_user_evt_proc+0x88>)
 800b014:	f000 fc3e 	bl	800b894 <LST_is_empty>
 800b018:	4603      	mov	r3, r0
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d128      	bne.n	800b070 <hci_user_evt_proc+0x64>
 800b01e:	4b1e      	ldr	r3, [pc, #120]	; (800b098 <hci_user_evt_proc+0x8c>)
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d024      	beq.n	800b070 <hci_user_evt_proc+0x64>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800b026:	f107 030c 	add.w	r3, r7, #12
 800b02a:	4619      	mov	r1, r3
 800b02c:	4819      	ldr	r0, [pc, #100]	; (800b094 <hci_user_evt_proc+0x88>)
 800b02e:	f000 fcb8 	bl	800b9a2 <LST_remove_head>

    UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800b032:	4b19      	ldr	r3, [pc, #100]	; (800b098 <hci_user_evt_proc+0x8c>)
 800b034:	2201      	movs	r2, #1
 800b036:	701a      	strb	r2, [r3, #0]

    if (hciContext.UserEvtRx != NULL)
 800b038:	4b18      	ldr	r3, [pc, #96]	; (800b09c <hci_user_evt_proc+0x90>)
 800b03a:	69db      	ldr	r3, [r3, #28]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d009      	beq.n	800b054 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	60bb      	str	r3, [r7, #8]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800b044:	4b15      	ldr	r3, [pc, #84]	; (800b09c <hci_user_evt_proc+0x90>)
 800b046:	69db      	ldr	r3, [r3, #28]
 800b048:	1d3a      	adds	r2, r7, #4
 800b04a:	4610      	mov	r0, r2
 800b04c:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800b04e:	793a      	ldrb	r2, [r7, #4]
 800b050:	4b11      	ldr	r3, [pc, #68]	; (800b098 <hci_user_evt_proc+0x8c>)
 800b052:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800b054:	4b10      	ldr	r3, [pc, #64]	; (800b098 <hci_user_evt_proc+0x8c>)
 800b056:	781b      	ldrb	r3, [r3, #0]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d004      	beq.n	800b066 <hci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	4618      	mov	r0, r3
 800b060:	f000 ff16 	bl	800be90 <TL_MM_EvtDone>
 800b064:	e004      	b.n	800b070 <hci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	4619      	mov	r1, r3
 800b06a:	480a      	ldr	r0, [pc, #40]	; (800b094 <hci_user_evt_proc+0x88>)
 800b06c:	f000 fc32 	bl	800b8d4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800b070:	4808      	ldr	r0, [pc, #32]	; (800b094 <hci_user_evt_proc+0x88>)
 800b072:	f000 fc0f 	bl	800b894 <LST_is_empty>
 800b076:	4603      	mov	r3, r0
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d107      	bne.n	800b08c <hci_user_evt_proc+0x80>
 800b07c:	4b06      	ldr	r3, [pc, #24]	; (800b098 <hci_user_evt_proc+0x8c>)
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d003      	beq.n	800b08c <hci_user_evt_proc+0x80>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800b084:	4803      	ldr	r0, [pc, #12]	; (800b094 <hci_user_evt_proc+0x88>)
 800b086:	f001 fa98 	bl	800c5ba <hci_notify_asynch_evt>
  }


  return;
 800b08a:	bf00      	nop
 800b08c:	bf00      	nop
}
 800b08e:	3710      	adds	r7, #16
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}
 800b094:	200000cc 	.word	0x200000cc
 800b098:	200000d8 	.word	0x200000d8
 800b09c:	200002d0 	.word	0x200002d0

0800b0a0 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b088      	sub	sp, #32
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800b0ac:	2000      	movs	r0, #0
 800b0ae:	f000 f8cb 	bl	800b248 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	885b      	ldrh	r3, [r3, #2]
 800b0ba:	b21b      	sxth	r3, r3
 800b0bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b0c0:	b21a      	sxth	r2, r3
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	881b      	ldrh	r3, [r3, #0]
 800b0c6:	029b      	lsls	r3, r3, #10
 800b0c8:	b21b      	sxth	r3, r3
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	b21b      	sxth	r3, r3
 800b0ce:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	b2d9      	uxtb	r1, r3
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	689a      	ldr	r2, [r3, #8]
 800b0da:	8bbb      	ldrh	r3, [r7, #28]
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f000 f88d 	bl	800b1fc <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800b0e2:	e04e      	b.n	800b182 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800b0e4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800b0e8:	f001 fa7e 	bl	800c5e8 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800b0ec:	e043      	b.n	800b176 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800b0ee:	f107 030c 	add.w	r3, r7, #12
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	4828      	ldr	r0, [pc, #160]	; (800b198 <hci_send_req+0xf8>)
 800b0f6:	f000 fc54 	bl	800b9a2 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	7a5b      	ldrb	r3, [r3, #9]
 800b0fe:	2b0f      	cmp	r3, #15
 800b100:	d114      	bne.n	800b12c <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	330b      	adds	r3, #11
 800b106:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	885b      	ldrh	r3, [r3, #2]
 800b10c:	b29b      	uxth	r3, r3
 800b10e:	8bba      	ldrh	r2, [r7, #28]
 800b110:	429a      	cmp	r2, r3
 800b112:	d104      	bne.n	800b11e <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	691b      	ldr	r3, [r3, #16]
 800b118:	693a      	ldr	r2, [r7, #16]
 800b11a:	7812      	ldrb	r2, [r2, #0]
 800b11c:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	785b      	ldrb	r3, [r3, #1]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d027      	beq.n	800b176 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800b126:	2301      	movs	r3, #1
 800b128:	77fb      	strb	r3, [r7, #31]
 800b12a:	e024      	b.n	800b176 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	330b      	adds	r3, #11
 800b130:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800b132:	69bb      	ldr	r3, [r7, #24]
 800b134:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b138:	b29b      	uxth	r3, r3
 800b13a:	8bba      	ldrh	r2, [r7, #28]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d114      	bne.n	800b16a <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	7a9b      	ldrb	r3, [r3, #10]
 800b144:	3b03      	subs	r3, #3
 800b146:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	695a      	ldr	r2, [r3, #20]
 800b14c:	7dfb      	ldrb	r3, [r7, #23]
 800b14e:	429a      	cmp	r2, r3
 800b150:	bfa8      	it	ge
 800b152:	461a      	movge	r2, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6918      	ldr	r0, [r3, #16]
 800b15c:	69bb      	ldr	r3, [r7, #24]
 800b15e:	1cd9      	adds	r1, r3, #3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	695b      	ldr	r3, [r3, #20]
 800b164:	461a      	mov	r2, r3
 800b166:	f001 fd37 	bl	800cbd8 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800b16a:	69bb      	ldr	r3, [r7, #24]
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d001      	beq.n	800b176 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800b172:	2301      	movs	r3, #1
 800b174:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800b176:	4808      	ldr	r0, [pc, #32]	; (800b198 <hci_send_req+0xf8>)
 800b178:	f000 fb8c 	bl	800b894 <LST_is_empty>
 800b17c:	4603      	mov	r3, r0
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d0b5      	beq.n	800b0ee <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800b182:	7ffb      	ldrb	r3, [r7, #31]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d0ad      	beq.n	800b0e4 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800b188:	2001      	movs	r0, #1
 800b18a:	f000 f85d 	bl	800b248 <NotifyCmdStatus>

  return 0;
 800b18e:	2300      	movs	r3, #0
}
 800b190:	4618      	mov	r0, r3
 800b192:	3720      	adds	r7, #32
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}
 800b198:	200002f0 	.word	0x200002f0

0800b19c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b086      	sub	sp, #24
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800b1a4:	480f      	ldr	r0, [pc, #60]	; (800b1e4 <TlInit+0x48>)
 800b1a6:	f000 fb65 	bl	800b874 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800b1aa:	4a0f      	ldr	r2, [pc, #60]	; (800b1e8 <TlInit+0x4c>)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800b1b0:	480e      	ldr	r0, [pc, #56]	; (800b1ec <TlInit+0x50>)
 800b1b2:	f000 fb5f 	bl	800b874 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800b1b6:	4b0e      	ldr	r3, [pc, #56]	; (800b1f0 <TlInit+0x54>)
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800b1bc:	4b0d      	ldr	r3, [pc, #52]	; (800b1f4 <TlInit+0x58>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d00a      	beq.n	800b1da <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800b1c8:	4b0b      	ldr	r3, [pc, #44]	; (800b1f8 <TlInit+0x5c>)
 800b1ca:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800b1cc:	4b09      	ldr	r3, [pc, #36]	; (800b1f4 <TlInit+0x58>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f107 0208 	add.w	r2, r7, #8
 800b1d4:	4610      	mov	r0, r2
 800b1d6:	4798      	blx	r3
  }

  return;
 800b1d8:	bf00      	nop
 800b1da:	bf00      	nop
}
 800b1dc:	3718      	adds	r7, #24
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	200002f0 	.word	0x200002f0
 800b1e8:	200000d4 	.word	0x200000d4
 800b1ec:	200000cc 	.word	0x200000cc
 800b1f0:	200000d8 	.word	0x200000d8
 800b1f4:	200002d0 	.word	0x200002d0
 800b1f8:	0800b289 	.word	0x0800b289

0800b1fc <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
 800b202:	4603      	mov	r3, r0
 800b204:	603a      	str	r2, [r7, #0]
 800b206:	80fb      	strh	r3, [r7, #6]
 800b208:	460b      	mov	r3, r1
 800b20a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800b20c:	4b0c      	ldr	r3, [pc, #48]	; (800b240 <SendCmd+0x44>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	88fa      	ldrh	r2, [r7, #6]
 800b212:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800b216:	4b0a      	ldr	r3, [pc, #40]	; (800b240 <SendCmd+0x44>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	797a      	ldrb	r2, [r7, #5]
 800b21c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800b21e:	4b08      	ldr	r3, [pc, #32]	; (800b240 <SendCmd+0x44>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	330c      	adds	r3, #12
 800b224:	797a      	ldrb	r2, [r7, #5]
 800b226:	6839      	ldr	r1, [r7, #0]
 800b228:	4618      	mov	r0, r3
 800b22a:	f001 fcd5 	bl	800cbd8 <memcpy>

  hciContext.io.Send(0,0);
 800b22e:	4b05      	ldr	r3, [pc, #20]	; (800b244 <SendCmd+0x48>)
 800b230:	691b      	ldr	r3, [r3, #16]
 800b232:	2100      	movs	r1, #0
 800b234:	2000      	movs	r0, #0
 800b236:	4798      	blx	r3

  return;
 800b238:	bf00      	nop
}
 800b23a:	3708      	adds	r7, #8
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}
 800b240:	200000d4 	.word	0x200000d4
 800b244:	200002d0 	.word	0x200002d0

0800b248 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	4603      	mov	r3, r0
 800b250:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800b252:	79fb      	ldrb	r3, [r7, #7]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d108      	bne.n	800b26a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800b258:	4b0a      	ldr	r3, [pc, #40]	; (800b284 <NotifyCmdStatus+0x3c>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d00d      	beq.n	800b27c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800b260:	4b08      	ldr	r3, [pc, #32]	; (800b284 <NotifyCmdStatus+0x3c>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	2000      	movs	r0, #0
 800b266:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800b268:	e008      	b.n	800b27c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800b26a:	4b06      	ldr	r3, [pc, #24]	; (800b284 <NotifyCmdStatus+0x3c>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d004      	beq.n	800b27c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800b272:	4b04      	ldr	r3, [pc, #16]	; (800b284 <NotifyCmdStatus+0x3c>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	2001      	movs	r0, #1
 800b278:	4798      	blx	r3
  return;
 800b27a:	bf00      	nop
 800b27c:	bf00      	nop
}
 800b27e:	3708      	adds	r7, #8
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}
 800b284:	200002f8 	.word	0x200002f8

0800b288 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	7a5b      	ldrb	r3, [r3, #9]
 800b294:	2b0f      	cmp	r3, #15
 800b296:	d003      	beq.n	800b2a0 <TlEvtReceived+0x18>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	7a5b      	ldrb	r3, [r3, #9]
 800b29c:	2b0e      	cmp	r3, #14
 800b29e:	d107      	bne.n	800b2b0 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800b2a0:	6879      	ldr	r1, [r7, #4]
 800b2a2:	4809      	ldr	r0, [pc, #36]	; (800b2c8 <TlEvtReceived+0x40>)
 800b2a4:	f000 fb3a 	bl	800b91c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800b2a8:	2000      	movs	r0, #0
 800b2aa:	f001 f992 	bl	800c5d2 <hci_cmd_resp_release>
 800b2ae:	e006      	b.n	800b2be <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800b2b0:	6879      	ldr	r1, [r7, #4]
 800b2b2:	4806      	ldr	r0, [pc, #24]	; (800b2cc <TlEvtReceived+0x44>)
 800b2b4:	f000 fb32 	bl	800b91c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b2b8:	4804      	ldr	r0, [pc, #16]	; (800b2cc <TlEvtReceived+0x44>)
 800b2ba:	f001 f97e 	bl	800c5ba <hci_notify_asynch_evt>
  }

  return;
 800b2be:	bf00      	nop
}
 800b2c0:	3708      	adds	r7, #8
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	200002f0 	.word	0x200002f0
 800b2cc:	200000cc 	.word	0x200000cc

0800b2d0 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b083      	sub	sp, #12
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	4a05      	ldr	r2, [pc, #20]	; (800b2f0 <hci_register_io_bus+0x20>)
 800b2dc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	4a04      	ldr	r2, [pc, #16]	; (800b2f4 <hci_register_io_bus+0x24>)
 800b2e2:	611a      	str	r2, [r3, #16]

  return;
 800b2e4:	bf00      	nop
}
 800b2e6:	370c      	adds	r7, #12
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr
 800b2f0:	0800bc69 	.word	0x0800bc69
 800b2f4:	0800bcd1 	.word	0x0800bcd1

0800b2f8 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b084      	sub	sp, #16
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	60f8      	str	r0, [r7, #12]
 800b300:	60b9      	str	r1, [r7, #8]
 800b302:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800b304:	687a      	ldr	r2, [r7, #4]
 800b306:	68b9      	ldr	r1, [r7, #8]
 800b308:	68f8      	ldr	r0, [r7, #12]
 800b30a:	f001 fc65 	bl	800cbd8 <memcpy>
 800b30e:	4603      	mov	r3, r0
}
 800b310:	4618      	mov	r0, r3
 800b312:	3710      	adds	r7, #16
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}

0800b318 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	60f8      	str	r0, [r7, #12]
 800b320:	60b9      	str	r1, [r7, #8]
 800b322:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	68b9      	ldr	r1, [r7, #8]
 800b328:	68f8      	ldr	r0, [r7, #12]
 800b32a:	f001 fc60 	bl	800cbee <memset>
 800b32e:	4603      	mov	r3, r0
}
 800b330:	4618      	mov	r0, r3
 800b332:	3710      	adds	r7, #16
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800b338:	b480      	push	{r7}
 800b33a:	b085      	sub	sp, #20
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	4603      	mov	r3, r0
 800b340:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800b342:	4b0f      	ldr	r3, [pc, #60]	; (800b380 <OTP_Read+0x48>)
 800b344:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b346:	e002      	b.n	800b34e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	3b08      	subs	r3, #8
 800b34c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	3307      	adds	r3, #7
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	79fa      	ldrb	r2, [r7, #7]
 800b356:	429a      	cmp	r2, r3
 800b358:	d003      	beq.n	800b362 <OTP_Read+0x2a>
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	4a09      	ldr	r2, [pc, #36]	; (800b384 <OTP_Read+0x4c>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	d1f2      	bne.n	800b348 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	3307      	adds	r3, #7
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	79fa      	ldrb	r2, [r7, #7]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d001      	beq.n	800b372 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800b36e:	2300      	movs	r3, #0
 800b370:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800b372:	68fb      	ldr	r3, [r7, #12]
}
 800b374:	4618      	mov	r0, r3
 800b376:	3714      	adds	r7, #20
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr
 800b380:	1fff73f8 	.word	0x1fff73f8
 800b384:	1fff7000 	.word	0x1fff7000

0800b388 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b08a      	sub	sp, #40	; 0x28
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800b390:	2300      	movs	r3, #0
 800b392:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	3301      	adds	r3, #1
 800b39a:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800b39c:	6a3b      	ldr	r3, [r7, #32]
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	2bff      	cmp	r3, #255	; 0xff
 800b3a2:	d000      	beq.n	800b3a6 <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800b3a4:	e04a      	b.n	800b43c <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800b3a6:	6a3b      	ldr	r3, [r7, #32]
 800b3a8:	3302      	adds	r3, #2
 800b3aa:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 800b3ac:	69fb      	ldr	r3, [r7, #28]
 800b3ae:	881b      	ldrh	r3, [r3, #0]
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	f640 4301 	movw	r3, #3073	; 0xc01
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d000      	beq.n	800b3be <PeerToPeer_Event_Handler+0x36>
          break;
 800b3bc:	e03d      	b.n	800b43a <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 800b3be:	69fb      	ldr	r3, [r7, #28]
 800b3c0:	3302      	adds	r3, #2
 800b3c2:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800b3c4:	69bb      	ldr	r3, [r7, #24]
 800b3c6:	885b      	ldrh	r3, [r3, #2]
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	4b1e      	ldr	r3, [pc, #120]	; (800b448 <PeerToPeer_Event_Handler+0xc0>)
 800b3ce:	889b      	ldrh	r3, [r3, #4]
 800b3d0:	3302      	adds	r3, #2
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d118      	bne.n	800b408 <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800b3dc:	69bb      	ldr	r3, [r7, #24]
 800b3de:	7a1b      	ldrb	r3, [r3, #8]
 800b3e0:	f003 0301 	and.w	r3, r3, #1
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d007      	beq.n	800b3f8 <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800b3ec:	f107 0308 	add.w	r3, r7, #8
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f001 f93b 	bl	800c66c <P2PS_STM_App_Notification>
        break;
 800b3f6:	e01f      	b.n	800b438 <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800b3fc:	f107 0308 	add.w	r3, r7, #8
 800b400:	4618      	mov	r0, r3
 800b402:	f001 f933 	bl	800c66c <P2PS_STM_App_Notification>
        break;
 800b406:	e017      	b.n	800b438 <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800b408:	69bb      	ldr	r3, [r7, #24]
 800b40a:	885b      	ldrh	r3, [r3, #2]
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	461a      	mov	r2, r3
 800b410:	4b0d      	ldr	r3, [pc, #52]	; (800b448 <PeerToPeer_Event_Handler+0xc0>)
 800b412:	885b      	ldrh	r3, [r3, #2]
 800b414:	3301      	adds	r3, #1
 800b416:	429a      	cmp	r2, r3
 800b418:	d10e      	bne.n	800b438 <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800b41a:	2303      	movs	r3, #3
 800b41c:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800b41e:	69bb      	ldr	r3, [r7, #24]
 800b420:	88db      	ldrh	r3, [r3, #6]
 800b422:	b29b      	uxth	r3, r3
 800b424:	b2db      	uxtb	r3, r3
 800b426:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800b428:	69bb      	ldr	r3, [r7, #24]
 800b42a:	3308      	adds	r3, #8
 800b42c:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 800b42e:	f107 0308 	add.w	r3, r7, #8
 800b432:	4618      	mov	r0, r3
 800b434:	f001 f91a 	bl	800c66c <P2PS_STM_App_Notification>
        break;
 800b438:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800b43a:	bf00      	nop
  }

  return(return_value);
 800b43c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800b440:	4618      	mov	r0, r3
 800b442:	3728      	adds	r7, #40	; 0x28
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}
 800b448:	200000dc 	.word	0x200000dc

0800b44c <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b08a      	sub	sp, #40	; 0x28
 800b450:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800b452:	484a      	ldr	r0, [pc, #296]	; (800b57c <P2PS_STM_Init+0x130>)
 800b454:	f000 fb60 	bl	800bb18 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800b458:	238f      	movs	r3, #143	; 0x8f
 800b45a:	703b      	strb	r3, [r7, #0]
 800b45c:	23e5      	movs	r3, #229	; 0xe5
 800b45e:	707b      	strb	r3, [r7, #1]
 800b460:	23b3      	movs	r3, #179	; 0xb3
 800b462:	70bb      	strb	r3, [r7, #2]
 800b464:	23d5      	movs	r3, #213	; 0xd5
 800b466:	70fb      	strb	r3, [r7, #3]
 800b468:	232e      	movs	r3, #46	; 0x2e
 800b46a:	713b      	strb	r3, [r7, #4]
 800b46c:	237f      	movs	r3, #127	; 0x7f
 800b46e:	717b      	strb	r3, [r7, #5]
 800b470:	234a      	movs	r3, #74	; 0x4a
 800b472:	71bb      	strb	r3, [r7, #6]
 800b474:	2398      	movs	r3, #152	; 0x98
 800b476:	71fb      	strb	r3, [r7, #7]
 800b478:	232a      	movs	r3, #42	; 0x2a
 800b47a:	723b      	strb	r3, [r7, #8]
 800b47c:	2348      	movs	r3, #72	; 0x48
 800b47e:	727b      	strb	r3, [r7, #9]
 800b480:	237a      	movs	r3, #122	; 0x7a
 800b482:	72bb      	strb	r3, [r7, #10]
 800b484:	23cc      	movs	r3, #204	; 0xcc
 800b486:	72fb      	strb	r3, [r7, #11]
 800b488:	2340      	movs	r3, #64	; 0x40
 800b48a:	733b      	strb	r3, [r7, #12]
 800b48c:	23fe      	movs	r3, #254	; 0xfe
 800b48e:	737b      	strb	r3, [r7, #13]
 800b490:	2300      	movs	r3, #0
 800b492:	73bb      	strb	r3, [r7, #14]
 800b494:	2300      	movs	r3, #0
 800b496:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800b498:	4639      	mov	r1, r7
 800b49a:	4b39      	ldr	r3, [pc, #228]	; (800b580 <P2PS_STM_Init+0x134>)
 800b49c:	9300      	str	r3, [sp, #0]
 800b49e:	2308      	movs	r3, #8
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	2002      	movs	r0, #2
 800b4a4:	f7ff f8fc 	bl	800a6a0 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800b4a8:	2319      	movs	r3, #25
 800b4aa:	703b      	strb	r3, [r7, #0]
 800b4ac:	23ed      	movs	r3, #237	; 0xed
 800b4ae:	707b      	strb	r3, [r7, #1]
 800b4b0:	2382      	movs	r3, #130	; 0x82
 800b4b2:	70bb      	strb	r3, [r7, #2]
 800b4b4:	23ae      	movs	r3, #174	; 0xae
 800b4b6:	70fb      	strb	r3, [r7, #3]
 800b4b8:	23ed      	movs	r3, #237	; 0xed
 800b4ba:	713b      	strb	r3, [r7, #4]
 800b4bc:	2321      	movs	r3, #33	; 0x21
 800b4be:	717b      	strb	r3, [r7, #5]
 800b4c0:	234c      	movs	r3, #76	; 0x4c
 800b4c2:	71bb      	strb	r3, [r7, #6]
 800b4c4:	239d      	movs	r3, #157	; 0x9d
 800b4c6:	71fb      	strb	r3, [r7, #7]
 800b4c8:	2341      	movs	r3, #65	; 0x41
 800b4ca:	723b      	strb	r3, [r7, #8]
 800b4cc:	2345      	movs	r3, #69	; 0x45
 800b4ce:	727b      	strb	r3, [r7, #9]
 800b4d0:	2322      	movs	r3, #34	; 0x22
 800b4d2:	72bb      	strb	r3, [r7, #10]
 800b4d4:	238e      	movs	r3, #142	; 0x8e
 800b4d6:	72fb      	strb	r3, [r7, #11]
 800b4d8:	2341      	movs	r3, #65	; 0x41
 800b4da:	733b      	strb	r3, [r7, #12]
 800b4dc:	23fe      	movs	r3, #254	; 0xfe
 800b4de:	737b      	strb	r3, [r7, #13]
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	73bb      	strb	r3, [r7, #14]
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800b4e8:	4b25      	ldr	r3, [pc, #148]	; (800b580 <P2PS_STM_Init+0x134>)
 800b4ea:	8818      	ldrh	r0, [r3, #0]
 800b4ec:	463a      	mov	r2, r7
 800b4ee:	4b25      	ldr	r3, [pc, #148]	; (800b584 <P2PS_STM_Init+0x138>)
 800b4f0:	9305      	str	r3, [sp, #20]
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	9304      	str	r3, [sp, #16]
 800b4f6:	230a      	movs	r3, #10
 800b4f8:	9303      	str	r3, [sp, #12]
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	9302      	str	r3, [sp, #8]
 800b4fe:	2300      	movs	r3, #0
 800b500:	9301      	str	r3, [sp, #4]
 800b502:	2306      	movs	r3, #6
 800b504:	9300      	str	r3, [sp, #0]
 800b506:	2328      	movs	r3, #40	; 0x28
 800b508:	2102      	movs	r1, #2
 800b50a:	f7ff f978 	bl	800a7fe <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800b50e:	2319      	movs	r3, #25
 800b510:	703b      	strb	r3, [r7, #0]
 800b512:	23ed      	movs	r3, #237	; 0xed
 800b514:	707b      	strb	r3, [r7, #1]
 800b516:	2382      	movs	r3, #130	; 0x82
 800b518:	70bb      	strb	r3, [r7, #2]
 800b51a:	23ae      	movs	r3, #174	; 0xae
 800b51c:	70fb      	strb	r3, [r7, #3]
 800b51e:	23ed      	movs	r3, #237	; 0xed
 800b520:	713b      	strb	r3, [r7, #4]
 800b522:	2321      	movs	r3, #33	; 0x21
 800b524:	717b      	strb	r3, [r7, #5]
 800b526:	234c      	movs	r3, #76	; 0x4c
 800b528:	71bb      	strb	r3, [r7, #6]
 800b52a:	239d      	movs	r3, #157	; 0x9d
 800b52c:	71fb      	strb	r3, [r7, #7]
 800b52e:	2341      	movs	r3, #65	; 0x41
 800b530:	723b      	strb	r3, [r7, #8]
 800b532:	2345      	movs	r3, #69	; 0x45
 800b534:	727b      	strb	r3, [r7, #9]
 800b536:	2322      	movs	r3, #34	; 0x22
 800b538:	72bb      	strb	r3, [r7, #10]
 800b53a:	238e      	movs	r3, #142	; 0x8e
 800b53c:	72fb      	strb	r3, [r7, #11]
 800b53e:	2342      	movs	r3, #66	; 0x42
 800b540:	733b      	strb	r3, [r7, #12]
 800b542:	23fe      	movs	r3, #254	; 0xfe
 800b544:	737b      	strb	r3, [r7, #13]
 800b546:	2300      	movs	r3, #0
 800b548:	73bb      	strb	r3, [r7, #14]
 800b54a:	2300      	movs	r3, #0
 800b54c:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800b54e:	4b0c      	ldr	r3, [pc, #48]	; (800b580 <P2PS_STM_Init+0x134>)
 800b550:	8818      	ldrh	r0, [r3, #0]
 800b552:	463a      	mov	r2, r7
 800b554:	4b0c      	ldr	r3, [pc, #48]	; (800b588 <P2PS_STM_Init+0x13c>)
 800b556:	9305      	str	r3, [sp, #20]
 800b558:	2301      	movs	r3, #1
 800b55a:	9304      	str	r3, [sp, #16]
 800b55c:	230a      	movs	r3, #10
 800b55e:	9303      	str	r3, [sp, #12]
 800b560:	2301      	movs	r3, #1
 800b562:	9302      	str	r3, [sp, #8]
 800b564:	2300      	movs	r3, #0
 800b566:	9301      	str	r3, [sp, #4]
 800b568:	2310      	movs	r3, #16
 800b56a:	9300      	str	r3, [sp, #0]
 800b56c:	2328      	movs	r3, #40	; 0x28
 800b56e:	2102      	movs	r1, #2
 800b570:	f7ff f945 	bl	800a7fe <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 800b574:	bf00      	nop
}
 800b576:	3710      	adds	r7, #16
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}
 800b57c:	0800b389 	.word	0x0800b389
 800b580:	200000dc 	.word	0x200000dc
 800b584:	200000de 	.word	0x200000de
 800b588:	200000e0 	.word	0x200000e0

0800b58c <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b086      	sub	sp, #24
 800b590:	af02      	add	r7, sp, #8
 800b592:	4603      	mov	r3, r0
 800b594:	6039      	str	r1, [r7, #0]
 800b596:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = 0;
 800b598:	2300      	movs	r3, #0
 800b59a:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800b59c:	88fb      	ldrh	r3, [r7, #6]
 800b59e:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d000      	beq.n	800b5a8 <P2PS_STM_App_Update_Char+0x1c>
     if (result == BLE_STATUS_SUCCESS) HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
    
      break;

    default:
      break;
 800b5a6:	e013      	b.n	800b5d0 <P2PS_STM_App_Update_Char+0x44>
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800b5a8:	4b0c      	ldr	r3, [pc, #48]	; (800b5dc <P2PS_STM_App_Update_Char+0x50>)
 800b5aa:	8818      	ldrh	r0, [r3, #0]
 800b5ac:	4b0b      	ldr	r3, [pc, #44]	; (800b5dc <P2PS_STM_App_Update_Char+0x50>)
 800b5ae:	8899      	ldrh	r1, [r3, #4]
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	9300      	str	r3, [sp, #0]
 800b5b4:	2328      	movs	r3, #40	; 0x28
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	f7ff fa0b 	bl	800a9d2 <aci_gatt_update_char_value>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	73fb      	strb	r3, [r7, #15]
     if (result == BLE_STATUS_SUCCESS) HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800b5c0:	7bfb      	ldrb	r3, [r7, #15]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d103      	bne.n	800b5ce <P2PS_STM_App_Update_Char+0x42>
 800b5c6:	2102      	movs	r1, #2
 800b5c8:	4805      	ldr	r0, [pc, #20]	; (800b5e0 <P2PS_STM_App_Update_Char+0x54>)
 800b5ca:	f7f8 f8bb 	bl	8003744 <HAL_GPIO_TogglePin>
      break;
 800b5ce:	bf00      	nop
  }

  return result;
 800b5d0:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3710      	adds	r7, #16
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	bf00      	nop
 800b5dc:	200000dc 	.word	0x200000dc
 800b5e0:	48000400 	.word	0x48000400

0800b5e4 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b088      	sub	sp, #32
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b5ec:	f107 030c 	add.w	r3, r7, #12
 800b5f0:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800b5f8:	69fb      	ldr	r3, [r7, #28]
 800b5fa:	2121      	movs	r1, #33	; 0x21
 800b5fc:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800b600:	f000 f86e 	bl	800b6e0 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b604:	69fb      	ldr	r3, [r7, #28]
 800b606:	330b      	adds	r3, #11
 800b608:	78db      	ldrb	r3, [r3, #3]
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3720      	adds	r7, #32
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
	...

0800b614 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	4a08      	ldr	r2, [pc, #32]	; (800b644 <shci_init+0x30>)
 800b624:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800b626:	4a08      	ldr	r2, [pc, #32]	; (800b648 <shci_init+0x34>)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800b62c:	4806      	ldr	r0, [pc, #24]	; (800b648 <shci_init+0x34>)
 800b62e:	f000 f90d 	bl	800b84c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4618      	mov	r0, r3
 800b638:	f000 f890 	bl	800b75c <TlInit>

  return;
 800b63c:	bf00      	nop
}
 800b63e:	3708      	adds	r7, #8
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	2000031c 	.word	0x2000031c
 800b648:	200002fc 	.word	0x200002fc

0800b64c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b652:	4820      	ldr	r0, [pc, #128]	; (800b6d4 <shci_user_evt_proc+0x88>)
 800b654:	f000 f91e 	bl	800b894 <LST_is_empty>
 800b658:	4603      	mov	r3, r0
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d128      	bne.n	800b6b0 <shci_user_evt_proc+0x64>
 800b65e:	4b1e      	ldr	r3, [pc, #120]	; (800b6d8 <shci_user_evt_proc+0x8c>)
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d024      	beq.n	800b6b0 <shci_user_evt_proc+0x64>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800b666:	f107 030c 	add.w	r3, r7, #12
 800b66a:	4619      	mov	r1, r3
 800b66c:	4819      	ldr	r0, [pc, #100]	; (800b6d4 <shci_user_evt_proc+0x88>)
 800b66e:	f000 f998 	bl	800b9a2 <LST_remove_head>

    SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b672:	4b19      	ldr	r3, [pc, #100]	; (800b6d8 <shci_user_evt_proc+0x8c>)
 800b674:	2201      	movs	r2, #1
 800b676:	701a      	strb	r2, [r3, #0]

    if (shciContext.UserEvtRx != NULL)
 800b678:	4b18      	ldr	r3, [pc, #96]	; (800b6dc <shci_user_evt_proc+0x90>)
 800b67a:	69db      	ldr	r3, [r3, #28]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d009      	beq.n	800b694 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	60bb      	str	r3, [r7, #8]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800b684:	4b15      	ldr	r3, [pc, #84]	; (800b6dc <shci_user_evt_proc+0x90>)
 800b686:	69db      	ldr	r3, [r3, #28]
 800b688:	1d3a      	adds	r2, r7, #4
 800b68a:	4610      	mov	r0, r2
 800b68c:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800b68e:	793a      	ldrb	r2, [r7, #4]
 800b690:	4b11      	ldr	r3, [pc, #68]	; (800b6d8 <shci_user_evt_proc+0x8c>)
 800b692:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800b694:	4b10      	ldr	r3, [pc, #64]	; (800b6d8 <shci_user_evt_proc+0x8c>)
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d004      	beq.n	800b6a6 <shci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f000 fbf6 	bl	800be90 <TL_MM_EvtDone>
 800b6a4:	e004      	b.n	800b6b0 <shci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	480a      	ldr	r0, [pc, #40]	; (800b6d4 <shci_user_evt_proc+0x88>)
 800b6ac:	f000 f912 	bl	800b8d4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b6b0:	4808      	ldr	r0, [pc, #32]	; (800b6d4 <shci_user_evt_proc+0x88>)
 800b6b2:	f000 f8ef 	bl	800b894 <LST_is_empty>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d107      	bne.n	800b6cc <shci_user_evt_proc+0x80>
 800b6bc:	4b06      	ldr	r3, [pc, #24]	; (800b6d8 <shci_user_evt_proc+0x8c>)
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d003      	beq.n	800b6cc <shci_user_evt_proc+0x80>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800b6c4:	4803      	ldr	r0, [pc, #12]	; (800b6d4 <shci_user_evt_proc+0x88>)
 800b6c6:	f7f5 fa9b 	bl	8000c00 <shci_notify_asynch_evt>
  }


  return;
 800b6ca:	bf00      	nop
 800b6cc:	bf00      	nop
}
 800b6ce:	3710      	adds	r7, #16
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}
 800b6d4:	20000108 	.word	0x20000108
 800b6d8:	20000118 	.word	0x20000118
 800b6dc:	200002fc 	.word	0x200002fc

0800b6e0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	60ba      	str	r2, [r7, #8]
 800b6e8:	607b      	str	r3, [r7, #4]
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	81fb      	strh	r3, [r7, #14]
 800b6ee:	460b      	mov	r3, r1
 800b6f0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800b6f2:	2000      	movs	r0, #0
 800b6f4:	f000 f864 	bl	800b7c0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800b6f8:	4b16      	ldr	r3, [pc, #88]	; (800b754 <shci_send+0x74>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	89fa      	ldrh	r2, [r7, #14]
 800b6fe:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800b702:	4b14      	ldr	r3, [pc, #80]	; (800b754 <shci_send+0x74>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	7b7a      	ldrb	r2, [r7, #13]
 800b708:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800b70a:	4b12      	ldr	r3, [pc, #72]	; (800b754 <shci_send+0x74>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	330c      	adds	r3, #12
 800b710:	7b7a      	ldrb	r2, [r7, #13]
 800b712:	68b9      	ldr	r1, [r7, #8]
 800b714:	4618      	mov	r0, r3
 800b716:	f001 fa5f 	bl	800cbd8 <memcpy>

  shciContext.io.Send(0,0);
 800b71a:	4b0f      	ldr	r3, [pc, #60]	; (800b758 <shci_send+0x78>)
 800b71c:	691b      	ldr	r3, [r3, #16]
 800b71e:	2100      	movs	r1, #0
 800b720:	2000      	movs	r0, #0
 800b722:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800b724:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800b728:	f7f5 fa81 	bl	8000c2e <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f103 0008 	add.w	r0, r3, #8
 800b732:	4b08      	ldr	r3, [pc, #32]	; (800b754 <shci_send+0x74>)
 800b734:	6819      	ldr	r1, [r3, #0]
 800b736:	4b07      	ldr	r3, [pc, #28]	; (800b754 <shci_send+0x74>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	789b      	ldrb	r3, [r3, #2]
 800b73c:	3303      	adds	r3, #3
 800b73e:	461a      	mov	r2, r3
 800b740:	f001 fa4a 	bl	800cbd8 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b744:	2001      	movs	r0, #1
 800b746:	f000 f83b 	bl	800b7c0 <Cmd_SetStatus>

  return;
 800b74a:	bf00      	nop
}
 800b74c:	3710      	adds	r7, #16
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
 800b752:	bf00      	nop
 800b754:	20000114 	.word	0x20000114
 800b758:	200002fc 	.word	0x200002fc

0800b75c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b086      	sub	sp, #24
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800b764:	4a10      	ldr	r2, [pc, #64]	; (800b7a8 <TlInit+0x4c>)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800b76a:	4810      	ldr	r0, [pc, #64]	; (800b7ac <TlInit+0x50>)
 800b76c:	f000 f882 	bl	800b874 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b770:	2001      	movs	r0, #1
 800b772:	f000 f825 	bl	800b7c0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b776:	4b0e      	ldr	r3, [pc, #56]	; (800b7b0 <TlInit+0x54>)
 800b778:	2201      	movs	r2, #1
 800b77a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800b77c:	4b0d      	ldr	r3, [pc, #52]	; (800b7b4 <TlInit+0x58>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d00c      	beq.n	800b79e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800b788:	4b0b      	ldr	r3, [pc, #44]	; (800b7b8 <TlInit+0x5c>)
 800b78a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800b78c:	4b0b      	ldr	r3, [pc, #44]	; (800b7bc <TlInit+0x60>)
 800b78e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800b790:	4b08      	ldr	r3, [pc, #32]	; (800b7b4 <TlInit+0x58>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f107 020c 	add.w	r2, r7, #12
 800b798:	4610      	mov	r0, r2
 800b79a:	4798      	blx	r3
  }

  return;
 800b79c:	bf00      	nop
 800b79e:	bf00      	nop
}
 800b7a0:	3718      	adds	r7, #24
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
 800b7a6:	bf00      	nop
 800b7a8:	20000114 	.word	0x20000114
 800b7ac:	20000108 	.word	0x20000108
 800b7b0:	20000118 	.word	0x20000118
 800b7b4:	200002fc 	.word	0x200002fc
 800b7b8:	0800b811 	.word	0x0800b811
 800b7bc:	0800b829 	.word	0x0800b829

0800b7c0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b082      	sub	sp, #8
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800b7ca:	79fb      	ldrb	r3, [r7, #7]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d10b      	bne.n	800b7e8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800b7d0:	4b0d      	ldr	r3, [pc, #52]	; (800b808 <Cmd_SetStatus+0x48>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d003      	beq.n	800b7e0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800b7d8:	4b0b      	ldr	r3, [pc, #44]	; (800b808 <Cmd_SetStatus+0x48>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	2000      	movs	r0, #0
 800b7de:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800b7e0:	4b0a      	ldr	r3, [pc, #40]	; (800b80c <Cmd_SetStatus+0x4c>)
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800b7e6:	e00b      	b.n	800b800 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800b7e8:	4b08      	ldr	r3, [pc, #32]	; (800b80c <Cmd_SetStatus+0x4c>)
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800b7ee:	4b06      	ldr	r3, [pc, #24]	; (800b808 <Cmd_SetStatus+0x48>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d004      	beq.n	800b800 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800b7f6:	4b04      	ldr	r3, [pc, #16]	; (800b808 <Cmd_SetStatus+0x48>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	2001      	movs	r0, #1
 800b7fc:	4798      	blx	r3
  return;
 800b7fe:	bf00      	nop
 800b800:	bf00      	nop
}
 800b802:	3708      	adds	r7, #8
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}
 800b808:	2000031c 	.word	0x2000031c
 800b80c:	20000110 	.word	0x20000110

0800b810 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800b818:	2000      	movs	r0, #0
 800b81a:	f7f5 f9fd 	bl	8000c18 <shci_cmd_resp_release>

  return;
 800b81e:	bf00      	nop
}
 800b820:	3708      	adds	r7, #8
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
	...

0800b828 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800b830:	6879      	ldr	r1, [r7, #4]
 800b832:	4805      	ldr	r0, [pc, #20]	; (800b848 <TlUserEvtReceived+0x20>)
 800b834:	f000 f872 	bl	800b91c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b838:	4803      	ldr	r0, [pc, #12]	; (800b848 <TlUserEvtReceived+0x20>)
 800b83a:	f7f5 f9e1 	bl	8000c00 <shci_notify_asynch_evt>

  return;
 800b83e:	bf00      	nop
}
 800b840:	3708      	adds	r7, #8
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	20000108 	.word	0x20000108

0800b84c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b083      	sub	sp, #12
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	4a05      	ldr	r2, [pc, #20]	; (800b86c <shci_register_io_bus+0x20>)
 800b858:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	4a04      	ldr	r2, [pc, #16]	; (800b870 <shci_register_io_bus+0x24>)
 800b85e:	611a      	str	r2, [r3, #16]

  return;
 800b860:	bf00      	nop
}
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr
 800b86c:	0800bd45 	.word	0x0800bd45
 800b870:	0800bd99 	.word	0x0800bd99

0800b874 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800b874:	b480      	push	{r7}
 800b876:	b083      	sub	sp, #12
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	687a      	ldr	r2, [r7, #4]
 800b880:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	687a      	ldr	r2, [r7, #4]
 800b886:	605a      	str	r2, [r3, #4]
}
 800b888:	bf00      	nop
 800b88a:	370c      	adds	r7, #12
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr

0800b894 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800b894:	b480      	push	{r7}
 800b896:	b087      	sub	sp, #28
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b89c:	f3ef 8310 	mrs	r3, PRIMASK
 800b8a0:	60fb      	str	r3, [r7, #12]
  return(result);
 800b8a2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b8a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b8a6:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	687a      	ldr	r2, [r7, #4]
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d102      	bne.n	800b8b8 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	75fb      	strb	r3, [r7, #23]
 800b8b6:	e001      	b.n	800b8bc <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	75fb      	strb	r3, [r7, #23]
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800b8c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	371c      	adds	r7, #28
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr

0800b8d4 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b087      	sub	sp, #28
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8de:	f3ef 8310 	mrs	r3, PRIMASK
 800b8e2:	60fb      	str	r3, [r7, #12]
  return(result);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b8e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b8e8:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	687a      	ldr	r2, [r7, #4]
 800b8f6:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	683a      	ldr	r2, [r7, #0]
 800b8fc:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	683a      	ldr	r2, [r7, #0]
 800b904:	605a      	str	r2, [r3, #4]
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b910:	bf00      	nop
 800b912:	371c      	adds	r7, #28
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr

0800b91c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b087      	sub	sp, #28
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b926:	f3ef 8310 	mrs	r3, PRIMASK
 800b92a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b92c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b92e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b930:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	685a      	ldr	r2, [r3, #4]
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	683a      	ldr	r2, [r7, #0]
 800b944:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	685b      	ldr	r3, [r3, #4]
 800b94a:	683a      	ldr	r2, [r7, #0]
 800b94c:	601a      	str	r2, [r3, #0]
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b958:	bf00      	nop
 800b95a:	371c      	adds	r7, #28
 800b95c:	46bd      	mov	sp, r7
 800b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b962:	4770      	bx	lr

0800b964 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800b964:	b480      	push	{r7}
 800b966:	b087      	sub	sp, #28
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b96c:	f3ef 8310 	mrs	r3, PRIMASK
 800b970:	60fb      	str	r3, [r7, #12]
  return(result);
 800b972:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b974:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b976:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	6812      	ldr	r2, [r2, #0]
 800b980:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	687a      	ldr	r2, [r7, #4]
 800b988:	6852      	ldr	r2, [r2, #4]
 800b98a:	605a      	str	r2, [r3, #4]
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b996:	bf00      	nop
 800b998:	371c      	adds	r7, #28
 800b99a:	46bd      	mov	sp, r7
 800b99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a0:	4770      	bx	lr

0800b9a2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800b9a2:	b580      	push	{r7, lr}
 800b9a4:	b086      	sub	sp, #24
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	6078      	str	r0, [r7, #4]
 800b9aa:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9ac:	f3ef 8310 	mrs	r3, PRIMASK
 800b9b0:	60fb      	str	r3, [r7, #12]
  return(result);
 800b9b2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b9b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b9b6:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f7ff ffcd 	bl	800b964 <LST_remove_node>
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b9d4:	bf00      	nop
 800b9d6:	3718      	adds	r7, #24
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}

0800b9dc <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 800b9dc:	b480      	push	{r7}
 800b9de:	af00      	add	r7, sp, #0
  return;
 800b9e0:	bf00      	nop
}
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e8:	4770      	bx	lr

0800b9ea <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800b9ea:	b480      	push	{r7}
 800b9ec:	af00      	add	r7, sp, #0
  return;
 800b9ee:	bf00      	nop
}
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr

0800b9f8 <DIS_Init>:
__weak void DIS_Init( void )
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	af00      	add	r7, sp, #0
  return;
 800b9fc:	bf00      	nop
}
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba04:	4770      	bx	lr

0800ba06 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 800ba06:	b480      	push	{r7}
 800ba08:	af00      	add	r7, sp, #0
  return;
 800ba0a:	bf00      	nop
}
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr

0800ba14 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 800ba14:	b480      	push	{r7}
 800ba16:	af00      	add	r7, sp, #0
  return;
 800ba18:	bf00      	nop
}
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr

0800ba22 <HRS_Init>:
__weak void HRS_Init( void )
{
 800ba22:	b480      	push	{r7}
 800ba24:	af00      	add	r7, sp, #0
  return;
 800ba26:	bf00      	nop
}
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr

0800ba30 <HTS_Init>:
__weak void HTS_Init( void )
{
 800ba30:	b480      	push	{r7}
 800ba32:	af00      	add	r7, sp, #0
  return;
 800ba34:	bf00      	nop
}
 800ba36:	46bd      	mov	sp, r7
 800ba38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3c:	4770      	bx	lr

0800ba3e <IAS_Init>:
__weak void IAS_Init( void )
{
 800ba3e:	b480      	push	{r7}
 800ba40:	af00      	add	r7, sp, #0
  return;
 800ba42:	bf00      	nop
}
 800ba44:	46bd      	mov	sp, r7
 800ba46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4a:	4770      	bx	lr

0800ba4c <LLS_Init>:
__weak void LLS_Init( void )
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	af00      	add	r7, sp, #0
  return;
 800ba50:	bf00      	nop
}
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr

0800ba5a <TPS_Init>:
__weak void TPS_Init( void )
{
 800ba5a:	b480      	push	{r7}
 800ba5c:	af00      	add	r7, sp, #0
  return;
 800ba5e:	bf00      	nop
}
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr

0800ba68 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800ba68:	b480      	push	{r7}
 800ba6a:	af00      	add	r7, sp, #0
  return;
 800ba6c:	bf00      	nop
}
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr

0800ba76 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800ba76:	b480      	push	{r7}
 800ba78:	af00      	add	r7, sp, #0
  return;
 800ba7a:	bf00      	nop
}
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba82:	4770      	bx	lr

0800ba84 <MESH_Init>:
__weak void MESH_Init( void )
{
 800ba84:	b480      	push	{r7}
 800ba86:	af00      	add	r7, sp, #0
  return;
 800ba88:	bf00      	nop
}
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr

0800ba92 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800ba92:	b480      	push	{r7}
 800ba94:	af00      	add	r7, sp, #0
  return;
 800ba96:	bf00      	nop
}
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr

0800baa0 <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 800baa0:	b480      	push	{r7}
 800baa2:	af00      	add	r7, sp, #0
  return;
 800baa4:	bf00      	nop
}
 800baa6:	46bd      	mov	sp, r7
 800baa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baac:	4770      	bx	lr
	...

0800bab0 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800bab4:	4b04      	ldr	r3, [pc, #16]	; (800bac8 <SVCCTL_Init+0x18>)
 800bab6:	2200      	movs	r2, #0
 800bab8:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800baba:	4b04      	ldr	r3, [pc, #16]	; (800bacc <SVCCTL_Init+0x1c>)
 800babc:	2200      	movs	r2, #0
 800babe:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800bac0:	f000 f806 	bl	800bad0 <SVCCTL_SvcInit>

  return;
 800bac4:	bf00      	nop
}
 800bac6:	bd80      	pop	{r7, pc}
 800bac8:	200000e4 	.word	0x200000e4
 800bacc:	20000104 	.word	0x20000104

0800bad0 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	af00      	add	r7, sp, #0
  BLS_Init();
 800bad4:	f7ff ff82 	bl	800b9dc <BLS_Init>

  CRS_STM_Init();
 800bad8:	f7ff ff87 	bl	800b9ea <CRS_STM_Init>

  DIS_Init();
 800badc:	f7ff ff8c 	bl	800b9f8 <DIS_Init>

  EDS_STM_Init();
 800bae0:	f7ff ff91 	bl	800ba06 <EDS_STM_Init>

  HIDS_Init();
 800bae4:	f7ff ff96 	bl	800ba14 <HIDS_Init>

  HRS_Init();
 800bae8:	f7ff ff9b 	bl	800ba22 <HRS_Init>

  HTS_Init();
 800baec:	f7ff ffa0 	bl	800ba30 <HTS_Init>

  IAS_Init();
 800baf0:	f7ff ffa5 	bl	800ba3e <IAS_Init>

  LLS_Init();
 800baf4:	f7ff ffaa 	bl	800ba4c <LLS_Init>

  TPS_Init();
 800baf8:	f7ff ffaf 	bl	800ba5a <TPS_Init>

  MOTENV_STM_Init();
 800bafc:	f7ff ffb4 	bl	800ba68 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800bb00:	f7ff fca4 	bl	800b44c <P2PS_STM_Init>

  OTAS_STM_Init();
 800bb04:	f7ff ffb7 	bl	800ba76 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800bb08:	f7ff ffc3 	bl	800ba92 <BVOPUS_STM_Init>

  MESH_Init();
 800bb0c:	f7ff ffba 	bl	800ba84 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800bb10:	f7ff ffc6 	bl	800baa0 <SVCCTL_InitCustomSvc>
  
  return;
 800bb14:	bf00      	nop
}
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b083      	sub	sp, #12
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800bb20:	4b09      	ldr	r3, [pc, #36]	; (800bb48 <SVCCTL_RegisterSvcHandler+0x30>)
 800bb22:	7f1b      	ldrb	r3, [r3, #28]
 800bb24:	4619      	mov	r1, r3
 800bb26:	4a08      	ldr	r2, [pc, #32]	; (800bb48 <SVCCTL_RegisterSvcHandler+0x30>)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800bb2e:	4b06      	ldr	r3, [pc, #24]	; (800bb48 <SVCCTL_RegisterSvcHandler+0x30>)
 800bb30:	7f1b      	ldrb	r3, [r3, #28]
 800bb32:	3301      	adds	r3, #1
 800bb34:	b2da      	uxtb	r2, r3
 800bb36:	4b04      	ldr	r3, [pc, #16]	; (800bb48 <SVCCTL_RegisterSvcHandler+0x30>)
 800bb38:	771a      	strb	r2, [r3, #28]

  return;
 800bb3a:	bf00      	nop
}
 800bb3c:	370c      	adds	r7, #12
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr
 800bb46:	bf00      	nop
 800bb48:	200000e4 	.word	0x200000e4

0800bb4c <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b086      	sub	sp, #24
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	3301      	adds	r3, #1
 800bb58:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	2bff      	cmp	r3, #255	; 0xff
 800bb64:	d000      	beq.n	800bb68 <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800bb66:	e025      	b.n	800bbb4 <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	3302      	adds	r3, #2
 800bb6c:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	881b      	ldrh	r3, [r3, #0]
 800bb72:	b29b      	uxth	r3, r3
 800bb74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bb78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bb7c:	d000      	beq.n	800bb80 <SVCCTL_UserEvtRx+0x34>
          break;
 800bb7e:	e018      	b.n	800bbb2 <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800bb80:	2300      	movs	r3, #0
 800bb82:	757b      	strb	r3, [r7, #21]
 800bb84:	e00d      	b.n	800bba2 <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800bb86:	7d7b      	ldrb	r3, [r7, #21]
 800bb88:	4a18      	ldr	r2, [pc, #96]	; (800bbec <SVCCTL_UserEvtRx+0xa0>)
 800bb8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	4798      	blx	r3
 800bb92:	4603      	mov	r3, r0
 800bb94:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800bb96:	7dfb      	ldrb	r3, [r7, #23]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d108      	bne.n	800bbae <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800bb9c:	7d7b      	ldrb	r3, [r7, #21]
 800bb9e:	3301      	adds	r3, #1
 800bba0:	757b      	strb	r3, [r7, #21]
 800bba2:	4b12      	ldr	r3, [pc, #72]	; (800bbec <SVCCTL_UserEvtRx+0xa0>)
 800bba4:	7f1b      	ldrb	r3, [r3, #28]
 800bba6:	7d7a      	ldrb	r2, [r7, #21]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d3ec      	bcc.n	800bb86 <SVCCTL_UserEvtRx+0x3a>
          break;
 800bbac:	e000      	b.n	800bbb0 <SVCCTL_UserEvtRx+0x64>
              break;
 800bbae:	bf00      	nop
          break;
 800bbb0:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800bbb2:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800bbb4:	7dfb      	ldrb	r3, [r7, #23]
 800bbb6:	2b01      	cmp	r3, #1
 800bbb8:	d009      	beq.n	800bbce <SVCCTL_UserEvtRx+0x82>
 800bbba:	2b02      	cmp	r3, #2
 800bbbc:	d00a      	beq.n	800bbd4 <SVCCTL_UserEvtRx+0x88>
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d10b      	bne.n	800bbda <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 fa62 	bl	800c08c <SVCCTL_App_Notification>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	75bb      	strb	r3, [r7, #22]
      break;
 800bbcc:	e008      	b.n	800bbe0 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800bbce:	2301      	movs	r3, #1
 800bbd0:	75bb      	strb	r3, [r7, #22]
      break;
 800bbd2:	e005      	b.n	800bbe0 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	75bb      	strb	r3, [r7, #22]
      break;
 800bbd8:	e002      	b.n	800bbe0 <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	75bb      	strb	r3, [r7, #22]
      break;
 800bbde:	bf00      	nop
  }

  return (return_status);
 800bbe0:	7dbb      	ldrb	r3, [r7, #22]
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3718      	adds	r7, #24
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	bf00      	nop
 800bbec:	200000e4 	.word	0x200000e4

0800bbf0 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800bbf4:	f000 ff06 	bl	800ca04 <HW_IPCC_Enable>

  return;
 800bbf8:	bf00      	nop
}
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <TL_Init>:


void TL_Init( void )
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800bc00:	4b0f      	ldr	r3, [pc, #60]	; (800bc40 <TL_Init+0x44>)
 800bc02:	4a10      	ldr	r2, [pc, #64]	; (800bc44 <TL_Init+0x48>)
 800bc04:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800bc06:	4b0e      	ldr	r3, [pc, #56]	; (800bc40 <TL_Init+0x44>)
 800bc08:	4a0f      	ldr	r2, [pc, #60]	; (800bc48 <TL_Init+0x4c>)
 800bc0a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800bc0c:	4b0c      	ldr	r3, [pc, #48]	; (800bc40 <TL_Init+0x44>)
 800bc0e:	4a0f      	ldr	r2, [pc, #60]	; (800bc4c <TL_Init+0x50>)
 800bc10:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800bc12:	4b0b      	ldr	r3, [pc, #44]	; (800bc40 <TL_Init+0x44>)
 800bc14:	4a0e      	ldr	r2, [pc, #56]	; (800bc50 <TL_Init+0x54>)
 800bc16:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 800bc18:	4b09      	ldr	r3, [pc, #36]	; (800bc40 <TL_Init+0x44>)
 800bc1a:	4a0e      	ldr	r2, [pc, #56]	; (800bc54 <TL_Init+0x58>)
 800bc1c:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800bc1e:	4b08      	ldr	r3, [pc, #32]	; (800bc40 <TL_Init+0x44>)
 800bc20:	4a0d      	ldr	r2, [pc, #52]	; (800bc58 <TL_Init+0x5c>)
 800bc22:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800bc24:	4b06      	ldr	r3, [pc, #24]	; (800bc40 <TL_Init+0x44>)
 800bc26:	4a0d      	ldr	r2, [pc, #52]	; (800bc5c <TL_Init+0x60>)
 800bc28:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800bc2a:	4b05      	ldr	r3, [pc, #20]	; (800bc40 <TL_Init+0x44>)
 800bc2c:	4a0c      	ldr	r2, [pc, #48]	; (800bc60 <TL_Init+0x64>)
 800bc2e:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800bc30:	4b03      	ldr	r3, [pc, #12]	; (800bc40 <TL_Init+0x44>)
 800bc32:	4a0c      	ldr	r2, [pc, #48]	; (800bc64 <TL_Init+0x68>)
 800bc34:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800bc36:	f000 feed 	bl	800ca14 <HW_IPCC_Init>

  return;
 800bc3a:	bf00      	nop
}
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	bf00      	nop
 800bc40:	20030000 	.word	0x20030000
 800bc44:	20030024 	.word	0x20030024
 800bc48:	20030044 	.word	0x20030044
 800bc4c:	20030054 	.word	0x20030054
 800bc50:	20030060 	.word	0x20030060
 800bc54:	20030068 	.word	0x20030068
 800bc58:	20030070 	.word	0x20030070
 800bc5c:	2003008c 	.word	0x2003008c
 800bc60:	20030090 	.word	0x20030090
 800bc64:	2003009c 	.word	0x2003009c

0800bc68 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800bc74:	4811      	ldr	r0, [pc, #68]	; (800bcbc <TL_BLE_Init+0x54>)
 800bc76:	f7ff fdfd 	bl	800b874 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800bc7a:	4b11      	ldr	r3, [pc, #68]	; (800bcc0 <TL_BLE_Init+0x58>)
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	689a      	ldr	r2, [r3, #8]
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	68da      	ldr	r2, [r3, #12]
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	4a0c      	ldr	r2, [pc, #48]	; (800bcc4 <TL_BLE_Init+0x5c>)
 800bc94:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	4a08      	ldr	r2, [pc, #32]	; (800bcbc <TL_BLE_Init+0x54>)
 800bc9a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800bc9c:	f000 fed0 	bl	800ca40 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4a08      	ldr	r2, [pc, #32]	; (800bcc8 <TL_BLE_Init+0x60>)
 800bca6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	685b      	ldr	r3, [r3, #4]
 800bcac:	4a07      	ldr	r2, [pc, #28]	; (800bccc <TL_BLE_Init+0x64>)
 800bcae:	6013      	str	r3, [r2, #0]

  return 0;
 800bcb0:	2300      	movs	r3, #0
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3710      	adds	r7, #16
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	20030a34 	.word	0x20030a34
 800bcc0:	20030000 	.word	0x20030000
 800bcc4:	20030a24 	.word	0x20030a24
 800bcc8:	20000328 	.word	0x20000328
 800bccc:	2000032c 	.word	0x2000032c

0800bcd0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b082      	sub	sp, #8
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	460b      	mov	r3, r1
 800bcda:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800bcdc:	4b05      	ldr	r3, [pc, #20]	; (800bcf4 <TL_BLE_SendCmd+0x24>)
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	2201      	movs	r2, #1
 800bce4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_BLE_SendCmd();
 800bce6:	f000 feb5 	bl	800ca54 <HW_IPCC_BLE_SendCmd>

  return 0;
 800bcea:	2300      	movs	r3, #0
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3708      	adds	r7, #8
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}
 800bcf4:	20030000 	.word	0x20030000

0800bcf8 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800bcfe:	e009      	b.n	800bd14 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800bd00:	1d3b      	adds	r3, r7, #4
 800bd02:	4619      	mov	r1, r3
 800bd04:	4808      	ldr	r0, [pc, #32]	; (800bd28 <HW_IPCC_BLE_RxEvtNot+0x30>)
 800bd06:	f7ff fe4c 	bl	800b9a2 <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 800bd0a:	4b08      	ldr	r3, [pc, #32]	; (800bd2c <HW_IPCC_BLE_RxEvtNot+0x34>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	4610      	mov	r0, r2
 800bd12:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800bd14:	4804      	ldr	r0, [pc, #16]	; (800bd28 <HW_IPCC_BLE_RxEvtNot+0x30>)
 800bd16:	f7ff fdbd 	bl	800b894 <LST_is_empty>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d0ef      	beq.n	800bd00 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800bd20:	bf00      	nop
}
 800bd22:	3708      	adds	r7, #8
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}
 800bd28:	20030a34 	.word	0x20030a34
 800bd2c:	20000328 	.word	0x20000328

0800bd30 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800bd34:	4b02      	ldr	r3, [pc, #8]	; (800bd40 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4798      	blx	r3

  return;
 800bd3a:	bf00      	nop
}
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	2000032c 	.word	0x2000032c

0800bd44 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b084      	sub	sp, #16
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800bd50:	480d      	ldr	r0, [pc, #52]	; (800bd88 <TL_SYS_Init+0x44>)
 800bd52:	f7ff fd8f 	bl	800b874 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800bd56:	4b0d      	ldr	r3, [pc, #52]	; (800bd8c <TL_SYS_Init+0x48>)
 800bd58:	68db      	ldr	r3, [r3, #12]
 800bd5a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	689a      	ldr	r2, [r3, #8]
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	4a08      	ldr	r2, [pc, #32]	; (800bd88 <TL_SYS_Init+0x44>)
 800bd68:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800bd6a:	f000 fe95 	bl	800ca98 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4a07      	ldr	r2, [pc, #28]	; (800bd90 <TL_SYS_Init+0x4c>)
 800bd74:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	4a06      	ldr	r2, [pc, #24]	; (800bd94 <TL_SYS_Init+0x50>)
 800bd7c:	6013      	str	r3, [r2, #0]

  return 0;
 800bd7e:	2300      	movs	r3, #0
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3710      	adds	r7, #16
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	20030a3c 	.word	0x20030a3c
 800bd8c:	20030000 	.word	0x20030000
 800bd90:	20000330 	.word	0x20000330
 800bd94:	20000334 	.word	0x20000334

0800bd98 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	460b      	mov	r3, r1
 800bda2:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800bda4:	4b05      	ldr	r3, [pc, #20]	; (800bdbc <TL_SYS_SendCmd+0x24>)
 800bda6:	68db      	ldr	r3, [r3, #12]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	2210      	movs	r2, #16
 800bdac:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 800bdae:	f000 fe7d 	bl	800caac <HW_IPCC_SYS_SendCmd>

  return 0;
 800bdb2:	2300      	movs	r3, #0
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3708      	adds	r7, #8
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}
 800bdbc:	20030000 	.word	0x20030000

0800bdc0 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800bdc4:	4b04      	ldr	r3, [pc, #16]	; (800bdd8 <HW_IPCC_SYS_CmdEvtNot+0x18>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	4a04      	ldr	r2, [pc, #16]	; (800bddc <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 800bdca:	68d2      	ldr	r2, [r2, #12]
 800bdcc:	6812      	ldr	r2, [r2, #0]
 800bdce:	4610      	mov	r0, r2
 800bdd0:	4798      	blx	r3

  return;
 800bdd2:	bf00      	nop
}
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	20000330 	.word	0x20000330
 800bddc:	20030000 	.word	0x20030000

0800bde0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b082      	sub	sp, #8
 800bde4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800bde6:	e009      	b.n	800bdfc <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800bde8:	1d3b      	adds	r3, r7, #4
 800bdea:	4619      	mov	r1, r3
 800bdec:	4808      	ldr	r0, [pc, #32]	; (800be10 <HW_IPCC_SYS_EvtNot+0x30>)
 800bdee:	f7ff fdd8 	bl	800b9a2 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 800bdf2:	4b08      	ldr	r3, [pc, #32]	; (800be14 <HW_IPCC_SYS_EvtNot+0x34>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	687a      	ldr	r2, [r7, #4]
 800bdf8:	4610      	mov	r0, r2
 800bdfa:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800bdfc:	4804      	ldr	r0, [pc, #16]	; (800be10 <HW_IPCC_SYS_EvtNot+0x30>)
 800bdfe:	f7ff fd49 	bl	800b894 <LST_is_empty>
 800be02:	4603      	mov	r3, r0
 800be04:	2b00      	cmp	r3, #0
 800be06:	d0ef      	beq.n	800bde8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800be08:	bf00      	nop
}
 800be0a:	3708      	adds	r7, #8
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}
 800be10:	20030a3c 	.word	0x20030a3c
 800be14:	20000334 	.word	0x20000334

0800be18 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b082      	sub	sp, #8
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800be20:	4817      	ldr	r0, [pc, #92]	; (800be80 <TL_MM_Init+0x68>)
 800be22:	f7ff fd27 	bl	800b874 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800be26:	4817      	ldr	r0, [pc, #92]	; (800be84 <TL_MM_Init+0x6c>)
 800be28:	f7ff fd24 	bl	800b874 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800be2c:	4b16      	ldr	r3, [pc, #88]	; (800be88 <TL_MM_Init+0x70>)
 800be2e:	691b      	ldr	r3, [r3, #16]
 800be30:	4a16      	ldr	r2, [pc, #88]	; (800be8c <TL_MM_Init+0x74>)
 800be32:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800be34:	4b15      	ldr	r3, [pc, #84]	; (800be8c <TL_MM_Init+0x74>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	687a      	ldr	r2, [r7, #4]
 800be3a:	6892      	ldr	r2, [r2, #8]
 800be3c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800be3e:	4b13      	ldr	r3, [pc, #76]	; (800be8c <TL_MM_Init+0x74>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	687a      	ldr	r2, [r7, #4]
 800be44:	68d2      	ldr	r2, [r2, #12]
 800be46:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800be48:	4b10      	ldr	r3, [pc, #64]	; (800be8c <TL_MM_Init+0x74>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	4a0c      	ldr	r2, [pc, #48]	; (800be80 <TL_MM_Init+0x68>)
 800be4e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800be50:	4b0e      	ldr	r3, [pc, #56]	; (800be8c <TL_MM_Init+0x74>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	687a      	ldr	r2, [r7, #4]
 800be56:	6812      	ldr	r2, [r2, #0]
 800be58:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800be5a:	4b0c      	ldr	r3, [pc, #48]	; (800be8c <TL_MM_Init+0x74>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	687a      	ldr	r2, [r7, #4]
 800be60:	6852      	ldr	r2, [r2, #4]
 800be62:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800be64:	4b09      	ldr	r3, [pc, #36]	; (800be8c <TL_MM_Init+0x74>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	687a      	ldr	r2, [r7, #4]
 800be6a:	6912      	ldr	r2, [r2, #16]
 800be6c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800be6e:	4b07      	ldr	r3, [pc, #28]	; (800be8c <TL_MM_Init+0x74>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	687a      	ldr	r2, [r7, #4]
 800be74:	6952      	ldr	r2, [r2, #20]
 800be76:	619a      	str	r2, [r3, #24]

  return;
 800be78:	bf00      	nop
}
 800be7a:	3708      	adds	r7, #8
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}
 800be80:	200300a8 	.word	0x200300a8
 800be84:	20000320 	.word	0x20000320
 800be88:	20030000 	.word	0x20030000
 800be8c:	20000338 	.word	0x20000338

0800be90 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b082      	sub	sp, #8
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800be98:	6879      	ldr	r1, [r7, #4]
 800be9a:	4805      	ldr	r0, [pc, #20]	; (800beb0 <TL_MM_EvtDone+0x20>)
 800be9c:	f7ff fd3e 	bl	800b91c <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800bea0:	4804      	ldr	r0, [pc, #16]	; (800beb4 <TL_MM_EvtDone+0x24>)
 800bea2:	f000 fe29 	bl	800caf8 <HW_IPCC_MM_SendFreeBuf>

  return;
 800bea6:	bf00      	nop
}
 800bea8:	3708      	adds	r7, #8
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop
 800beb0:	20000320 	.word	0x20000320
 800beb4:	0800beb9 	.word	0x0800beb9

0800beb8 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800bebe:	e00c      	b.n	800beda <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800bec0:	1d3b      	adds	r3, r7, #4
 800bec2:	4619      	mov	r1, r3
 800bec4:	480a      	ldr	r0, [pc, #40]	; (800bef0 <SendFreeBuf+0x38>)
 800bec6:	f7ff fd6c 	bl	800b9a2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800beca:	4b0a      	ldr	r3, [pc, #40]	; (800bef4 <SendFreeBuf+0x3c>)
 800becc:	691b      	ldr	r3, [r3, #16]
 800bece:	691b      	ldr	r3, [r3, #16]
 800bed0:	687a      	ldr	r2, [r7, #4]
 800bed2:	4611      	mov	r1, r2
 800bed4:	4618      	mov	r0, r3
 800bed6:	f7ff fd21 	bl	800b91c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800beda:	4805      	ldr	r0, [pc, #20]	; (800bef0 <SendFreeBuf+0x38>)
 800bedc:	f7ff fcda 	bl	800b894 <LST_is_empty>
 800bee0:	4603      	mov	r3, r0
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d0ec      	beq.n	800bec0 <SendFreeBuf+0x8>
  }

  return;
 800bee6:	bf00      	nop
}
 800bee8:	3708      	adds	r7, #8
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	20000320 	.word	0x20000320
 800bef4:	20030000 	.word	0x20030000

0800bef8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800befc:	4805      	ldr	r0, [pc, #20]	; (800bf14 <TL_TRACES_Init+0x1c>)
 800befe:	f7ff fcb9 	bl	800b874 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800bf02:	4b05      	ldr	r3, [pc, #20]	; (800bf18 <TL_TRACES_Init+0x20>)
 800bf04:	695b      	ldr	r3, [r3, #20]
 800bf06:	4a03      	ldr	r2, [pc, #12]	; (800bf14 <TL_TRACES_Init+0x1c>)
 800bf08:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800bf0a:	f000 fe2b 	bl	800cb64 <HW_IPCC_TRACES_Init>

  return;
 800bf0e:	bf00      	nop
}
 800bf10:	bd80      	pop	{r7, pc}
 800bf12:	bf00      	nop
 800bf14:	200300b0 	.word	0x200300b0
 800bf18:	20030000 	.word	0x20030000

0800bf1c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b082      	sub	sp, #8
 800bf20:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800bf22:	e008      	b.n	800bf36 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800bf24:	1d3b      	adds	r3, r7, #4
 800bf26:	4619      	mov	r1, r3
 800bf28:	4808      	ldr	r0, [pc, #32]	; (800bf4c <HW_IPCC_TRACES_EvtNot+0x30>)
 800bf2a:	f7ff fd3a 	bl	800b9a2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	4618      	mov	r0, r3
 800bf32:	f000 f80d 	bl	800bf50 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800bf36:	4805      	ldr	r0, [pc, #20]	; (800bf4c <HW_IPCC_TRACES_EvtNot+0x30>)
 800bf38:	f7ff fcac 	bl	800b894 <LST_is_empty>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d0f0      	beq.n	800bf24 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800bf42:	bf00      	nop
}
 800bf44:	3708      	adds	r7, #8
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	200300b0 	.word	0x200300b0

0800bf50 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt ){};
 800bf50:	b480      	push	{r7}
 800bf52:	b083      	sub	sp, #12
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	bf00      	nop
 800bf5a:	370c      	adds	r7, #12
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf62:	4770      	bx	lr

0800bf64 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800bf64:	b480      	push	{r7}
 800bf66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800bf68:	4b03      	ldr	r3, [pc, #12]	; (800bf78 <LL_FLASH_GetUDN+0x14>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf74:	4770      	bx	lr
 800bf76:	bf00      	nop
 800bf78:	1fff7580 	.word	0x1fff7580

0800bf7c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800bf80:	4b03      	ldr	r3, [pc, #12]	; (800bf90 <LL_FLASH_GetDeviceID+0x14>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	b2db      	uxtb	r3, r3
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr
 800bf90:	1fff7584 	.word	0x1fff7584

0800bf94 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800bf94:	b480      	push	{r7}
 800bf96:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800bf98:	4b03      	ldr	r3, [pc, #12]	; (800bfa8 <LL_FLASH_GetSTCompanyID+0x14>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	0a1b      	lsrs	r3, r3, #8
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr
 800bfa8:	1fff7584 	.word	0x1fff7584

0800bfac <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800bfac:	b5b0      	push	{r4, r5, r7, lr}
 800bfae:	b08c      	sub	sp, #48	; 0x30
 800bfb0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800bfb2:	4b2b      	ldr	r3, [pc, #172]	; (800c060 <APP_BLE_Init+0xb4>)
 800bfb4:	463c      	mov	r4, r7
 800bfb6:	461d      	mov	r5, r3
 800bfb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bfba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bfbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bfbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bfc0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800bfc4:	c407      	stmia	r4!, {r0, r1, r2}
 800bfc6:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800bfc8:	f000 f928 	bl	800c21c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800bfcc:	2101      	movs	r1, #1
 800bfce:	2002      	movs	r0, #2
 800bfd0:	f7f6 f8ca 	bl	8002168 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800bfd4:	4a23      	ldr	r2, [pc, #140]	; (800c064 <APP_BLE_Init+0xb8>)
 800bfd6:	2100      	movs	r1, #0
 800bfd8:	2004      	movs	r0, #4
 800bfda:	f7f6 fa2d 	bl	8002438 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 800bfde:	463b      	mov	r3, r7
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f7ff faff 	bl	800b5e4 <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800bfe6:	f000 f92f 	bl	800c248 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800bfea:	f7ff fd61 	bl	800bab0 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800bfee:	4b1e      	ldr	r3, [pc, #120]	; (800c068 <APP_BLE_Init+0xbc>)
 800bff0:	2200      	movs	r2, #0
 800bff2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;  
 800bff6:	4b1c      	ldr	r3, [pc, #112]	; (800c068 <APP_BLE_Init+0xbc>)
 800bff8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bffc:	84da      	strh	r2, [r3, #38]	; 0x26
  /**
   * From here, all initialization are BLE application specific
   */
    UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800bffe:	4a1b      	ldr	r2, [pc, #108]	; (800c06c <APP_BLE_Init+0xc0>)
 800c000:	2100      	movs	r1, #0
 800c002:	2001      	movs	r0, #1
 800c004:	f7f6 fa18 	bl	8002438 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)  
    manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)  
  aci_hal_set_radio_activity_mask(0x0006);
 800c008:	2006      	movs	r0, #6
 800c00a:	f7fe fe93 	bl	800ad34 <aci_hal_set_radio_activity_mask>
  mutex = 1; 
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800c00e:	f000 fb63 	bl	800c6d8 <P2PS_APP_Init>

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800c012:	4b17      	ldr	r3, [pc, #92]	; (800c070 <APP_BLE_Init+0xc4>)
 800c014:	2200      	movs	r2, #0
 800c016:	4917      	ldr	r1, [pc, #92]	; (800c074 <APP_BLE_Init+0xc8>)
 800c018:	2000      	movs	r0, #0
 800c01a:	f7f5 fb8f 	bl	800173c <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800c01e:	4b16      	ldr	r3, [pc, #88]	; (800c078 <APP_BLE_Init+0xcc>)
 800c020:	2200      	movs	r2, #0
 800c022:	4916      	ldr	r1, [pc, #88]	; (800c07c <APP_BLE_Init+0xd0>)
 800c024:	2000      	movs	r0, #0
 800c026:	f7f5 fb89 	bl	800173c <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800c02a:	4b0f      	ldr	r3, [pc, #60]	; (800c068 <APP_BLE_Init+0xbc>)
 800c02c:	2200      	movs	r2, #0
 800c02e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800c032:	4b0d      	ldr	r3, [pc, #52]	; (800c068 <APP_BLE_Init+0xbc>)
 800c034:	2200      	movs	r2, #0
 800c036:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800c03a:	4b11      	ldr	r3, [pc, #68]	; (800c080 <APP_BLE_Init+0xd4>)
 800c03c:	2280      	movs	r2, #128	; 0x80
 800c03e:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800c040:	4b10      	ldr	r3, [pc, #64]	; (800c084 <APP_BLE_Init+0xd8>)
 800c042:	22a0      	movs	r2, #160	; 0xa0
 800c044:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 800c046:	2001      	movs	r0, #1
 800c048:	f000 f9d8 	bl	800c3fc <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */
   HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800c04c:	2201      	movs	r2, #1
 800c04e:	2120      	movs	r1, #32
 800c050:	480d      	ldr	r0, [pc, #52]	; (800c088 <APP_BLE_Init+0xdc>)
 800c052:	f7f7 fb47 	bl	80036e4 <HAL_GPIO_WritePin>
/* USER CODE END APP_BLE_Init_2 */
  return;
 800c056:	bf00      	nop
}
 800c058:	3730      	adds	r7, #48	; 0x30
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bdb0      	pop	{r4, r5, r7, pc}
 800c05e:	bf00      	nop
 800c060:	0800d220 	.word	0x0800d220
 800c064:	0800b00d 	.word	0x0800b00d
 800c068:	2000011c 	.word	0x2000011c
 800c06c:	0800c569 	.word	0x0800c569
 800c070:	0800c59d 	.word	0x0800c59d
 800c074:	200001ad 	.word	0x200001ad
 800c078:	0800c5ad 	.word	0x0800c5ad
 800c07c:	200001ae 	.word	0x200001ae
 800c080:	200001b0 	.word	0x200001b0
 800c084:	200001b2 	.word	0x200001b2
 800c088:	48000400 	.word	0x48000400

0800c08c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b08a      	sub	sp, #40	; 0x28
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete; 
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c094:	2342      	movs	r3, #66	; 0x42
 800c096:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	3301      	adds	r3, #1
 800c09e:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800c0a0:	6a3b      	ldr	r3, [r7, #32]
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	2b3e      	cmp	r3, #62	; 0x3e
 800c0a6:	d02f      	beq.n	800c108 <SVCCTL_App_Notification+0x7c>
 800c0a8:	2bff      	cmp	r3, #255	; 0xff
 800c0aa:	f000 808c 	beq.w	800c1c6 <SVCCTL_App_Notification+0x13a>
 800c0ae:	2b05      	cmp	r3, #5
 800c0b0:	d000      	beq.n	800c0b4 <SVCCTL_App_Notification+0x28>

        default:
        /* USER CODE BEGIN ECODE_DEFAULT*/

        /* USER CODE END ECODE_DEFAULT*/
          break;
 800c0b2:	e09b      	b.n	800c1ec <SVCCTL_App_Notification+0x160>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 800c0b4:	6a3b      	ldr	r3, [r7, #32]
 800c0b6:	3302      	adds	r3, #2
 800c0b8:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c0c0:	b29a      	uxth	r2, r3
 800c0c2:	4b4d      	ldr	r3, [pc, #308]	; (800c1f8 <SVCCTL_App_Notification+0x16c>)
 800c0c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d106      	bne.n	800c0d8 <SVCCTL_App_Notification+0x4c>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800c0ca:	4b4b      	ldr	r3, [pc, #300]	; (800c1f8 <SVCCTL_App_Notification+0x16c>)
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	84da      	strh	r2, [r3, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c0d0:	4b49      	ldr	r3, [pc, #292]	; (800c1f8 <SVCCTL_App_Notification+0x16c>)
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      Adv_Request(APP_BLE_FAST_ADV);
 800c0d8:	2001      	movs	r0, #1
 800c0da:	f000 f98f 	bl	800c3fc <Adv_Request>
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800c0de:	4b47      	ldr	r3, [pc, #284]	; (800c1fc <SVCCTL_App_Notification+0x170>)
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800c0e4:	4b44      	ldr	r3, [pc, #272]	; (800c1f8 <SVCCTL_App_Notification+0x16c>)
 800c0e6:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800c0e8:	4b44      	ldr	r3, [pc, #272]	; (800c1fc <SVCCTL_App_Notification+0x170>)
 800c0ea:	805a      	strh	r2, [r3, #2]
        P2PS_APP_Notification(&handleNotification);
 800c0ec:	4843      	ldr	r0, [pc, #268]	; (800c1fc <SVCCTL_App_Notification+0x170>)
 800c0ee:	f000 fadf 	bl	800c6b0 <P2PS_APP_Notification>
        HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	2101      	movs	r1, #1
 800c0f6:	4842      	ldr	r0, [pc, #264]	; (800c200 <SVCCTL_App_Notification+0x174>)
 800c0f8:	f7f7 faf4 	bl	80036e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	2120      	movs	r1, #32
 800c100:	483f      	ldr	r0, [pc, #252]	; (800c200 <SVCCTL_App_Notification+0x174>)
 800c102:	f7f7 faef 	bl	80036e4 <HAL_GPIO_WritePin>
    break; /* EVT_DISCONN_COMPLETE */
 800c106:	e071      	b.n	800c1ec <SVCCTL_App_Notification+0x160>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800c108:	6a3b      	ldr	r3, [r7, #32]
 800c10a:	3302      	adds	r3, #2
 800c10c:	61bb      	str	r3, [r7, #24]
      switch (meta_evt->subevent)
 800c10e:	69bb      	ldr	r3, [r7, #24]
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	2b03      	cmp	r3, #3
 800c114:	d053      	beq.n	800c1be <SVCCTL_App_Notification+0x132>
 800c116:	2b0c      	cmp	r3, #12
 800c118:	d002      	beq.n	800c120 <SVCCTL_App_Notification+0x94>
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	d016      	beq.n	800c14c <SVCCTL_App_Notification+0xc0>
          break;
 800c11e:	e051      	b.n	800c1c4 <SVCCTL_App_Notification+0x138>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 800c120:	69bb      	ldr	r3, [r7, #24]
 800c122:	3301      	adds	r3, #1
 800c124:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 800c126:	4b34      	ldr	r3, [pc, #208]	; (800c1f8 <SVCCTL_App_Notification+0x16c>)
 800c128:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c12a:	f107 020a 	add.w	r2, r7, #10
 800c12e:	f107 010b 	add.w	r1, r7, #11
 800c132:	4618      	mov	r0, r3
 800c134:	f7fe fe78 	bl	800ae28 <hci_le_read_phy>
 800c138:	4603      	mov	r3, r0
 800c13a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret == BLE_STATUS_SUCCESS)
 800c13e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c142:	2b00      	cmp	r3, #0
 800c144:	d13d      	bne.n	800c1c2 <SVCCTL_App_Notification+0x136>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 800c146:	7afb      	ldrb	r3, [r7, #11]
 800c148:	2b02      	cmp	r3, #2
          break;
 800c14a:	e03a      	b.n	800c1c2 <SVCCTL_App_Notification+0x136>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800c14c:	69bb      	ldr	r3, [r7, #24]
 800c14e:	3301      	adds	r3, #1
 800c150:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800c152:	4b29      	ldr	r3, [pc, #164]	; (800c1f8 <SVCCTL_App_Notification+0x16c>)
 800c154:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800c158:	4618      	mov	r0, r3
 800c15a:	f7f5 fb65 	bl	8001828 <HW_TS_Stop>
            if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800c15e:	4b26      	ldr	r3, [pc, #152]	; (800c1f8 <SVCCTL_App_Notification+0x16c>)
 800c160:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c164:	2b04      	cmp	r3, #4
 800c166:	d104      	bne.n	800c172 <SVCCTL_App_Notification+0xe6>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800c168:	4b23      	ldr	r3, [pc, #140]	; (800c1f8 <SVCCTL_App_Notification+0x16c>)
 800c16a:	2206      	movs	r2, #6
 800c16c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800c170:	e003      	b.n	800c17a <SVCCTL_App_Notification+0xee>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800c172:	4b21      	ldr	r3, [pc, #132]	; (800c1f8 <SVCCTL_App_Notification+0x16c>)
 800c174:	2205      	movs	r2, #5
 800c176:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                connection_complete_event->Connection_Handle;
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c180:	b29a      	uxth	r2, r3
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle =
 800c182:	4b1d      	ldr	r3, [pc, #116]	; (800c1f8 <SVCCTL_App_Notification+0x16c>)
 800c184:	84da      	strh	r2, [r3, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800c186:	4b1d      	ldr	r3, [pc, #116]	; (800c1fc <SVCCTL_App_Notification+0x170>)
 800c188:	2200      	movs	r2, #0
 800c18a:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800c18c:	4b1a      	ldr	r3, [pc, #104]	; (800c1f8 <SVCCTL_App_Notification+0x16c>)
 800c18e:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800c190:	4b1a      	ldr	r3, [pc, #104]	; (800c1fc <SVCCTL_App_Notification+0x170>)
 800c192:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 800c194:	4819      	ldr	r0, [pc, #100]	; (800c1fc <SVCCTL_App_Notification+0x170>)
 800c196:	f000 fa8b 	bl	800c6b0 <P2PS_APP_Notification>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800c19a:	2201      	movs	r2, #1
 800c19c:	2101      	movs	r1, #1
 800c19e:	4818      	ldr	r0, [pc, #96]	; (800c200 <SVCCTL_App_Notification+0x174>)
 800c1a0:	f7f7 faa0 	bl	80036e4 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	2120      	movs	r1, #32
 800c1a8:	4815      	ldr	r0, [pc, #84]	; (800c200 <SVCCTL_App_Notification+0x174>)
 800c1aa:	f7f7 fa9b 	bl	80036e4 <HAL_GPIO_WritePin>
          aci_gatt_exchange_config(connection_complete_event->Connection_Handle);
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c1b4:	b29b      	uxth	r3, r3
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7fe fc99 	bl	800aaee <aci_gatt_exchange_config>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 800c1bc:	e002      	b.n	800c1c4 <SVCCTL_App_Notification+0x138>
          break;
 800c1be:	bf00      	nop
 800c1c0:	e014      	b.n	800c1ec <SVCCTL_App_Notification+0x160>
          break;
 800c1c2:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 800c1c4:	e012      	b.n	800c1ec <SVCCTL_App_Notification+0x160>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800c1c6:	6a3b      	ldr	r3, [r7, #32]
 800c1c8:	3302      	adds	r3, #2
 800c1ca:	61fb      	str	r3, [r7, #28]
      switch (blue_evt->ecode)
 800c1cc:	69fb      	ldr	r3, [r7, #28]
 800c1ce:	881b      	ldrh	r3, [r3, #0]
 800c1d0:	b29b      	uxth	r3, r3
 800c1d2:	f240 4207 	movw	r2, #1031	; 0x407
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d004      	beq.n	800c1e4 <SVCCTL_App_Notification+0x158>
 800c1da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c1de:	d003      	beq.n	800c1e8 <SVCCTL_App_Notification+0x15c>
 800c1e0:	2b04      	cmp	r3, #4
        break; /* RADIO_ACTIVITY_EVENT */
 800c1e2:	e002      	b.n	800c1ea <SVCCTL_App_Notification+0x15e>
        break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800c1e4:	bf00      	nop
 800c1e6:	e000      	b.n	800c1ea <SVCCTL_App_Notification+0x15e>
      break;
 800c1e8:	bf00      	nop
      break; /* EVT_VENDOR */
 800c1ea:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800c1ec:	2301      	movs	r3, #1
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3728      	adds	r7, #40	; 0x28
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	bf00      	nop
 800c1f8:	2000011c 	.word	0x2000011c
 800c1fc:	20000760 	.word	0x20000760
 800c200:	48000400 	.word	0x48000400

0800c204 <APP_BLE_Get_Server_Connection_Status>:

APP_BLE_ConnStatus_t APP_BLE_Get_Server_Connection_Status(void)
{
 800c204:	b480      	push	{r7}
 800c206:	af00      	add	r7, sp, #0
    return BleApplicationContext.Device_Connection_Status;
 800c208:	4b03      	ldr	r3, [pc, #12]	; (800c218 <APP_BLE_Get_Server_Connection_Status+0x14>)
 800c20a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
}
 800c20e:	4618      	mov	r0, r3
 800c210:	46bd      	mov	sp, r7
 800c212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c216:	4770      	bx	lr
 800c218:	2000011c 	.word	0x2000011c

0800c21c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b082      	sub	sp, #8
 800c220:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800c222:	4b06      	ldr	r3, [pc, #24]	; (800c23c <Ble_Tl_Init+0x20>)
 800c224:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800c226:	4b06      	ldr	r3, [pc, #24]	; (800c240 <Ble_Tl_Init+0x24>)
 800c228:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800c22a:	463b      	mov	r3, r7
 800c22c:	4619      	mov	r1, r3
 800c22e:	4805      	ldr	r0, [pc, #20]	; (800c244 <Ble_Tl_Init+0x28>)
 800c230:	f7fe fed0 	bl	800afd4 <hci_init>

  return;
 800c234:	bf00      	nop
}
 800c236:	3708      	adds	r7, #8
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}
 800c23c:	200300b8 	.word	0x200300b8
 800c240:	0800c637 	.word	0x0800c637
 800c244:	0800c5ff 	.word	0x0800c5ff

0800c248 <Ble_Hci_Gap_Gatt_Init>:

 static void Ble_Hci_Gap_Gatt_Init(void){
 800c248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c24a:	b091      	sub	sp, #68	; 0x44
 800c24c:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 800c24e:	2300      	movs	r3, #0
 800c250:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 800c252:	f7fe fdc0 	bl	800add6 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800c256:	f000 f943 	bl	800c4e0 <BleGetBdAddress>
 800c25a:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800c25c:	6a3a      	ldr	r2, [r7, #32]
 800c25e:	2106      	movs	r1, #6
 800c260:	2000      	movs	r0, #0
 800c262:	f7fe fc99 	bl	800ab98 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800c266:	6a3b      	ldr	r3, [r7, #32]
 800c268:	795a      	ldrb	r2, [r3, #5]
 800c26a:	4b5e      	ldr	r3, [pc, #376]	; (800c3e4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800c26c:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 800c26e:	6a3b      	ldr	r3, [r7, #32]
 800c270:	791a      	ldrb	r2, [r3, #4]
 800c272:	4b5c      	ldr	r3, [pc, #368]	; (800c3e4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800c274:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800c276:	6a3b      	ldr	r3, [r7, #32]
 800c278:	78da      	ldrb	r2, [r3, #3]
 800c27a:	4b5a      	ldr	r3, [pc, #360]	; (800c3e4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800c27c:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 800c27e:	6a3b      	ldr	r3, [r7, #32]
 800c280:	789a      	ldrb	r2, [r3, #2]
 800c282:	4b58      	ldr	r3, [pc, #352]	; (800c3e4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800c284:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 800c286:	6a3b      	ldr	r3, [r7, #32]
 800c288:	785a      	ldrb	r2, [r3, #1]
 800c28a:	4b56      	ldr	r3, [pc, #344]	; (800c3e4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800c28c:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 800c28e:	6a3b      	ldr	r3, [r7, #32]
 800c290:	781a      	ldrb	r2, [r3, #0]
 800c292:	4b54      	ldr	r3, [pc, #336]	; (800c3e4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800c294:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 800c296:	f64e 536e 	movw	r3, #60782	; 0xed6e
 800c29a:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 800c29c:	f7ff fe62 	bl	800bf64 <LL_FLASH_GetUDN>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800c2a4:	f107 0308 	add.w	r3, r7, #8
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	2106      	movs	r1, #6
 800c2ac:	202e      	movs	r0, #46	; 0x2e
 800c2ae:	f7fe fc73 	bl	800ab98 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK 
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800c2b2:	4a4d      	ldr	r2, [pc, #308]	; (800c3e8 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 800c2b4:	2110      	movs	r1, #16
 800c2b6:	2018      	movs	r0, #24
 800c2b8:	f7fe fc6e 	bl	800ab98 <aci_hal_write_config_data>
    
   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800c2bc:	4a4b      	ldr	r2, [pc, #300]	; (800c3ec <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 800c2be:	2110      	movs	r1, #16
 800c2c0:	2008      	movs	r0, #8
 800c2c2:	f7fe fc69 	bl	800ab98 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800c2c6:	2118      	movs	r1, #24
 800c2c8:	2001      	movs	r0, #1
 800c2ca:	f7fe fcd5 	bl	800ac78 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800c2ce:	f7fe f9bd 	bl	800a64c <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800c2d6:	7ffb      	ldrb	r3, [r7, #31]
 800c2d8:	f043 0301 	orr.w	r3, r3, #1
 800c2dc:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 800c2de:	7ffb      	ldrb	r3, [r7, #31]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d01e      	beq.n	800c322 <Ble_Hci_Gap_Gatt_Init+0xda>
  {
    const char *name = "STM32WB";
 800c2e4:	4b42      	ldr	r3, [pc, #264]	; (800c3f0 <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 800c2e6:	61bb      	str	r3, [r7, #24]
    aci_gap_init(role, 0,
 800c2e8:	f107 0216 	add.w	r2, r7, #22
 800c2ec:	7ff8      	ldrb	r0, [r7, #31]
 800c2ee:	f107 0312 	add.w	r3, r7, #18
 800c2f2:	9301      	str	r3, [sp, #4]
 800c2f4:	f107 0314 	add.w	r3, r7, #20
 800c2f8:	9300      	str	r3, [sp, #0]
 800c2fa:	4613      	mov	r3, r2
 800c2fc:	2207      	movs	r2, #7
 800c2fe:	2100      	movs	r1, #0
 800c300:	f7fe f88d 	bl	800a41e <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800c304:	8afc      	ldrh	r4, [r7, #22]
 800c306:	8abd      	ldrh	r5, [r7, #20]
 800c308:	69b8      	ldr	r0, [r7, #24]
 800c30a:	f7f3 ff39 	bl	8000180 <strlen>
 800c30e:	4603      	mov	r3, r0
 800c310:	b2da      	uxtb	r2, r3
 800c312:	69bb      	ldr	r3, [r7, #24]
 800c314:	9300      	str	r3, [sp, #0]
 800c316:	4613      	mov	r3, r2
 800c318:	2200      	movs	r2, #0
 800c31a:	4629      	mov	r1, r5
 800c31c:	4620      	mov	r0, r4
 800c31e:	f7fe fb58 	bl	800a9d2 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800c322:	8af8      	ldrh	r0, [r7, #22]
 800c324:	8a79      	ldrh	r1, [r7, #18]
 800c326:	1d3b      	adds	r3, r7, #4
 800c328:	9300      	str	r3, [sp, #0]
 800c32a:	2302      	movs	r3, #2
 800c32c:	2200      	movs	r2, #0
 800c32e:	f7fe fb50 	bl	800a9d2 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
/**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED); 
 800c332:	2202      	movs	r2, #2
 800c334:	2102      	movs	r1, #2
 800c336:	2000      	movs	r0, #0
 800c338:	f7fe fdde 	bl	800aef8 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800c33c:	4b2d      	ldr	r3, [pc, #180]	; (800c3f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c33e:	2201      	movs	r2, #1
 800c340:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800c342:	4b2c      	ldr	r3, [pc, #176]	; (800c3f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	4618      	mov	r0, r3
 800c348:	f7fd ff69 	bl	800a21e <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800c34c:	4b29      	ldr	r3, [pc, #164]	; (800c3f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c34e:	2201      	movs	r2, #1
 800c350:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 800c352:	4b28      	ldr	r3, [pc, #160]	; (800c3f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c354:	2200      	movs	r2, #0
 800c356:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
 800c358:	4b26      	ldr	r3, [pc, #152]	; (800c3f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c35a:	2208      	movs	r2, #8
 800c35c:	755a      	strb	r2, [r3, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 800c35e:	4b25      	ldr	r3, [pc, #148]	; (800c3f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c360:	2210      	movs	r2, #16
 800c362:	759a      	strb	r2, [r3, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = 1;
 800c364:	4b23      	ldr	r3, [pc, #140]	; (800c3f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c366:	2201      	movs	r2, #1
 800c368:	751a      	strb	r2, [r3, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 800c36a:	4b22      	ldr	r3, [pc, #136]	; (800c3f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c36c:	4a22      	ldr	r2, [pc, #136]	; (800c3f8 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800c36e:	619a      	str	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = 1;
 800c370:	4b20      	ldr	r3, [pc, #128]	; (800c3f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c372:	2201      	movs	r2, #1
 800c374:	709a      	strb	r2, [r3, #2]
  for (index = 0; index < 16; index++)
 800c376:	2300      	movs	r3, #0
 800c378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c37c:	e00b      	b.n	800c396 <Ble_Hci_Gap_Gatt_Init+0x14e>
  {
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 800c37e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c382:	4a1c      	ldr	r2, [pc, #112]	; (800c3f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c384:	4413      	add	r3, r2
 800c386:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c38a:	711a      	strb	r2, [r3, #4]
  for (index = 0; index < 16; index++)
 800c38c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c390:	3301      	adds	r3, #1
 800c392:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c39a:	2b0f      	cmp	r3, #15
 800c39c:	d9ef      	bls.n	800c37e <Ble_Hci_Gap_Gatt_Init+0x136>
  }

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800c39e:	4b15      	ldr	r3, [pc, #84]	; (800c3f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c3a0:	789d      	ldrb	r5, [r3, #2]
 800c3a2:	4b14      	ldr	r3, [pc, #80]	; (800c3f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c3a4:	785e      	ldrb	r6, [r3, #1]
 800c3a6:	4b13      	ldr	r3, [pc, #76]	; (800c3f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c3a8:	7d5b      	ldrb	r3, [r3, #21]
 800c3aa:	4a12      	ldr	r2, [pc, #72]	; (800c3f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c3ac:	7d92      	ldrb	r2, [r2, #22]
 800c3ae:	4911      	ldr	r1, [pc, #68]	; (800c3f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c3b0:	7d09      	ldrb	r1, [r1, #20]
 800c3b2:	4810      	ldr	r0, [pc, #64]	; (800c3f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c3b4:	6980      	ldr	r0, [r0, #24]
 800c3b6:	2400      	movs	r4, #0
 800c3b8:	9404      	str	r4, [sp, #16]
 800c3ba:	9003      	str	r0, [sp, #12]
 800c3bc:	9102      	str	r1, [sp, #8]
 800c3be:	9201      	str	r2, [sp, #4]
 800c3c0:	9300      	str	r3, [sp, #0]
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	4631      	mov	r1, r6
 800c3c8:	4628      	mov	r0, r5
 800c3ca:	f7fd ff79 	bl	800a2c0 <aci_gap_set_authentication_requirement>
                                        );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800c3ce:	4b09      	ldr	r3, [pc, #36]	; (800c3f4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800c3d0:	789b      	ldrb	r3, [r3, #2]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d001      	beq.n	800c3da <Ble_Hci_Gap_Gatt_Init+0x192>
   {
     aci_gap_configure_whitelist();
 800c3d6:	f7fe f910 	bl	800a5fa <aci_gap_configure_whitelist>
   }
}
 800c3da:	bf00      	nop
 800c3dc:	372c      	adds	r7, #44	; 0x2c
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3e2:	bf00      	nop
 800c3e4:	2000001c 	.word	0x2000001c
 800c3e8:	0800d328 	.word	0x0800d328
 800c3ec:	0800d338 	.word	0x0800d338
 800c3f0:	0800d250 	.word	0x0800d250
 800c3f4:	2000011c 	.word	0x2000011c
 800c3f8:	0001b207 	.word	0x0001b207

0800c3fc <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b08c      	sub	sp, #48	; 0x30
 800c400:	af08      	add	r7, sp, #32
 800c402:	4603      	mov	r3, r0
 800c404:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c406:	2342      	movs	r3, #66	; 0x42
 800c408:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;
 
  if (New_Status == APP_BLE_FAST_ADV)
 800c40a:	79fb      	ldrb	r3, [r7, #7]
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d106      	bne.n	800c41e <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800c410:	4b2c      	ldr	r3, [pc, #176]	; (800c4c4 <Adv_Request+0xc8>)
 800c412:	881b      	ldrh	r3, [r3, #0]
 800c414:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800c416:	4b2c      	ldr	r3, [pc, #176]	; (800c4c8 <Adv_Request+0xcc>)
 800c418:	881b      	ldrh	r3, [r3, #0]
 800c41a:	81bb      	strh	r3, [r7, #12]
 800c41c:	e005      	b.n	800c42a <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800c41e:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800c422:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800c424:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800c428:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800c42a:	4b28      	ldr	r3, [pc, #160]	; (800c4cc <Adv_Request+0xd0>)
 800c42c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800c430:	4618      	mov	r0, r3
 800c432:	f7f5 f9f9 	bl	8001828 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
    if ((New_Status == APP_BLE_LP_ADV)
 800c436:	79fb      	ldrb	r3, [r7, #7]
 800c438:	2b02      	cmp	r3, #2
 800c43a:	d10d      	bne.n	800c458 <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800c43c:	4b23      	ldr	r3, [pc, #140]	; (800c4cc <Adv_Request+0xd0>)
 800c43e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c442:	2b01      	cmp	r3, #1
 800c444:	d004      	beq.n	800c450 <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800c446:	4b21      	ldr	r3, [pc, #132]	; (800c4cc <Adv_Request+0xd0>)
 800c448:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c44c:	2b02      	cmp	r3, #2
 800c44e:	d103      	bne.n	800c458 <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 800c450:	f7fd fdd7 	bl	800a002 <aci_gap_set_non_discoverable>
 800c454:	4603      	mov	r3, r0
 800c456:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 800c458:	4a1c      	ldr	r2, [pc, #112]	; (800c4cc <Adv_Request+0xd0>)
 800c45a:	79fb      	ldrb	r3, [r7, #7]
 800c45c:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 800c460:	4b1a      	ldr	r3, [pc, #104]	; (800c4cc <Adv_Request+0xd0>)
 800c462:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c466:	89b8      	ldrh	r0, [r7, #12]
 800c468:	89f9      	ldrh	r1, [r7, #14]
 800c46a:	2200      	movs	r2, #0
 800c46c:	9206      	str	r2, [sp, #24]
 800c46e:	2200      	movs	r2, #0
 800c470:	9205      	str	r2, [sp, #20]
 800c472:	4a17      	ldr	r2, [pc, #92]	; (800c4d0 <Adv_Request+0xd4>)
 800c474:	9204      	str	r2, [sp, #16]
 800c476:	9303      	str	r3, [sp, #12]
 800c478:	4b16      	ldr	r3, [pc, #88]	; (800c4d4 <Adv_Request+0xd8>)
 800c47a:	9302      	str	r3, [sp, #8]
 800c47c:	2308      	movs	r3, #8
 800c47e:	9301      	str	r3, [sp, #4]
 800c480:	2300      	movs	r3, #0
 800c482:	9300      	str	r3, [sp, #0]
 800c484:	2300      	movs	r3, #0
 800c486:	4602      	mov	r2, r0
 800c488:	2000      	movs	r0, #0
 800c48a:	f7fd fde3 	bl	800a054 <aci_gap_set_discoverable>
 800c48e:	4603      	mov	r3, r0
 800c490:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);
    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800c492:	4911      	ldr	r1, [pc, #68]	; (800c4d8 <Adv_Request+0xdc>)
 800c494:	200e      	movs	r0, #14
 800c496:	f7fe f84d 	bl	800a534 <aci_gap_update_adv_data>
 800c49a:	4603      	mov	r3, r0
 800c49c:	72fb      	strb	r3, [r7, #11]

     if (ret == BLE_STATUS_SUCCESS)
 800c49e:	7afb      	ldrb	r3, [r7, #11]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d10a      	bne.n	800c4ba <Adv_Request+0xbe>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 800c4a4:	79fb      	ldrb	r3, [r7, #7]
 800c4a6:	2b01      	cmp	r3, #1
 800c4a8:	d107      	bne.n	800c4ba <Adv_Request+0xbe>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800c4aa:	4b08      	ldr	r3, [pc, #32]	; (800c4cc <Adv_Request+0xd0>)
 800c4ac:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800c4b0:	490a      	ldr	r1, [pc, #40]	; (800c4dc <Adv_Request+0xe0>)
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f7f5 fa42 	bl	800193c <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 800c4b8:	bf00      	nop
 800c4ba:	bf00      	nop
}
 800c4bc:	3710      	adds	r7, #16
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	bf00      	nop
 800c4c4:	200001b0 	.word	0x200001b0
 800c4c8:	200001b2 	.word	0x200001b2
 800c4cc:	2000011c 	.word	0x2000011c
 800c4d0:	20000145 	.word	0x20000145
 800c4d4:	0800d348 	.word	0x0800d348
 800c4d8:	2000001c 	.word	0x2000001c
 800c4dc:	0001e046 	.word	0x0001e046

0800c4e0 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b086      	sub	sp, #24
 800c4e4:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800c4e6:	f7ff fd3d 	bl	800bf64 <LL_FLASH_GetUDN>
 800c4ea:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4f2:	d023      	beq.n	800c53c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800c4f4:	f7ff fd4e 	bl	800bf94 <LL_FLASH_GetSTCompanyID>
 800c4f8:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800c4fa:	f7ff fd3f 	bl	800bf7c <LL_FLASH_GetDeviceID>
 800c4fe:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	b2da      	uxtb	r2, r3
 800c504:	4b16      	ldr	r3, [pc, #88]	; (800c560 <BleGetBdAddress+0x80>)
 800c506:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	0a1b      	lsrs	r3, r3, #8
 800c50c:	b2da      	uxtb	r2, r3
 800c50e:	4b14      	ldr	r3, [pc, #80]	; (800c560 <BleGetBdAddress+0x80>)
 800c510:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	0c1b      	lsrs	r3, r3, #16
 800c516:	b2da      	uxtb	r2, r3
 800c518:	4b11      	ldr	r3, [pc, #68]	; (800c560 <BleGetBdAddress+0x80>)
 800c51a:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	b2da      	uxtb	r2, r3
 800c520:	4b0f      	ldr	r3, [pc, #60]	; (800c560 <BleGetBdAddress+0x80>)
 800c522:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	b2da      	uxtb	r2, r3
 800c528:	4b0d      	ldr	r3, [pc, #52]	; (800c560 <BleGetBdAddress+0x80>)
 800c52a:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	0a1b      	lsrs	r3, r3, #8
 800c530:	b2da      	uxtb	r2, r3
 800c532:	4b0b      	ldr	r3, [pc, #44]	; (800c560 <BleGetBdAddress+0x80>)
 800c534:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800c536:	4b0a      	ldr	r3, [pc, #40]	; (800c560 <BleGetBdAddress+0x80>)
 800c538:	617b      	str	r3, [r7, #20]
 800c53a:	e00b      	b.n	800c554 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800c53c:	2000      	movs	r0, #0
 800c53e:	f7fe fefb 	bl	800b338 <OTP_Read>
 800c542:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d002      	beq.n	800c550 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	617b      	str	r3, [r7, #20]
 800c54e:	e001      	b.n	800c554 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800c550:	4b04      	ldr	r3, [pc, #16]	; (800c564 <BleGetBdAddress+0x84>)
 800c552:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 800c554:	697b      	ldr	r3, [r7, #20]
}
 800c556:	4618      	mov	r0, r3
 800c558:	3718      	adds	r7, #24
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}
 800c55e:	bf00      	nop
 800c560:	2000033c 	.word	0x2000033c
 800c564:	0800d320 	.word	0x0800d320

0800c568 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800c56e:	4b0a      	ldr	r3, [pc, #40]	; (800c598 <Adv_Cancel+0x30>)
 800c570:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c574:	2b05      	cmp	r3, #5
 800c576:	d00a      	beq.n	800c58e <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 800c578:	2300      	movs	r3, #0
 800c57a:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 800c57c:	f7fd fd41 	bl	800a002 <aci_gap_set_non_discoverable>
 800c580:	4603      	mov	r3, r0
 800c582:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c584:	4b04      	ldr	r3, [pc, #16]	; (800c598 <Adv_Cancel+0x30>)
 800c586:	2200      	movs	r2, #0
 800c588:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 800c58c:	bf00      	nop
 800c58e:	bf00      	nop
}
 800c590:	3708      	adds	r7, #8
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
 800c596:	bf00      	nop
 800c598:	2000011c 	.word	0x2000011c

0800c59c <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800c5a0:	2100      	movs	r1, #0
 800c5a2:	2001      	movs	r0, #1
 800c5a4:	f7f5 ff68 	bl	8002478 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 800c5a8:	bf00      	nop
}
 800c5aa:	bd80      	pop	{r7, pc}

0800c5ac <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 800c5ac:	b480      	push	{r7}
 800c5ae:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 800c5b0:	bf00      	nop
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b8:	4770      	bx	lr

0800c5ba <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800c5ba:	b580      	push	{r7, lr}
 800c5bc:	b082      	sub	sp, #8
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800c5c2:	2100      	movs	r1, #0
 800c5c4:	2004      	movs	r0, #4
 800c5c6:	f7f5 ff57 	bl	8002478 <UTIL_SEQ_SetTask>
  return;
 800c5ca:	bf00      	nop
}
 800c5cc:	3708      	adds	r7, #8
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}

0800c5d2 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800c5d2:	b580      	push	{r7, lr}
 800c5d4:	b082      	sub	sp, #8
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800c5da:	2001      	movs	r0, #1
 800c5dc:	f7f5 ffb2 	bl	8002544 <UTIL_SEQ_SetEvt>
  return;
 800c5e0:	bf00      	nop
}
 800c5e2:	3708      	adds	r7, #8
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}

0800c5e8 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b082      	sub	sp, #8
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800c5f0:	2001      	movs	r0, #1
 800c5f2:	f7f5 ffc5 	bl	8002580 <UTIL_SEQ_WaitEvt>
  return;
 800c5f6:	bf00      	nop
}
 800c5f8:	3708      	adds	r7, #8
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}

0800c5fe <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800c5fe:	b580      	push	{r7, lr}
 800c600:	b084      	sub	sp, #16
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload; 
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	685b      	ldr	r3, [r3, #4]
 800c60e:	3308      	adds	r3, #8
 800c610:	4618      	mov	r0, r3
 800c612:	f7ff fa9b 	bl	800bb4c <SVCCTL_UserEvtRx>
 800c616:	4603      	mov	r3, r0
 800c618:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800c61a:	7afb      	ldrb	r3, [r7, #11]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d003      	beq.n	800c628 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2201      	movs	r2, #1
 800c624:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 800c626:	e002      	b.n	800c62e <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	2200      	movs	r2, #0
 800c62c:	701a      	strb	r2, [r3, #0]
}
 800c62e:	bf00      	nop
 800c630:	3710      	adds	r7, #16
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}

0800c636 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800c636:	b580      	push	{r7, lr}
 800c638:	b084      	sub	sp, #16
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	4603      	mov	r3, r0
 800c63e:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800c640:	79fb      	ldrb	r3, [r7, #7]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d002      	beq.n	800c64c <BLE_StatusNot+0x16>
 800c646:	2b01      	cmp	r3, #1
 800c648:	d006      	beq.n	800c658 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 800c64a:	e00b      	b.n	800c664 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800c64c:	237f      	movs	r3, #127	; 0x7f
 800c64e:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800c650:	68f8      	ldr	r0, [r7, #12]
 800c652:	f7f5 ff3b 	bl	80024cc <UTIL_SEQ_PauseTask>
      break;
 800c656:	e005      	b.n	800c664 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800c658:	237f      	movs	r3, #127	; 0x7f
 800c65a:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800c65c:	68f8      	ldr	r0, [r7, #12]
 800c65e:	f7f5 ff53 	bl	8002508 <UTIL_SEQ_ResumeTask>
      break;
 800c662:	bf00      	nop
  }
  return;
 800c664:	bf00      	nop
}
 800c666:	3710      	adds	r7, #16
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}

0800c66c <P2PS_STM_App_Notification>:
static void P2PS_DataChange_Timer_Callback(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	2b01      	cmp	r3, #1
 800c67a:	d00b      	beq.n	800c694 <P2PS_STM_App_Notification+0x28>
 800c67c:	2b03      	cmp	r3, #3
 800c67e:	d00d      	beq.n	800c69c <P2PS_STM_App_Notification+0x30>
 800c680:	2b00      	cmp	r3, #0
 800c682:	d000      	beq.n	800c686 <P2PS_STM_App_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800c684:	e00b      	b.n	800c69e <P2PS_STM_App_Notification+0x32>
    	P2P_Server_App_Context.NotificationStatus = 1;
 800c686:	4b08      	ldr	r3, [pc, #32]	; (800c6a8 <P2PS_STM_App_Notification+0x3c>)
 800c688:	2201      	movs	r2, #1
 800c68a:	701a      	strb	r2, [r3, #0]
    	HAL_TIM_Base_Start_IT(&htim16);
 800c68c:	4807      	ldr	r0, [pc, #28]	; (800c6ac <P2PS_STM_App_Notification+0x40>)
 800c68e:	f7fb fcd7 	bl	8008040 <HAL_TIM_Base_Start_IT>
      break;
 800c692:	e004      	b.n	800c69e <P2PS_STM_App_Notification+0x32>
    	P2P_Server_App_Context.NotificationStatus = 0;
 800c694:	4b04      	ldr	r3, [pc, #16]	; (800c6a8 <P2PS_STM_App_Notification+0x3c>)
 800c696:	2200      	movs	r2, #0
 800c698:	701a      	strb	r2, [r3, #0]
      break;
 800c69a:	e000      	b.n	800c69e <P2PS_STM_App_Notification+0x32>
      break;
 800c69c:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800c69e:	bf00      	nop
}
 800c6a0:	3708      	adds	r7, #8
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	bf00      	nop
 800c6a8:	200001b4 	.word	0x200001b4
 800c6ac:	2000041c 	.word	0x2000041c

0800c6b0 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b083      	sub	sp, #12
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d002      	beq.n	800c6c6 <P2PS_APP_Notification+0x16>
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	d002      	beq.n	800c6ca <P2PS_APP_Notification+0x1a>
    
    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800c6c4:	e002      	b.n	800c6cc <P2PS_APP_Notification+0x1c>
    break;
 800c6c6:	bf00      	nop
 800c6c8:	e000      	b.n	800c6cc <P2PS_APP_Notification+0x1c>
    break;
 800c6ca:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800c6cc:	bf00      	nop
}
 800c6ce:	370c      	adds	r7, #12
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr

0800c6d8 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
	/* Register task used to update the characteristic (send the notification) */
		UTIL_SEQ_RegTask(1 << CFG_MY_TASK_NOTIFY_DATA ,UTIL_SEQ_RFU, P2PS_Send_Notification_Task);
 800c6dc:	4a05      	ldr	r2, [pc, #20]	; (800c6f4 <P2PS_APP_Init+0x1c>)
 800c6de:	2100      	movs	r1, #0
 800c6e0:	2008      	movs	r0, #8
 800c6e2:	f7f5 fea9 	bl	8002438 <UTIL_SEQ_RegTask>
//				P2PS_DataChange_Timer_Callback);

	  /**
	   * Initialize Template application context
	   */
	  P2P_Server_App_Context.NotificationStatus=0;
 800c6e6:	4b04      	ldr	r3, [pc, #16]	; (800c6f8 <P2PS_APP_Init+0x20>)
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	701a      	strb	r2, [r3, #0]
	  P2PS_APP_context_Init();
 800c6ec:	f000 f824 	bl	800c738 <P2PS_APP_context_Init>
/* USER CODE END P2PS_APP_Init */
  return;
 800c6f0:	bf00      	nop
}
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	0800c6fd 	.word	0x0800c6fd
 800c6f8:	200001b4 	.word	0x200001b4

0800c6fc <P2PS_Send_Notification_Task>:

/* USER CODE BEGIN FD */

static void P2PS_Send_Notification_Task(void)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b08a      	sub	sp, #40	; 0x28
 800c700:	af00      	add	r7, sp, #0
  /* Update P2P_NOTIFY characteristic */
	uint8_t value[40] = {0};
 800c702:	463b      	mov	r3, r7
 800c704:	2228      	movs	r2, #40	; 0x28
 800c706:	2100      	movs	r1, #0
 800c708:	4618      	mov	r0, r3
 800c70a:	f000 fa70 	bl	800cbee <memset>

	if(P2P_Server_App_Context.NotificationStatus)
 800c70e:	4b09      	ldr	r3, [pc, #36]	; (800c734 <P2PS_Send_Notification_Task+0x38>)
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d00a      	beq.n	800c72c <P2PS_Send_Notification_Task+0x30>
	{
		get_buffer_values(&value[0]);
 800c716:	463b      	mov	r3, r7
 800c718:	4618      	mov	r0, r3
 800c71a:	f7f5 fbd7 	bl	8001ecc <get_buffer_values>
//		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
		P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID,&value[0]);
 800c71e:	463b      	mov	r3, r7
 800c720:	4619      	mov	r1, r3
 800c722:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800c726:	f7fe ff31 	bl	800b58c <P2PS_STM_App_Update_Char>
	else
	{

	}

  return;
 800c72a:	bf00      	nop
 800c72c:	bf00      	nop
}
 800c72e:	3728      	adds	r7, #40	; 0x28
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}
 800c734:	200001b4 	.word	0x200001b4

0800c738 <P2PS_APP_context_Init>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
static void P2PS_APP_context_Init(void)
{
 800c738:	b480      	push	{r7}
 800c73a:	af00      	add	r7, sp, #0
  P2P_Server_App_Context.Parameter = 0;
 800c73c:	4b0b      	ldr	r3, [pc, #44]	; (800c76c <P2PS_APP_context_Init+0x34>)
 800c73e:	2200      	movs	r2, #0
 800c740:	805a      	strh	r2, [r3, #2]
  P2P_Server_App_Context.ACC.X = 0;
 800c742:	4b0a      	ldr	r3, [pc, #40]	; (800c76c <P2PS_APP_context_Init+0x34>)
 800c744:	2200      	movs	r2, #0
 800c746:	809a      	strh	r2, [r3, #4]
  P2P_Server_App_Context.ACC.Y = 0;
 800c748:	4b08      	ldr	r3, [pc, #32]	; (800c76c <P2PS_APP_context_Init+0x34>)
 800c74a:	2200      	movs	r2, #0
 800c74c:	80da      	strh	r2, [r3, #6]
  P2P_Server_App_Context.ACC.Z = 0;
 800c74e:	4b07      	ldr	r3, [pc, #28]	; (800c76c <P2PS_APP_context_Init+0x34>)
 800c750:	2200      	movs	r2, #0
 800c752:	811a      	strh	r2, [r3, #8]
  P2P_Server_App_Context.ECG.ecg_value = 0;
 800c754:	4b05      	ldr	r3, [pc, #20]	; (800c76c <P2PS_APP_context_Init+0x34>)
 800c756:	2200      	movs	r2, #0
 800c758:	815a      	strh	r2, [r3, #10]
  P2P_Server_App_Context.PPG.ppg_value = 0;
 800c75a:	4b04      	ldr	r3, [pc, #16]	; (800c76c <P2PS_APP_context_Init+0x34>)
 800c75c:	2200      	movs	r2, #0
 800c75e:	819a      	strh	r2, [r3, #12]
}
 800c760:	bf00      	nop
 800c762:	46bd      	mov	sp, r7
 800c764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c768:	4770      	bx	lr
 800c76a:	bf00      	nop
 800c76c:	200001b4 	.word	0x200001b4

0800c770 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 800c770:	b480      	push	{r7}
 800c772:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800c774:	4b05      	ldr	r3, [pc, #20]	; (800c78c <LL_PWR_EnableBootC2+0x1c>)
 800c776:	68db      	ldr	r3, [r3, #12]
 800c778:	4a04      	ldr	r2, [pc, #16]	; (800c78c <LL_PWR_EnableBootC2+0x1c>)
 800c77a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c77e:	60d3      	str	r3, [r2, #12]
}
 800c780:	bf00      	nop
 800c782:	46bd      	mov	sp, r7
 800c784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c788:	4770      	bx	lr
 800c78a:	bf00      	nop
 800c78c:	58000400 	.word	0x58000400

0800c790 <LL_AHB3_GRP1_EnableClock>:
{
 800c790:	b480      	push	{r7}
 800c792:	b085      	sub	sp, #20
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800c798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c79c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c79e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	4313      	orrs	r3, r2
 800c7a6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800c7a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c7ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	4013      	ands	r3, r2
 800c7b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
}
 800c7b6:	bf00      	nop
 800c7b8:	3714      	adds	r7, #20
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr

0800c7c2 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800c7c2:	b480      	push	{r7}
 800c7c4:	b083      	sub	sp, #12
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	601a      	str	r2, [r3, #0]
}
 800c7d6:	bf00      	nop
 800c7d8:	370c      	adds	r7, #12
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e0:	4770      	bx	lr

0800c7e2 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800c7e2:	b480      	push	{r7}
 800c7e4:	b083      	sub	sp, #12
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f043 0201 	orr.w	r2, r3, #1
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	601a      	str	r2, [r3, #0]
}
 800c7f6:	bf00      	nop
 800c7f8:	370c      	adds	r7, #12
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c800:	4770      	bx	lr

0800c802 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c802:	b480      	push	{r7}
 800c804:	b083      	sub	sp, #12
 800c806:	af00      	add	r7, sp, #0
 800c808:	6078      	str	r0, [r7, #4]
 800c80a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	685a      	ldr	r2, [r3, #4]
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	041b      	lsls	r3, r3, #16
 800c814:	43db      	mvns	r3, r3
 800c816:	401a      	ands	r2, r3
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	605a      	str	r2, [r3, #4]
}
 800c81c:	bf00      	nop
 800c81e:	370c      	adds	r7, #12
 800c820:	46bd      	mov	sp, r7
 800c822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c826:	4770      	bx	lr

0800c828 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c828:	b480      	push	{r7}
 800c82a:	b083      	sub	sp, #12
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	685a      	ldr	r2, [r3, #4]
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	041b      	lsls	r3, r3, #16
 800c83a:	431a      	orrs	r2, r3
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	605a      	str	r2, [r3, #4]
}
 800c840:	bf00      	nop
 800c842:	370c      	adds	r7, #12
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr

0800c84c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b083      	sub	sp, #12
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	685a      	ldr	r2, [r3, #4]
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	43db      	mvns	r3, r3
 800c85e:	401a      	ands	r2, r3
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	605a      	str	r2, [r3, #4]
}
 800c864:	bf00      	nop
 800c866:	370c      	adds	r7, #12
 800c868:	46bd      	mov	sp, r7
 800c86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86e:	4770      	bx	lr

0800c870 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c870:	b480      	push	{r7}
 800c872:	b083      	sub	sp, #12
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	683a      	ldr	r2, [r7, #0]
 800c87e:	609a      	str	r2, [r3, #8]
}
 800c880:	bf00      	nop
 800c882:	370c      	adds	r7, #12
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr

0800c88c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c88c:	b480      	push	{r7}
 800c88e:	b083      	sub	sp, #12
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
 800c894:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	041a      	lsls	r2, r3, #16
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	609a      	str	r2, [r3, #8]
}
 800c89e:	bf00      	nop
 800c8a0:	370c      	adds	r7, #12
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr

0800c8aa <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800c8aa:	b480      	push	{r7}
 800c8ac:	b083      	sub	sp, #12
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	6078      	str	r0, [r7, #4]
 800c8b2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	68da      	ldr	r2, [r3, #12]
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	4013      	ands	r3, r2
 800c8bc:	683a      	ldr	r2, [r7, #0]
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	d101      	bne.n	800c8c6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	e000      	b.n	800c8c8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800c8c6:	2300      	movs	r3, #0
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	370c      	adds	r7, #12
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr

0800c8d4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b083      	sub	sp, #12
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	69da      	ldr	r2, [r3, #28]
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	4013      	ands	r3, r2
 800c8e6:	683a      	ldr	r2, [r7, #0]
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d101      	bne.n	800c8f0 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	e000      	b.n	800c8f2 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800c8f0:	2300      	movs	r3, #0
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	370c      	adds	r7, #12
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fc:	4770      	bx	lr
	...

0800c900 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800c900:	b580      	push	{r7, lr}
 800c902:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800c904:	2102      	movs	r1, #2
 800c906:	4819      	ldr	r0, [pc, #100]	; (800c96c <HW_IPCC_Rx_Handler+0x6c>)
 800c908:	f7ff ffe4 	bl	800c8d4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c90c:	4603      	mov	r3, r0
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d009      	beq.n	800c926 <HW_IPCC_Rx_Handler+0x26>
 800c912:	4b16      	ldr	r3, [pc, #88]	; (800c96c <HW_IPCC_Rx_Handler+0x6c>)
 800c914:	685b      	ldr	r3, [r3, #4]
 800c916:	43db      	mvns	r3, r3
 800c918:	f003 0302 	and.w	r3, r3, #2
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d002      	beq.n	800c926 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800c920:	f000 f8de 	bl	800cae0 <HW_IPCC_SYS_EvtHandler>
 800c924:	e01f      	b.n	800c966 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800c926:	2101      	movs	r1, #1
 800c928:	4810      	ldr	r0, [pc, #64]	; (800c96c <HW_IPCC_Rx_Handler+0x6c>)
 800c92a:	f7ff ffd3 	bl	800c8d4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c92e:	4603      	mov	r3, r0
 800c930:	2b00      	cmp	r3, #0
 800c932:	d008      	beq.n	800c946 <HW_IPCC_Rx_Handler+0x46>
 800c934:	4b0d      	ldr	r3, [pc, #52]	; (800c96c <HW_IPCC_Rx_Handler+0x6c>)
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	f003 0301 	and.w	r3, r3, #1
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d102      	bne.n	800c946 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800c940:	f000 f892 	bl	800ca68 <HW_IPCC_BLE_EvtHandler>
 800c944:	e00f      	b.n	800c966 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800c946:	2108      	movs	r1, #8
 800c948:	4808      	ldr	r0, [pc, #32]	; (800c96c <HW_IPCC_Rx_Handler+0x6c>)
 800c94a:	f7ff ffc3 	bl	800c8d4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c94e:	4603      	mov	r3, r0
 800c950:	2b00      	cmp	r3, #0
 800c952:	d009      	beq.n	800c968 <HW_IPCC_Rx_Handler+0x68>
 800c954:	4b05      	ldr	r3, [pc, #20]	; (800c96c <HW_IPCC_Rx_Handler+0x6c>)
 800c956:	685b      	ldr	r3, [r3, #4]
 800c958:	43db      	mvns	r3, r3
 800c95a:	f003 0308 	and.w	r3, r3, #8
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d002      	beq.n	800c968 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800c962:	f000 f909 	bl	800cb78 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800c966:	bf00      	nop
 800c968:	bf00      	nop
}
 800c96a:	bd80      	pop	{r7, pc}
 800c96c:	58000c00 	.word	0x58000c00

0800c970 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800c970:	b580      	push	{r7, lr}
 800c972:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800c974:	2102      	movs	r1, #2
 800c976:	4822      	ldr	r0, [pc, #136]	; (800ca00 <HW_IPCC_Tx_Handler+0x90>)
 800c978:	f7ff ff97 	bl	800c8aa <LL_C1_IPCC_IsActiveFlag_CHx>
 800c97c:	4603      	mov	r3, r0
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d109      	bne.n	800c996 <HW_IPCC_Tx_Handler+0x26>
 800c982:	4b1f      	ldr	r3, [pc, #124]	; (800ca00 <HW_IPCC_Tx_Handler+0x90>)
 800c984:	685b      	ldr	r3, [r3, #4]
 800c986:	43db      	mvns	r3, r3
 800c988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d002      	beq.n	800c996 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800c990:	f000 f89a 	bl	800cac8 <HW_IPCC_SYS_CmdEvtHandler>
 800c994:	e031      	b.n	800c9fa <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800c996:	2102      	movs	r1, #2
 800c998:	4819      	ldr	r0, [pc, #100]	; (800ca00 <HW_IPCC_Tx_Handler+0x90>)
 800c99a:	f7ff ff86 	bl	800c8aa <LL_C1_IPCC_IsActiveFlag_CHx>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d109      	bne.n	800c9b8 <HW_IPCC_Tx_Handler+0x48>
 800c9a4:	4b16      	ldr	r3, [pc, #88]	; (800ca00 <HW_IPCC_Tx_Handler+0x90>)
 800c9a6:	685b      	ldr	r3, [r3, #4]
 800c9a8:	43db      	mvns	r3, r3
 800c9aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d002      	beq.n	800c9b8 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800c9b2:	f000 f889 	bl	800cac8 <HW_IPCC_SYS_CmdEvtHandler>
 800c9b6:	e020      	b.n	800c9fa <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800c9b8:	2108      	movs	r1, #8
 800c9ba:	4811      	ldr	r0, [pc, #68]	; (800ca00 <HW_IPCC_Tx_Handler+0x90>)
 800c9bc:	f7ff ff75 	bl	800c8aa <LL_C1_IPCC_IsActiveFlag_CHx>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d109      	bne.n	800c9da <HW_IPCC_Tx_Handler+0x6a>
 800c9c6:	4b0e      	ldr	r3, [pc, #56]	; (800ca00 <HW_IPCC_Tx_Handler+0x90>)
 800c9c8:	685b      	ldr	r3, [r3, #4]
 800c9ca:	43db      	mvns	r3, r3
 800c9cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d002      	beq.n	800c9da <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 800c9d4:	f000 f8b2 	bl	800cb3c <HW_IPCC_MM_FreeBufHandler>
 800c9d8:	e00f      	b.n	800c9fa <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800c9da:	2120      	movs	r1, #32
 800c9dc:	4808      	ldr	r0, [pc, #32]	; (800ca00 <HW_IPCC_Tx_Handler+0x90>)
 800c9de:	f7ff ff64 	bl	800c8aa <LL_C1_IPCC_IsActiveFlag_CHx>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d109      	bne.n	800c9fc <HW_IPCC_Tx_Handler+0x8c>
 800c9e8:	4b05      	ldr	r3, [pc, #20]	; (800ca00 <HW_IPCC_Tx_Handler+0x90>)
 800c9ea:	685b      	ldr	r3, [r3, #4]
 800c9ec:	43db      	mvns	r3, r3
 800c9ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d002      	beq.n	800c9fc <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800c9f6:	f000 f843 	bl	800ca80 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800c9fa:	bf00      	nop
 800c9fc:	bf00      	nop
}
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	58000c00 	.word	0x58000c00

0800ca04 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	af00      	add	r7, sp, #0
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800ca08:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800ca0a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800ca0c:	f7ff feb0 	bl	800c770 <LL_PWR_EnableBootC2>

  return;
 800ca10:	bf00      	nop
}
 800ca12:	bd80      	pop	{r7, pc}

0800ca14 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800ca18:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800ca1c:	f7ff feb8 	bl	800c790 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800ca20:	4806      	ldr	r0, [pc, #24]	; (800ca3c <HW_IPCC_Init+0x28>)
 800ca22:	f7ff fede 	bl	800c7e2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800ca26:	4805      	ldr	r0, [pc, #20]	; (800ca3c <HW_IPCC_Init+0x28>)
 800ca28:	f7ff fecb 	bl	800c7c2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800ca2c:	202c      	movs	r0, #44	; 0x2c
 800ca2e:	f7f6 fbad 	bl	800318c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800ca32:	202d      	movs	r0, #45	; 0x2d
 800ca34:	f7f6 fbaa 	bl	800318c <HAL_NVIC_EnableIRQ>

  return;
 800ca38:	bf00      	nop
}
 800ca3a:	bd80      	pop	{r7, pc}
 800ca3c:	58000c00 	.word	0x58000c00

0800ca40 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800ca44:	2101      	movs	r1, #1
 800ca46:	4802      	ldr	r0, [pc, #8]	; (800ca50 <HW_IPCC_BLE_Init+0x10>)
 800ca48:	f7ff ff00 	bl	800c84c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800ca4c:	bf00      	nop
}
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	58000c00 	.word	0x58000c00

0800ca54 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800ca58:	2101      	movs	r1, #1
 800ca5a:	4802      	ldr	r0, [pc, #8]	; (800ca64 <HW_IPCC_BLE_SendCmd+0x10>)
 800ca5c:	f7ff ff16 	bl	800c88c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800ca60:	bf00      	nop
}
 800ca62:	bd80      	pop	{r7, pc}
 800ca64:	58000c00 	.word	0x58000c00

0800ca68 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800ca6c:	f7ff f944 	bl	800bcf8 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800ca70:	2101      	movs	r1, #1
 800ca72:	4802      	ldr	r0, [pc, #8]	; (800ca7c <HW_IPCC_BLE_EvtHandler+0x14>)
 800ca74:	f7ff fefc 	bl	800c870 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800ca78:	bf00      	nop
}
 800ca7a:	bd80      	pop	{r7, pc}
 800ca7c:	58000c00 	.word	0x58000c00

0800ca80 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800ca84:	2120      	movs	r1, #32
 800ca86:	4803      	ldr	r0, [pc, #12]	; (800ca94 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800ca88:	f7ff fece 	bl	800c828 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800ca8c:	f7ff f950 	bl	800bd30 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800ca90:	bf00      	nop
}
 800ca92:	bd80      	pop	{r7, pc}
 800ca94:	58000c00 	.word	0x58000c00

0800ca98 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800ca9c:	2102      	movs	r1, #2
 800ca9e:	4802      	ldr	r0, [pc, #8]	; (800caa8 <HW_IPCC_SYS_Init+0x10>)
 800caa0:	f7ff fed4 	bl	800c84c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800caa4:	bf00      	nop
}
 800caa6:	bd80      	pop	{r7, pc}
 800caa8:	58000c00 	.word	0x58000c00

0800caac <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800caac:	b580      	push	{r7, lr}
 800caae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800cab0:	2102      	movs	r1, #2
 800cab2:	4804      	ldr	r0, [pc, #16]	; (800cac4 <HW_IPCC_SYS_SendCmd+0x18>)
 800cab4:	f7ff feea 	bl	800c88c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800cab8:	2102      	movs	r1, #2
 800caba:	4802      	ldr	r0, [pc, #8]	; (800cac4 <HW_IPCC_SYS_SendCmd+0x18>)
 800cabc:	f7ff fea1 	bl	800c802 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800cac0:	bf00      	nop
}
 800cac2:	bd80      	pop	{r7, pc}
 800cac4:	58000c00 	.word	0x58000c00

0800cac8 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800cacc:	2102      	movs	r1, #2
 800cace:	4803      	ldr	r0, [pc, #12]	; (800cadc <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800cad0:	f7ff feaa 	bl	800c828 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800cad4:	f7ff f974 	bl	800bdc0 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800cad8:	bf00      	nop
}
 800cada:	bd80      	pop	{r7, pc}
 800cadc:	58000c00 	.word	0x58000c00

0800cae0 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800cae4:	f7ff f97c 	bl	800bde0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800cae8:	2102      	movs	r1, #2
 800caea:	4802      	ldr	r0, [pc, #8]	; (800caf4 <HW_IPCC_SYS_EvtHandler+0x14>)
 800caec:	f7ff fec0 	bl	800c870 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800caf0:	bf00      	nop
}
 800caf2:	bd80      	pop	{r7, pc}
 800caf4:	58000c00 	.word	0x58000c00

0800caf8 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b082      	sub	sp, #8
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800cb00:	2108      	movs	r1, #8
 800cb02:	480c      	ldr	r0, [pc, #48]	; (800cb34 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800cb04:	f7ff fed1 	bl	800c8aa <LL_C1_IPCC_IsActiveFlag_CHx>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d007      	beq.n	800cb1e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800cb0e:	4a0a      	ldr	r2, [pc, #40]	; (800cb38 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800cb14:	2108      	movs	r1, #8
 800cb16:	4807      	ldr	r0, [pc, #28]	; (800cb34 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800cb18:	f7ff fe73 	bl	800c802 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800cb1c:	e006      	b.n	800cb2c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800cb22:	2108      	movs	r1, #8
 800cb24:	4803      	ldr	r0, [pc, #12]	; (800cb34 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800cb26:	f7ff feb1 	bl	800c88c <LL_C1_IPCC_SetFlag_CHx>
  return;
 800cb2a:	bf00      	nop
}
 800cb2c:	3708      	adds	r7, #8
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}
 800cb32:	bf00      	nop
 800cb34:	58000c00 	.word	0x58000c00
 800cb38:	20000344 	.word	0x20000344

0800cb3c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800cb40:	2108      	movs	r1, #8
 800cb42:	4806      	ldr	r0, [pc, #24]	; (800cb5c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800cb44:	f7ff fe70 	bl	800c828 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800cb48:	4b05      	ldr	r3, [pc, #20]	; (800cb60 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800cb4e:	2108      	movs	r1, #8
 800cb50:	4802      	ldr	r0, [pc, #8]	; (800cb5c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800cb52:	f7ff fe9b 	bl	800c88c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800cb56:	bf00      	nop
}
 800cb58:	bd80      	pop	{r7, pc}
 800cb5a:	bf00      	nop
 800cb5c:	58000c00 	.word	0x58000c00
 800cb60:	20000344 	.word	0x20000344

0800cb64 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800cb68:	2108      	movs	r1, #8
 800cb6a:	4802      	ldr	r0, [pc, #8]	; (800cb74 <HW_IPCC_TRACES_Init+0x10>)
 800cb6c:	f7ff fe6e 	bl	800c84c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800cb70:	bf00      	nop
}
 800cb72:	bd80      	pop	{r7, pc}
 800cb74:	58000c00 	.word	0x58000c00

0800cb78 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800cb7c:	f7ff f9ce 	bl	800bf1c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800cb80:	2108      	movs	r1, #8
 800cb82:	4802      	ldr	r0, [pc, #8]	; (800cb8c <HW_IPCC_TRACES_EvtHandler+0x14>)
 800cb84:	f7ff fe74 	bl	800c870 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800cb88:	bf00      	nop
}
 800cb8a:	bd80      	pop	{r7, pc}
 800cb8c:	58000c00 	.word	0x58000c00

0800cb90 <__libc_init_array>:
 800cb90:	b570      	push	{r4, r5, r6, lr}
 800cb92:	4e0d      	ldr	r6, [pc, #52]	; (800cbc8 <__libc_init_array+0x38>)
 800cb94:	4c0d      	ldr	r4, [pc, #52]	; (800cbcc <__libc_init_array+0x3c>)
 800cb96:	1ba4      	subs	r4, r4, r6
 800cb98:	10a4      	asrs	r4, r4, #2
 800cb9a:	2500      	movs	r5, #0
 800cb9c:	42a5      	cmp	r5, r4
 800cb9e:	d109      	bne.n	800cbb4 <__libc_init_array+0x24>
 800cba0:	4e0b      	ldr	r6, [pc, #44]	; (800cbd0 <__libc_init_array+0x40>)
 800cba2:	4c0c      	ldr	r4, [pc, #48]	; (800cbd4 <__libc_init_array+0x44>)
 800cba4:	f000 f82c 	bl	800cc00 <_init>
 800cba8:	1ba4      	subs	r4, r4, r6
 800cbaa:	10a4      	asrs	r4, r4, #2
 800cbac:	2500      	movs	r5, #0
 800cbae:	42a5      	cmp	r5, r4
 800cbb0:	d105      	bne.n	800cbbe <__libc_init_array+0x2e>
 800cbb2:	bd70      	pop	{r4, r5, r6, pc}
 800cbb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cbb8:	4798      	blx	r3
 800cbba:	3501      	adds	r5, #1
 800cbbc:	e7ee      	b.n	800cb9c <__libc_init_array+0xc>
 800cbbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cbc2:	4798      	blx	r3
 800cbc4:	3501      	adds	r5, #1
 800cbc6:	e7f2      	b.n	800cbae <__libc_init_array+0x1e>
 800cbc8:	0800d358 	.word	0x0800d358
 800cbcc:	0800d358 	.word	0x0800d358
 800cbd0:	0800d358 	.word	0x0800d358
 800cbd4:	0800d35c 	.word	0x0800d35c

0800cbd8 <memcpy>:
 800cbd8:	b510      	push	{r4, lr}
 800cbda:	1e43      	subs	r3, r0, #1
 800cbdc:	440a      	add	r2, r1
 800cbde:	4291      	cmp	r1, r2
 800cbe0:	d100      	bne.n	800cbe4 <memcpy+0xc>
 800cbe2:	bd10      	pop	{r4, pc}
 800cbe4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbe8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbec:	e7f7      	b.n	800cbde <memcpy+0x6>

0800cbee <memset>:
 800cbee:	4402      	add	r2, r0
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	4293      	cmp	r3, r2
 800cbf4:	d100      	bne.n	800cbf8 <memset+0xa>
 800cbf6:	4770      	bx	lr
 800cbf8:	f803 1b01 	strb.w	r1, [r3], #1
 800cbfc:	e7f9      	b.n	800cbf2 <memset+0x4>
	...

0800cc00 <_init>:
 800cc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc02:	bf00      	nop
 800cc04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc06:	bc08      	pop	{r3}
 800cc08:	469e      	mov	lr, r3
 800cc0a:	4770      	bx	lr

0800cc0c <_fini>:
 800cc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc0e:	bf00      	nop
 800cc10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc12:	bc08      	pop	{r3}
 800cc14:	469e      	mov	lr, r3
 800cc16:	4770      	bx	lr
