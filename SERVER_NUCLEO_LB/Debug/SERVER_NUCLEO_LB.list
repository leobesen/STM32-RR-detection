
SERVER_NUCLEO_LB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b564  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  0800b6a4  0800b6a4  0001b6a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b810  0800b810  0001b810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b818  0800b818  0001b818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b81c  0800b81c  0001b81c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000028  20000004  0800b820  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  2000002c  0800b848  0002002c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003d  200000c8  0800b8e1  000200c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000108  0800b91e  00020108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 000000a8  2000011c  0800b92f  0002011c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000065c  200001c4  0800b9d7  000201c4  2**2
                  ALLOC
 12 ._user_heap_stack 00000c00  20000820  0800b9d7  00020820  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000024  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       0000019f  20030024  20030024  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000880  200301c4  200301c4  00030000  2**2
                  ALLOC
 17 .debug_info   00043ff0  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 00007c83  00000000  00000000  000641e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00003178  00000000  00000000  0006be68  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00002de0  00000000  00000000  0006efe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  0000e7fa  00000000  00000000  00071dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   00032b47  00000000  00000000  000805ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    00103499  00000000  00000000  000b3101  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  001b659a  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000ce7c  00000000  00000000  001b6618  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001c4 	.word	0x200001c4
 800015c:	00000000 	.word	0x00000000
 8000160:	0800b68c 	.word	0x0800b68c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001c8 	.word	0x200001c8
 800017c:	0800b68c 	.word	0x0800b68c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_uldivmod>:
 8000190:	b953      	cbnz	r3, 80001a8 <__aeabi_uldivmod+0x18>
 8000192:	b94a      	cbnz	r2, 80001a8 <__aeabi_uldivmod+0x18>
 8000194:	2900      	cmp	r1, #0
 8000196:	bf08      	it	eq
 8000198:	2800      	cmpeq	r0, #0
 800019a:	bf1c      	itt	ne
 800019c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001a4:	f000 b972 	b.w	800048c <__aeabi_idiv0>
 80001a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b0:	f000 f806 	bl	80001c0 <__udivmoddi4>
 80001b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001bc:	b004      	add	sp, #16
 80001be:	4770      	bx	lr

080001c0 <__udivmoddi4>:
 80001c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c4:	9e08      	ldr	r6, [sp, #32]
 80001c6:	4604      	mov	r4, r0
 80001c8:	4688      	mov	r8, r1
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d14b      	bne.n	8000266 <__udivmoddi4+0xa6>
 80001ce:	428a      	cmp	r2, r1
 80001d0:	4615      	mov	r5, r2
 80001d2:	d967      	bls.n	80002a4 <__udivmoddi4+0xe4>
 80001d4:	fab2 f282 	clz	r2, r2
 80001d8:	b14a      	cbz	r2, 80001ee <__udivmoddi4+0x2e>
 80001da:	f1c2 0720 	rsb	r7, r2, #32
 80001de:	fa01 f302 	lsl.w	r3, r1, r2
 80001e2:	fa20 f707 	lsr.w	r7, r0, r7
 80001e6:	4095      	lsls	r5, r2
 80001e8:	ea47 0803 	orr.w	r8, r7, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80001f8:	fa1f fc85 	uxth.w	ip, r5
 80001fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000200:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000204:	fb07 f10c 	mul.w	r1, r7, ip
 8000208:	4299      	cmp	r1, r3
 800020a:	d909      	bls.n	8000220 <__udivmoddi4+0x60>
 800020c:	18eb      	adds	r3, r5, r3
 800020e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000212:	f080 811b 	bcs.w	800044c <__udivmoddi4+0x28c>
 8000216:	4299      	cmp	r1, r3
 8000218:	f240 8118 	bls.w	800044c <__udivmoddi4+0x28c>
 800021c:	3f02      	subs	r7, #2
 800021e:	442b      	add	r3, r5
 8000220:	1a5b      	subs	r3, r3, r1
 8000222:	b2a4      	uxth	r4, r4
 8000224:	fbb3 f0fe 	udiv	r0, r3, lr
 8000228:	fb0e 3310 	mls	r3, lr, r0, r3
 800022c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000230:	fb00 fc0c 	mul.w	ip, r0, ip
 8000234:	45a4      	cmp	ip, r4
 8000236:	d909      	bls.n	800024c <__udivmoddi4+0x8c>
 8000238:	192c      	adds	r4, r5, r4
 800023a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800023e:	f080 8107 	bcs.w	8000450 <__udivmoddi4+0x290>
 8000242:	45a4      	cmp	ip, r4
 8000244:	f240 8104 	bls.w	8000450 <__udivmoddi4+0x290>
 8000248:	3802      	subs	r0, #2
 800024a:	442c      	add	r4, r5
 800024c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000250:	eba4 040c 	sub.w	r4, r4, ip
 8000254:	2700      	movs	r7, #0
 8000256:	b11e      	cbz	r6, 8000260 <__udivmoddi4+0xa0>
 8000258:	40d4      	lsrs	r4, r2
 800025a:	2300      	movs	r3, #0
 800025c:	e9c6 4300 	strd	r4, r3, [r6]
 8000260:	4639      	mov	r1, r7
 8000262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000266:	428b      	cmp	r3, r1
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0xbe>
 800026a:	2e00      	cmp	r6, #0
 800026c:	f000 80eb 	beq.w	8000446 <__udivmoddi4+0x286>
 8000270:	2700      	movs	r7, #0
 8000272:	e9c6 0100 	strd	r0, r1, [r6]
 8000276:	4638      	mov	r0, r7
 8000278:	4639      	mov	r1, r7
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f783 	clz	r7, r3
 8000282:	2f00      	cmp	r7, #0
 8000284:	d147      	bne.n	8000316 <__udivmoddi4+0x156>
 8000286:	428b      	cmp	r3, r1
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd0>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fa 	bhi.w	8000484 <__udivmoddi4+0x2c4>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb61 0303 	sbc.w	r3, r1, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e0      	beq.n	8000260 <__udivmoddi4+0xa0>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7dd      	b.n	8000260 <__udivmoddi4+0xa0>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xe8>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 808f 	bne.w	80003d0 <__udivmoddi4+0x210>
 80002b2:	1b49      	subs	r1, r1, r5
 80002b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002b8:	fa1f f885 	uxth.w	r8, r5
 80002bc:	2701      	movs	r7, #1
 80002be:	fbb1 fcfe 	udiv	ip, r1, lr
 80002c2:	0c23      	lsrs	r3, r4, #16
 80002c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80002c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002cc:	fb08 f10c 	mul.w	r1, r8, ip
 80002d0:	4299      	cmp	r1, r3
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0x124>
 80002d4:	18eb      	adds	r3, r5, r3
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0x122>
 80002dc:	4299      	cmp	r1, r3
 80002de:	f200 80cd 	bhi.w	800047c <__udivmoddi4+0x2bc>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1a59      	subs	r1, r3, r1
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80002f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x14c>
 80002fc:	192c      	adds	r4, r5, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x14a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80b6 	bhi.w	8000476 <__udivmoddi4+0x2b6>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e79f      	b.n	8000256 <__udivmoddi4+0x96>
 8000316:	f1c7 0c20 	rsb	ip, r7, #32
 800031a:	40bb      	lsls	r3, r7
 800031c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000320:	ea4e 0e03 	orr.w	lr, lr, r3
 8000324:	fa01 f407 	lsl.w	r4, r1, r7
 8000328:	fa20 f50c 	lsr.w	r5, r0, ip
 800032c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000330:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000334:	4325      	orrs	r5, r4
 8000336:	fbb3 f9f8 	udiv	r9, r3, r8
 800033a:	0c2c      	lsrs	r4, r5, #16
 800033c:	fb08 3319 	mls	r3, r8, r9, r3
 8000340:	fa1f fa8e 	uxth.w	sl, lr
 8000344:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000348:	fb09 f40a 	mul.w	r4, r9, sl
 800034c:	429c      	cmp	r4, r3
 800034e:	fa02 f207 	lsl.w	r2, r2, r7
 8000352:	fa00 f107 	lsl.w	r1, r0, r7
 8000356:	d90b      	bls.n	8000370 <__udivmoddi4+0x1b0>
 8000358:	eb1e 0303 	adds.w	r3, lr, r3
 800035c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000360:	f080 8087 	bcs.w	8000472 <__udivmoddi4+0x2b2>
 8000364:	429c      	cmp	r4, r3
 8000366:	f240 8084 	bls.w	8000472 <__udivmoddi4+0x2b2>
 800036a:	f1a9 0902 	sub.w	r9, r9, #2
 800036e:	4473      	add	r3, lr
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	b2ad      	uxth	r5, r5
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000380:	fb00 fa0a 	mul.w	sl, r0, sl
 8000384:	45a2      	cmp	sl, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x1da>
 8000388:	eb1e 0404 	adds.w	r4, lr, r4
 800038c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000390:	d26b      	bcs.n	800046a <__udivmoddi4+0x2aa>
 8000392:	45a2      	cmp	sl, r4
 8000394:	d969      	bls.n	800046a <__udivmoddi4+0x2aa>
 8000396:	3802      	subs	r0, #2
 8000398:	4474      	add	r4, lr
 800039a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800039e:	fba0 8902 	umull	r8, r9, r0, r2
 80003a2:	eba4 040a 	sub.w	r4, r4, sl
 80003a6:	454c      	cmp	r4, r9
 80003a8:	46c2      	mov	sl, r8
 80003aa:	464b      	mov	r3, r9
 80003ac:	d354      	bcc.n	8000458 <__udivmoddi4+0x298>
 80003ae:	d051      	beq.n	8000454 <__udivmoddi4+0x294>
 80003b0:	2e00      	cmp	r6, #0
 80003b2:	d069      	beq.n	8000488 <__udivmoddi4+0x2c8>
 80003b4:	ebb1 050a 	subs.w	r5, r1, sl
 80003b8:	eb64 0403 	sbc.w	r4, r4, r3
 80003bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003c0:	40fd      	lsrs	r5, r7
 80003c2:	40fc      	lsrs	r4, r7
 80003c4:	ea4c 0505 	orr.w	r5, ip, r5
 80003c8:	e9c6 5400 	strd	r5, r4, [r6]
 80003cc:	2700      	movs	r7, #0
 80003ce:	e747      	b.n	8000260 <__udivmoddi4+0xa0>
 80003d0:	f1c2 0320 	rsb	r3, r2, #32
 80003d4:	fa20 f703 	lsr.w	r7, r0, r3
 80003d8:	4095      	lsls	r5, r2
 80003da:	fa01 f002 	lsl.w	r0, r1, r2
 80003de:	fa21 f303 	lsr.w	r3, r1, r3
 80003e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e6:	4338      	orrs	r0, r7
 80003e8:	0c01      	lsrs	r1, r0, #16
 80003ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80003ee:	fa1f f885 	uxth.w	r8, r5
 80003f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80003f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fa:	fb07 f308 	mul.w	r3, r7, r8
 80003fe:	428b      	cmp	r3, r1
 8000400:	fa04 f402 	lsl.w	r4, r4, r2
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x256>
 8000406:	1869      	adds	r1, r5, r1
 8000408:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800040c:	d22f      	bcs.n	800046e <__udivmoddi4+0x2ae>
 800040e:	428b      	cmp	r3, r1
 8000410:	d92d      	bls.n	800046e <__udivmoddi4+0x2ae>
 8000412:	3f02      	subs	r7, #2
 8000414:	4429      	add	r1, r5
 8000416:	1acb      	subs	r3, r1, r3
 8000418:	b281      	uxth	r1, r0
 800041a:	fbb3 f0fe 	udiv	r0, r3, lr
 800041e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000422:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000426:	fb00 f308 	mul.w	r3, r0, r8
 800042a:	428b      	cmp	r3, r1
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x27e>
 800042e:	1869      	adds	r1, r5, r1
 8000430:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000434:	d217      	bcs.n	8000466 <__udivmoddi4+0x2a6>
 8000436:	428b      	cmp	r3, r1
 8000438:	d915      	bls.n	8000466 <__udivmoddi4+0x2a6>
 800043a:	3802      	subs	r0, #2
 800043c:	4429      	add	r1, r5
 800043e:	1ac9      	subs	r1, r1, r3
 8000440:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000444:	e73b      	b.n	80002be <__udivmoddi4+0xfe>
 8000446:	4637      	mov	r7, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e709      	b.n	8000260 <__udivmoddi4+0xa0>
 800044c:	4607      	mov	r7, r0
 800044e:	e6e7      	b.n	8000220 <__udivmoddi4+0x60>
 8000450:	4618      	mov	r0, r3
 8000452:	e6fb      	b.n	800024c <__udivmoddi4+0x8c>
 8000454:	4541      	cmp	r1, r8
 8000456:	d2ab      	bcs.n	80003b0 <__udivmoddi4+0x1f0>
 8000458:	ebb8 0a02 	subs.w	sl, r8, r2
 800045c:	eb69 020e 	sbc.w	r2, r9, lr
 8000460:	3801      	subs	r0, #1
 8000462:	4613      	mov	r3, r2
 8000464:	e7a4      	b.n	80003b0 <__udivmoddi4+0x1f0>
 8000466:	4660      	mov	r0, ip
 8000468:	e7e9      	b.n	800043e <__udivmoddi4+0x27e>
 800046a:	4618      	mov	r0, r3
 800046c:	e795      	b.n	800039a <__udivmoddi4+0x1da>
 800046e:	4667      	mov	r7, ip
 8000470:	e7d1      	b.n	8000416 <__udivmoddi4+0x256>
 8000472:	4681      	mov	r9, r0
 8000474:	e77c      	b.n	8000370 <__udivmoddi4+0x1b0>
 8000476:	3802      	subs	r0, #2
 8000478:	442c      	add	r4, r5
 800047a:	e747      	b.n	800030c <__udivmoddi4+0x14c>
 800047c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000480:	442b      	add	r3, r5
 8000482:	e72f      	b.n	80002e4 <__udivmoddi4+0x124>
 8000484:	4638      	mov	r0, r7
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xda>
 8000488:	4637      	mov	r7, r6
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0xa0>

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop

08000490 <begin>:
#include <stdlib.h>     /* abs */

float temperature;
//uint16_t IR, RED;

void begin(void){
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0

	  uint8_t temp = 0;
 8000496:	2300      	movs	r3, #0
 8000498:	717b      	strb	r3, [r7, #5]
	  uint8_t mode = 0x03; // [0,7]
 800049a:	2303      	movs	r3, #3
 800049c:	73fb      	strb	r3, [r7, #15]
	  bool temperature = true;
 800049e:	2301      	movs	r3, #1
 80004a0:	73bb      	strb	r3, [r7, #14]
	  bool spo2_hs = true;
 80004a2:	2301      	movs	r3, #1
 80004a4:	737b      	strb	r3, [r7, #13]
	  uint8_t spo2_sr = 6; // [0,7]
 80004a6:	2306      	movs	r3, #6
 80004a8:	733b      	strb	r3, [r7, #12]
	  uint8_t pulse_width = 3; // [0,3]
 80004aa:	2303      	movs	r3, #3
 80004ac:	72fb      	strb	r3, [r7, #11]
	  uint8_t red_level = 0x05; // 0b00001111; // [0,15]
 80004ae:	2305      	movs	r3, #5
 80004b0:	72bb      	strb	r3, [r7, #10]
	  uint8_t ir_level = 0x05; // [0,15]
 80004b2:	2305      	movs	r3, #5
 80004b4:	727b      	strb	r3, [r7, #9]
	  uint8_t hr_ready_int = true;
 80004b6:	2301      	movs	r3, #1
 80004b8:	723b      	strb	r3, [r7, #8]
	  uint8_t spo2_ready_int = true;
 80004ba:	2301      	movs	r3, #1
 80004bc:	71fb      	strb	r3, [r7, #7]
	  uint8_t temp_ready_int = true;
 80004be:	2301      	movs	r3, #1
 80004c0:	71bb      	strb	r3, [r7, #6]


	  //Reset
	  read_byte( MAX30100_MODE_CONFIG, &temp );
 80004c2:	1d7b      	adds	r3, r7, #5
 80004c4:	4619      	mov	r1, r3
 80004c6:	2006      	movs	r0, #6
 80004c8:	f000 f976 	bl	80007b8 <read_byte>

	  temp |= (1<<6);
 80004cc:	797b      	ldrb	r3, [r7, #5]
 80004ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_MODE_CONFIG, temp);
 80004d6:	797b      	ldrb	r3, [r7, #5]
 80004d8:	4619      	mov	r1, r3
 80004da:	2006      	movs	r0, #6
 80004dc:	f000 f950 	bl	8000780 <write_byte>

	  //Wait for the end of reset state/process
	  do
	  {
		read_byte(MAX30100_MODE_CONFIG, &temp);
 80004e0:	1d7b      	adds	r3, r7, #5
 80004e2:	4619      	mov	r1, r3
 80004e4:	2006      	movs	r0, #6
 80004e6:	f000 f967 	bl	80007b8 <read_byte>
	    temp &= (1<<6);
 80004ea:	797b      	ldrb	r3, [r7, #5]
 80004ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	717b      	strb	r3, [r7, #5]
	  }
	  while (temp != 0);
 80004f4:	797b      	ldrb	r3, [r7, #5]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d1f2      	bne.n	80004e0 <begin+0x50>

	  //Mode Configuration
	  read_byte( MAX30100_MODE_CONFIG, &temp );
 80004fa:	1d7b      	adds	r3, r7, #5
 80004fc:	4619      	mov	r1, r3
 80004fe:	2006      	movs	r0, #6
 8000500:	f000 f95a 	bl	80007b8 <read_byte>

	  temp |= mode;
 8000504:	797a      	ldrb	r2, [r7, #5]
 8000506:	7bfb      	ldrb	r3, [r7, #15]
 8000508:	4313      	orrs	r3, r2
 800050a:	b2db      	uxtb	r3, r3
 800050c:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_MODE_CONFIG, temp);
 800050e:	797b      	ldrb	r3, [r7, #5]
 8000510:	4619      	mov	r1, r3
 8000512:	2006      	movs	r0, #6
 8000514:	f000 f934 	bl	8000780 <write_byte>
	  temp = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_MODE_CONFIG, &temp ); //check
 800051c:	1d7b      	adds	r3, r7, #5
 800051e:	4619      	mov	r1, r3
 8000520:	2006      	movs	r0, #6
 8000522:	f000 f949 	bl	80007b8 <read_byte>

	  //Temperature sensor activation
	  read_byte( MAX30100_MODE_CONFIG, &temp );
 8000526:	1d7b      	adds	r3, r7, #5
 8000528:	4619      	mov	r1, r3
 800052a:	2006      	movs	r0, #6
 800052c:	f000 f944 	bl	80007b8 <read_byte>

	  if ( temperature == true )
 8000530:	7bbb      	ldrb	r3, [r7, #14]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d005      	beq.n	8000542 <begin+0xb2>
	    temp |= (1<<3);
 8000536:	797b      	ldrb	r3, [r7, #5]
 8000538:	f043 0308 	orr.w	r3, r3, #8
 800053c:	b2db      	uxtb	r3, r3
 800053e:	717b      	strb	r3, [r7, #5]
 8000540:	e004      	b.n	800054c <begin+0xbc>
	  else
	    temp &= ~(1<<3);
 8000542:	797b      	ldrb	r3, [r7, #5]
 8000544:	f023 0308 	bic.w	r3, r3, #8
 8000548:	b2db      	uxtb	r3, r3
 800054a:	717b      	strb	r3, [r7, #5]

	  write_byte(MAX30100_MODE_CONFIG, temp);
 800054c:	797b      	ldrb	r3, [r7, #5]
 800054e:	4619      	mov	r1, r3
 8000550:	2006      	movs	r0, #6
 8000552:	f000 f915 	bl	8000780 <write_byte>
	  temp = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_MODE_CONFIG, &temp ); //check
 800055a:	1d7b      	adds	r3, r7, #5
 800055c:	4619      	mov	r1, r3
 800055e:	2006      	movs	r0, #6
 8000560:	f000 f92a 	bl	80007b8 <read_byte>

	  //SPO2 high resolution activation
	  read_byte( MAX30100_SPO2_CONFIG, &temp );
 8000564:	1d7b      	adds	r3, r7, #5
 8000566:	4619      	mov	r1, r3
 8000568:	2007      	movs	r0, #7
 800056a:	f000 f925 	bl	80007b8 <read_byte>

	  if (spo2_hs == true)
 800056e:	7b7b      	ldrb	r3, [r7, #13]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d005      	beq.n	8000580 <begin+0xf0>
	    temp |= (1<<6);
 8000574:	797b      	ldrb	r3, [r7, #5]
 8000576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800057a:	b2db      	uxtb	r3, r3
 800057c:	717b      	strb	r3, [r7, #5]
 800057e:	e004      	b.n	800058a <begin+0xfa>

	  else
	    temp &= ~(1<<6);
 8000580:	797b      	ldrb	r3, [r7, #5]
 8000582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000586:	b2db      	uxtb	r3, r3
 8000588:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_SPO2_CONFIG, temp);
 800058a:	797b      	ldrb	r3, [r7, #5]
 800058c:	4619      	mov	r1, r3
 800058e:	2007      	movs	r0, #7
 8000590:	f000 f8f6 	bl	8000780 <write_byte>

	  //SPO2 sample rate configuration
	  read_byte( MAX30100_SPO2_CONFIG, &temp );
 8000594:	1d7b      	adds	r3, r7, #5
 8000596:	4619      	mov	r1, r3
 8000598:	2007      	movs	r0, #7
 800059a:	f000 f90d 	bl	80007b8 <read_byte>
	  temp |= (spo2_sr << 2);
 800059e:	7b3b      	ldrb	r3, [r7, #12]
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	b25a      	sxtb	r2, r3
 80005a4:	797b      	ldrb	r3, [r7, #5]
 80005a6:	b25b      	sxtb	r3, r3
 80005a8:	4313      	orrs	r3, r2
 80005aa:	b25b      	sxtb	r3, r3
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	717b      	strb	r3, [r7, #5]

	  write_byte( MAX30100_SPO2_CONFIG, temp );
 80005b0:	797b      	ldrb	r3, [r7, #5]
 80005b2:	4619      	mov	r1, r3
 80005b4:	2007      	movs	r0, #7
 80005b6:	f000 f8e3 	bl	8000780 <write_byte>
	  temp = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_SPO2_CONFIG, &temp ); //check
 80005be:	1d7b      	adds	r3, r7, #5
 80005c0:	4619      	mov	r1, r3
 80005c2:	2007      	movs	r0, #7
 80005c4:	f000 f8f8 	bl	80007b8 <read_byte>

	  //LED pulse width configuration
	  read_byte( MAX30100_SPO2_CONFIG, &temp );
 80005c8:	1d7b      	adds	r3, r7, #5
 80005ca:	4619      	mov	r1, r3
 80005cc:	2007      	movs	r0, #7
 80005ce:	f000 f8f3 	bl	80007b8 <read_byte>

	  temp |= pulse_width;
 80005d2:	797a      	ldrb	r2, [r7, #5]
 80005d4:	7afb      	ldrb	r3, [r7, #11]
 80005d6:	4313      	orrs	r3, r2
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_SPO2_CONFIG, temp);
 80005dc:	797b      	ldrb	r3, [r7, #5]
 80005de:	4619      	mov	r1, r3
 80005e0:	2007      	movs	r0, #7
 80005e2:	f000 f8cd 	bl	8000780 <write_byte>
	  temp = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_SPO2_CONFIG, &temp ); //check
 80005ea:	1d7b      	adds	r3, r7, #5
 80005ec:	4619      	mov	r1, r3
 80005ee:	2007      	movs	r0, #7
 80005f0:	f000 f8e2 	bl	80007b8 <read_byte>

	  //LED red current level
	  read_byte( MAX30100_LED_CONFIG, &temp );
 80005f4:	1d7b      	adds	r3, r7, #5
 80005f6:	4619      	mov	r1, r3
 80005f8:	2009      	movs	r0, #9
 80005fa:	f000 f8dd 	bl	80007b8 <read_byte>

	  temp |= (red_level << 4);
 80005fe:	7abb      	ldrb	r3, [r7, #10]
 8000600:	011b      	lsls	r3, r3, #4
 8000602:	b25a      	sxtb	r2, r3
 8000604:	797b      	ldrb	r3, [r7, #5]
 8000606:	b25b      	sxtb	r3, r3
 8000608:	4313      	orrs	r3, r2
 800060a:	b25b      	sxtb	r3, r3
 800060c:	b2db      	uxtb	r3, r3
 800060e:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_LED_CONFIG, temp);
 8000610:	797b      	ldrb	r3, [r7, #5]
 8000612:	4619      	mov	r1, r3
 8000614:	2009      	movs	r0, #9
 8000616:	f000 f8b3 	bl	8000780 <write_byte>
	  temp = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_LED_CONFIG, &temp ); //check
 800061e:	1d7b      	adds	r3, r7, #5
 8000620:	4619      	mov	r1, r3
 8000622:	2009      	movs	r0, #9
 8000624:	f000 f8c8 	bl	80007b8 <read_byte>

	  //LED ir current level
	  read_byte( MAX30100_LED_CONFIG, &temp );
 8000628:	1d7b      	adds	r3, r7, #5
 800062a:	4619      	mov	r1, r3
 800062c:	2009      	movs	r0, #9
 800062e:	f000 f8c3 	bl	80007b8 <read_byte>

	  temp |= ir_level;
 8000632:	797a      	ldrb	r2, [r7, #5]
 8000634:	7a7b      	ldrb	r3, [r7, #9]
 8000636:	4313      	orrs	r3, r2
 8000638:	b2db      	uxtb	r3, r3
 800063a:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_LED_CONFIG, temp);
 800063c:	797b      	ldrb	r3, [r7, #5]
 800063e:	4619      	mov	r1, r3
 8000640:	2009      	movs	r0, #9
 8000642:	f000 f89d 	bl	8000780 <write_byte>
	  temp = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_LED_CONFIG, &temp ); //check
 800064a:	1d7b      	adds	r3, r7, #5
 800064c:	4619      	mov	r1, r3
 800064e:	2009      	movs	r0, #9
 8000650:	f000 f8b2 	bl	80007b8 <read_byte>

	  //Heart rate data ready interruption
	  read_byte( MAX30100_INT_ENABLE, &temp );
 8000654:	1d7b      	adds	r3, r7, #5
 8000656:	4619      	mov	r1, r3
 8000658:	2001      	movs	r0, #1
 800065a:	f000 f8ad 	bl	80007b8 <read_byte>
	  if (hr_ready_int == true)
 800065e:	7a3b      	ldrb	r3, [r7, #8]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d105      	bne.n	8000670 <begin+0x1e0>
	    temp |= (1<<5);
 8000664:	797b      	ldrb	r3, [r7, #5]
 8000666:	f043 0320 	orr.w	r3, r3, #32
 800066a:	b2db      	uxtb	r3, r3
 800066c:	717b      	strb	r3, [r7, #5]
 800066e:	e004      	b.n	800067a <begin+0x1ea>
	  else
	    temp &= ~(1<<5);
 8000670:	797b      	ldrb	r3, [r7, #5]
 8000672:	f023 0320 	bic.w	r3, r3, #32
 8000676:	b2db      	uxtb	r3, r3
 8000678:	717b      	strb	r3, [r7, #5]

	  write_byte(MAX30100_INT_ENABLE, temp);
 800067a:	797b      	ldrb	r3, [r7, #5]
 800067c:	4619      	mov	r1, r3
 800067e:	2001      	movs	r0, #1
 8000680:	f000 f87e 	bl	8000780 <write_byte>
	  temp = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_INT_ENABLE, &temp ); //check
 8000688:	1d7b      	adds	r3, r7, #5
 800068a:	4619      	mov	r1, r3
 800068c:	2001      	movs	r0, #1
 800068e:	f000 f893 	bl	80007b8 <read_byte>

	  //SPO2 data ready interruption
	  read_byte( MAX30100_INT_ENABLE, &temp );
 8000692:	1d7b      	adds	r3, r7, #5
 8000694:	4619      	mov	r1, r3
 8000696:	2001      	movs	r0, #1
 8000698:	f000 f88e 	bl	80007b8 <read_byte>
	  if (spo2_ready_int == true)
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d105      	bne.n	80006ae <begin+0x21e>
	    temp |= (1<<4);
 80006a2:	797b      	ldrb	r3, [r7, #5]
 80006a4:	f043 0310 	orr.w	r3, r3, #16
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	717b      	strb	r3, [r7, #5]
 80006ac:	e004      	b.n	80006b8 <begin+0x228>
	  else
	    temp &= ~(1<<4);
 80006ae:	797b      	ldrb	r3, [r7, #5]
 80006b0:	f023 0310 	bic.w	r3, r3, #16
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	717b      	strb	r3, [r7, #5]

	  write_byte(MAX30100_INT_ENABLE, temp);
 80006b8:	797b      	ldrb	r3, [r7, #5]
 80006ba:	4619      	mov	r1, r3
 80006bc:	2001      	movs	r0, #1
 80006be:	f000 f85f 	bl	8000780 <write_byte>
	  temp = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_INT_ENABLE, &temp ); //check
 80006c6:	1d7b      	adds	r3, r7, #5
 80006c8:	4619      	mov	r1, r3
 80006ca:	2001      	movs	r0, #1
 80006cc:	f000 f874 	bl	80007b8 <read_byte>

	  //Temperature data ready interruption
	  read_byte(MAX30100_INT_ENABLE, &temp );
 80006d0:	1d7b      	adds	r3, r7, #5
 80006d2:	4619      	mov	r1, r3
 80006d4:	2001      	movs	r0, #1
 80006d6:	f000 f86f 	bl	80007b8 <read_byte>
	  if (temp_ready_int == true)
 80006da:	79bb      	ldrb	r3, [r7, #6]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d105      	bne.n	80006ec <begin+0x25c>
	    temp |= (1<<6);
 80006e0:	797b      	ldrb	r3, [r7, #5]
 80006e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	717b      	strb	r3, [r7, #5]
 80006ea:	e004      	b.n	80006f6 <begin+0x266>
	  else
	    temp &= ~(1<<6);
 80006ec:	797b      	ldrb	r3, [r7, #5]
 80006ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	717b      	strb	r3, [r7, #5]

	  write_byte(MAX30100_INT_ENABLE, temp);
 80006f6:	797b      	ldrb	r3, [r7, #5]
 80006f8:	4619      	mov	r1, r3
 80006fa:	2001      	movs	r0, #1
 80006fc:	f000 f840 	bl	8000780 <write_byte>
	  temp = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_INT_ENABLE, &temp ); //check
 8000704:	1d7b      	adds	r3, r7, #5
 8000706:	4619      	mov	r1, r3
 8000708:	2001      	movs	r0, #1
 800070a:	f000 f855 	bl	80007b8 <read_byte>
}
 800070e:	bf00      	nop
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <readFIFO>:


void readFIFO(uint16_t* RED, uint16_t* IR){
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af02      	add	r7, sp, #8
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
   /* Burst read four bytes from the FIFO
    * to obtain 16-bit ADC values for IR
    * and RED reflectance.
    */
	uint8_t data[4];
   data[0] = MAX30100_FIFO_DATA;
 8000722:	2305      	movs	r3, #5
 8000724:	733b      	strb	r3, [r7, #12]
   HAL_I2C_Master_Transmit(&hi2c3, MAX30100_ADDR, data, 1, 100);
 8000726:	f107 020c 	add.w	r2, r7, #12
 800072a:	2364      	movs	r3, #100	; 0x64
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	2301      	movs	r3, #1
 8000730:	21ae      	movs	r1, #174	; 0xae
 8000732:	4812      	ldr	r0, [pc, #72]	; (800077c <readFIFO+0x64>)
 8000734:	f003 f88c 	bl	8003850 <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Receive(&hi2c3, MAX30100_ADDR, data, 4, 1000); // Read four times from the FIFO
 8000738:	f107 020c 	add.w	r2, r7, #12
 800073c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	2304      	movs	r3, #4
 8000744:	21ae      	movs	r1, #174	; 0xae
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <readFIFO+0x64>)
 8000748:	f003 f976 	bl	8003a38 <HAL_I2C_Master_Receive>

   // Combine bytes to get the actual number
   IR[0] = (data[0]<<8) | data[1];
 800074c:	7b3b      	ldrb	r3, [r7, #12]
 800074e:	021b      	lsls	r3, r3, #8
 8000750:	b21a      	sxth	r2, r3
 8000752:	7b7b      	ldrb	r3, [r7, #13]
 8000754:	b21b      	sxth	r3, r3
 8000756:	4313      	orrs	r3, r2
 8000758:	b21b      	sxth	r3, r3
 800075a:	b29a      	uxth	r2, r3
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	801a      	strh	r2, [r3, #0]
   RED[0] = (data[2]<<8) | data[3];
 8000760:	7bbb      	ldrb	r3, [r7, #14]
 8000762:	021b      	lsls	r3, r3, #8
 8000764:	b21a      	sxth	r2, r3
 8000766:	7bfb      	ldrb	r3, [r7, #15]
 8000768:	b21b      	sxth	r3, r3
 800076a:	4313      	orrs	r3, r2
 800076c:	b21b      	sxth	r3, r3
 800076e:	b29a      	uxth	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	801a      	strh	r2, [r3, #0]
}
 8000774:	bf00      	nop
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000350 	.word	0x20000350

08000780 <write_byte>:
   HAL_I2C_Master_Receive(&hi2c3, MAX30100_ADDR, &tempFrac, 1, 100);

   temperature  = (float) tempFrac * 0.0625 + (int8_t) tempInt;
}

void write_byte(uint8_t reg, uint8_t data){
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af02      	add	r7, sp, #8
 8000786:	4603      	mov	r3, r0
 8000788:	460a      	mov	r2, r1
 800078a:	71fb      	strb	r3, [r7, #7]
 800078c:	4613      	mov	r3, r2
 800078e:	71bb      	strb	r3, [r7, #6]
   /*  Write to the register of a device. Note the char
    *  type must be used due to the MBED i2c functions
    */
   uint8_t transfer[2] = {reg, data};
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	733b      	strb	r3, [r7, #12]
 8000794:	79bb      	ldrb	r3, [r7, #6]
 8000796:	737b      	strb	r3, [r7, #13]
   HAL_I2C_Master_Transmit(&hi2c3, MAX30100_ADDR, transfer, 2, 100);
 8000798:	f107 020c 	add.w	r2, r7, #12
 800079c:	2364      	movs	r3, #100	; 0x64
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	2302      	movs	r3, #2
 80007a2:	21ae      	movs	r1, #174	; 0xae
 80007a4:	4803      	ldr	r0, [pc, #12]	; (80007b4 <write_byte+0x34>)
 80007a6:	f003 f853 	bl	8003850 <HAL_I2C_Master_Transmit>
}
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000350 	.word	0x20000350

080007b8 <read_byte>:

void read_byte(uint8_t reg, uint8_t* data){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af02      	add	r7, sp, #8
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]

	   HAL_I2C_Master_Transmit(&hi2c3, MAX30100_ADDR, &reg, 1, 100);
 80007c4:	1dfa      	adds	r2, r7, #7
 80007c6:	2364      	movs	r3, #100	; 0x64
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	2301      	movs	r3, #1
 80007cc:	21ae      	movs	r1, #174	; 0xae
 80007ce:	4807      	ldr	r0, [pc, #28]	; (80007ec <read_byte+0x34>)
 80007d0:	f003 f83e 	bl	8003850 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c3, MAX30100_ADDR, data, 1, 100);
 80007d4:	2364      	movs	r3, #100	; 0x64
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	2301      	movs	r3, #1
 80007da:	683a      	ldr	r2, [r7, #0]
 80007dc:	21ae      	movs	r1, #174	; 0xae
 80007de:	4803      	ldr	r0, [pc, #12]	; (80007ec <read_byte+0x34>)
 80007e0:	f003 f92a 	bl	8003a38 <HAL_I2C_Master_Receive>
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000350 	.word	0x20000350

080007f0 <writeByte>:
float q[4] = {1.0f, 0.0f, 0.0f, 0.0f};           // vector to hold quaternion
float eInt[3] = {0.0f, 0.0f, 0.0f};              // vector to hold integral error for Mahony method


void writeByte(uint8_t reg, uint8_t data)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	460a      	mov	r2, r1
 80007fa:	71fb      	strb	r3, [r7, #7]
 80007fc:	4613      	mov	r3, r2
 80007fe:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_MPU9050_CS_ENBALE;
 8000804:	2200      	movs	r2, #0
 8000806:	2110      	movs	r1, #16
 8000808:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080c:	f002 ff3a 	bl	8003684 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&hspi1, &spiReg, 1, 100);
 8000810:	f107 010f 	add.w	r1, r7, #15
 8000814:	2364      	movs	r3, #100	; 0x64
 8000816:	2201      	movs	r2, #1
 8000818:	4809      	ldr	r0, [pc, #36]	; (8000840 <writeByte+0x50>)
 800081a:	f005 fd58 	bl	80062ce <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 800081e:	1db9      	adds	r1, r7, #6
 8000820:	2364      	movs	r3, #100	; 0x64
 8000822:	2201      	movs	r2, #1
 8000824:	4806      	ldr	r0, [pc, #24]	; (8000840 <writeByte+0x50>)
 8000826:	f005 fd52 	bl	80062ce <HAL_SPI_Transmit>
	//Disable CS
	_MPU9050_CS_DISABLE;
 800082a:	2201      	movs	r2, #1
 800082c:	2110      	movs	r1, #16
 800082e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000832:	f002 ff27 	bl	8003684 <HAL_GPIO_WritePin>
}
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000474 	.word	0x20000474

08000844 <readByte>:

void readByte(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	6039      	str	r1, [r7, #0]
 800084e:	71fb      	strb	r3, [r7, #7]
 8000850:	4613      	mov	r3, r2
 8000852:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800085a:	b2db      	uxtb	r3, r3
 800085c:	733b      	strb	r3, [r7, #12]
	//Enable CS
	_MPU9050_CS_ENBALE;
 800085e:	2200      	movs	r2, #0
 8000860:	2110      	movs	r1, #16
 8000862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000866:	f002 ff0d 	bl	8003684 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&hspi1, spiBuf, 1, 100);
 800086a:	f107 010c 	add.w	r1, r7, #12
 800086e:	2364      	movs	r3, #100	; 0x64
 8000870:	2201      	movs	r2, #1
 8000872:	480a      	ldr	r0, [pc, #40]	; (800089c <readByte+0x58>)
 8000874:	f005 fd2b 	bl	80062ce <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(&hspi1, dataR, size, 10000);
 8000878:	79bb      	ldrb	r3, [r7, #6]
 800087a:	b29a      	uxth	r2, r3
 800087c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000880:	6839      	ldr	r1, [r7, #0]
 8000882:	4806      	ldr	r0, [pc, #24]	; (800089c <readByte+0x58>)
 8000884:	f005 fe89 	bl	800659a <HAL_SPI_Receive>
	//Disable CS
	_MPU9050_CS_DISABLE;
 8000888:	2201      	movs	r2, #1
 800088a:	2110      	movs	r1, #16
 800088c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000890:	f002 fef8 	bl	8003684 <HAL_GPIO_WritePin>

}
 8000894:	bf00      	nop
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000474 	.word	0x20000474

080008a0 <readAccelData>:
  }
}


void readAccelData(int16_t * destination)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  uint8_t rawData[6];  // x/y/z accel register data stored here

  readByte(ACCEL_XOUT_H, &rawData[0], 6);  // Read the six raw data registers into data array
 80008a8:	f107 0308 	add.w	r3, r7, #8
 80008ac:	2206      	movs	r2, #6
 80008ae:	4619      	mov	r1, r3
 80008b0:	203b      	movs	r0, #59	; 0x3b
 80008b2:	f7ff ffc7 	bl	8000844 <readByte>
  destination[0] = (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80008b6:	7a3b      	ldrb	r3, [r7, #8]
 80008b8:	021b      	lsls	r3, r3, #8
 80008ba:	b21a      	sxth	r2, r3
 80008bc:	7a7b      	ldrb	r3, [r7, #9]
 80008be:	b21b      	sxth	r3, r3
 80008c0:	4313      	orrs	r3, r2
 80008c2:	b21a      	sxth	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	801a      	strh	r2, [r3, #0]
  destination[1] = (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
 80008c8:	7abb      	ldrb	r3, [r7, #10]
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	b219      	sxth	r1, r3
 80008ce:	7afb      	ldrb	r3, [r7, #11]
 80008d0:	b21a      	sxth	r2, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3302      	adds	r3, #2
 80008d6:	430a      	orrs	r2, r1
 80008d8:	b212      	sxth	r2, r2
 80008da:	801a      	strh	r2, [r3, #0]
  destination[2] = (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
 80008dc:	7b3b      	ldrb	r3, [r7, #12]
 80008de:	021b      	lsls	r3, r3, #8
 80008e0:	b219      	sxth	r1, r3
 80008e2:	7b7b      	ldrb	r3, [r7, #13]
 80008e4:	b21a      	sxth	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	3304      	adds	r3, #4
 80008ea:	430a      	orrs	r2, r1
 80008ec:	b212      	sxth	r2, r2
 80008ee:	801a      	strh	r2, [r3, #0]
}
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <initMPU9250>:
	writeByte( I2C_SLV0_CTRL, 0x81);
}


void initMPU9250()
{  
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
	uint8_t c;

	// Initialize MPU9250 device
  // wake up device
  writeByte(PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 80008fe:	2100      	movs	r1, #0
 8000900:	206b      	movs	r0, #107	; 0x6b
 8000902:	f7ff ff75 	bl	80007f0 <writeByte>
  readByte(PWR_MGMT_1, &c, 1);
 8000906:	1dfb      	adds	r3, r7, #7
 8000908:	2201      	movs	r2, #1
 800090a:	4619      	mov	r1, r3
 800090c:	206b      	movs	r0, #107	; 0x6b
 800090e:	f7ff ff99 	bl	8000844 <readByte>
  HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 8000912:	2064      	movs	r0, #100	; 0x64
 8000914:	f002 fb8c 	bl	8003030 <HAL_Delay>

  // get stable time source
  writeByte(PWR_MGMT_1, 0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8000918:	2101      	movs	r1, #1
 800091a:	206b      	movs	r0, #107	; 0x6b
 800091c:	f7ff ff68 	bl	80007f0 <writeByte>
  readByte(PWR_MGMT_1, &c, 1);
 8000920:	1dfb      	adds	r3, r7, #7
 8000922:	2201      	movs	r2, #1
 8000924:	4619      	mov	r1, r3
 8000926:	206b      	movs	r0, #107	; 0x6b
 8000928:	f7ff ff8c 	bl	8000844 <readByte>
  // Configure Gyro and Accelerometer
  // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively; 
  // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
  // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
  writeByte(CONFIG, 0x03);
 800092c:	2103      	movs	r1, #3
 800092e:	201a      	movs	r0, #26
 8000930:	f7ff ff5e 	bl	80007f0 <writeByte>
  readByte(CONFIG, &c, 1);
 8000934:	1dfb      	adds	r3, r7, #7
 8000936:	2201      	movs	r2, #1
 8000938:	4619      	mov	r1, r3
 800093a:	201a      	movs	r0, #26
 800093c:	f7ff ff82 	bl	8000844 <readByte>
  // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  writeByte(SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 8000940:	2104      	movs	r1, #4
 8000942:	2019      	movs	r0, #25
 8000944:	f7ff ff54 	bl	80007f0 <writeByte>
  readByte(SMPLRT_DIV, &c, 1);
 8000948:	1dfb      	adds	r3, r7, #7
 800094a:	2201      	movs	r2, #1
 800094c:	4619      	mov	r1, r3
 800094e:	2019      	movs	r0, #25
 8000950:	f7ff ff78 	bl	8000844 <readByte>
  //writeByte(GYRO_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
  //writeByte(GYRO_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
  //writeByte(GYRO_CONFIG, c | Gscale << 3); // Set full scale range for the gyro

  // Set accelerometer configuration
  readByte(ACCEL_CONFIG, &c, 1);
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	2201      	movs	r2, #1
 8000958:	4619      	mov	r1, r3
 800095a:	201c      	movs	r0, #28
 800095c:	f7ff ff72 	bl	8000844 <readByte>
  writeByte(ACCEL_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	f003 031f 	and.w	r3, r3, #31
 8000966:	b2db      	uxtb	r3, r3
 8000968:	4619      	mov	r1, r3
 800096a:	201c      	movs	r0, #28
 800096c:	f7ff ff40 	bl	80007f0 <writeByte>
  writeByte(ACCEL_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	f023 0318 	bic.w	r3, r3, #24
 8000976:	b2db      	uxtb	r3, r3
 8000978:	4619      	mov	r1, r3
 800097a:	201c      	movs	r0, #28
 800097c:	f7ff ff38 	bl	80007f0 <writeByte>
  writeByte(ACCEL_CONFIG, c | Ascale << 3); // Set full scale range for the accelerometer
 8000980:	4b2f      	ldr	r3, [pc, #188]	; (8000a40 <initMPU9250+0x148>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	b25a      	sxtb	r2, r3
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	b25b      	sxtb	r3, r3
 800098c:	4313      	orrs	r3, r2
 800098e:	b25b      	sxtb	r3, r3
 8000990:	b2db      	uxtb	r3, r3
 8000992:	4619      	mov	r1, r3
 8000994:	201c      	movs	r0, #28
 8000996:	f7ff ff2b 	bl	80007f0 <writeByte>
  readByte(ACCEL_CONFIG, &c, 1);
 800099a:	1dfb      	adds	r3, r7, #7
 800099c:	2201      	movs	r2, #1
 800099e:	4619      	mov	r1, r3
 80009a0:	201c      	movs	r0, #28
 80009a2:	f7ff ff4f 	bl	8000844 <readByte>
  // Set accelerometer sample rate configuration
  // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
  // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  readByte(ACCEL_CONFIG2, &c, 1);
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	2201      	movs	r2, #1
 80009aa:	4619      	mov	r1, r3
 80009ac:	201d      	movs	r0, #29
 80009ae:	f7ff ff49 	bl	8000844 <readByte>
  writeByte(ACCEL_CONFIG2, c & ~0x0F); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	f023 030f 	bic.w	r3, r3, #15
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	4619      	mov	r1, r3
 80009bc:	201d      	movs	r0, #29
 80009be:	f7ff ff17 	bl	80007f0 <writeByte>
  //writeByte(ACCEL_CONFIG2, c | 0x03); // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
  writeByte(ACCEL_CONFIG2, c | 0x0B); // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	f043 030b 	orr.w	r3, r3, #11
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	4619      	mov	r1, r3
 80009cc:	201d      	movs	r0, #29
 80009ce:	f7ff ff0f 	bl	80007f0 <writeByte>
  readByte(ACCEL_CONFIG2, &c, 1);
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	2201      	movs	r2, #1
 80009d6:	4619      	mov	r1, r3
 80009d8:	201d      	movs	r0, #29
 80009da:	f7ff ff33 	bl	8000844 <readByte>
  // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips 
  // can join the I2C bus and all can be controlled by the Arduino as master
  writeByte(INT_PIN_CFG, 0x22);
 80009de:	2122      	movs	r1, #34	; 0x22
 80009e0:	2037      	movs	r0, #55	; 0x37
 80009e2:	f7ff ff05 	bl	80007f0 <writeByte>
  writeByte(INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 80009e6:	2101      	movs	r1, #1
 80009e8:	2038      	movs	r0, #56	; 0x38
 80009ea:	f7ff ff01 	bl	80007f0 <writeByte>

  // Power off gyro
  readByte(PWR_MGMT_2, &c, 1);
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	2201      	movs	r2, #1
 80009f2:	4619      	mov	r1, r3
 80009f4:	206c      	movs	r0, #108	; 0x6c
 80009f6:	f7ff ff25 	bl	8000844 <readByte>
  c |= 0x07;
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	f043 0307 	orr.w	r3, r3, #7
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	71fb      	strb	r3, [r7, #7]
  c &= 0xC7;
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	71fb      	strb	r3, [r7, #7]
  writeByte(PWR_MGMT_2, c); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	4619      	mov	r1, r3
 8000a12:	206c      	movs	r0, #108	; 0x6c
 8000a14:	f7ff feec 	bl	80007f0 <writeByte>

  //Power off temperature
  readByte(PWR_MGMT_1, &c, 1);
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	206b      	movs	r0, #107	; 0x6b
 8000a20:	f7ff ff10 	bl	8000844 <readByte>
  c |= 0x08;
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	f043 0308 	orr.w	r3, r3, #8
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	71fb      	strb	r3, [r7, #7]
  writeByte(PWR_MGMT_1, c); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	4619      	mov	r1, r3
 8000a32:	206b      	movs	r0, #107	; 0x6b
 8000a34:	f7ff fedc 	bl	80007f0 <writeByte>

}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	200001e0 	.word	0x200001e0

08000a44 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000a56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	608b      	str	r3, [r1, #8]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000a70:	f000 f80a 	bl	8000a88 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000a74:	4903      	ldr	r1, [pc, #12]	; (8000a84 <APPE_Init+0x18>)
 8000a76:	2000      	movs	r0, #0
 8000a78:	f000 fd4a 	bl	8001510 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000a7c:	f000 f80e 	bl	8000a9c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000a80:	bf00      	nop
}
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	200003ec 	.word	0x200003ec

08000a88 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000a8c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000a90:	f7ff ffd8 	bl	8000a44 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 8000a94:	f001 fc3a 	bl	800230c <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000a98:	bf00      	nop
}
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000aa2:	f009 fdf1 	bl	800a688 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000aa6:	4a11      	ldr	r2, [pc, #68]	; (8000aec <appe_Tl_Init+0x50>)
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2040      	movs	r0, #64	; 0x40
 8000aac:	f001 fda8 	bl	8002600 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <appe_Tl_Init+0x54>)
 8000ab2:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <appe_Tl_Init+0x58>)
 8000ab6:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000ab8:	463b      	mov	r3, r7
 8000aba:	4619      	mov	r1, r3
 8000abc:	480e      	ldr	r0, [pc, #56]	; (8000af8 <appe_Tl_Init+0x5c>)
 8000abe:	f009 faef 	bl	800a0a0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <appe_Tl_Init+0x60>)
 8000ac4:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <appe_Tl_Init+0x64>)
 8000ac8:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <appe_Tl_Init+0x68>)
 8000acc:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000ace:	f240 533c 	movw	r3, #1340	; 0x53c
 8000ad2:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000ad4:	f107 0308 	add.w	r3, r7, #8
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f009 fee3 	bl	800a8a4 <TL_MM_Init>

  TL_Enable();
 8000ade:	f009 fdcd 	bl	800a67c <TL_Enable>

  return;
 8000ae2:	bf00      	nop
}
 8000ae4:	3720      	adds	r7, #32
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	0800a0d9 	.word	0x0800a0d9
 8000af0:	20030700 	.word	0x20030700
 8000af4:	08000b09 	.word	0x08000b09
 8000af8:	08000b1f 	.word	0x08000b1f
 8000afc:	20030918 	.word	0x20030918
 8000b00:	2003080c 	.word	0x2003080c
 8000b04:	200301c4 	.word	0x200301c4

08000b08 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000b12:	bf00      	nop
}
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <APPE_SysUserEvtRx>:

static void APPE_SysUserEvtRx( void * pPayload )
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8000b26:	f009 ff2d 	bl	800a984 <TL_TRACES_Init>

  APP_BLE_Init( );
 8000b2a:	f009 ff85 	bl	800aa38 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2001      	movs	r0, #1
 8000b32:	f001 fbfd 	bl	8002330 <UTIL_LPM_SetOffMode>
  return;
 8000b36:	bf00      	nop
}
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
 8000b42:	f001 fc23 	bl	800238c <UTIL_LPM_EnterLowPower>
#endif
  return;
 8000b46:	bf00      	nop
}
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
 8000b52:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b58:	f001 fc76 	bl	8002448 <UTIL_SEQ_Run>
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	2040      	movs	r0, #64	; 0x40
 8000b70:	f001 fd66 	bl	8002640 <UTIL_SEQ_SetTask>
  return;
 8000b74:	bf00      	nop
}
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000b84:	2002      	movs	r0, #2
 8000b86:	f001 fdc1 	bl	800270c <UTIL_SEQ_SetEvt>
  return;
 8000b8a:	bf00      	nop
}
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000b9a:	2002      	movs	r0, #2
 8000b9c:	f001 fdd4 	bl	8002748 <UTIL_SEQ_WaitEvt>
  return;
 8000ba0:	bf00      	nop
}
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
}
 8000bce:	bf00      	nop
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf0:	2004      	movs	r0, #4
 8000bf2:	f7ff ffd9 	bl	8000ba8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	2002      	movs	r0, #2
 8000bf8:	f7ff ffd6 	bl	8000ba8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f7ff ffd3 	bl	8000ba8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c02:	2008      	movs	r0, #8
 8000c04:	f7ff ffd0 	bl	8000ba8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIS3DH_CS_GPIO_Port, LIS3DH_CS_Pin, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2104      	movs	r1, #4
 8000c0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c10:	f002 fd38 	bl	8003684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_1_Pin|SPI1_CS_2_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1e:	f002 fd31 	bl	8003684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|SPI2_CS_1_Pin|SPI2_CS_2_Pin 
 8000c22:	2200      	movs	r2, #0
 8000c24:	f241 0133 	movw	r1, #4147	; 0x1033
 8000c28:	4823      	ldr	r0, [pc, #140]	; (8000cb8 <MX_GPIO_Init+0xdc>)
 8000c2a:	f002 fd2b 	bl	8003684 <HAL_GPIO_WritePin>
                          |LED_BLUE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LIS3DH_CS_Pin;
 8000c2e:	2304      	movs	r3, #4
 8000c30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LIS3DH_CS_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	4619      	mov	r1, r3
 8000c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c46:	f002 fbad 	bl	80033a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_1_Pin|SPI1_CS_2_Pin;
 8000c4a:	f44f 7304 	mov.w	r3, #528	; 0x210
 8000c4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	4619      	mov	r1, r3
 8000c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c64:	f002 fb9e 	bl	80033a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c68:	2310      	movs	r3, #16
 8000c6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	4619      	mov	r1, r3
 8000c78:	4810      	ldr	r0, [pc, #64]	; (8000cbc <MX_GPIO_Init+0xe0>)
 8000c7a:	f002 fb93 	bl	80033a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|SPI2_CS_1_Pin|SPI2_CS_2_Pin 
 8000c7e:	f241 0333 	movw	r3, #4147	; 0x1033
 8000c82:	607b      	str	r3, [r7, #4]
                          |LED_BLUE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	4619      	mov	r1, r3
 8000c94:	4808      	ldr	r0, [pc, #32]	; (8000cb8 <MX_GPIO_Init+0xdc>)
 8000c96:	f002 fb85 	bl	80033a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_GPIO_Init+0xe4>)
 8000cac:	f002 fb7a 	bl	80033a4 <HAL_GPIO_Init>

}
 8000cb0:	bf00      	nop
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	48000400 	.word	0x48000400
 8000cbc:	48000800 	.word	0x48000800
 8000cc0:	48000c00 	.word	0x48000c00

08000cc4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <LL_EXTI_EnableIT_0_31+0x24>)
 8000cce:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000cd2:	4905      	ldr	r1, [pc, #20]	; (8000ce8 <LL_EXTI_EnableIT_0_31+0x24>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	58000800 	.word	0x58000800

08000cec <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4904      	ldr	r1, [pc, #16]	; (8000d0c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	600b      	str	r3, [r1, #0]

}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	58000800 	.word	0x58000800

08000d10 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000d16:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <ReadRtcSsrValue+0x3c>)
 8000d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <ReadRtcSsrValue+0x3c>)
 8000d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000d26:	e005      	b.n	8000d34 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000d2c:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <ReadRtcSsrValue+0x3c>)
 8000d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d1f5      	bne.n	8000d28 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000d3c:	683b      	ldr	r3, [r7, #0]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40002800 	.word	0x40002800

08000d50 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	460a      	mov	r2, r1
 8000d5a:	71fb      	strb	r3, [r7, #7]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000d60:	79ba      	ldrb	r2, [r7, #6]
 8000d62:	491d      	ldr	r1, [pc, #116]	; (8000dd8 <LinkTimerAfter+0x88>)
 8000d64:	4613      	mov	r3, r2
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	4413      	add	r3, r2
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	440b      	add	r3, r1
 8000d6e:	3315      	adds	r3, #21
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d009      	beq.n	8000d8e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000d7a:	7bfa      	ldrb	r2, [r7, #15]
 8000d7c:	4916      	ldr	r1, [pc, #88]	; (8000dd8 <LinkTimerAfter+0x88>)
 8000d7e:	4613      	mov	r3, r2
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	4413      	add	r3, r2
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	440b      	add	r3, r1
 8000d88:	3314      	adds	r3, #20
 8000d8a:	79fa      	ldrb	r2, [r7, #7]
 8000d8c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000d8e:	79fa      	ldrb	r2, [r7, #7]
 8000d90:	4911      	ldr	r1, [pc, #68]	; (8000dd8 <LinkTimerAfter+0x88>)
 8000d92:	4613      	mov	r3, r2
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	4413      	add	r3, r2
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	440b      	add	r3, r1
 8000d9c:	3315      	adds	r3, #21
 8000d9e:	7bfa      	ldrb	r2, [r7, #15]
 8000da0:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000da2:	79fa      	ldrb	r2, [r7, #7]
 8000da4:	490c      	ldr	r1, [pc, #48]	; (8000dd8 <LinkTimerAfter+0x88>)
 8000da6:	4613      	mov	r3, r2
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	4413      	add	r3, r2
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	440b      	add	r3, r1
 8000db0:	3314      	adds	r3, #20
 8000db2:	79ba      	ldrb	r2, [r7, #6]
 8000db4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000db6:	79ba      	ldrb	r2, [r7, #6]
 8000db8:	4907      	ldr	r1, [pc, #28]	; (8000dd8 <LinkTimerAfter+0x88>)
 8000dba:	4613      	mov	r3, r2
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	4413      	add	r3, r2
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	440b      	add	r3, r1
 8000dc4:	3315      	adds	r3, #21
 8000dc6:	79fa      	ldrb	r2, [r7, #7]
 8000dc8:	701a      	strb	r2, [r3, #0]

  return;
 8000dca:	bf00      	nop
}
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	2000002c 	.word	0x2000002c

08000ddc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	460a      	mov	r2, r1
 8000de6:	71fb      	strb	r3, [r7, #7]
 8000de8:	4613      	mov	r3, r2
 8000dea:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000dec:	4b29      	ldr	r3, [pc, #164]	; (8000e94 <LinkTimerBefore+0xb8>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	79ba      	ldrb	r2, [r7, #6]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d032      	beq.n	8000e5e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000df8:	79ba      	ldrb	r2, [r7, #6]
 8000dfa:	4927      	ldr	r1, [pc, #156]	; (8000e98 <LinkTimerBefore+0xbc>)
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	4413      	add	r3, r2
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	440b      	add	r3, r1
 8000e06:	3314      	adds	r3, #20
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000e0c:	7bfa      	ldrb	r2, [r7, #15]
 8000e0e:	4922      	ldr	r1, [pc, #136]	; (8000e98 <LinkTimerBefore+0xbc>)
 8000e10:	4613      	mov	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	440b      	add	r3, r1
 8000e1a:	3315      	adds	r3, #21
 8000e1c:	79fa      	ldrb	r2, [r7, #7]
 8000e1e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000e20:	79fa      	ldrb	r2, [r7, #7]
 8000e22:	491d      	ldr	r1, [pc, #116]	; (8000e98 <LinkTimerBefore+0xbc>)
 8000e24:	4613      	mov	r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	4413      	add	r3, r2
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	440b      	add	r3, r1
 8000e2e:	3315      	adds	r3, #21
 8000e30:	79ba      	ldrb	r2, [r7, #6]
 8000e32:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000e34:	79fa      	ldrb	r2, [r7, #7]
 8000e36:	4918      	ldr	r1, [pc, #96]	; (8000e98 <LinkTimerBefore+0xbc>)
 8000e38:	4613      	mov	r3, r2
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	4413      	add	r3, r2
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	440b      	add	r3, r1
 8000e42:	3314      	adds	r3, #20
 8000e44:	7bfa      	ldrb	r2, [r7, #15]
 8000e46:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000e48:	79ba      	ldrb	r2, [r7, #6]
 8000e4a:	4913      	ldr	r1, [pc, #76]	; (8000e98 <LinkTimerBefore+0xbc>)
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	4413      	add	r3, r2
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	440b      	add	r3, r1
 8000e56:	3314      	adds	r3, #20
 8000e58:	79fa      	ldrb	r2, [r7, #7]
 8000e5a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000e5c:	e014      	b.n	8000e88 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000e5e:	79fa      	ldrb	r2, [r7, #7]
 8000e60:	490d      	ldr	r1, [pc, #52]	; (8000e98 <LinkTimerBefore+0xbc>)
 8000e62:	4613      	mov	r3, r2
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	4413      	add	r3, r2
 8000e68:	00db      	lsls	r3, r3, #3
 8000e6a:	440b      	add	r3, r1
 8000e6c:	3315      	adds	r3, #21
 8000e6e:	79ba      	ldrb	r2, [r7, #6]
 8000e70:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000e72:	79ba      	ldrb	r2, [r7, #6]
 8000e74:	4908      	ldr	r1, [pc, #32]	; (8000e98 <LinkTimerBefore+0xbc>)
 8000e76:	4613      	mov	r3, r2
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	4413      	add	r3, r2
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	440b      	add	r3, r1
 8000e80:	3314      	adds	r3, #20
 8000e82:	79fa      	ldrb	r2, [r7, #7]
 8000e84:	701a      	strb	r2, [r3, #0]
  return;
 8000e86:	bf00      	nop
}
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	200000bc 	.word	0x200000bc
 8000e98:	2000002c 	.word	0x2000002c

08000e9c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ea6:	4b4e      	ldr	r3, [pc, #312]	; (8000fe0 <linkTimer+0x144>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2b06      	cmp	r3, #6
 8000eae:	d118      	bne.n	8000ee2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000eb0:	4b4b      	ldr	r3, [pc, #300]	; (8000fe0 <linkTimer+0x144>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	4b4b      	ldr	r3, [pc, #300]	; (8000fe4 <linkTimer+0x148>)
 8000eb8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000eba:	4a49      	ldr	r2, [pc, #292]	; (8000fe0 <linkTimer+0x144>)
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000ec0:	79fa      	ldrb	r2, [r7, #7]
 8000ec2:	4949      	ldr	r1, [pc, #292]	; (8000fe8 <linkTimer+0x14c>)
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	4413      	add	r3, r2
 8000eca:	00db      	lsls	r3, r3, #3
 8000ecc:	440b      	add	r3, r1
 8000ece:	3315      	adds	r3, #21
 8000ed0:	2206      	movs	r2, #6
 8000ed2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000ed4:	4b45      	ldr	r3, [pc, #276]	; (8000fec <linkTimer+0x150>)
 8000ed6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000eda:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	81fb      	strh	r3, [r7, #14]
 8000ee0:	e078      	b.n	8000fd4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000ee2:	f000 f909 	bl	80010f8 <ReturnTimeElapsed>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000eea:	79fa      	ldrb	r2, [r7, #7]
 8000eec:	493e      	ldr	r1, [pc, #248]	; (8000fe8 <linkTimer+0x14c>)
 8000eee:	4613      	mov	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	4413      	add	r3, r2
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	440b      	add	r3, r1
 8000ef8:	3308      	adds	r3, #8
 8000efa:	6819      	ldr	r1, [r3, #0]
 8000efc:	89fb      	ldrh	r3, [r7, #14]
 8000efe:	79fa      	ldrb	r2, [r7, #7]
 8000f00:	4419      	add	r1, r3
 8000f02:	4839      	ldr	r0, [pc, #228]	; (8000fe8 <linkTimer+0x14c>)
 8000f04:	4613      	mov	r3, r2
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	4413      	add	r3, r2
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	4403      	add	r3, r0
 8000f0e:	3308      	adds	r3, #8
 8000f10:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000f12:	79fa      	ldrb	r2, [r7, #7]
 8000f14:	4934      	ldr	r1, [pc, #208]	; (8000fe8 <linkTimer+0x14c>)
 8000f16:	4613      	mov	r3, r2
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	4413      	add	r3, r2
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	440b      	add	r3, r1
 8000f20:	3308      	adds	r3, #8
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000f26:	4b2e      	ldr	r3, [pc, #184]	; (8000fe0 <linkTimer+0x144>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4a2e      	ldr	r2, [pc, #184]	; (8000fe8 <linkTimer+0x14c>)
 8000f30:	460b      	mov	r3, r1
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	440b      	add	r3, r1
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	4413      	add	r3, r2
 8000f3a:	3308      	adds	r3, #8
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d337      	bcc.n	8000fb4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000f44:	4b26      	ldr	r3, [pc, #152]	; (8000fe0 <linkTimer+0x144>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000f4a:	7b7a      	ldrb	r2, [r7, #13]
 8000f4c:	4926      	ldr	r1, [pc, #152]	; (8000fe8 <linkTimer+0x14c>)
 8000f4e:	4613      	mov	r3, r2
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	4413      	add	r3, r2
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	440b      	add	r3, r1
 8000f58:	3315      	adds	r3, #21
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000f5e:	e013      	b.n	8000f88 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000f60:	7b7a      	ldrb	r2, [r7, #13]
 8000f62:	4921      	ldr	r1, [pc, #132]	; (8000fe8 <linkTimer+0x14c>)
 8000f64:	4613      	mov	r3, r2
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	4413      	add	r3, r2
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	440b      	add	r3, r1
 8000f6e:	3315      	adds	r3, #21
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000f74:	7b7a      	ldrb	r2, [r7, #13]
 8000f76:	491c      	ldr	r1, [pc, #112]	; (8000fe8 <linkTimer+0x14c>)
 8000f78:	4613      	mov	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	440b      	add	r3, r1
 8000f82:	3315      	adds	r3, #21
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000f88:	7b3b      	ldrb	r3, [r7, #12]
 8000f8a:	2b06      	cmp	r3, #6
 8000f8c:	d00b      	beq.n	8000fa6 <linkTimer+0x10a>
 8000f8e:	7b3a      	ldrb	r2, [r7, #12]
 8000f90:	4915      	ldr	r1, [pc, #84]	; (8000fe8 <linkTimer+0x14c>)
 8000f92:	4613      	mov	r3, r2
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	4413      	add	r3, r2
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	440b      	add	r3, r1
 8000f9c:	3308      	adds	r3, #8
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	68ba      	ldr	r2, [r7, #8]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d2dc      	bcs.n	8000f60 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000fa6:	7b7a      	ldrb	r2, [r7, #13]
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	4611      	mov	r1, r2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fecf 	bl	8000d50 <LinkTimerAfter>
 8000fb2:	e00f      	b.n	8000fd4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <linkTimer+0x144>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	4611      	mov	r1, r2
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ff0c 	bl	8000ddc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <linkTimer+0x144>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <linkTimer+0x148>)
 8000fcc:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000fce:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <linkTimer+0x144>)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000fd4:	89fb      	ldrh	r3, [r7, #14]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200000bc 	.word	0x200000bc
 8000fe4:	200000bd 	.word	0x200000bd
 8000fe8:	2000002c 	.word	0x2000002c
 8000fec:	200000c0 	.word	0x200000c0

08000ff0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	460a      	mov	r2, r1
 8000ffa:	71fb      	strb	r3, [r7, #7]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001000:	4b39      	ldr	r3, [pc, #228]	; (80010e8 <UnlinkTimer+0xf8>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	79fa      	ldrb	r2, [r7, #7]
 8001008:	429a      	cmp	r2, r3
 800100a:	d111      	bne.n	8001030 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 800100c:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <UnlinkTimer+0xf8>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4b36      	ldr	r3, [pc, #216]	; (80010ec <UnlinkTimer+0xfc>)
 8001014:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001016:	79fa      	ldrb	r2, [r7, #7]
 8001018:	4935      	ldr	r1, [pc, #212]	; (80010f0 <UnlinkTimer+0x100>)
 800101a:	4613      	mov	r3, r2
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	4413      	add	r3, r2
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	440b      	add	r3, r1
 8001024:	3315      	adds	r3, #21
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <UnlinkTimer+0xf8>)
 800102c:	701a      	strb	r2, [r3, #0]
 800102e:	e03e      	b.n	80010ae <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001030:	79fa      	ldrb	r2, [r7, #7]
 8001032:	492f      	ldr	r1, [pc, #188]	; (80010f0 <UnlinkTimer+0x100>)
 8001034:	4613      	mov	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	440b      	add	r3, r1
 800103e:	3314      	adds	r3, #20
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001044:	79fa      	ldrb	r2, [r7, #7]
 8001046:	492a      	ldr	r1, [pc, #168]	; (80010f0 <UnlinkTimer+0x100>)
 8001048:	4613      	mov	r3, r2
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	4413      	add	r3, r2
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	440b      	add	r3, r1
 8001052:	3315      	adds	r3, #21
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001058:	79f9      	ldrb	r1, [r7, #7]
 800105a:	7bfa      	ldrb	r2, [r7, #15]
 800105c:	4824      	ldr	r0, [pc, #144]	; (80010f0 <UnlinkTimer+0x100>)
 800105e:	460b      	mov	r3, r1
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	440b      	add	r3, r1
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	4403      	add	r3, r0
 8001068:	3315      	adds	r3, #21
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	b2d8      	uxtb	r0, r3
 800106e:	4920      	ldr	r1, [pc, #128]	; (80010f0 <UnlinkTimer+0x100>)
 8001070:	4613      	mov	r3, r2
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	4413      	add	r3, r2
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	440b      	add	r3, r1
 800107a:	3315      	adds	r3, #21
 800107c:	4602      	mov	r2, r0
 800107e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001080:	7bbb      	ldrb	r3, [r7, #14]
 8001082:	2b06      	cmp	r3, #6
 8001084:	d013      	beq.n	80010ae <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001086:	79f9      	ldrb	r1, [r7, #7]
 8001088:	7bba      	ldrb	r2, [r7, #14]
 800108a:	4819      	ldr	r0, [pc, #100]	; (80010f0 <UnlinkTimer+0x100>)
 800108c:	460b      	mov	r3, r1
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	440b      	add	r3, r1
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	4403      	add	r3, r0
 8001096:	3314      	adds	r3, #20
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	4914      	ldr	r1, [pc, #80]	; (80010f0 <UnlinkTimer+0x100>)
 800109e:	4613      	mov	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4413      	add	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	440b      	add	r3, r1
 80010a8:	3314      	adds	r3, #20
 80010aa:	4602      	mov	r2, r0
 80010ac:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80010ae:	79fa      	ldrb	r2, [r7, #7]
 80010b0:	490f      	ldr	r1, [pc, #60]	; (80010f0 <UnlinkTimer+0x100>)
 80010b2:	4613      	mov	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	4413      	add	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	440b      	add	r3, r1
 80010bc:	330c      	adds	r3, #12
 80010be:	2201      	movs	r2, #1
 80010c0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <UnlinkTimer+0xf8>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b06      	cmp	r3, #6
 80010ca:	d107      	bne.n	80010dc <UnlinkTimer+0xec>
 80010cc:	79bb      	ldrb	r3, [r7, #6]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d104      	bne.n	80010dc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80010d2:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <UnlinkTimer+0x104>)
 80010d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010d8:	601a      	str	r2, [r3, #0]
  }

  return;
 80010da:	bf00      	nop
 80010dc:	bf00      	nop
}
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	200000bc 	.word	0x200000bc
 80010ec:	200000bd 	.word	0x200000bd
 80010f0:	2000002c 	.word	0x2000002c
 80010f4:	200000c0 	.word	0x200000c0

080010f8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80010fe:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <ReturnTimeElapsed+0x70>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001106:	d026      	beq.n	8001156 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001108:	f7ff fe02 	bl	8000d10 <ReadRtcSsrValue>
 800110c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800110e:	4b16      	ldr	r3, [pc, #88]	; (8001168 <ReturnTimeElapsed+0x70>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	429a      	cmp	r2, r3
 8001116:	d805      	bhi.n	8001124 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <ReturnTimeElapsed+0x70>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	e00a      	b.n	800113a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001124:	4b11      	ldr	r3, [pc, #68]	; (800116c <ReturnTimeElapsed+0x74>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001130:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <ReturnTimeElapsed+0x70>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	4413      	add	r3, r2
 8001138:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <ReturnTimeElapsed+0x78>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	fb02 f303 	mul.w	r3, r2, r3
 8001146:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <ReturnTimeElapsed+0x7c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	40d3      	lsrs	r3, r2
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	e001      	b.n	800115a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	b29b      	uxth	r3, r3
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200000c0 	.word	0x200000c0
 800116c:	200001ea 	.word	0x200001ea
 8001170:	200001e9 	.word	0x200001e9
 8001174:	200001e8 	.word	0x200001e8

08001178 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d108      	bne.n	800119a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001188:	f7ff fdc2 	bl	8000d10 <ReadRtcSsrValue>
 800118c:	4602      	mov	r2, r0
 800118e:	4b24      	ldr	r3, [pc, #144]	; (8001220 <RestartWakeupCounter+0xa8>)
 8001190:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001192:	2003      	movs	r0, #3
 8001194:	f002 f8e9 	bl	800336a <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001198:	e03e      	b.n	8001218 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d803      	bhi.n	80011a8 <RestartWakeupCounter+0x30>
 80011a0:	4b20      	ldr	r3, [pc, #128]	; (8001224 <RestartWakeupCounter+0xac>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d002      	beq.n	80011ae <RestartWakeupCounter+0x36>
      Value -= 1;
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80011ae:	bf00      	nop
 80011b0:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <RestartWakeupCounter+0xb0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d0f7      	beq.n	80011b0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80011c0:	4b19      	ldr	r3, [pc, #100]	; (8001228 <RestartWakeupCounter+0xb0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <RestartWakeupCounter+0xb0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80011d4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <RestartWakeupCounter+0xb4>)
 80011d8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011dc:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80011de:	2003      	movs	r0, #3
 80011e0:	f002 f8d1 	bl	8003386 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <RestartWakeupCounter+0xb8>)
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	0c1b      	lsrs	r3, r3, #16
 80011ea:	041b      	lsls	r3, r3, #16
 80011ec:	88fa      	ldrh	r2, [r7, #6]
 80011ee:	4910      	ldr	r1, [pc, #64]	; (8001230 <RestartWakeupCounter+0xb8>)
 80011f0:	4313      	orrs	r3, r2
 80011f2:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80011f4:	f7ff fd8c 	bl	8000d10 <ReadRtcSsrValue>
 80011f8:	4602      	mov	r2, r0
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <RestartWakeupCounter+0xa8>)
 80011fc:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <RestartWakeupCounter+0xb0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <RestartWakeupCounter+0xb0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001210:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001212:	f3af 8000 	nop.w
  return ;
 8001216:	bf00      	nop
}
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200000c0 	.word	0x200000c0
 8001224:	200001e8 	.word	0x200001e8
 8001228:	200001e4 	.word	0x200001e4
 800122c:	58000800 	.word	0x58000800
 8001230:	40002800 	.word	0x40002800

08001234 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800123a:	4b47      	ldr	r3, [pc, #284]	; (8001358 <RescheduleTimerList+0x124>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001246:	d108      	bne.n	800125a <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001248:	bf00      	nop
 800124a:	4b44      	ldr	r3, [pc, #272]	; (800135c <RescheduleTimerList+0x128>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1f7      	bne.n	800124a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800125a:	4b40      	ldr	r3, [pc, #256]	; (800135c <RescheduleTimerList+0x128>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689a      	ldr	r2, [r3, #8]
 8001262:	4b3e      	ldr	r3, [pc, #248]	; (800135c <RescheduleTimerList+0x128>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800126c:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800126e:	4b3c      	ldr	r3, [pc, #240]	; (8001360 <RescheduleTimerList+0x12c>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001274:	7bfa      	ldrb	r2, [r7, #15]
 8001276:	493b      	ldr	r1, [pc, #236]	; (8001364 <RescheduleTimerList+0x130>)
 8001278:	4613      	mov	r3, r2
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4413      	add	r3, r2
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	440b      	add	r3, r1
 8001282:	3308      	adds	r3, #8
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001288:	f7ff ff36 	bl	80010f8 <ReturnTimeElapsed>
 800128c:	4603      	mov	r3, r0
 800128e:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	429a      	cmp	r2, r3
 8001296:	d205      	bcs.n	80012a4 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800129c:	4b32      	ldr	r3, [pc, #200]	; (8001368 <RescheduleTimerList+0x134>)
 800129e:	2201      	movs	r2, #1
 80012a0:	701a      	strb	r2, [r3, #0]
 80012a2:	e04d      	b.n	8001340 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	4a31      	ldr	r2, [pc, #196]	; (800136c <RescheduleTimerList+0x138>)
 80012a8:	8812      	ldrh	r2, [r2, #0]
 80012aa:	b292      	uxth	r2, r2
 80012ac:	4413      	add	r3, r2
 80012ae:	461a      	mov	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d906      	bls.n	80012c4 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80012b6:	4b2d      	ldr	r3, [pc, #180]	; (800136c <RescheduleTimerList+0x138>)
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80012bc:	4b2a      	ldr	r3, [pc, #168]	; (8001368 <RescheduleTimerList+0x134>)
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
 80012c2:	e03d      	b.n	8001340 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	88fb      	ldrh	r3, [r7, #6]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80012ce:	4b26      	ldr	r3, [pc, #152]	; (8001368 <RescheduleTimerList+0x134>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80012d4:	e034      	b.n	8001340 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80012d6:	7bfa      	ldrb	r2, [r7, #15]
 80012d8:	4922      	ldr	r1, [pc, #136]	; (8001364 <RescheduleTimerList+0x130>)
 80012da:	4613      	mov	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	440b      	add	r3, r1
 80012e4:	3308      	adds	r3, #8
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d20a      	bcs.n	8001304 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80012ee:	7bfa      	ldrb	r2, [r7, #15]
 80012f0:	491c      	ldr	r1, [pc, #112]	; (8001364 <RescheduleTimerList+0x130>)
 80012f2:	4613      	mov	r3, r2
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	4413      	add	r3, r2
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	440b      	add	r3, r1
 80012fc:	3308      	adds	r3, #8
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	e013      	b.n	800132c <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001304:	7bfa      	ldrb	r2, [r7, #15]
 8001306:	4917      	ldr	r1, [pc, #92]	; (8001364 <RescheduleTimerList+0x130>)
 8001308:	4613      	mov	r3, r2
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	4413      	add	r3, r2
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	440b      	add	r3, r1
 8001312:	3308      	adds	r3, #8
 8001314:	6819      	ldr	r1, [r3, #0]
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	7bfa      	ldrb	r2, [r7, #15]
 800131a:	1ac9      	subs	r1, r1, r3
 800131c:	4811      	ldr	r0, [pc, #68]	; (8001364 <RescheduleTimerList+0x130>)
 800131e:	4613      	mov	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	4413      	add	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	4403      	add	r3, r0
 8001328:	3308      	adds	r3, #8
 800132a:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800132c:	7bfa      	ldrb	r2, [r7, #15]
 800132e:	490d      	ldr	r1, [pc, #52]	; (8001364 <RescheduleTimerList+0x130>)
 8001330:	4613      	mov	r3, r2
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	4413      	add	r3, r2
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	440b      	add	r3, r1
 800133a:	3315      	adds	r3, #21
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	2b06      	cmp	r3, #6
 8001344:	d1c7      	bne.n	80012d6 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001346:	89bb      	ldrh	r3, [r7, #12]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff15 	bl	8001178 <RestartWakeupCounter>

  return ;
 800134e:	bf00      	nop
}
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40002800 	.word	0x40002800
 800135c:	200001e4 	.word	0x200001e4
 8001360:	200000bc 	.word	0x200000bc
 8001364:	2000002c 	.word	0x2000002c
 8001368:	200000c4 	.word	0x200000c4
 800136c:	200001ec 	.word	0x200001ec

08001370 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001376:	f3ef 8310 	mrs	r3, PRIMASK
 800137a:	617b      	str	r3, [r7, #20]
  return(result);
 800137c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001380:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001382:	4b5e      	ldr	r3, [pc, #376]	; (80014fc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	22ca      	movs	r2, #202	; 0xca
 800138a:	625a      	str	r2, [r3, #36]	; 0x24
 800138c:	4b5b      	ldr	r3, [pc, #364]	; (80014fc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2253      	movs	r2, #83	; 0x53
 8001394:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8001396:	4b59      	ldr	r3, [pc, #356]	; (80014fc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	4b57      	ldr	r3, [pc, #348]	; (80014fc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013a8:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80013aa:	4b55      	ldr	r3, [pc, #340]	; (8001500 <HW_TS_RTC_Wakeup_Handler+0x190>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80013b2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80013b6:	4953      	ldr	r1, [pc, #332]	; (8001504 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80013b8:	4613      	mov	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4413      	add	r3, r2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	440b      	add	r3, r1
 80013c2:	330c      	adds	r3, #12
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d170      	bne.n	80014ae <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80013cc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80013d0:	494c      	ldr	r1, [pc, #304]	; (8001504 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80013d2:	4613      	mov	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	440b      	add	r3, r1
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80013e0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80013e4:	4947      	ldr	r1, [pc, #284]	; (8001504 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80013e6:	4613      	mov	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4413      	add	r3, r2
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	440b      	add	r3, r1
 80013f0:	3310      	adds	r3, #16
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80013f6:	4b44      	ldr	r3, [pc, #272]	; (8001508 <HW_TS_RTC_Wakeup_Handler+0x198>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d04e      	beq.n	800149e <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001400:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001404:	493f      	ldr	r1, [pc, #252]	; (8001504 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001406:	4613      	mov	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	440b      	add	r3, r1
 8001410:	330d      	adds	r3, #13
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b01      	cmp	r3, #1
 8001418:	d125      	bne.n	8001466 <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 800141a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800141e:	2101      	movs	r1, #1
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fde5 	bl	8000ff0 <UnlinkTimer>
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001430:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001434:	4933      	ldr	r1, [pc, #204]	; (8001504 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001436:	4613      	mov	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4413      	add	r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	440b      	add	r3, r1
 8001440:	3304      	adds	r3, #4
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001448:	4611      	mov	r1, r2
 800144a:	4618      	mov	r0, r3
 800144c:	f000 fa40 	bl	80018d0 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001450:	4b2a      	ldr	r3, [pc, #168]	; (80014fc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	22ca      	movs	r2, #202	; 0xca
 8001458:	625a      	str	r2, [r3, #36]	; 0x24
 800145a:	4b28      	ldr	r3, [pc, #160]	; (80014fc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2253      	movs	r2, #83	; 0x53
 8001462:	625a      	str	r2, [r3, #36]	; 0x24
 8001464:	e013      	b.n	800148e <HW_TS_RTC_Wakeup_Handler+0x11e>
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001470:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001474:	4618      	mov	r0, r3
 8001476:	f000 f9a1 	bl	80017bc <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800147a:	4b20      	ldr	r3, [pc, #128]	; (80014fc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	22ca      	movs	r2, #202	; 0xca
 8001482:	625a      	str	r2, [r3, #36]	; 0x24
 8001484:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2253      	movs	r2, #83	; 0x53
 800148c:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 800148e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001492:	69fa      	ldr	r2, [r7, #28]
 8001494:	4619      	mov	r1, r3
 8001496:	69b8      	ldr	r0, [r7, #24]
 8001498:	f000 faa0 	bl	80019dc <HW_TS_RTC_Int_AppNot>
 800149c:	e024      	b.n	80014e8 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 800149e:	f7ff fec9 	bl	8001234 <RescheduleTimerList>
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	f383 8810 	msr	PRIMASK, r3
 80014ac:	e01c      	b.n	80014e8 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80014ae:	bf00      	nop
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d0f7      	beq.n	80014b0 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80014d4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80014d6:	4b0d      	ldr	r3, [pc, #52]	; (800150c <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80014d8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80014e8:	4b04      	ldr	r3, [pc, #16]	; (80014fc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	22ff      	movs	r2, #255	; 0xff
 80014f0:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80014f2:	bf00      	nop
}
 80014f4:	3728      	adds	r7, #40	; 0x28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200001e4 	.word	0x200001e4
 8001500:	200000bc 	.word	0x200000bc
 8001504:	2000002c 	.word	0x2000002c
 8001508:	200000c4 	.word	0x200000c4
 800150c:	58000800 	.word	0x58000800

08001510 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 800151c:	4a61      	ldr	r2, [pc, #388]	; (80016a4 <HW_TS_Init+0x194>)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001522:	4b60      	ldr	r3, [pc, #384]	; (80016a4 <HW_TS_Init+0x194>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	22ca      	movs	r2, #202	; 0xca
 800152a:	625a      	str	r2, [r3, #36]	; 0x24
 800152c:	4b5d      	ldr	r3, [pc, #372]	; (80016a4 <HW_TS_Init+0x194>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2253      	movs	r2, #83	; 0x53
 8001534:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001536:	4b5c      	ldr	r3, [pc, #368]	; (80016a8 <HW_TS_Init+0x198>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	4a5b      	ldr	r2, [pc, #364]	; (80016a8 <HW_TS_Init+0x198>)
 800153c:	f043 0320 	orr.w	r3, r3, #32
 8001540:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001542:	4b59      	ldr	r3, [pc, #356]	; (80016a8 <HW_TS_Init+0x198>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	b2db      	uxtb	r3, r3
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	b2db      	uxtb	r3, r3
 800154e:	f1c3 0304 	rsb	r3, r3, #4
 8001552:	b2da      	uxtb	r2, r3
 8001554:	4b55      	ldr	r3, [pc, #340]	; (80016ac <HW_TS_Init+0x19c>)
 8001556:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001558:	4b53      	ldr	r3, [pc, #332]	; (80016a8 <HW_TS_Init+0x198>)
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001560:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001564:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	fa92 f2a2 	rbit	r2, r2
 800156c:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	fab2 f282 	clz	r2, r2
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	40d3      	lsrs	r3, r2
 8001578:	b2db      	uxtb	r3, r3
 800157a:	3301      	adds	r3, #1
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4b4c      	ldr	r3, [pc, #304]	; (80016b0 <HW_TS_Init+0x1a0>)
 8001580:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001582:	4b49      	ldr	r3, [pc, #292]	; (80016a8 <HW_TS_Init+0x198>)
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	b29b      	uxth	r3, r3
 8001588:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800158c:	b29b      	uxth	r3, r3
 800158e:	3301      	adds	r3, #1
 8001590:	b29a      	uxth	r2, r3
 8001592:	4b48      	ldr	r3, [pc, #288]	; (80016b4 <HW_TS_Init+0x1a4>)
 8001594:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001596:	4b47      	ldr	r3, [pc, #284]	; (80016b4 <HW_TS_Init+0x1a4>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	3b01      	subs	r3, #1
 800159c:	4a44      	ldr	r2, [pc, #272]	; (80016b0 <HW_TS_Init+0x1a0>)
 800159e:	7812      	ldrb	r2, [r2, #0]
 80015a0:	fb02 f303 	mul.w	r3, r2, r3
 80015a4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80015a8:	4a40      	ldr	r2, [pc, #256]	; (80016ac <HW_TS_Init+0x19c>)
 80015aa:	7812      	ldrb	r2, [r2, #0]
 80015ac:	40d3      	lsrs	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d904      	bls.n	80015c4 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80015ba:	4b3f      	ldr	r3, [pc, #252]	; (80016b8 <HW_TS_Init+0x1a8>)
 80015bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015c0:	801a      	strh	r2, [r3, #0]
 80015c2:	e003      	b.n	80015cc <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	4b3b      	ldr	r3, [pc, #236]	; (80016b8 <HW_TS_Init+0x1a8>)
 80015ca:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80015cc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80015d0:	f7ff fb8c 	bl	8000cec <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80015d4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80015d8:	f7ff fb74 	bl	8000cc4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d143      	bne.n	800166a <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80015e2:	4b36      	ldr	r3, [pc, #216]	; (80016bc <HW_TS_Init+0x1ac>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80015e8:	4b35      	ldr	r3, [pc, #212]	; (80016c0 <HW_TS_Init+0x1b0>)
 80015ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015ee:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80015f0:	2300      	movs	r3, #0
 80015f2:	75fb      	strb	r3, [r7, #23]
 80015f4:	e00c      	b.n	8001610 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80015f6:	7dfa      	ldrb	r2, [r7, #23]
 80015f8:	4932      	ldr	r1, [pc, #200]	; (80016c4 <HW_TS_Init+0x1b4>)
 80015fa:	4613      	mov	r3, r2
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	4413      	add	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	440b      	add	r3, r1
 8001604:	330c      	adds	r3, #12
 8001606:	2200      	movs	r2, #0
 8001608:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800160a:	7dfb      	ldrb	r3, [r7, #23]
 800160c:	3301      	adds	r3, #1
 800160e:	75fb      	strb	r3, [r7, #23]
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	2b05      	cmp	r3, #5
 8001614:	d9ef      	bls.n	80015f6 <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001616:	4b2c      	ldr	r3, [pc, #176]	; (80016c8 <HW_TS_Init+0x1b8>)
 8001618:	2206      	movs	r2, #6
 800161a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 800161c:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <HW_TS_Init+0x194>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <HW_TS_Init+0x194>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800162e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001630:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <HW_TS_Init+0x194>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <HW_TS_Init+0x194>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001644:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001646:	4b21      	ldr	r3, [pc, #132]	; (80016cc <HW_TS_Init+0x1bc>)
 8001648:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800164c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800164e:	2003      	movs	r0, #3
 8001650:	f001 fe99 	bl	8003386 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001654:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <HW_TS_Init+0x194>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HW_TS_Init+0x194>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	e00a      	b.n	8001680 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <HW_TS_Init+0x194>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001676:	2b00      	cmp	r3, #0
 8001678:	d002      	beq.n	8001680 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800167a:	2003      	movs	r0, #3
 800167c:	f001 fe75 	bl	800336a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HW_TS_Init+0x194>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	22ff      	movs	r2, #255	; 0xff
 8001688:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800168a:	2200      	movs	r2, #0
 800168c:	2103      	movs	r1, #3
 800168e:	2003      	movs	r0, #3
 8001690:	f001 fe29 	bl	80032e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001694:	2003      	movs	r0, #3
 8001696:	f001 fe40 	bl	800331a <HAL_NVIC_EnableIRQ>

  return;
 800169a:	bf00      	nop
}
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200001e4 	.word	0x200001e4
 80016a8:	40002800 	.word	0x40002800
 80016ac:	200001e8 	.word	0x200001e8
 80016b0:	200001e9 	.word	0x200001e9
 80016b4:	200001ea 	.word	0x200001ea
 80016b8:	200001ec 	.word	0x200001ec
 80016bc:	200000c4 	.word	0x200000c4
 80016c0:	200000c0 	.word	0x200000c0
 80016c4:	2000002c 	.word	0x2000002c
 80016c8:	200000bc 	.word	0x200000bc
 80016cc:	58000800 	.word	0x58000800

080016d0 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b08b      	sub	sp, #44	; 0x2c
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016e6:	f3ef 8310 	mrs	r3, PRIMASK
 80016ea:	61fb      	str	r3, [r7, #28]
  return(result);
 80016ec:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80016ee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80016f0:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80016f2:	e004      	b.n	80016fe <HW_TS_Create+0x2e>
  {
    loop++;
 80016f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016f8:	3301      	adds	r3, #1
 80016fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80016fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001702:	2b05      	cmp	r3, #5
 8001704:	d80c      	bhi.n	8001720 <HW_TS_Create+0x50>
 8001706:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800170a:	492b      	ldr	r1, [pc, #172]	; (80017b8 <HW_TS_Create+0xe8>)
 800170c:	4613      	mov	r3, r2
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	4413      	add	r3, r2
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	440b      	add	r3, r1
 8001716:	330c      	adds	r3, #12
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1e9      	bne.n	80016f4 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001720:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001724:	2b06      	cmp	r3, #6
 8001726:	d037      	beq.n	8001798 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001728:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800172c:	4922      	ldr	r1, [pc, #136]	; (80017b8 <HW_TS_Create+0xe8>)
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	440b      	add	r3, r1
 8001738:	330c      	adds	r3, #12
 800173a:	2201      	movs	r2, #1
 800173c:	701a      	strb	r2, [r3, #0]
 800173e:	6a3b      	ldr	r3, [r7, #32]
 8001740:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001748:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800174c:	491a      	ldr	r1, [pc, #104]	; (80017b8 <HW_TS_Create+0xe8>)
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	440b      	add	r3, r1
 8001758:	3310      	adds	r3, #16
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800175e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001762:	4915      	ldr	r1, [pc, #84]	; (80017b8 <HW_TS_Create+0xe8>)
 8001764:	4613      	mov	r3, r2
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	4413      	add	r3, r2
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	440b      	add	r3, r1
 800176e:	330d      	adds	r3, #13
 8001770:	79fa      	ldrb	r2, [r7, #7]
 8001772:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001774:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001778:	490f      	ldr	r1, [pc, #60]	; (80017b8 <HW_TS_Create+0xe8>)
 800177a:	4613      	mov	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	440b      	add	r3, r1
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800178e:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001790:	2300      	movs	r3, #0
 8001792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001796:	e007      	b.n	80017a8 <HW_TS_Create+0xd8>
 8001798:	6a3b      	ldr	r3, [r7, #32]
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80017a2:	2301      	movs	r3, #1
 80017a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80017a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	372c      	adds	r7, #44	; 0x2c
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	2000002c 	.word	0x2000002c

080017bc <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017c6:	f3ef 8310 	mrs	r3, PRIMASK
 80017ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80017cc:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80017ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80017d0:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80017d2:	2003      	movs	r0, #3
 80017d4:	f001 fdaf 	bl	8003336 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80017d8:	4b37      	ldr	r3, [pc, #220]	; (80018b8 <HW_TS_Stop+0xfc>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	22ca      	movs	r2, #202	; 0xca
 80017e0:	625a      	str	r2, [r3, #36]	; 0x24
 80017e2:	4b35      	ldr	r3, [pc, #212]	; (80018b8 <HW_TS_Stop+0xfc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2253      	movs	r2, #83	; 0x53
 80017ea:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80017ec:	79fa      	ldrb	r2, [r7, #7]
 80017ee:	4933      	ldr	r1, [pc, #204]	; (80018bc <HW_TS_Stop+0x100>)
 80017f0:	4613      	mov	r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4413      	add	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	440b      	add	r3, r1
 80017fa:	330c      	adds	r3, #12
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d148      	bne.n	8001896 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fbf1 	bl	8000ff0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800180e:	4b2c      	ldr	r3, [pc, #176]	; (80018c0 <HW_TS_Stop+0x104>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001814:	7cfb      	ldrb	r3, [r7, #19]
 8001816:	2b06      	cmp	r3, #6
 8001818:	d135      	bne.n	8001886 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800181a:	4b2a      	ldr	r3, [pc, #168]	; (80018c4 <HW_TS_Stop+0x108>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001826:	d108      	bne.n	800183a <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001828:	bf00      	nop
 800182a:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <HW_TS_Stop+0xfc>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f7      	bne.n	800182a <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800183a:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <HW_TS_Stop+0xfc>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <HW_TS_Stop+0xfc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800184c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800184e:	bf00      	nop
 8001850:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <HW_TS_Stop+0xfc>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0f7      	beq.n	8001850 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001860:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <HW_TS_Stop+0xfc>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	b2da      	uxtb	r2, r3
 800186a:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <HW_TS_Stop+0xfc>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001874:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <HW_TS_Stop+0x10c>)
 8001878:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800187c:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800187e:	2003      	movs	r0, #3
 8001880:	f001 fd81 	bl	8003386 <HAL_NVIC_ClearPendingIRQ>
 8001884:	e007      	b.n	8001896 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <HW_TS_Stop+0x110>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	b2db      	uxtb	r3, r3
 800188c:	7cfa      	ldrb	r2, [r7, #19]
 800188e:	429a      	cmp	r2, r3
 8001890:	d001      	beq.n	8001896 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8001892:	f7ff fccf 	bl	8001234 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HW_TS_Stop+0xfc>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	22ff      	movs	r2, #255	; 0xff
 800189e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80018a0:	2003      	movs	r0, #3
 80018a2:	f001 fd3a 	bl	800331a <HAL_NVIC_EnableIRQ>
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80018b0:	bf00      	nop
}
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200001e4 	.word	0x200001e4
 80018bc:	2000002c 	.word	0x2000002c
 80018c0:	200000bc 	.word	0x200000bc
 80018c4:	40002800 	.word	0x40002800
 80018c8:	58000800 	.word	0x58000800
 80018cc:	200000bd 	.word	0x200000bd

080018d0 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	6039      	str	r1, [r7, #0]
 80018da:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80018dc:	79fa      	ldrb	r2, [r7, #7]
 80018de:	493b      	ldr	r1, [pc, #236]	; (80019cc <HW_TS_Start+0xfc>)
 80018e0:	4613      	mov	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	440b      	add	r3, r1
 80018ea:	330c      	adds	r3, #12
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d103      	bne.n	80018fc <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ff60 	bl	80017bc <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018fc:	f3ef 8310 	mrs	r3, PRIMASK
 8001900:	60fb      	str	r3, [r7, #12]
  return(result);
 8001902:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001904:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001906:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001908:	2003      	movs	r0, #3
 800190a:	f001 fd14 	bl	8003336 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800190e:	4b30      	ldr	r3, [pc, #192]	; (80019d0 <HW_TS_Start+0x100>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	22ca      	movs	r2, #202	; 0xca
 8001916:	625a      	str	r2, [r3, #36]	; 0x24
 8001918:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <HW_TS_Start+0x100>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2253      	movs	r2, #83	; 0x53
 8001920:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001922:	79fa      	ldrb	r2, [r7, #7]
 8001924:	4929      	ldr	r1, [pc, #164]	; (80019cc <HW_TS_Start+0xfc>)
 8001926:	4613      	mov	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	4413      	add	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	440b      	add	r3, r1
 8001930:	330c      	adds	r3, #12
 8001932:	2202      	movs	r2, #2
 8001934:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001936:	79fa      	ldrb	r2, [r7, #7]
 8001938:	4924      	ldr	r1, [pc, #144]	; (80019cc <HW_TS_Start+0xfc>)
 800193a:	4613      	mov	r3, r2
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4413      	add	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	440b      	add	r3, r1
 8001944:	3308      	adds	r3, #8
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800194a:	79fa      	ldrb	r2, [r7, #7]
 800194c:	491f      	ldr	r1, [pc, #124]	; (80019cc <HW_TS_Start+0xfc>)
 800194e:	4613      	mov	r3, r2
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	4413      	add	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	440b      	add	r3, r1
 8001958:	3304      	adds	r3, #4
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fa9b 	bl	8000e9c <linkTimer>
 8001966:	4603      	mov	r3, r0
 8001968:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800196a:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <HW_TS_Start+0x104>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001970:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <HW_TS_Start+0x108>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	b2db      	uxtb	r3, r3
 8001976:	7c7a      	ldrb	r2, [r7, #17]
 8001978:	429a      	cmp	r2, r3
 800197a:	d002      	beq.n	8001982 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 800197c:	f7ff fc5a 	bl	8001234 <RescheduleTimerList>
 8001980:	e013      	b.n	80019aa <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001982:	79fa      	ldrb	r2, [r7, #7]
 8001984:	4911      	ldr	r1, [pc, #68]	; (80019cc <HW_TS_Start+0xfc>)
 8001986:	4613      	mov	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4413      	add	r3, r2
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	440b      	add	r3, r1
 8001990:	3308      	adds	r3, #8
 8001992:	6819      	ldr	r1, [r3, #0]
 8001994:	8a7b      	ldrh	r3, [r7, #18]
 8001996:	79fa      	ldrb	r2, [r7, #7]
 8001998:	1ac9      	subs	r1, r1, r3
 800199a:	480c      	ldr	r0, [pc, #48]	; (80019cc <HW_TS_Start+0xfc>)
 800199c:	4613      	mov	r3, r2
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	4413      	add	r3, r2
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	4403      	add	r3, r0
 80019a6:	3308      	adds	r3, #8
 80019a8:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HW_TS_Start+0x100>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	22ff      	movs	r2, #255	; 0xff
 80019b2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80019b4:	2003      	movs	r0, #3
 80019b6:	f001 fcb0 	bl	800331a <HAL_NVIC_EnableIRQ>
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80019c4:	bf00      	nop
}
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	2000002c 	.word	0x2000002c
 80019d0:	200001e4 	.word	0x200001e4
 80019d4:	200000bc 	.word	0x200000bc
 80019d8:	200000bd 	.word	0x200000bd

080019dc <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	460b      	mov	r3, r1
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4798      	blx	r3

  return;
 80019ee:	bf00      	nop
}
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <LL_AHB2_GRP1_EnableClock>:
{
 80019f6:	b480      	push	{r7}
 80019f8:	b085      	sub	sp, #20
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80019fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4013      	ands	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
}
 8001a4e:	bf00      	nop
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001a60:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001a62:	4a1c      	ldr	r2, [pc, #112]	; (8001ad4 <MX_I2C1_Init+0x78>)
 8001a64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8001a66:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001a68:	4a1b      	ldr	r2, [pc, #108]	; (8001ad8 <MX_I2C1_Init+0x7c>)
 8001a6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a6c:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a72:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a78:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a7e:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a90:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a96:	480e      	ldr	r0, [pc, #56]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001a98:	f001 fe4a 	bl	8003730 <HAL_I2C_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001aa2:	f000 fabf 	bl	8002024 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4809      	ldr	r0, [pc, #36]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001aaa:	f002 fa9b 	bl	8003fe4 <HAL_I2CEx_ConfigAnalogFilter>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ab4:	f000 fab6 	bl	8002024 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001abc:	f002 fadd 	bl	800407a <HAL_I2CEx_ConfigDigitalFilter>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001ac6:	f000 faad 	bl	8002024 <Error_Handler>
  }

}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	2000039c 	.word	0x2000039c
 8001ad4:	40005400 	.word	0x40005400
 8001ad8:	00300f38 	.word	0x00300f38

08001adc <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8001ae0:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <MX_I2C3_Init+0x74>)
 8001ae2:	4a1c      	ldr	r2, [pc, #112]	; (8001b54 <MX_I2C3_Init+0x78>)
 8001ae4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00300F38;
 8001ae6:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <MX_I2C3_Init+0x74>)
 8001ae8:	4a1b      	ldr	r2, [pc, #108]	; (8001b58 <MX_I2C3_Init+0x7c>)
 8001aea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001aec:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <MX_I2C3_Init+0x74>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001af2:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <MX_I2C3_Init+0x74>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001af8:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <MX_I2C3_Init+0x74>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001afe:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <MX_I2C3_Init+0x74>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <MX_I2C3_Init+0x74>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b0a:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <MX_I2C3_Init+0x74>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b10:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <MX_I2C3_Init+0x74>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001b16:	480e      	ldr	r0, [pc, #56]	; (8001b50 <MX_I2C3_Init+0x74>)
 8001b18:	f001 fe0a 	bl	8003730 <HAL_I2C_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001b22:	f000 fa7f 	bl	8002024 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b26:	2100      	movs	r1, #0
 8001b28:	4809      	ldr	r0, [pc, #36]	; (8001b50 <MX_I2C3_Init+0x74>)
 8001b2a:	f002 fa5b 	bl	8003fe4 <HAL_I2CEx_ConfigAnalogFilter>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001b34:	f000 fa76 	bl	8002024 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4805      	ldr	r0, [pc, #20]	; (8001b50 <MX_I2C3_Init+0x74>)
 8001b3c:	f002 fa9d 	bl	800407a <HAL_I2CEx_ConfigDigitalFilter>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001b46:	f000 fa6d 	bl	8002024 <Error_Handler>
  }

}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000350 	.word	0x20000350
 8001b54:	40005c00 	.word	0x40005c00
 8001b58:	00300f38 	.word	0x00300f38

08001b5c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 030c 	add.w	r3, r7, #12
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a1d      	ldr	r2, [pc, #116]	; (8001bf0 <HAL_I2C_MspInit+0x94>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d118      	bne.n	8001bb0 <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7e:	2002      	movs	r0, #2
 8001b80:	f7ff ff39 	bl	80019f6 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b88:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b8a:	2312      	movs	r3, #18
 8001b8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b96:	2304      	movs	r3, #4
 8001b98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9a:	f107 030c 	add.w	r3, r7, #12
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4814      	ldr	r0, [pc, #80]	; (8001bf4 <HAL_I2C_MspInit+0x98>)
 8001ba2:	f001 fbff 	bl	80033a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ba6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001baa:	f7ff ff3d 	bl	8001a28 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001bae:	e01b      	b.n	8001be8 <HAL_I2C_MspInit+0x8c>
  else if(i2cHandle->Instance==I2C3)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a10      	ldr	r2, [pc, #64]	; (8001bf8 <HAL_I2C_MspInit+0x9c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d116      	bne.n	8001be8 <HAL_I2C_MspInit+0x8c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bba:	2004      	movs	r0, #4
 8001bbc:	f7ff ff1b 	bl	80019f6 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bc4:	2312      	movs	r3, #18
 8001bc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001bd0:	2304      	movs	r3, #4
 8001bd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd4:	f107 030c 	add.w	r3, r7, #12
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4808      	ldr	r0, [pc, #32]	; (8001bfc <HAL_I2C_MspInit+0xa0>)
 8001bdc:	f001 fbe2 	bl	80033a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001be0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001be4:	f7ff ff20 	bl	8001a28 <LL_APB1_GRP1_EnableClock>
}
 8001be8:	bf00      	nop
 8001bea:	3720      	adds	r7, #32
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40005400 	.word	0x40005400
 8001bf4:	48000400 	.word	0x48000400
 8001bf8:	40005c00 	.word	0x40005c00
 8001bfc:	48000800 	.word	0x48000800

08001c00 <LL_RCC_LSE_SetDriveCapability>:
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c10:	f023 0218 	bic.w	r2, r3, #24
 8001c14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c30:	f001 f97a 	bl	8002f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c34:	f000 f838 	bl	8001ca8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c38:	f7fe ffd0 	bl	8000bdc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001c3c:	f001 f836 	bl	8002cac <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8001c40:	f001 f8e2 	bl	8002e08 <MX_USB_PCD_Init>
  MX_RF_Init();
 8001c44:	f000 f9f5 	bl	8002032 <MX_RF_Init>
  MX_RTC_Init();
 8001c48:	f000 fa0c 	bl	8002064 <MX_RTC_Init>
  MX_I2C3_Init();
 8001c4c:	f7ff ff46 	bl	8001adc <MX_I2C3_Init>
  MX_SPI1_Init();
 8001c50:	f000 fa8e 	bl	8002170 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001c54:	f000 faca 	bl	80021ec <MX_SPI2_Init>
  MX_TIM16_Init();
 8001c58:	f000 ffb2 	bl	8002bc0 <MX_TIM16_Init>
  MX_I2C1_Init();
 8001c5c:	f7ff fefe 	bl	8001a5c <MX_I2C1_Init>

  /*
   * MPU9250
   * */

   readByte(WHO_AM_I_MPU9250, &WAI_MPU9250, 1);
 8001c60:	2201      	movs	r2, #1
 8001c62:	490d      	ldr	r1, [pc, #52]	; (8001c98 <main+0x6c>)
 8001c64:	2075      	movs	r0, #117	; 0x75
 8001c66:	f7fe fded 	bl	8000844 <readByte>

   initMPU9250();
 8001c6a:	f7fe fe45 	bl	80008f8 <initMPU9250>

  /*
   * MAX30100
   * */

   read_byte(reg, &ID_MAX30100);
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <main+0x70>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	490b      	ldr	r1, [pc, #44]	; (8001ca0 <main+0x74>)
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe fd9f 	bl	80007b8 <read_byte>

   begin();
 8001c7a:	f7fe fc09 	bl	8000490 <begin>

   UTIL_SEQ_RegTask( 1<< READ_SENSORS_TASK, UTIL_SEQ_RFU, read_sensors );
 8001c7e:	4a09      	ldr	r2, [pc, #36]	; (8001ca4 <main+0x78>)
 8001c80:	2100      	movs	r1, #0
 8001c82:	2010      	movs	r0, #16
 8001c84:	f000 fcbc 	bl	8002600 <UTIL_SEQ_RegTask>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */  
  APPE_Init();
 8001c88:	f7fe fef0 	bl	8000a6c <APPE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c90:	f000 fbda 	bl	8002448 <UTIL_SEQ_Run>
 8001c94:	e7fa      	b.n	8001c8c <main+0x60>
 8001c96:	bf00      	nop
 8001c98:	200001ee 	.word	0x200001ee
 8001c9c:	20000004 	.word	0x20000004
 8001ca0:	200001ef 	.word	0x200001ef
 8001ca4:	08001e09 	.word	0x08001e09

08001ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b0ae      	sub	sp, #184	; 0xb8
 8001cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001cb2:	2248      	movs	r2, #72	; 0x48
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f009 fcdf 	bl	800b67a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cbc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
 8001ccc:	615a      	str	r2, [r3, #20]
 8001cce:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	2250      	movs	r2, #80	; 0x50
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f009 fccf 	bl	800b67a <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8001cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cea:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8001cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	f023 0303 	bic.w	r3, r3, #3
 8001cf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001d00:	2000      	movs	r0, #0
 8001d02:	f7ff ff7d 	bl	8001c00 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d06:	4b3f      	ldr	r3, [pc, #252]	; (8001e04 <SystemClock_Config+0x15c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d0e:	4a3d      	ldr	r2, [pc, #244]	; (8001e04 <SystemClock_Config+0x15c>)
 8001d10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	4b3b      	ldr	r3, [pc, #236]	; (8001e04 <SystemClock_Config+0x15c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001d22:	2327      	movs	r3, #39	; 0x27
 8001d24:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d2a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d34:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001d36:	2301      	movs	r3, #1
 8001d38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d3c:	2340      	movs	r3, #64	; 0x40
 8001d3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001d48:	2360      	movs	r3, #96	; 0x60
 8001d4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d54:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f002 fe71 	bl	8004a40 <HAL_RCC_OscConfig>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d64:	f000 f95e 	bl	8002024 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001d68:	236f      	movs	r3, #111	; 0x6f
 8001d6a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d70:	2300      	movs	r3, #0
 8001d72:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d74:	2300      	movs	r3, #0
 8001d76:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001d80:	2300      	movs	r3, #0
 8001d82:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d84:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d88:	2101      	movs	r1, #1
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f003 f9b6 	bl	80050fc <HAL_RCC_ClockConfig>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001d96:	f000 f945 	bl	8002024 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001d9a:	f643 130d 	movw	r3, #14605	; 0x390d
 8001d9e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8001da0:	2318      	movs	r3, #24
 8001da2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001da4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001da8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001daa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dae:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001db0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001db4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8001db6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dba:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001dc0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001dc6:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8001dca:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001dcc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001dd0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001dd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dd6:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001dd8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ddc:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001dde:	2302      	movs	r3, #2
 8001de0:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	4618      	mov	r0, r3
 8001dea:	f003 fdd1 	bl	8005990 <HAL_RCCEx_PeriphCLKConfig>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <SystemClock_Config+0x150>
  {
    Error_Handler();
 8001df4:	f000 f916 	bl	8002024 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001df8:	f003 ff3f 	bl	8005c7a <HAL_RCCEx_EnableMSIPLLMode>
}
 8001dfc:	bf00      	nop
 8001dfe:	37b8      	adds	r7, #184	; 0xb8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	58000400 	.word	0x58000400

08001e08 <read_sensors>:

/* USER CODE BEGIN 4 */

void read_sensors(void){
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af02      	add	r7, sp, #8

	if(flag_buffer_full == 0x00){
 8001e0e:	4b5f      	ldr	r3, [pc, #380]	; (8001f8c <read_sensors+0x184>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f040 80b7 	bne.w	8001f86 <read_sensors+0x17e>
		/*
		 * MPU9250
		 * */
		readAccelData(rawData_MPU9250);
 8001e18:	485d      	ldr	r0, [pc, #372]	; (8001f90 <read_sensors+0x188>)
 8001e1a:	f7fe fd41 	bl	80008a0 <readAccelData>

		ble_buffer[0 + buff_counter] = (rawData_MPU9250[0] & 0x00FF);
 8001e1e:	4b5c      	ldr	r3, [pc, #368]	; (8001f90 <read_sensors+0x188>)
 8001e20:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001e24:	4b5b      	ldr	r3, [pc, #364]	; (8001f94 <read_sensors+0x18c>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	b2c9      	uxtb	r1, r1
 8001e2c:	4b5a      	ldr	r3, [pc, #360]	; (8001f98 <read_sensors+0x190>)
 8001e2e:	5499      	strb	r1, [r3, r2]
		ble_buffer[1 + buff_counter] = ((rawData_MPU9250[0] >> 8) & 0x00FF);
 8001e30:	4b57      	ldr	r3, [pc, #348]	; (8001f90 <read_sensors+0x188>)
 8001e32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e36:	121b      	asrs	r3, r3, #8
 8001e38:	b21a      	sxth	r2, r3
 8001e3a:	4b56      	ldr	r3, [pc, #344]	; (8001f94 <read_sensors+0x18c>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	b2d1      	uxtb	r1, r2
 8001e42:	4a55      	ldr	r2, [pc, #340]	; (8001f98 <read_sensors+0x190>)
 8001e44:	54d1      	strb	r1, [r2, r3]

		ble_buffer[2 + buff_counter] = (rawData_MPU9250[1] & 0x00FF);
 8001e46:	4b52      	ldr	r3, [pc, #328]	; (8001f90 <read_sensors+0x188>)
 8001e48:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001e4c:	4b51      	ldr	r3, [pc, #324]	; (8001f94 <read_sensors+0x18c>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	3302      	adds	r3, #2
 8001e52:	b2d1      	uxtb	r1, r2
 8001e54:	4a50      	ldr	r2, [pc, #320]	; (8001f98 <read_sensors+0x190>)
 8001e56:	54d1      	strb	r1, [r2, r3]
		ble_buffer[3 + buff_counter] = ((rawData_MPU9250[1] >> 8) & 0x00FF);
 8001e58:	4b4d      	ldr	r3, [pc, #308]	; (8001f90 <read_sensors+0x188>)
 8001e5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e5e:	121b      	asrs	r3, r3, #8
 8001e60:	b21a      	sxth	r2, r3
 8001e62:	4b4c      	ldr	r3, [pc, #304]	; (8001f94 <read_sensors+0x18c>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	3303      	adds	r3, #3
 8001e68:	b2d1      	uxtb	r1, r2
 8001e6a:	4a4b      	ldr	r2, [pc, #300]	; (8001f98 <read_sensors+0x190>)
 8001e6c:	54d1      	strb	r1, [r2, r3]
		ble_buffer[4 + buff_counter] = (rawData_MPU9250[2] & 0x00FF);
 8001e6e:	4b48      	ldr	r3, [pc, #288]	; (8001f90 <read_sensors+0x188>)
 8001e70:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001e74:	4b47      	ldr	r3, [pc, #284]	; (8001f94 <read_sensors+0x18c>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	b2d1      	uxtb	r1, r2
 8001e7c:	4a46      	ldr	r2, [pc, #280]	; (8001f98 <read_sensors+0x190>)
 8001e7e:	54d1      	strb	r1, [r2, r3]
		ble_buffer[5 + buff_counter] = ((rawData_MPU9250[2] >> 8) & 0x00FF);
 8001e80:	4b43      	ldr	r3, [pc, #268]	; (8001f90 <read_sensors+0x188>)
 8001e82:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e86:	121b      	asrs	r3, r3, #8
 8001e88:	b21a      	sxth	r2, r3
 8001e8a:	4b42      	ldr	r3, [pc, #264]	; (8001f94 <read_sensors+0x18c>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	3305      	adds	r3, #5
 8001e90:	b2d1      	uxtb	r1, r2
 8001e92:	4a41      	ldr	r2, [pc, #260]	; (8001f98 <read_sensors+0x190>)
 8001e94:	54d1      	strb	r1, [r2, r3]
		/*
		 * MAX30100
		 * */
		//read_diodes(&IR, &RED);

		readFIFO(&RED, &IR);
 8001e96:	4941      	ldr	r1, [pc, #260]	; (8001f9c <read_sensors+0x194>)
 8001e98:	4841      	ldr	r0, [pc, #260]	; (8001fa0 <read_sensors+0x198>)
 8001e9a:	f7fe fc3d 	bl	8000718 <readFIFO>

		ble_buffer[6 + buff_counter] = (RED & 0x00FF);
 8001e9e:	4b40      	ldr	r3, [pc, #256]	; (8001fa0 <read_sensors+0x198>)
 8001ea0:	881a      	ldrh	r2, [r3, #0]
 8001ea2:	4b3c      	ldr	r3, [pc, #240]	; (8001f94 <read_sensors+0x18c>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	3306      	adds	r3, #6
 8001ea8:	b2d1      	uxtb	r1, r2
 8001eaa:	4a3b      	ldr	r2, [pc, #236]	; (8001f98 <read_sensors+0x190>)
 8001eac:	54d1      	strb	r1, [r2, r3]
		ble_buffer[7 + buff_counter] = ((RED >> 8) & 0x00FF);
 8001eae:	4b3c      	ldr	r3, [pc, #240]	; (8001fa0 <read_sensors+0x198>)
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	0a1b      	lsrs	r3, r3, #8
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	4b37      	ldr	r3, [pc, #220]	; (8001f94 <read_sensors+0x18c>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	3307      	adds	r3, #7
 8001ebc:	b2d1      	uxtb	r1, r2
 8001ebe:	4a36      	ldr	r2, [pc, #216]	; (8001f98 <read_sensors+0x190>)
 8001ec0:	54d1      	strb	r1, [r2, r3]
		ble_buffer[8 + buff_counter] = (IR & 0x00FF);
 8001ec2:	4b36      	ldr	r3, [pc, #216]	; (8001f9c <read_sensors+0x194>)
 8001ec4:	881a      	ldrh	r2, [r3, #0]
 8001ec6:	4b33      	ldr	r3, [pc, #204]	; (8001f94 <read_sensors+0x18c>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	3308      	adds	r3, #8
 8001ecc:	b2d1      	uxtb	r1, r2
 8001ece:	4a32      	ldr	r2, [pc, #200]	; (8001f98 <read_sensors+0x190>)
 8001ed0:	54d1      	strb	r1, [r2, r3]
		ble_buffer[9 + buff_counter] = ((IR >> 8) & 0x00FF);
 8001ed2:	4b32      	ldr	r3, [pc, #200]	; (8001f9c <read_sensors+0x194>)
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	0a1b      	lsrs	r3, r3, #8
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	4b2e      	ldr	r3, [pc, #184]	; (8001f94 <read_sensors+0x18c>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	3309      	adds	r3, #9
 8001ee0:	b2d1      	uxtb	r1, r2
 8001ee2:	4a2d      	ldr	r2, [pc, #180]	; (8001f98 <read_sensors+0x190>)
 8001ee4:	54d1      	strb	r1, [r2, r3]

		/*
		 * ADS1115
		 * */
		ADSwrite[0] = 0x01;
 8001ee6:	4b2f      	ldr	r3, [pc, #188]	; (8001fa4 <read_sensors+0x19c>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	701a      	strb	r2, [r3, #0]
	    ADSwrite[1] = 0xC1;// 11000001
 8001eec:	4b2d      	ldr	r3, [pc, #180]	; (8001fa4 <read_sensors+0x19c>)
 8001eee:	22c1      	movs	r2, #193	; 0xc1
 8001ef0:	705a      	strb	r2, [r3, #1]
	    ADSwrite[2] = 0x83; // 10000011
 8001ef2:	4b2c      	ldr	r3, [pc, #176]	; (8001fa4 <read_sensors+0x19c>)
 8001ef4:	2283      	movs	r2, #131	; 0x83
 8001ef6:	709a      	strb	r2, [r3, #2]
	    HAL_I2C_Master_Transmit(&hi2c3, ADS1115_ADDRESS<<1,ADSwrite,3,100);
 8001ef8:	2364      	movs	r3, #100	; 0x64
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	2303      	movs	r3, #3
 8001efe:	4a29      	ldr	r2, [pc, #164]	; (8001fa4 <read_sensors+0x19c>)
 8001f00:	2190      	movs	r1, #144	; 0x90
 8001f02:	4829      	ldr	r0, [pc, #164]	; (8001fa8 <read_sensors+0x1a0>)
 8001f04:	f001 fca4 	bl	8003850 <HAL_I2C_Master_Transmit>
	    ADSwrite[0] = 0x00;
 8001f08:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <read_sensors+0x19c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
	    HAL_I2C_Master_Transmit(&hi2c3, ADS1115_ADDRESS<<1,ADSwrite,1,100);
 8001f0e:	2364      	movs	r3, #100	; 0x64
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	2301      	movs	r3, #1
 8001f14:	4a23      	ldr	r2, [pc, #140]	; (8001fa4 <read_sensors+0x19c>)
 8001f16:	2190      	movs	r1, #144	; 0x90
 8001f18:	4823      	ldr	r0, [pc, #140]	; (8001fa8 <read_sensors+0x1a0>)
 8001f1a:	f001 fc99 	bl	8003850 <HAL_I2C_Master_Transmit>
	    HAL_Delay(20);
 8001f1e:	2014      	movs	r0, #20
 8001f20:	f001 f886 	bl	8003030 <HAL_Delay>
	    HAL_I2C_Master_Receive(&hi2c3, ADS1115_ADDRESS<<1,ADSwrite,2,100);
 8001f24:	2364      	movs	r3, #100	; 0x64
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	2302      	movs	r3, #2
 8001f2a:	4a1e      	ldr	r2, [pc, #120]	; (8001fa4 <read_sensors+0x19c>)
 8001f2c:	2190      	movs	r1, #144	; 0x90
 8001f2e:	481e      	ldr	r0, [pc, #120]	; (8001fa8 <read_sensors+0x1a0>)
 8001f30:	f001 fd82 	bl	8003a38 <HAL_I2C_Master_Receive>

		ble_buffer[10 + buff_counter] = ADSwrite[1];
 8001f34:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <read_sensors+0x18c>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	330a      	adds	r3, #10
 8001f3a:	4a1a      	ldr	r2, [pc, #104]	; (8001fa4 <read_sensors+0x19c>)
 8001f3c:	7851      	ldrb	r1, [r2, #1]
 8001f3e:	4a16      	ldr	r2, [pc, #88]	; (8001f98 <read_sensors+0x190>)
 8001f40:	54d1      	strb	r1, [r2, r3]
		ble_buffer[11 + buff_counter] = ADSwrite[0];
 8001f42:	4b14      	ldr	r3, [pc, #80]	; (8001f94 <read_sensors+0x18c>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	330b      	adds	r3, #11
 8001f48:	4a16      	ldr	r2, [pc, #88]	; (8001fa4 <read_sensors+0x19c>)
 8001f4a:	7811      	ldrb	r1, [r2, #0]
 8001f4c:	4a12      	ldr	r2, [pc, #72]	; (8001f98 <read_sensors+0x190>)
 8001f4e:	54d1      	strb	r1, [r2, r3]

		if(buff_counter == 36){
 8001f50:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <read_sensors+0x18c>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b24      	cmp	r3, #36	; 0x24
 8001f56:	d10a      	bne.n	8001f6e <read_sensors+0x166>
			buff_counter = 0;
 8001f58:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <read_sensors+0x18c>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]
			flag_buffer_full = 0x01;
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <read_sensors+0x184>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	701a      	strb	r2, [r3, #0]
			//HAL_TIM_Base_Stop_IT(&htim16);
			UTIL_SEQ_SetTask(1 << CFG_MY_TASK_NOTIFY_DATA, CFG_SCH_PRIO_0);
 8001f64:	2100      	movs	r1, #0
 8001f66:	2008      	movs	r0, #8
 8001f68:	f000 fb6a 	bl	8002640 <UTIL_SEQ_SetTask>
 8001f6c:	e008      	b.n	8001f80 <read_sensors+0x178>
		}else{
			buff_counter+=12;
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <read_sensors+0x18c>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	330c      	adds	r3, #12
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <read_sensors+0x18c>)
 8001f78:	701a      	strb	r2, [r3, #0]
			flag_buffer_full = 0x00;
 8001f7a:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <read_sensors+0x184>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	701a      	strb	r2, [r3, #0]
		}
		flag_reading_completed = 0x00;
 8001f80:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <read_sensors+0x1a4>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]
	}
}
 8001f86:	bf00      	nop
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	2000022d 	.word	0x2000022d
 8001f90:	200001f0 	.word	0x200001f0
 8001f94:	2000022c 	.word	0x2000022c
 8001f98:	200001fc 	.word	0x200001fc
 8001f9c:	200001f6 	.word	0x200001f6
 8001fa0:	200001f8 	.word	0x200001f8
 8001fa4:	200003e8 	.word	0x200003e8
 8001fa8:	20000350 	.word	0x20000350
 8001fac:	20000005 	.word	0x20000005

08001fb0 <get_buffer_values>:

void get_buffer_values(uint8_t* buff){
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < PAYLOAD_LENGTH; i++)
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	e00a      	b.n	8001fd4 <get_buffer_values+0x24>
		buff[i] = ble_buffer[i];
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	4909      	ldr	r1, [pc, #36]	; (8001fec <get_buffer_values+0x3c>)
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	440a      	add	r2, r1
 8001fca:	7812      	ldrb	r2, [r2, #0]
 8001fcc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < PAYLOAD_LENGTH; i++)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2b2f      	cmp	r3, #47	; 0x2f
 8001fd8:	ddf1      	ble.n	8001fbe <get_buffer_values+0xe>
	flag_buffer_full = 0x00;
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <get_buffer_values+0x40>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	701a      	strb	r2, [r3, #0]
	//HAL_TIM_Base_Start_IT(&htim16);
}
 8001fe0:	bf00      	nop
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	200001fc 	.word	0x200001fc
 8001ff0:	2000022d 	.word	0x2000022d

08001ff4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  if(htim == &htim16){
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a08      	ldr	r2, [pc, #32]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d108      	bne.n	8002016 <HAL_TIM_PeriodElapsedCallback+0x22>
	  if(APP_BLE_Get_Server_Connection_Status() == APP_BLE_CONNECTED_SERVER){
 8002004:	f008 fe44 	bl	800ac90 <APP_BLE_Get_Server_Connection_Status>
 8002008:	4603      	mov	r3, r0
 800200a:	2b05      	cmp	r3, #5
 800200c:	d103      	bne.n	8002016 <HAL_TIM_PeriodElapsedCallback+0x22>
		  UTIL_SEQ_SetTask(1 << READ_SENSORS_TASK, CFG_SCH_PRIO_0);
 800200e:	2100      	movs	r1, #0
 8002010:	2010      	movs	r0, #16
 8002012:	f000 fb15 	bl	8002640 <UTIL_SEQ_SetTask>
  }

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	200004d8 	.word	0x200004d8

08002024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0

}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8002068:	4b10      	ldr	r3, [pc, #64]	; (80020ac <MX_RTC_Init+0x48>)
 800206a:	4a11      	ldr	r2, [pc, #68]	; (80020b0 <MX_RTC_Init+0x4c>)
 800206c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800206e:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <MX_RTC_Init+0x48>)
 8002070:	2200      	movs	r2, #0
 8002072:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002074:	4b0d      	ldr	r3, [pc, #52]	; (80020ac <MX_RTC_Init+0x48>)
 8002076:	220f      	movs	r2, #15
 8002078:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800207a:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <MX_RTC_Init+0x48>)
 800207c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002080:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002082:	480a      	ldr	r0, [pc, #40]	; (80020ac <MX_RTC_Init+0x48>)
 8002084:	f003 ff10 	bl	8005ea8 <HAL_RTC_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 800208e:	f7ff ffc9 	bl	8002024 <Error_Handler>
  }
  /** Enable the WakeUp 
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002092:	2200      	movs	r2, #0
 8002094:	2100      	movs	r1, #0
 8002096:	4805      	ldr	r0, [pc, #20]	; (80020ac <MX_RTC_Init+0x48>)
 8002098:	f003 fff4 	bl	8006084 <HAL_RTCEx_SetWakeUpTimer>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_RTC_Init+0x42>
  {
    Error_Handler();
 80020a2:	f7ff ffbf 	bl	8002024 <Error_Handler>
  }

}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	200003ec 	.word	0x200003ec
 80020b0:	40002800 	.word	0x40002800

080020b4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a04      	ldr	r2, [pc, #16]	; (80020d4 <HAL_RTC_MspInit+0x20>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d101      	bne.n	80020ca <HAL_RTC_MspInit+0x16>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80020c6:	f7ff ffbb 	bl	8002040 <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40002800 	.word	0x40002800

080020d8 <LL_AHB2_GRP1_EnableClock>:
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4013      	ands	r3, r2
 80020fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020fc:	68fb      	ldr	r3, [r7, #12]
}
 80020fe:	bf00      	nop
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <LL_APB1_GRP1_EnableClock>:
{
 800210a:	b480      	push	{r7}
 800210c:	b085      	sub	sp, #20
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002116:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002118:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4313      	orrs	r3, r2
 8002120:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002126:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4013      	ands	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800212e:	68fb      	ldr	r3, [r7, #12]
}
 8002130:	bf00      	nop
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002148:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800214a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4313      	orrs	r3, r2
 8002152:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002158:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4013      	ands	r3, r2
 800215e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002160:	68fb      	ldr	r3, [r7, #12]
}
 8002162:	bf00      	nop
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
	...

08002170 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002174:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <MX_SPI1_Init+0x74>)
 8002176:	4a1c      	ldr	r2, [pc, #112]	; (80021e8 <MX_SPI1_Init+0x78>)
 8002178:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800217a:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <MX_SPI1_Init+0x74>)
 800217c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002180:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002182:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <MX_SPI1_Init+0x74>)
 8002184:	2200      	movs	r2, #0
 8002186:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002188:	4b16      	ldr	r3, [pc, #88]	; (80021e4 <MX_SPI1_Init+0x74>)
 800218a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800218e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002190:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <MX_SPI1_Init+0x74>)
 8002192:	2202      	movs	r2, #2
 8002194:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002196:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <MX_SPI1_Init+0x74>)
 8002198:	2201      	movs	r2, #1
 800219a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800219c:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <MX_SPI1_Init+0x74>)
 800219e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80021a4:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <MX_SPI1_Init+0x74>)
 80021a6:	2228      	movs	r2, #40	; 0x28
 80021a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021aa:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <MX_SPI1_Init+0x74>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <MX_SPI1_Init+0x74>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021b6:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <MX_SPI1_Init+0x74>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80021bc:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <MX_SPI1_Init+0x74>)
 80021be:	2207      	movs	r2, #7
 80021c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021c2:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <MX_SPI1_Init+0x74>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80021c8:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <MX_SPI1_Init+0x74>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021ce:	4805      	ldr	r0, [pc, #20]	; (80021e4 <MX_SPI1_Init+0x74>)
 80021d0:	f003 fff3 	bl	80061ba <HAL_SPI_Init>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80021da:	f7ff ff23 	bl	8002024 <Error_Handler>
  }

}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000474 	.word	0x20000474
 80021e8:	40013000 	.word	0x40013000

080021ec <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80021f0:	4b1b      	ldr	r3, [pc, #108]	; (8002260 <MX_SPI2_Init+0x74>)
 80021f2:	4a1c      	ldr	r2, [pc, #112]	; (8002264 <MX_SPI2_Init+0x78>)
 80021f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80021f6:	4b1a      	ldr	r3, [pc, #104]	; (8002260 <MX_SPI2_Init+0x74>)
 80021f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80021fe:	4b18      	ldr	r3, [pc, #96]	; (8002260 <MX_SPI2_Init+0x74>)
 8002200:	2200      	movs	r2, #0
 8002202:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002204:	4b16      	ldr	r3, [pc, #88]	; (8002260 <MX_SPI2_Init+0x74>)
 8002206:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800220a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800220c:	4b14      	ldr	r3, [pc, #80]	; (8002260 <MX_SPI2_Init+0x74>)
 800220e:	2202      	movs	r2, #2
 8002210:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002212:	4b13      	ldr	r3, [pc, #76]	; (8002260 <MX_SPI2_Init+0x74>)
 8002214:	2201      	movs	r2, #1
 8002216:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002218:	4b11      	ldr	r3, [pc, #68]	; (8002260 <MX_SPI2_Init+0x74>)
 800221a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800221e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002220:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <MX_SPI2_Init+0x74>)
 8002222:	2228      	movs	r2, #40	; 0x28
 8002224:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002226:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <MX_SPI2_Init+0x74>)
 8002228:	2200      	movs	r2, #0
 800222a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800222c:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <MX_SPI2_Init+0x74>)
 800222e:	2200      	movs	r2, #0
 8002230:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002232:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <MX_SPI2_Init+0x74>)
 8002234:	2200      	movs	r2, #0
 8002236:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002238:	4b09      	ldr	r3, [pc, #36]	; (8002260 <MX_SPI2_Init+0x74>)
 800223a:	2207      	movs	r2, #7
 800223c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800223e:	4b08      	ldr	r3, [pc, #32]	; (8002260 <MX_SPI2_Init+0x74>)
 8002240:	2200      	movs	r2, #0
 8002242:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002244:	4b06      	ldr	r3, [pc, #24]	; (8002260 <MX_SPI2_Init+0x74>)
 8002246:	2200      	movs	r2, #0
 8002248:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800224a:	4805      	ldr	r0, [pc, #20]	; (8002260 <MX_SPI2_Init+0x74>)
 800224c:	f003 ffb5 	bl	80061ba <HAL_SPI_Init>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002256:	f7ff fee5 	bl	8002024 <Error_Handler>
  }

}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000410 	.word	0x20000410
 8002264:	40003800 	.word	0x40003800

08002268 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002270:	f107 030c 	add.w	r3, r7, #12
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a1e      	ldr	r2, [pc, #120]	; (8002300 <HAL_SPI_MspInit+0x98>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d118      	bne.n	80022bc <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800228a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800228e:	f7ff ff55 	bl	800213c <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002292:	2001      	movs	r0, #1
 8002294:	f7ff ff20 	bl	80020d8 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002298:	23e0      	movs	r3, #224	; 0xe0
 800229a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229c:	2302      	movs	r3, #2
 800229e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022a0:	2301      	movs	r3, #1
 80022a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022a4:	2302      	movs	r3, #2
 80022a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022a8:	2305      	movs	r3, #5
 80022aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ac:	f107 030c 	add.w	r3, r7, #12
 80022b0:	4619      	mov	r1, r3
 80022b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022b6:	f001 f875 	bl	80033a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80022ba:	e01c      	b.n	80022f6 <HAL_SPI_MspInit+0x8e>
  else if(spiHandle->Instance==SPI2)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a10      	ldr	r2, [pc, #64]	; (8002304 <HAL_SPI_MspInit+0x9c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d117      	bne.n	80022f6 <HAL_SPI_MspInit+0x8e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80022ca:	f7ff ff1e 	bl	800210a <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ce:	2002      	movs	r0, #2
 80022d0:	f7ff ff02 	bl	80020d8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80022d4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80022d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022e6:	2305      	movs	r3, #5
 80022e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ea:	f107 030c 	add.w	r3, r7, #12
 80022ee:	4619      	mov	r1, r3
 80022f0:	4805      	ldr	r0, [pc, #20]	; (8002308 <HAL_SPI_MspInit+0xa0>)
 80022f2:	f001 f857 	bl	80033a4 <HAL_GPIO_Init>
}
 80022f6:	bf00      	nop
 80022f8:	3720      	adds	r7, #32
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40013000 	.word	0x40013000
 8002304:	40003800 	.word	0x40003800
 8002308:	48000400 	.word	0x48000400

0800230c <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8002310:	4b05      	ldr	r3, [pc, #20]	; (8002328 <UTIL_LPM_Init+0x1c>)
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8002316:	4b05      	ldr	r3, [pc, #20]	; (800232c <UTIL_LPM_Init+0x20>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	20000230 	.word	0x20000230
 800232c:	20000234 	.word	0x20000234

08002330 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800233c:	f3ef 8310 	mrs	r3, PRIMASK
 8002340:	613b      	str	r3, [r7, #16]
  return(result);
 8002342:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8002344:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002346:	b672      	cpsid	i
  
  switch(state)
 8002348:	78fb      	ldrb	r3, [r7, #3]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d009      	beq.n	8002362 <UTIL_LPM_SetOffMode+0x32>
 800234e:	2b01      	cmp	r3, #1
 8002350:	d000      	beq.n	8002354 <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 8002352:	e00e      	b.n	8002372 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8002354:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <UTIL_LPM_SetOffMode+0x58>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4313      	orrs	r3, r2
 800235c:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <UTIL_LPM_SetOffMode+0x58>)
 800235e:	6013      	str	r3, [r2, #0]
      break;
 8002360:	e007      	b.n	8002372 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	43da      	mvns	r2, r3
 8002366:	4b08      	ldr	r3, [pc, #32]	; (8002388 <UTIL_LPM_SetOffMode+0x58>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4013      	ands	r3, r2
 800236c:	4a06      	ldr	r2, [pc, #24]	; (8002388 <UTIL_LPM_SetOffMode+0x58>)
 800236e:	6013      	str	r3, [r2, #0]
      break;
 8002370:	bf00      	nop
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800237c:	bf00      	nop
 800237e:	371c      	adds	r7, #28
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	20000234 	.word	0x20000234

0800238c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002392:	f3ef 8310 	mrs	r3, PRIMASK
 8002396:	60bb      	str	r3, [r7, #8]
  return(result);
 8002398:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800239a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800239c:	b672      	cpsid	i

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800239e:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <UTIL_LPM_EnterLowPower+0x5c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d006      	beq.n	80023b4 <UTIL_LPM_EnterLowPower+0x28>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 80023a6:	4b11      	ldr	r3, [pc, #68]	; (80023ec <UTIL_LPM_EnterLowPower+0x60>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 80023ac:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <UTIL_LPM_EnterLowPower+0x60>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	4798      	blx	r3
 80023b2:	e010      	b.n	80023d6 <UTIL_LPM_EnterLowPower+0x4a>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 80023b4:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <UTIL_LPM_EnterLowPower+0x64>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d006      	beq.n	80023ca <UTIL_LPM_EnterLowPower+0x3e>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <UTIL_LPM_EnterLowPower+0x60>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 80023c2:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <UTIL_LPM_EnterLowPower+0x60>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	4798      	blx	r3
 80023c8:	e005      	b.n	80023d6 <UTIL_LPM_EnterLowPower+0x4a>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 80023ca:	4b08      	ldr	r3, [pc, #32]	; (80023ec <UTIL_LPM_EnterLowPower+0x60>)
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <UTIL_LPM_EnterLowPower+0x60>)
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	4798      	blx	r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80023e0:	bf00      	nop
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20000230 	.word	0x20000230
 80023ec:	0800b718 	.word	0x0800b718
 80023f0:	20000234 	.word	0x20000234

080023f4 <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode( void )
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterOffMode */

/* USER CODE END PWR_EnterOffMode */
}
 80023f8:	bf00      	nop
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode( void )
{
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode */

/* USER CODE END PWR_ExitOffMode */
}
 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode( void )
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterStopMode */

/* USER CODE END PWR_EnterStopMode */
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode( void )
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitStopMode */

/* USER CODE END PWR_ExitStopMode */
}
 8002422:	bf00      	nop
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode( void )
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode */

/* USER CODE END PWR_EnterSleepMode */
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode( void )
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode */

/* USER CODE END PWR_ExitSleepMode */
}
 800243e:	bf00      	nop
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t mask_bm )
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08c      	sub	sp, #48	; 0x30
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8002450:	4b63      	ldr	r3, [pc, #396]	; (80025e0 <UTIL_SEQ_Run+0x198>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= mask_bm;
 8002456:	4b62      	ldr	r3, [pc, #392]	; (80025e0 <UTIL_SEQ_Run+0x198>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4013      	ands	r3, r2
 800245e:	4a60      	ldr	r2, [pc, #384]	; (80025e0 <UTIL_SEQ_Run+0x198>)
 8002460:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 8002462:	e082      	b.n	800256a <UTIL_SEQ_Run+0x122>
  {
    counter = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 8002468:	e002      	b.n	8002470 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 800246a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246c:	3301      	adds	r3, #1
 800246e:	62fb      	str	r3, [r7, #44]	; 0x2c
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 8002470:	4a5c      	ldr	r2, [pc, #368]	; (80025e4 <UTIL_SEQ_Run+0x19c>)
 8002472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002474:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002478:	4b5b      	ldr	r3, [pc, #364]	; (80025e8 <UTIL_SEQ_Run+0x1a0>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	401a      	ands	r2, r3
 800247e:	4b58      	ldr	r3, [pc, #352]	; (80025e0 <UTIL_SEQ_Run+0x198>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4013      	ands	r3, r2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0f0      	beq.n	800246a <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 8002488:	4a56      	ldr	r2, [pc, #344]	; (80025e4 <UTIL_SEQ_Run+0x19c>)
 800248a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002490:	4b55      	ldr	r3, [pc, #340]	; (80025e8 <UTIL_SEQ_Run+0x1a0>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	401a      	ands	r2, r3
 8002496:	4b52      	ldr	r3, [pc, #328]	; (80025e0 <UTIL_SEQ_Run+0x198>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4013      	ands	r3, r2
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if (!(TaskPrio[counter].round_robin & current_task_set))
 800249e:	4a51      	ldr	r2, [pc, #324]	; (80025e4 <UTIL_SEQ_Run+0x19c>)
 80024a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	4413      	add	r3, r2
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	4013      	ands	r3, r2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d106      	bne.n	80024be <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80024b0:	4a4c      	ldr	r2, [pc, #304]	; (80025e4 <UTIL_SEQ_Run+0x19c>)
 80024b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	4413      	add	r3, r2
 80024b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024bc:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = bit_position(current_task_set & TaskPrio[counter].round_robin);
 80024be:	4a49      	ldr	r2, [pc, #292]	; (80025e4 <UTIL_SEQ_Run+0x19c>)
 80024c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	4413      	add	r3, r2
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	4013      	ands	r3, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 f97d 	bl	80027cc <bit_position>
 80024d2:	4602      	mov	r2, r0
 80024d4:	4b45      	ldr	r3, [pc, #276]	; (80025ec <UTIL_SEQ_Run+0x1a4>)
 80024d6:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1 << (CurrentTaskIdx));
 80024d8:	4a42      	ldr	r2, [pc, #264]	; (80025e4 <UTIL_SEQ_Run+0x19c>)
 80024da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4413      	add	r3, r2
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	4a42      	ldr	r2, [pc, #264]	; (80025ec <UTIL_SEQ_Run+0x1a4>)
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	2101      	movs	r1, #1
 80024e8:	fa01 f202 	lsl.w	r2, r1, r2
 80024ec:	43d2      	mvns	r2, r2
 80024ee:	401a      	ands	r2, r3
 80024f0:	493c      	ldr	r1, [pc, #240]	; (80025e4 <UTIL_SEQ_Run+0x19c>)
 80024f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	440b      	add	r3, r1
 80024f8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024fa:	f3ef 8310 	mrs	r3, PRIMASK
 80024fe:	61bb      	str	r3, [r7, #24]
  return(result);
 8002500:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8002502:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8002504:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1 << (CurrentTaskIdx));
 8002506:	4b39      	ldr	r3, [pc, #228]	; (80025ec <UTIL_SEQ_Run+0x1a4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2201      	movs	r2, #1
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	461a      	mov	r2, r3
 8002514:	4b36      	ldr	r3, [pc, #216]	; (80025f0 <UTIL_SEQ_Run+0x1a8>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4013      	ands	r3, r2
 800251a:	4a35      	ldr	r2, [pc, #212]	; (80025f0 <UTIL_SEQ_Run+0x1a8>)
 800251c:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 800251e:	2302      	movs	r3, #2
 8002520:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002522:	e014      	b.n	800254e <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1].priority &= ~(1 << (CurrentTaskIdx));
 8002524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002526:	3b01      	subs	r3, #1
 8002528:	4a2e      	ldr	r2, [pc, #184]	; (80025e4 <UTIL_SEQ_Run+0x19c>)
 800252a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800252e:	4b2f      	ldr	r3, [pc, #188]	; (80025ec <UTIL_SEQ_Run+0x1a4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2101      	movs	r1, #1
 8002534:	fa01 f303 	lsl.w	r3, r1, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	4619      	mov	r1, r3
 800253c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253e:	3b01      	subs	r3, #1
 8002540:	400a      	ands	r2, r1
 8002542:	4928      	ldr	r1, [pc, #160]	; (80025e4 <UTIL_SEQ_Run+0x19c>)
 8002544:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 8002548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254a:	3b01      	subs	r3, #1
 800254c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800254e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1e7      	bne.n	8002524 <UTIL_SEQ_Run+0xdc>
 8002554:	6a3b      	ldr	r3, [r7, #32]
 8002556:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800255e:	4b23      	ldr	r3, [pc, #140]	; (80025ec <UTIL_SEQ_Run+0x1a4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a24      	ldr	r2, [pc, #144]	; (80025f4 <UTIL_SEQ_Run+0x1ac>)
 8002564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002568:	4798      	blx	r3
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 800256a:	4b21      	ldr	r3, [pc, #132]	; (80025f0 <UTIL_SEQ_Run+0x1a8>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	4b1e      	ldr	r3, [pc, #120]	; (80025e8 <UTIL_SEQ_Run+0x1a0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	401a      	ands	r2, r3
 8002574:	4b1a      	ldr	r3, [pc, #104]	; (80025e0 <UTIL_SEQ_Run+0x198>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4013      	ands	r3, r2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d007      	beq.n	800258e <UTIL_SEQ_Run+0x146>
 800257e:	4b1e      	ldr	r3, [pc, #120]	; (80025f8 <UTIL_SEQ_Run+0x1b0>)
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	4b1e      	ldr	r3, [pc, #120]	; (80025fc <UTIL_SEQ_Run+0x1b4>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4013      	ands	r3, r2
 8002588:	2b00      	cmp	r3, #0
 800258a:	f43f af6b 	beq.w	8002464 <UTIL_SEQ_Run+0x1c>
  }

  UTIL_SEQ_PreIdle( );
 800258e:	f000 f90f 	bl	80027b0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002592:	f3ef 8310 	mrs	r3, PRIMASK
 8002596:	613b      	str	r3, [r7, #16]
  return(result);
 8002598:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800259a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800259c:	b672      	cpsid	i
  if (!((TaskSet & TaskMask & SuperMask) || (EvtSet & EvtWaited)))
 800259e:	4b14      	ldr	r3, [pc, #80]	; (80025f0 <UTIL_SEQ_Run+0x1a8>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <UTIL_SEQ_Run+0x1a0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	401a      	ands	r2, r3
 80025a8:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <UTIL_SEQ_Run+0x198>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d108      	bne.n	80025c4 <UTIL_SEQ_Run+0x17c>
 80025b2:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <UTIL_SEQ_Run+0x1b0>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	4b11      	ldr	r3, [pc, #68]	; (80025fc <UTIL_SEQ_Run+0x1b4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4013      	ands	r3, r2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <UTIL_SEQ_Run+0x17c>
  {
    UTIL_SEQ_Idle( );
 80025c0:	f7fe fabd 	bl	8000b3e <UTIL_SEQ_Idle>
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  
  UTIL_SEQ_PostIdle( );
 80025ce:	f000 f8f6 	bl	80027be <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80025d2:	4a03      	ldr	r2, [pc, #12]	; (80025e0 <UTIL_SEQ_Run+0x198>)
 80025d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d6:	6013      	str	r3, [r2, #0]

  return;
 80025d8:	bf00      	nop
}
 80025da:	3730      	adds	r7, #48	; 0x30
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	2000000c 	.word	0x2000000c
 80025e4:	200002c8 	.word	0x200002c8
 80025e8:	20000008 	.word	0x20000008
 80025ec:	20000244 	.word	0x20000244
 80025f0:	20000238 	.word	0x20000238
 80025f4:	20000248 	.word	0x20000248
 80025f8:	2000023c 	.word	0x2000023c
 80025fc:	20000240 	.word	0x20000240

08002600 <UTIL_SEQ_RegTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_RegTask( UTIL_SEQ_bm_t task_id_bm , uint32_t flags, void (*task)( void ) )
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800260c:	f3ef 8310 	mrs	r3, PRIMASK
 8002610:	617b      	str	r3, [r7, #20]
  return(result);
 8002612:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8002614:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8002616:	b672      	cpsid	i

  TaskCb[bit_position(task_id_bm)] = task;
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 f8d7 	bl	80027cc <bit_position>
 800261e:	4601      	mov	r1, r0
 8002620:	4a06      	ldr	r2, [pc, #24]	; (800263c <UTIL_SEQ_RegTask+0x3c>)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8002632:	bf00      	nop
}
 8002634:	3720      	adds	r7, #32
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000248 	.word	0x20000248

08002640 <UTIL_SEQ_SetTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t task_id_bm , uint32_t task_prio )
{
 8002640:	b480      	push	{r7}
 8002642:	b087      	sub	sp, #28
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800264a:	f3ef 8310 	mrs	r3, PRIMASK
 800264e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002650:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8002652:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002654:	b672      	cpsid	i

  TaskSet |= task_id_bm;
 8002656:	4b0d      	ldr	r3, [pc, #52]	; (800268c <UTIL_SEQ_SetTask+0x4c>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4313      	orrs	r3, r2
 800265e:	4a0b      	ldr	r2, [pc, #44]	; (800268c <UTIL_SEQ_SetTask+0x4c>)
 8002660:	6013      	str	r3, [r2, #0]
  TaskPrio[task_prio].priority |= task_id_bm;
 8002662:	4a0b      	ldr	r2, [pc, #44]	; (8002690 <UTIL_SEQ_SetTask+0x50>)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	431a      	orrs	r2, r3
 800266e:	4908      	ldr	r1, [pc, #32]	; (8002690 <UTIL_SEQ_SetTask+0x50>)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8002680:	bf00      	nop
}
 8002682:	371c      	adds	r7, #28
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	20000238 	.word	0x20000238
 8002690:	200002c8 	.word	0x200002c8

08002694 <UTIL_SEQ_PauseTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t task_id_bm )
{
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800269c:	f3ef 8310 	mrs	r3, PRIMASK
 80026a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80026a2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80026a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80026a6:	b672      	cpsid	i

  TaskMask &= (~task_id_bm);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	43da      	mvns	r2, r3
 80026ac:	4b07      	ldr	r3, [pc, #28]	; (80026cc <UTIL_SEQ_PauseTask+0x38>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4013      	ands	r3, r2
 80026b2:	4a06      	ldr	r2, [pc, #24]	; (80026cc <UTIL_SEQ_PauseTask+0x38>)
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80026c0:	bf00      	nop
}
 80026c2:	371c      	adds	r7, #28
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	20000008 	.word	0x20000008

080026d0 <UTIL_SEQ_ResumeTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t task_id_bm )
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026d8:	f3ef 8310 	mrs	r3, PRIMASK
 80026dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80026de:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80026e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80026e2:	b672      	cpsid	i

  TaskMask |= task_id_bm;
 80026e4:	4b08      	ldr	r3, [pc, #32]	; (8002708 <UTIL_SEQ_ResumeTask+0x38>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	4a06      	ldr	r2, [pc, #24]	; (8002708 <UTIL_SEQ_ResumeTask+0x38>)
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80026fa:	bf00      	nop
}
 80026fc:	371c      	adds	r7, #28
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	20000008 	.word	0x20000008

0800270c <UTIL_SEQ_SetEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002714:	f3ef 8310 	mrs	r3, PRIMASK
 8002718:	60fb      	str	r3, [r7, #12]
  return(result);
 800271a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800271c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800271e:	b672      	cpsid	i

  EvtSet |= evt_id_bm;
 8002720:	4b08      	ldr	r3, [pc, #32]	; (8002744 <UTIL_SEQ_SetEvt+0x38>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4313      	orrs	r3, r2
 8002728:	4a06      	ldr	r2, [pc, #24]	; (8002744 <UTIL_SEQ_SetEvt+0x38>)
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8002736:	bf00      	nop
}
 8002738:	371c      	adds	r7, #28
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	2000023c 	.word	0x2000023c

08002748 <UTIL_SEQ_WaitEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_WaitEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_id_bm;

  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_id_bm = (1 << CurrentTaskIdx);
 8002750:	4b14      	ldr	r3, [pc, #80]	; (80027a4 <UTIL_SEQ_WaitEvt+0x5c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2201      	movs	r2, #1
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	60fb      	str	r3, [r7, #12]

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800275c:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <UTIL_SEQ_WaitEvt+0x60>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	60bb      	str	r3, [r7, #8]
  EvtWaited = evt_id_bm;
 8002762:	4a11      	ldr	r2, [pc, #68]	; (80027a8 <UTIL_SEQ_WaitEvt+0x60>)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again fro the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while((EvtSet & EvtWaited) == 0)
 8002768:	e005      	b.n	8002776 <UTIL_SEQ_WaitEvt+0x2e>
  {
    UTIL_SEQ_EvtIdle(current_task_id_bm, EvtWaited);
 800276a:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <UTIL_SEQ_WaitEvt+0x60>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4619      	mov	r1, r3
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f7fe f9ea 	bl	8000b4a <UTIL_SEQ_EvtIdle>
  while((EvtSet & EvtWaited) == 0)
 8002776:	4b0d      	ldr	r3, [pc, #52]	; (80027ac <UTIL_SEQ_WaitEvt+0x64>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <UTIL_SEQ_WaitEvt+0x60>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0f2      	beq.n	800276a <UTIL_SEQ_WaitEvt+0x22>
  }
  EvtSet &= (~EvtWaited);
 8002784:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <UTIL_SEQ_WaitEvt+0x60>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	43da      	mvns	r2, r3
 800278a:	4b08      	ldr	r3, [pc, #32]	; (80027ac <UTIL_SEQ_WaitEvt+0x64>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4013      	ands	r3, r2
 8002790:	4a06      	ldr	r2, [pc, #24]	; (80027ac <UTIL_SEQ_WaitEvt+0x64>)
 8002792:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 8002794:	4a04      	ldr	r2, [pc, #16]	; (80027a8 <UTIL_SEQ_WaitEvt+0x60>)
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	6013      	str	r3, [r2, #0]

  return;
 800279a:	bf00      	nop
}
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000244 	.word	0x20000244
 80027a8:	20000240 	.word	0x20000240
 80027ac:	2000023c 	.word	0x2000023c

080027b0 <UTIL_SEQ_PreIdle>:
   */
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80027b4:	bf00      	nop
}
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80027be:	b480      	push	{r7}
 80027c0:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80027c2:	bf00      	nop
}
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <bit_position>:

#if( __CORTEX_M == 0)
static const uint8_t clz_table_4bit[16] = { 4, 3, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };	
static uint32_t bit_position(uint32_t value)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]

  uint32_t n = 0;
 80027d4:	2300      	movs	r3, #0
 80027d6:	60fb      	str	r3, [r7, #12]

  if ((value & 0xFFFF0000) == 0)  { n  = 16; value <<= 16;  }
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	0c1b      	lsrs	r3, r3, #16
 80027dc:	041b      	lsls	r3, r3, #16
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d104      	bne.n	80027ec <bit_position+0x20>
 80027e2:	2310      	movs	r3, #16
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	041b      	lsls	r3, r3, #16
 80027ea:	607b      	str	r3, [r7, #4]
  if ((value & 0xFF000000) == 0)  { n +=  8; value <<=  8;  }
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d105      	bne.n	8002802 <bit_position+0x36>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	3308      	adds	r3, #8
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	021b      	lsls	r3, r3, #8
 8002800:	607b      	str	r3, [r7, #4]
  if ((value & 0xF0000000) == 0)  { n +=  4; value <<=  4;  }
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d105      	bne.n	8002818 <bit_position+0x4c>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	3304      	adds	r3, #4
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	011b      	lsls	r3, r3, #4
 8002816:	607b      	str	r3, [r7, #4]

  n += (uint32_t)clz_table_4bit[value >> (32-4)];
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	0f1b      	lsrs	r3, r3, #28
 800281c:	4a07      	ldr	r2, [pc, #28]	; (800283c <bit_position+0x70>)
 800281e:	5cd3      	ldrb	r3, [r2, r3]
 8002820:	461a      	mov	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4413      	add	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]

  return (31-n);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f1c3 031f 	rsb	r3, r3, #31
}
 800282e:	4618      	mov	r0, r3
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	0800b730 	.word	0x0800b730

08002840 <LL_RCC_HSE_SetCapacitorTuning>:
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8002848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800284c:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800284e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8002852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002856:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800285a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	021b      	lsls	r3, r3, #8
 8002862:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002866:	4313      	orrs	r3, r2
 8002868:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	cafecafe 	.word	0xcafecafe

0800287c <LL_AHB3_GRP1_EnableClock>:
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002888:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800288a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4313      	orrs	r3, r2
 8002892:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002898:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4013      	ands	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028a0:	68fb      	ldr	r3, [r7, #12]
}
 80028a2:	bf00      	nop
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b082      	sub	sp, #8
 80028b2:	af00      	add	r7, sp, #0

	OTP_ID0_t * p_otp;
	/**
	* Read HSE_Tuning from OTP
	*/
	p_otp = (OTP_ID0_t *) OTP_Read(0);
 80028b4:	2000      	movs	r0, #0
 80028b6:	f007 fa8f 	bl	8009dd8 <OTP_Read>
 80028ba:	6078      	str	r0, [r7, #4]
	if (p_otp)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d004      	beq.n	80028cc <HAL_MspInit+0x1e>
	{
		LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	799b      	ldrb	r3, [r3, #6]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff ffba 	bl	8002840 <LL_RCC_HSE_SetCapacitorTuning>
	}
  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80028cc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80028d0:	f7ff ffd4 	bl	800287c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80028d4:	2200      	movs	r2, #0
 80028d6:	2100      	movs	r1, #0
 80028d8:	202e      	movs	r0, #46	; 0x2e
 80028da:	f000 fd04 	bl	80032e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80028de:	202e      	movs	r0, #46	; 0x2e
 80028e0:	f000 fd1b 	bl	800331a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
	...

080028fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8002900:	2102      	movs	r1, #2
 8002902:	4802      	ldr	r0, [pc, #8]	; (800290c <HardFault_Handler+0x10>)
 8002904:	f000 fed6 	bl	80036b4 <HAL_GPIO_TogglePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002908:	e7fe      	b.n	8002908 <HardFault_Handler+0xc>
 800290a:	bf00      	nop
 800290c:	48000400 	.word	0x48000400

08002910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002914:	e7fe      	b.n	8002914 <MemManage_Handler+0x4>

08002916 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002916:	b480      	push	{r7}
 8002918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800291a:	e7fe      	b.n	800291a <BusFault_Handler+0x4>

0800291c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002920:	e7fe      	b.n	8002920 <UsageFault_Handler+0x4>

08002922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002922:	b480      	push	{r7}
 8002924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800293e:	b480      	push	{r7}
 8002940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002950:	f000 fb44 	bl	8002fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002954:	bf00      	nop
 8002956:	bd80      	pop	{r7, pc}

08002958 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800295c:	4802      	ldr	r0, [pc, #8]	; (8002968 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800295e:	f004 fb21 	bl	8006fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	200004d8 	.word	0x200004d8

0800296c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002970:	f000 feba 	bl	80036e8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002974:	bf00      	nop
 8002976:	bd80      	pop	{r7, pc}

08002978 <RTC_WKUP_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
* @brief This function handles RTC wake-up interrupt through EXTI line 19.
*/
void RTC_WKUP_IRQHandler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
	HW_TS_RTC_Wakeup_Handler();
 800297c:	f7fe fcf8 	bl	8001370 <HW_TS_RTC_Wakeup_Handler>
}
 8002980:	bf00      	nop
 8002982:	bd80      	pop	{r7, pc}

08002984 <IPCC_C1_RX_IRQHandler>:
/**
* @brief This function handles IPCC RX occupied interrupt.
*/
void IPCC_C1_RX_IRQHandler(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
	HW_IPCC_Rx_Handler();
 8002988:	f008 fd00 	bl	800b38c <HW_IPCC_Rx_Handler>
}
 800298c:	bf00      	nop
 800298e:	bd80      	pop	{r7, pc}

08002990 <IPCC_C1_TX_IRQHandler>:
/**
* @brief This function handles IPCC TX free interrupt.
*/
void IPCC_C1_TX_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
	HW_IPCC_Tx_Handler();
 8002994:	f008 fd32 	bl	800b3fc <HW_IPCC_Tx_Handler>
}
 8002998:	bf00      	nop
 800299a:	bd80      	pop	{r7, pc}

0800299c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80029a0:	4b26      	ldr	r3, [pc, #152]	; (8002a3c <SystemInit+0xa0>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80029a6:	4b25      	ldr	r3, [pc, #148]	; (8002a3c <SystemInit+0xa0>)
 80029a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ac:	4a23      	ldr	r2, [pc, #140]	; (8002a3c <SystemInit+0xa0>)
 80029ae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80029b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80029c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ca:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80029ce:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80029d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029da:	4b19      	ldr	r3, [pc, #100]	; (8002a40 <SystemInit+0xa4>)
 80029dc:	4013      	ands	r3, r2
 80029de:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80029e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029ec:	f023 0305 	bic.w	r3, r3, #5
 80029f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80029f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a00:	f023 0301 	bic.w	r3, r3, #1
 8002a04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a0c:	4a0d      	ldr	r2, [pc, #52]	; (8002a44 <SystemInit+0xa8>)
 8002a0e:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a14:	4a0b      	ldr	r2, [pc, #44]	; (8002a44 <SystemInit+0xa8>)
 8002a16:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a26:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	619a      	str	r2, [r3, #24]
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	e000ed00 	.word	0xe000ed00
 8002a40:	faf6fefb 	.word	0xfaf6fefb
 8002a44:	22041000 	.word	0x22041000

08002a48 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b087      	sub	sp, #28
 8002a4c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8002a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	4a47      	ldr	r2, [pc, #284]	; (8002b78 <SystemCoreClockUpdate+0x130>)
 8002a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a60:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 030c 	and.w	r3, r3, #12
 8002a6c:	2b0c      	cmp	r3, #12
 8002a6e:	d867      	bhi.n	8002b40 <SystemCoreClockUpdate+0xf8>
 8002a70:	a201      	add	r2, pc, #4	; (adr r2, 8002a78 <SystemCoreClockUpdate+0x30>)
 8002a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a76:	bf00      	nop
 8002a78:	08002aad 	.word	0x08002aad
 8002a7c:	08002b41 	.word	0x08002b41
 8002a80:	08002b41 	.word	0x08002b41
 8002a84:	08002b41 	.word	0x08002b41
 8002a88:	08002ab5 	.word	0x08002ab5
 8002a8c:	08002b41 	.word	0x08002b41
 8002a90:	08002b41 	.word	0x08002b41
 8002a94:	08002b41 	.word	0x08002b41
 8002a98:	08002abd 	.word	0x08002abd
 8002a9c:	08002b41 	.word	0x08002b41
 8002aa0:	08002b41 	.word	0x08002b41
 8002aa4:	08002b41 	.word	0x08002b41
 8002aa8:	08002ac5 	.word	0x08002ac5
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8002aac:	4a33      	ldr	r2, [pc, #204]	; (8002b7c <SystemCoreClockUpdate+0x134>)
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	6013      	str	r3, [r2, #0]
      break;
 8002ab2:	e049      	b.n	8002b48 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8002ab4:	4b31      	ldr	r3, [pc, #196]	; (8002b7c <SystemCoreClockUpdate+0x134>)
 8002ab6:	4a32      	ldr	r2, [pc, #200]	; (8002b80 <SystemCoreClockUpdate+0x138>)
 8002ab8:	601a      	str	r2, [r3, #0]
      break;
 8002aba:	e045      	b.n	8002b48 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002abc:	4b2f      	ldr	r3, [pc, #188]	; (8002b7c <SystemCoreClockUpdate+0x134>)
 8002abe:	4a31      	ldr	r2, [pc, #196]	; (8002b84 <SystemCoreClockUpdate+0x13c>)
 8002ac0:	601a      	str	r2, [r3, #0]
      break;
 8002ac2:	e041      	b.n	8002b48 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8002ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	091b      	lsrs	r3, r3, #4
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	3301      	adds	r3, #1
 8002ade:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d105      	bne.n	8002af2 <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8002ae6:	4a26      	ldr	r2, [pc, #152]	; (8002b80 <SystemCoreClockUpdate+0x138>)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	e00d      	b.n	8002b0e <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d105      	bne.n	8002b04 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8002af8:	4a22      	ldr	r2, [pc, #136]	; (8002b84 <SystemCoreClockUpdate+0x13c>)
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	e004      	b.n	8002b0e <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0c:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	0a1b      	lsrs	r3, r3, #8
 8002b16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	fb02 f303 	mul.w	r3, r2, r3
 8002b20:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8002b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	0f5b      	lsrs	r3, r3, #29
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	3301      	adds	r3, #1
 8002b30:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3a:	4a10      	ldr	r2, [pc, #64]	; (8002b7c <SystemCoreClockUpdate+0x134>)
 8002b3c:	6013      	str	r3, [r2, #0]
      break;
 8002b3e:	e003      	b.n	8002b48 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8002b40:	4a0e      	ldr	r2, [pc, #56]	; (8002b7c <SystemCoreClockUpdate+0x134>)
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	6013      	str	r3, [r2, #0]
      break;
 8002b46:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	091b      	lsrs	r3, r3, #4
 8002b50:	f003 030f 	and.w	r3, r3, #15
 8002b54:	4a0c      	ldr	r2, [pc, #48]	; (8002b88 <SystemCoreClockUpdate+0x140>)
 8002b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b5a:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8002b5c:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <SystemCoreClockUpdate+0x134>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b66:	4a05      	ldr	r2, [pc, #20]	; (8002b7c <SystemCoreClockUpdate+0x134>)
 8002b68:	6013      	str	r3, [r2, #0]

}
 8002b6a:	bf00      	nop
 8002b6c:	371c      	adds	r7, #28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	0800b7a0 	.word	0x0800b7a0
 8002b7c:	20000010 	.word	0x20000010
 8002b80:	00f42400 	.word	0x00f42400
 8002b84:	01e84800 	.word	0x01e84800
 8002b88:	0800b740 	.word	0x0800b740

08002b8c <LL_APB2_GRP1_EnableClock>:
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4013      	ands	r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
}
 8002bb2:	bf00      	nop
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8002bc4:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <MX_TIM16_Init+0x48>)
 8002bc6:	4a11      	ldr	r2, [pc, #68]	; (8002c0c <MX_TIM16_Init+0x4c>)
 8002bc8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1000;
 8002bca:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <MX_TIM16_Init+0x48>)
 8002bcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bd0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bd2:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <MX_TIM16_Init+0x48>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 800;
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <MX_TIM16_Init+0x48>)
 8002bda:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002bde:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002be0:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <MX_TIM16_Init+0x48>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002be6:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <MX_TIM16_Init+0x48>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <MX_TIM16_Init+0x48>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002bf2:	4805      	ldr	r0, [pc, #20]	; (8002c08 <MX_TIM16_Init+0x48>)
 8002bf4:	f004 f981 	bl	8006efa <HAL_TIM_Base_Init>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8002bfe:	f7ff fa11 	bl	8002024 <Error_Handler>
  }

}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	200004d8 	.word	0x200004d8
 8002c0c:	40014400 	.word	0x40014400

08002c10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a09      	ldr	r2, [pc, #36]	; (8002c44 <HAL_TIM_Base_MspInit+0x34>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d10b      	bne.n	8002c3a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002c22:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002c26:	f7ff ffb1 	bl	8002b8c <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	2019      	movs	r0, #25
 8002c30:	f000 fb59 	bl	80032e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002c34:	2019      	movs	r0, #25
 8002c36:	f000 fb70 	bl	800331a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40014400 	.word	0x40014400

08002c48 <LL_AHB2_GRP1_EnableClock>:
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
}
 8002c6e:	bf00      	nop
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <LL_APB2_GRP1_EnableClock>:
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b085      	sub	sp, #20
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c86:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ca0:	bf00      	nop
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002cb0:	4b22      	ldr	r3, [pc, #136]	; (8002d3c <MX_USART1_UART_Init+0x90>)
 8002cb2:	4a23      	ldr	r2, [pc, #140]	; (8002d40 <MX_USART1_UART_Init+0x94>)
 8002cb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002cb6:	4b21      	ldr	r3, [pc, #132]	; (8002d3c <MX_USART1_UART_Init+0x90>)
 8002cb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cbe:	4b1f      	ldr	r3, [pc, #124]	; (8002d3c <MX_USART1_UART_Init+0x90>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cc4:	4b1d      	ldr	r3, [pc, #116]	; (8002d3c <MX_USART1_UART_Init+0x90>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002cca:	4b1c      	ldr	r3, [pc, #112]	; (8002d3c <MX_USART1_UART_Init+0x90>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002cd0:	4b1a      	ldr	r3, [pc, #104]	; (8002d3c <MX_USART1_UART_Init+0x90>)
 8002cd2:	220c      	movs	r2, #12
 8002cd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cd6:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <MX_USART1_UART_Init+0x90>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cdc:	4b17      	ldr	r3, [pc, #92]	; (8002d3c <MX_USART1_UART_Init+0x90>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ce2:	4b16      	ldr	r3, [pc, #88]	; (8002d3c <MX_USART1_UART_Init+0x90>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ce8:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <MX_USART1_UART_Init+0x90>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cee:	4b13      	ldr	r3, [pc, #76]	; (8002d3c <MX_USART1_UART_Init+0x90>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002cf4:	4811      	ldr	r0, [pc, #68]	; (8002d3c <MX_USART1_UART_Init+0x90>)
 8002cf6:	f004 fb3f 	bl	8007378 <HAL_UART_Init>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002d00:	f7ff f990 	bl	8002024 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d04:	2100      	movs	r1, #0
 8002d06:	480d      	ldr	r0, [pc, #52]	; (8002d3c <MX_USART1_UART_Init+0x90>)
 8002d08:	f005 fd8d 	bl	8008826 <HAL_UARTEx_SetTxFifoThreshold>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002d12:	f7ff f987 	bl	8002024 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d16:	2100      	movs	r1, #0
 8002d18:	4808      	ldr	r0, [pc, #32]	; (8002d3c <MX_USART1_UART_Init+0x90>)
 8002d1a:	f005 fdc2 	bl	80088a2 <HAL_UARTEx_SetRxFifoThreshold>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002d24:	f7ff f97e 	bl	8002024 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002d28:	4804      	ldr	r0, [pc, #16]	; (8002d3c <MX_USART1_UART_Init+0x90>)
 8002d2a:	f005 fd43 	bl	80087b4 <HAL_UARTEx_DisableFifoMode>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002d34:	f7ff f976 	bl	8002024 <Error_Handler>
  }

}
 8002d38:	bf00      	nop
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	20000518 	.word	0x20000518
 8002d40:	40013800 	.word	0x40013800

08002d44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d4c:	f107 030c 	add.w	r3, r7, #12
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	605a      	str	r2, [r3, #4]
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	60da      	str	r2, [r3, #12]
 8002d5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a0e      	ldr	r2, [pc, #56]	; (8002d9c <HAL_UART_MspInit+0x58>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d116      	bne.n	8002d94 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d66:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002d6a:	f7ff ff86 	bl	8002c7a <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6e:	2002      	movs	r0, #2
 8002d70:	f7ff ff6a 	bl	8002c48 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002d74:	23c0      	movs	r3, #192	; 0xc0
 8002d76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d78:	2302      	movs	r3, #2
 8002d7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d80:	2300      	movs	r3, #0
 8002d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d84:	2307      	movs	r3, #7
 8002d86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d88:	f107 030c 	add.w	r3, r7, #12
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4804      	ldr	r0, [pc, #16]	; (8002da0 <HAL_UART_MspInit+0x5c>)
 8002d90:	f000 fb08 	bl	80033a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002d94:	bf00      	nop
 8002d96:	3720      	adds	r7, #32
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40013800 	.word	0x40013800
 8002da0:	48000400 	.word	0x48000400

08002da4 <LL_AHB2_GRP1_EnableClock>:
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002db2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
}
 8002dca:	bf00      	nop
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <LL_APB1_GRP1_EnableClock>:
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b085      	sub	sp, #20
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002de4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4013      	ands	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
}
 8002dfc:	bf00      	nop
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0

  hpcd_USB_FS.Instance = USB;
 8002e0c:	4b10      	ldr	r3, [pc, #64]	; (8002e50 <MX_USB_PCD_Init+0x48>)
 8002e0e:	4a11      	ldr	r2, [pc, #68]	; (8002e54 <MX_USB_PCD_Init+0x4c>)
 8002e10:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002e12:	4b0f      	ldr	r3, [pc, #60]	; (8002e50 <MX_USB_PCD_Init+0x48>)
 8002e14:	2208      	movs	r2, #8
 8002e16:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002e18:	4b0d      	ldr	r3, [pc, #52]	; (8002e50 <MX_USB_PCD_Init+0x48>)
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002e1e:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <MX_USB_PCD_Init+0x48>)
 8002e20:	2202      	movs	r2, #2
 8002e22:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002e24:	4b0a      	ldr	r3, [pc, #40]	; (8002e50 <MX_USB_PCD_Init+0x48>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002e2a:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <MX_USB_PCD_Init+0x48>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002e30:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <MX_USB_PCD_Init+0x48>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002e36:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <MX_USB_PCD_Init+0x48>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002e3c:	4804      	ldr	r0, [pc, #16]	; (8002e50 <MX_USB_PCD_Init+0x48>)
 8002e3e:	f001 f968 	bl	8004112 <HAL_PCD_Init>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002e48:	f7ff f8ec 	bl	8002024 <Error_Handler>
  }

}
 8002e4c:	bf00      	nop
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	200005a4 	.word	0x200005a4
 8002e54:	40006800 	.word	0x40006800

08002e58 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b088      	sub	sp, #32
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e60:	f107 030c 	add.w	r3, r7, #12
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	60da      	str	r2, [r3, #12]
 8002e6e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a0f      	ldr	r2, [pc, #60]	; (8002eb4 <HAL_PCD_MspInit+0x5c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d118      	bne.n	8002eac <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e7a:	2001      	movs	r0, #1
 8002e7c:	f7ff ff92 	bl	8002da4 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002e80:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002e84:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e86:	2302      	movs	r3, #2
 8002e88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002e92:	230a      	movs	r3, #10
 8002e94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e96:	f107 030c 	add.w	r3, r7, #12
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ea0:	f000 fa80 	bl	80033a4 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002ea4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002ea8:	f7ff ff95 	bl	8002dd6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002eac:	bf00      	nop
 8002eae:	3720      	adds	r7, #32
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40006800 	.word	0x40006800

08002eb8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002eb8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002eba:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ebc:	3304      	adds	r3, #4

08002ebe <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ebe:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ec0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002ec2:	d3f9      	bcc.n	8002eb8 <CopyDataInit>
  bx lr
 8002ec4:	4770      	bx	lr

08002ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002ec6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002ec8:	3004      	adds	r0, #4

08002eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002eca:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002ecc:	d3fb      	bcc.n	8002ec6 <FillZerobss>
  bx lr
 8002ece:	4770      	bx	lr

08002ed0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ed0:	480c      	ldr	r0, [pc, #48]	; (8002f04 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002ed2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002ed4:	480c      	ldr	r0, [pc, #48]	; (8002f08 <LoopForever+0x8>)
 8002ed6:	490d      	ldr	r1, [pc, #52]	; (8002f0c <LoopForever+0xc>)
 8002ed8:	4a0d      	ldr	r2, [pc, #52]	; (8002f10 <LoopForever+0x10>)
 8002eda:	2300      	movs	r3, #0
 8002edc:	f7ff ffef 	bl	8002ebe <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002ee0:	480c      	ldr	r0, [pc, #48]	; (8002f14 <LoopForever+0x14>)
 8002ee2:	490d      	ldr	r1, [pc, #52]	; (8002f18 <LoopForever+0x18>)
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f7ff fff0 	bl	8002eca <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002eea:	480c      	ldr	r0, [pc, #48]	; (8002f1c <LoopForever+0x1c>)
 8002eec:	490c      	ldr	r1, [pc, #48]	; (8002f20 <LoopForever+0x20>)
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f7ff ffeb 	bl	8002eca <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002ef4:	f7ff fd52 	bl	800299c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002ef8:	f008 fb90 	bl	800b61c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002efc:	f7fe fe96 	bl	8001c2c <main>

08002f00 <LoopForever>:

LoopForever:
  b LoopForever
 8002f00:	e7fe      	b.n	8002f00 <LoopForever>
 8002f02:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002f04:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002f08:	20000004 	.word	0x20000004
 8002f0c:	2000002c 	.word	0x2000002c
 8002f10:	0800b820 	.word	0x0800b820
  INIT_BSS _sbss, _ebss
 8002f14:	200001c4 	.word	0x200001c4
 8002f18:	20000820 	.word	0x20000820
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002f1c:	200301c4 	.word	0x200301c4
 8002f20:	20030a44 	.word	0x20030a44

08002f24 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f24:	e7fe      	b.n	8002f24 <ADC1_IRQHandler>
	...

08002f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f32:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <HAL_Init+0x3c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a0b      	ldr	r2, [pc, #44]	; (8002f64 <HAL_Init+0x3c>)
 8002f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f3c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f3e:	2003      	movs	r0, #3
 8002f40:	f000 f9c6 	bl	80032d0 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f44:	2000      	movs	r0, #0
 8002f46:	f000 f80f 	bl	8002f68 <HAL_InitTick>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d002      	beq.n	8002f56 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	71fb      	strb	r3, [r7, #7]
 8002f54:	e001      	b.n	8002f5a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f56:	f7ff fcaa 	bl	80028ae <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	58004000 	.word	0x58004000

08002f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002f74:	4b17      	ldr	r3, [pc, #92]	; (8002fd4 <HAL_InitTick+0x6c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d023      	beq.n	8002fc4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 8002f7c:	f002 fa64 	bl	8005448 <HAL_RCC_GetHCLKFreq>
 8002f80:	4601      	mov	r1, r0
 8002f82:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <HAL_InitTick+0x6c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 f9dd 	bl	8003352 <HAL_SYSTICK_Config>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10f      	bne.n	8002fbe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b0f      	cmp	r3, #15
 8002fa2:	d809      	bhi.n	8002fb8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fac:	f000 f99b 	bl	80032e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002fb0:	4a09      	ldr	r2, [pc, #36]	; (8002fd8 <HAL_InitTick+0x70>)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	e007      	b.n	8002fc8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	73fb      	strb	r3, [r7, #15]
 8002fbc:	e004      	b.n	8002fc8 <HAL_InitTick+0x60>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	73fb      	strb	r3, [r7, #15]
 8002fc2:	e001      	b.n	8002fc8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20000018 	.word	0x20000018
 8002fd8:	20000014 	.word	0x20000014

08002fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fe0:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <HAL_IncTick+0x1c>)
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <HAL_IncTick+0x20>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4413      	add	r3, r2
 8002fea:	4a03      	ldr	r2, [pc, #12]	; (8002ff8 <HAL_IncTick+0x1c>)
 8002fec:	6013      	str	r3, [r2, #0]
}
 8002fee:	bf00      	nop
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	20000818 	.word	0x20000818
 8002ffc:	20000018 	.word	0x20000018

08003000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  return uwTick;
 8003004:	4b03      	ldr	r3, [pc, #12]	; (8003014 <HAL_GetTick+0x14>)
 8003006:	681b      	ldr	r3, [r3, #0]
}
 8003008:	4618      	mov	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	20000818 	.word	0x20000818

08003018 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800301c:	4b03      	ldr	r3, [pc, #12]	; (800302c <HAL_GetTickPrio+0x14>)
 800301e:	681b      	ldr	r3, [r3, #0]
}
 8003020:	4618      	mov	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	20000014 	.word	0x20000014

08003030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8003038:	f7ff ffe2 	bl	8003000 <HAL_GetTick>
 800303c:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003048:	d004      	beq.n	8003054 <HAL_Delay+0x24>
    {
      wait += (uint32_t)(uwTickFreq);
 800304a:	4b09      	ldr	r3, [pc, #36]	; (8003070 <HAL_Delay+0x40>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4413      	add	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8003054:	bf00      	nop
 8003056:	f7ff ffd3 	bl	8003000 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	429a      	cmp	r2, r3
 8003064:	d8f7      	bhi.n	8003056 <HAL_Delay+0x26>
    {
    }
  }
 8003066:	bf00      	nop
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20000018 	.word	0x20000018

08003074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003084:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003090:	4013      	ands	r3, r2
 8003092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800309c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030a6:	4a04      	ldr	r2, [pc, #16]	; (80030b8 <__NVIC_SetPriorityGrouping+0x44>)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	60d3      	str	r3, [r2, #12]
}
 80030ac:	bf00      	nop
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	e000ed00 	.word	0xe000ed00

080030bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030c0:	4b04      	ldr	r3, [pc, #16]	; (80030d4 <__NVIC_GetPriorityGrouping+0x18>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	0a1b      	lsrs	r3, r3, #8
 80030c6:	f003 0307 	and.w	r3, r3, #7
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	e000ed00 	.word	0xe000ed00

080030d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	db0b      	blt.n	8003102 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	f003 021f 	and.w	r2, r3, #31
 80030f0:	4907      	ldr	r1, [pc, #28]	; (8003110 <__NVIC_EnableIRQ+0x38>)
 80030f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	2001      	movs	r0, #1
 80030fa:	fa00 f202 	lsl.w	r2, r0, r2
 80030fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	e000e100 	.word	0xe000e100

08003114 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800311e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003122:	2b00      	cmp	r3, #0
 8003124:	db10      	blt.n	8003148 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003126:	79fb      	ldrb	r3, [r7, #7]
 8003128:	f003 021f 	and.w	r2, r3, #31
 800312c:	4909      	ldr	r1, [pc, #36]	; (8003154 <__NVIC_DisableIRQ+0x40>)
 800312e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003132:	095b      	lsrs	r3, r3, #5
 8003134:	2001      	movs	r0, #1
 8003136:	fa00 f202 	lsl.w	r2, r0, r2
 800313a:	3320      	adds	r3, #32
 800313c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003140:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003144:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	e000e100 	.word	0xe000e100

08003158 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003166:	2b00      	cmp	r3, #0
 8003168:	db0c      	blt.n	8003184 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800316a:	79fb      	ldrb	r3, [r7, #7]
 800316c:	f003 021f 	and.w	r2, r3, #31
 8003170:	4907      	ldr	r1, [pc, #28]	; (8003190 <__NVIC_SetPendingIRQ+0x38>)
 8003172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003176:	095b      	lsrs	r3, r3, #5
 8003178:	2001      	movs	r0, #1
 800317a:	fa00 f202 	lsl.w	r2, r0, r2
 800317e:	3340      	adds	r3, #64	; 0x40
 8003180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	e000e100 	.word	0xe000e100

08003194 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800319e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	db0c      	blt.n	80031c0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	f003 021f 	and.w	r2, r3, #31
 80031ac:	4907      	ldr	r1, [pc, #28]	; (80031cc <__NVIC_ClearPendingIRQ+0x38>)
 80031ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	2001      	movs	r0, #1
 80031b6:	fa00 f202 	lsl.w	r2, r0, r2
 80031ba:	3360      	adds	r3, #96	; 0x60
 80031bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	e000e100 	.word	0xe000e100

080031d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	6039      	str	r1, [r7, #0]
 80031da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	db0a      	blt.n	80031fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	490c      	ldr	r1, [pc, #48]	; (800321c <__NVIC_SetPriority+0x4c>)
 80031ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ee:	0112      	lsls	r2, r2, #4
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	440b      	add	r3, r1
 80031f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031f8:	e00a      	b.n	8003210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	4908      	ldr	r1, [pc, #32]	; (8003220 <__NVIC_SetPriority+0x50>)
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	3b04      	subs	r3, #4
 8003208:	0112      	lsls	r2, r2, #4
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	440b      	add	r3, r1
 800320e:	761a      	strb	r2, [r3, #24]
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	e000e100 	.word	0xe000e100
 8003220:	e000ed00 	.word	0xe000ed00

08003224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003224:	b480      	push	{r7}
 8003226:	b089      	sub	sp, #36	; 0x24
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f1c3 0307 	rsb	r3, r3, #7
 800323e:	2b04      	cmp	r3, #4
 8003240:	bf28      	it	cs
 8003242:	2304      	movcs	r3, #4
 8003244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	3304      	adds	r3, #4
 800324a:	2b06      	cmp	r3, #6
 800324c:	d902      	bls.n	8003254 <NVIC_EncodePriority+0x30>
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	3b03      	subs	r3, #3
 8003252:	e000      	b.n	8003256 <NVIC_EncodePriority+0x32>
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003258:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43da      	mvns	r2, r3
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	401a      	ands	r2, r3
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800326c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	fa01 f303 	lsl.w	r3, r1, r3
 8003276:	43d9      	mvns	r1, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800327c:	4313      	orrs	r3, r2
         );
}
 800327e:	4618      	mov	r0, r3
 8003280:	3724      	adds	r7, #36	; 0x24
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
	...

0800328c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3b01      	subs	r3, #1
 8003298:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800329c:	d301      	bcc.n	80032a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800329e:	2301      	movs	r3, #1
 80032a0:	e00f      	b.n	80032c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032a2:	4a0a      	ldr	r2, [pc, #40]	; (80032cc <SysTick_Config+0x40>)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032aa:	210f      	movs	r1, #15
 80032ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032b0:	f7ff ff8e 	bl	80031d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032b4:	4b05      	ldr	r3, [pc, #20]	; (80032cc <SysTick_Config+0x40>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ba:	4b04      	ldr	r3, [pc, #16]	; (80032cc <SysTick_Config+0x40>)
 80032bc:	2207      	movs	r2, #7
 80032be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	e000e010 	.word	0xe000e010

080032d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7ff fecb 	bl	8003074 <__NVIC_SetPriorityGrouping>
}
 80032de:	bf00      	nop
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b086      	sub	sp, #24
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	4603      	mov	r3, r0
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	607a      	str	r2, [r7, #4]
 80032f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032f4:	f7ff fee2 	bl	80030bc <__NVIC_GetPriorityGrouping>
 80032f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	68b9      	ldr	r1, [r7, #8]
 80032fe:	6978      	ldr	r0, [r7, #20]
 8003300:	f7ff ff90 	bl	8003224 <NVIC_EncodePriority>
 8003304:	4602      	mov	r2, r0
 8003306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800330a:	4611      	mov	r1, r2
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff ff5f 	bl	80031d0 <__NVIC_SetPriority>
}
 8003312:	bf00      	nop
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b082      	sub	sp, #8
 800331e:	af00      	add	r7, sp, #0
 8003320:	4603      	mov	r3, r0
 8003322:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff fed5 	bl	80030d8 <__NVIC_EnableIRQ>
}
 800332e:	bf00      	nop
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b082      	sub	sp, #8
 800333a:	af00      	add	r7, sp, #0
 800333c:	4603      	mov	r3, r0
 800333e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff fee5 	bl	8003114 <__NVIC_DisableIRQ>
}
 800334a:	bf00      	nop
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b082      	sub	sp, #8
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7ff ff96 	bl	800328c <SysTick_Config>
 8003360:	4603      	mov	r3, r0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b082      	sub	sp, #8
 800336e:	af00      	add	r7, sp, #0
 8003370:	4603      	mov	r3, r0
 8003372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff feed 	bl	8003158 <__NVIC_SetPendingIRQ>
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	4603      	mov	r3, r0
 800338e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff fefd 	bl	8003194 <__NVIC_ClearPendingIRQ>
}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033ae:	2300      	movs	r3, #0
 80033b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033b2:	e14c      	b.n	800364e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	2101      	movs	r1, #1
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	fa01 f303 	lsl.w	r3, r1, r3
 80033c0:	4013      	ands	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 813e 	beq.w	8003648 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d003      	beq.n	80033dc <HAL_GPIO_Init+0x38>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b12      	cmp	r3, #18
 80033da:	d123      	bne.n	8003424 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	08da      	lsrs	r2, r3, #3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3208      	adds	r2, #8
 80033e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	220f      	movs	r2, #15
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	43db      	mvns	r3, r3
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4013      	ands	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	4313      	orrs	r3, r2
 8003414:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	08da      	lsrs	r2, r3, #3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3208      	adds	r2, #8
 800341e:	6939      	ldr	r1, [r7, #16]
 8003420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	2203      	movs	r2, #3
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4013      	ands	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 0203 	and.w	r2, r3, #3
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d00b      	beq.n	8003478 <HAL_GPIO_Init+0xd4>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b02      	cmp	r3, #2
 8003466:	d007      	beq.n	8003478 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800346c:	2b11      	cmp	r3, #17
 800346e:	d003      	beq.n	8003478 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b12      	cmp	r3, #18
 8003476:	d130      	bne.n	80034da <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	2203      	movs	r2, #3
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	4013      	ands	r3, r2
 800348e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	4313      	orrs	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034ae:	2201      	movs	r2, #1
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43db      	mvns	r3, r3
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	4013      	ands	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	091b      	lsrs	r3, r3, #4
 80034c4:	f003 0201 	and.w	r2, r3, #1
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	2203      	movs	r2, #3
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	43db      	mvns	r3, r3
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	4013      	ands	r3, r2
 80034f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4313      	orrs	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 8098 	beq.w	8003648 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003518:	4a54      	ldr	r2, [pc, #336]	; (800366c <HAL_GPIO_Init+0x2c8>)
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	089b      	lsrs	r3, r3, #2
 800351e:	3302      	adds	r3, #2
 8003520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003524:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f003 0303 	and.w	r3, r3, #3
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	220f      	movs	r2, #15
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	43db      	mvns	r3, r3
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4013      	ands	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003542:	d019      	beq.n	8003578 <HAL_GPIO_Init+0x1d4>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a4a      	ldr	r2, [pc, #296]	; (8003670 <HAL_GPIO_Init+0x2cc>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d013      	beq.n	8003574 <HAL_GPIO_Init+0x1d0>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a49      	ldr	r2, [pc, #292]	; (8003674 <HAL_GPIO_Init+0x2d0>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d00d      	beq.n	8003570 <HAL_GPIO_Init+0x1cc>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a48      	ldr	r2, [pc, #288]	; (8003678 <HAL_GPIO_Init+0x2d4>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d007      	beq.n	800356c <HAL_GPIO_Init+0x1c8>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a47      	ldr	r2, [pc, #284]	; (800367c <HAL_GPIO_Init+0x2d8>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d101      	bne.n	8003568 <HAL_GPIO_Init+0x1c4>
 8003564:	2304      	movs	r3, #4
 8003566:	e008      	b.n	800357a <HAL_GPIO_Init+0x1d6>
 8003568:	2307      	movs	r3, #7
 800356a:	e006      	b.n	800357a <HAL_GPIO_Init+0x1d6>
 800356c:	2303      	movs	r3, #3
 800356e:	e004      	b.n	800357a <HAL_GPIO_Init+0x1d6>
 8003570:	2302      	movs	r3, #2
 8003572:	e002      	b.n	800357a <HAL_GPIO_Init+0x1d6>
 8003574:	2301      	movs	r3, #1
 8003576:	e000      	b.n	800357a <HAL_GPIO_Init+0x1d6>
 8003578:	2300      	movs	r3, #0
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	f002 0203 	and.w	r2, r2, #3
 8003580:	0092      	lsls	r2, r2, #2
 8003582:	4093      	lsls	r3, r2
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800358a:	4938      	ldr	r1, [pc, #224]	; (800366c <HAL_GPIO_Init+0x2c8>)
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	089b      	lsrs	r3, r3, #2
 8003590:	3302      	adds	r3, #2
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003598:	4b39      	ldr	r3, [pc, #228]	; (8003680 <HAL_GPIO_Init+0x2dc>)
 800359a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800359e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	43db      	mvns	r3, r3
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4013      	ands	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035be:	4a30      	ldr	r2, [pc, #192]	; (8003680 <HAL_GPIO_Init+0x2dc>)
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80035c6:	4b2e      	ldr	r3, [pc, #184]	; (8003680 <HAL_GPIO_Init+0x2dc>)
 80035c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	43db      	mvns	r3, r3
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4013      	ands	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035ec:	4a24      	ldr	r2, [pc, #144]	; (8003680 <HAL_GPIO_Init+0x2dc>)
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035f4:	4b22      	ldr	r3, [pc, #136]	; (8003680 <HAL_GPIO_Init+0x2dc>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	43db      	mvns	r3, r3
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4013      	ands	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4313      	orrs	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003618:	4a19      	ldr	r2, [pc, #100]	; (8003680 <HAL_GPIO_Init+0x2dc>)
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800361e:	4b18      	ldr	r3, [pc, #96]	; (8003680 <HAL_GPIO_Init+0x2dc>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	43db      	mvns	r3, r3
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4013      	ands	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4313      	orrs	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003642:	4a0f      	ldr	r2, [pc, #60]	; (8003680 <HAL_GPIO_Init+0x2dc>)
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	3301      	adds	r3, #1
 800364c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	fa22 f303 	lsr.w	r3, r2, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	f47f aeab 	bne.w	80033b4 <HAL_GPIO_Init+0x10>
  }
}
 800365e:	bf00      	nop
 8003660:	371c      	adds	r7, #28
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	40010000 	.word	0x40010000
 8003670:	48000400 	.word	0x48000400
 8003674:	48000800 	.word	0x48000800
 8003678:	48000c00 	.word	0x48000c00
 800367c:	48001000 	.word	0x48001000
 8003680:	58000800 	.word	0x58000800

08003684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	807b      	strh	r3, [r7, #2]
 8003690:	4613      	mov	r3, r2
 8003692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003694:	787b      	ldrb	r3, [r7, #1]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800369a:	887a      	ldrh	r2, [r7, #2]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036a0:	e002      	b.n	80036a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036a2:	887a      	ldrh	r2, [r7, #2]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	695a      	ldr	r2, [r3, #20]
 80036c4:	887b      	ldrh	r3, [r7, #2]
 80036c6:	4013      	ands	r3, r2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036cc:	887a      	ldrh	r2, [r7, #2]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80036d2:	e002      	b.n	80036da <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036d4:	887a      	ldrh	r2, [r7, #2]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	619a      	str	r2, [r3, #24]
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
	...

080036e8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80036ee:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <HAL_HSEM_IRQHandler+0x30>)
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80036f4:	4b08      	ldr	r3, [pc, #32]	; (8003718 <HAL_HSEM_IRQHandler+0x30>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	43db      	mvns	r3, r3
 80036fc:	4906      	ldr	r1, [pc, #24]	; (8003718 <HAL_HSEM_IRQHandler+0x30>)
 80036fe:	4013      	ands	r3, r2
 8003700:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003702:	4a05      	ldr	r2, [pc, #20]	; (8003718 <HAL_HSEM_IRQHandler+0x30>)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f807 	bl	800371c <HAL_HSEM_FreeCallback>
}
 800370e:	bf00      	nop
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	58001500 	.word	0x58001500

0800371c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e081      	b.n	8003846 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d106      	bne.n	800375c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7fe fa00 	bl	8001b5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2224      	movs	r2, #36	; 0x24
 8003760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0201 	bic.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003780:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003790:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d107      	bne.n	80037aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037a6:	609a      	str	r2, [r3, #8]
 80037a8:	e006      	b.n	80037b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80037b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d104      	bne.n	80037ca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6812      	ldr	r2, [r2, #0]
 80037d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	ea42 0103 	orr.w	r1, r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	021a      	lsls	r2, r3, #8
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	69d9      	ldr	r1, [r3, #28]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a1a      	ldr	r2, [r3, #32]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2220      	movs	r2, #32
 8003832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af02      	add	r7, sp, #8
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	607a      	str	r2, [r7, #4]
 800385a:	461a      	mov	r2, r3
 800385c:	460b      	mov	r3, r1
 800385e:	817b      	strh	r3, [r7, #10]
 8003860:	4613      	mov	r3, r2
 8003862:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b20      	cmp	r3, #32
 800386e:	f040 80da 	bne.w	8003a26 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003878:	2b01      	cmp	r3, #1
 800387a:	d101      	bne.n	8003880 <HAL_I2C_Master_Transmit+0x30>
 800387c:	2302      	movs	r3, #2
 800387e:	e0d3      	b.n	8003a28 <HAL_I2C_Master_Transmit+0x1d8>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003888:	f7ff fbba 	bl	8003000 <HAL_GetTick>
 800388c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	2319      	movs	r3, #25
 8003894:	2201      	movs	r2, #1
 8003896:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 f9e6 	bl	8003c6c <I2C_WaitOnFlagUntilTimeout>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e0be      	b.n	8003a28 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2221      	movs	r2, #33	; 0x21
 80038ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2210      	movs	r2, #16
 80038b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	893a      	ldrh	r2, [r7, #8]
 80038ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	2bff      	cmp	r3, #255	; 0xff
 80038da:	d90e      	bls.n	80038fa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	22ff      	movs	r2, #255	; 0xff
 80038e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	8979      	ldrh	r1, [r7, #10]
 80038ea:	4b51      	ldr	r3, [pc, #324]	; (8003a30 <HAL_I2C_Master_Transmit+0x1e0>)
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 fb48 	bl	8003f88 <I2C_TransferConfig>
 80038f8:	e06c      	b.n	80039d4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fe:	b29a      	uxth	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003908:	b2da      	uxtb	r2, r3
 800390a:	8979      	ldrh	r1, [r7, #10]
 800390c:	4b48      	ldr	r3, [pc, #288]	; (8003a30 <HAL_I2C_Master_Transmit+0x1e0>)
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 fb37 	bl	8003f88 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800391a:	e05b      	b.n	80039d4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	6a39      	ldr	r1, [r7, #32]
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f9e3 	bl	8003cec <I2C_WaitOnTXISFlagUntilTimeout>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e07b      	b.n	8003a28 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	781a      	ldrb	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d034      	beq.n	80039d4 <HAL_I2C_Master_Transmit+0x184>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396e:	2b00      	cmp	r3, #0
 8003970:	d130      	bne.n	80039d4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	2200      	movs	r2, #0
 800397a:	2180      	movs	r1, #128	; 0x80
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 f975 	bl	8003c6c <I2C_WaitOnFlagUntilTimeout>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e04d      	b.n	8003a28 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003990:	b29b      	uxth	r3, r3
 8003992:	2bff      	cmp	r3, #255	; 0xff
 8003994:	d90e      	bls.n	80039b4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	22ff      	movs	r2, #255	; 0xff
 800399a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	8979      	ldrh	r1, [r7, #10]
 80039a4:	2300      	movs	r3, #0
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 faeb 	bl	8003f88 <I2C_TransferConfig>
 80039b2:	e00f      	b.n	80039d4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	8979      	ldrh	r1, [r7, #10]
 80039c6:	2300      	movs	r3, #0
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 fada 	bl	8003f88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d19e      	bne.n	800391c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	6a39      	ldr	r1, [r7, #32]
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 f9c2 	bl	8003d6c <I2C_WaitOnSTOPFlagUntilTimeout>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e01a      	b.n	8003a28 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2220      	movs	r2, #32
 80039f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6859      	ldr	r1, [r3, #4]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	4b0b      	ldr	r3, [pc, #44]	; (8003a34 <HAL_I2C_Master_Transmit+0x1e4>)
 8003a06:	400b      	ands	r3, r1
 8003a08:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	e000      	b.n	8003a28 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003a26:	2302      	movs	r3, #2
  }
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	80002000 	.word	0x80002000
 8003a34:	fe00e800 	.word	0xfe00e800

08003a38 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b088      	sub	sp, #32
 8003a3c:	af02      	add	r7, sp, #8
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	607a      	str	r2, [r7, #4]
 8003a42:	461a      	mov	r2, r3
 8003a44:	460b      	mov	r3, r1
 8003a46:	817b      	strh	r3, [r7, #10]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b20      	cmp	r3, #32
 8003a56:	f040 80db 	bne.w	8003c10 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_I2C_Master_Receive+0x30>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e0d4      	b.n	8003c12 <HAL_I2C_Master_Receive+0x1da>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a70:	f7ff fac6 	bl	8003000 <HAL_GetTick>
 8003a74:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	2319      	movs	r3, #25
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 f8f2 	bl	8003c6c <I2C_WaitOnFlagUntilTimeout>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e0bf      	b.n	8003c12 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2222      	movs	r2, #34	; 0x22
 8003a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2210      	movs	r2, #16
 8003a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	893a      	ldrh	r2, [r7, #8]
 8003ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	2bff      	cmp	r3, #255	; 0xff
 8003ac2:	d90e      	bls.n	8003ae2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	22ff      	movs	r2, #255	; 0xff
 8003ac8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	8979      	ldrh	r1, [r7, #10]
 8003ad2:	4b52      	ldr	r3, [pc, #328]	; (8003c1c <HAL_I2C_Master_Receive+0x1e4>)
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 fa54 	bl	8003f88 <I2C_TransferConfig>
 8003ae0:	e06d      	b.n	8003bbe <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	8979      	ldrh	r1, [r7, #10]
 8003af4:	4b49      	ldr	r3, [pc, #292]	; (8003c1c <HAL_I2C_Master_Receive+0x1e4>)
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 fa43 	bl	8003f88 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003b02:	e05c      	b.n	8003bbe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	6a39      	ldr	r1, [r7, #32]
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 f96b 	bl	8003de4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e07c      	b.n	8003c12 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d034      	beq.n	8003bbe <HAL_I2C_Master_Receive+0x186>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d130      	bne.n	8003bbe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	2200      	movs	r2, #0
 8003b64:	2180      	movs	r1, #128	; 0x80
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 f880 	bl	8003c6c <I2C_WaitOnFlagUntilTimeout>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e04d      	b.n	8003c12 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	2bff      	cmp	r3, #255	; 0xff
 8003b7e:	d90e      	bls.n	8003b9e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	22ff      	movs	r2, #255	; 0xff
 8003b84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	8979      	ldrh	r1, [r7, #10]
 8003b8e:	2300      	movs	r3, #0
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 f9f6 	bl	8003f88 <I2C_TransferConfig>
 8003b9c:	e00f      	b.n	8003bbe <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	8979      	ldrh	r1, [r7, #10]
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 f9e5 	bl	8003f88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d19d      	bne.n	8003b04 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	6a39      	ldr	r1, [r7, #32]
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 f8cd 	bl	8003d6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e01a      	b.n	8003c12 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2220      	movs	r2, #32
 8003be2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6859      	ldr	r1, [r3, #4]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	4b0c      	ldr	r3, [pc, #48]	; (8003c20 <HAL_I2C_Master_Receive+0x1e8>)
 8003bf0:	400b      	ands	r3, r1
 8003bf2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	e000      	b.n	8003c12 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003c10:	2302      	movs	r3, #2
  }
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3718      	adds	r7, #24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	80002400 	.word	0x80002400
 8003c20:	fe00e800 	.word	0xfe00e800

08003c24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d103      	bne.n	8003c42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d007      	beq.n	8003c60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699a      	ldr	r2, [r3, #24]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0201 	orr.w	r2, r2, #1
 8003c5e:	619a      	str	r2, [r3, #24]
  }
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	603b      	str	r3, [r7, #0]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c7c:	e022      	b.n	8003cc4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c84:	d01e      	beq.n	8003cc4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c86:	f7ff f9bb 	bl	8003000 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d302      	bcc.n	8003c9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d113      	bne.n	8003cc4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca0:	f043 0220 	orr.w	r2, r3, #32
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e00f      	b.n	8003ce4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699a      	ldr	r2, [r3, #24]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	bf0c      	ite	eq
 8003cd4:	2301      	moveq	r3, #1
 8003cd6:	2300      	movne	r3, #0
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	461a      	mov	r2, r3
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d0cd      	beq.n	8003c7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cf8:	e02c      	b.n	8003d54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	68b9      	ldr	r1, [r7, #8]
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 f8dc 	bl	8003ebc <I2C_IsAcknowledgeFailed>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e02a      	b.n	8003d64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d14:	d01e      	beq.n	8003d54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d16:	f7ff f973 	bl	8003000 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d302      	bcc.n	8003d2c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d113      	bne.n	8003d54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d30:	f043 0220 	orr.w	r2, r3, #32
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e007      	b.n	8003d64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d1cb      	bne.n	8003cfa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d78:	e028      	b.n	8003dcc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	68b9      	ldr	r1, [r7, #8]
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 f89c 	bl	8003ebc <I2C_IsAcknowledgeFailed>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e026      	b.n	8003ddc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d8e:	f7ff f937 	bl	8003000 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d302      	bcc.n	8003da4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d113      	bne.n	8003dcc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da8:	f043 0220 	orr.w	r2, r3, #32
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e007      	b.n	8003ddc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	f003 0320 	and.w	r3, r3, #32
 8003dd6:	2b20      	cmp	r3, #32
 8003dd8:	d1cf      	bne.n	8003d7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003df0:	e055      	b.n	8003e9e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 f860 	bl	8003ebc <I2C_IsAcknowledgeFailed>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e053      	b.n	8003eae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	f003 0320 	and.w	r3, r3, #32
 8003e10:	2b20      	cmp	r3, #32
 8003e12:	d129      	bne.n	8003e68 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	f003 0304 	and.w	r3, r3, #4
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	d105      	bne.n	8003e2e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	e03f      	b.n	8003eae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2220      	movs	r2, #32
 8003e34:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6859      	ldr	r1, [r3, #4]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	4b1d      	ldr	r3, [pc, #116]	; (8003eb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003e42:	400b      	ands	r3, r1
 8003e44:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e022      	b.n	8003eae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e68:	f7ff f8ca 	bl	8003000 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d302      	bcc.n	8003e7e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10f      	bne.n	8003e9e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e82:	f043 0220 	orr.w	r2, r3, #32
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e007      	b.n	8003eae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	d1a2      	bne.n	8003df2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	fe00e800 	.word	0xfe00e800

08003ebc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	f003 0310 	and.w	r3, r3, #16
 8003ed2:	2b10      	cmp	r3, #16
 8003ed4:	d151      	bne.n	8003f7a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ed6:	e022      	b.n	8003f1e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ede:	d01e      	beq.n	8003f1e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee0:	f7ff f88e 	bl	8003000 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d302      	bcc.n	8003ef6 <I2C_IsAcknowledgeFailed+0x3a>
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d113      	bne.n	8003f1e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efa:	f043 0220 	orr.w	r2, r3, #32
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2220      	movs	r2, #32
 8003f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e02e      	b.n	8003f7c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	f003 0320 	and.w	r3, r3, #32
 8003f28:	2b20      	cmp	r3, #32
 8003f2a:	d1d5      	bne.n	8003ed8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2210      	movs	r2, #16
 8003f32:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f7ff fe71 	bl	8003c24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6859      	ldr	r1, [r3, #4]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	4b0d      	ldr	r3, [pc, #52]	; (8003f84 <I2C_IsAcknowledgeFailed+0xc8>)
 8003f4e:	400b      	ands	r3, r1
 8003f50:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f56:	f043 0204 	orr.w	r2, r3, #4
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2220      	movs	r2, #32
 8003f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e000      	b.n	8003f7c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	fe00e800 	.word	0xfe00e800

08003f88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	607b      	str	r3, [r7, #4]
 8003f92:	460b      	mov	r3, r1
 8003f94:	817b      	strh	r3, [r7, #10]
 8003f96:	4613      	mov	r3, r2
 8003f98:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	0d5b      	lsrs	r3, r3, #21
 8003fa4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003fa8:	4b0d      	ldr	r3, [pc, #52]	; (8003fe0 <I2C_TransferConfig+0x58>)
 8003faa:	430b      	orrs	r3, r1
 8003fac:	43db      	mvns	r3, r3
 8003fae:	ea02 0103 	and.w	r1, r2, r3
 8003fb2:	897b      	ldrh	r3, [r7, #10]
 8003fb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003fb8:	7a7b      	ldrb	r3, [r7, #9]
 8003fba:	041b      	lsls	r3, r3, #16
 8003fbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003fd2:	bf00      	nop
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	03ff63ff 	.word	0x03ff63ff

08003fe4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b20      	cmp	r3, #32
 8003ff8:	d138      	bne.n	800406c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004000:	2b01      	cmp	r3, #1
 8004002:	d101      	bne.n	8004008 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004004:	2302      	movs	r3, #2
 8004006:	e032      	b.n	800406e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2224      	movs	r2, #36	; 0x24
 8004014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0201 	bic.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004036:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6819      	ldr	r1, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004068:	2300      	movs	r3, #0
 800406a:	e000      	b.n	800406e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800406c:	2302      	movs	r3, #2
  }
}
 800406e:	4618      	mov	r0, r3
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800407a:	b480      	push	{r7}
 800407c:	b085      	sub	sp, #20
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
 8004082:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b20      	cmp	r3, #32
 800408e:	d139      	bne.n	8004104 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004096:	2b01      	cmp	r3, #1
 8004098:	d101      	bne.n	800409e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800409a:	2302      	movs	r3, #2
 800409c:	e033      	b.n	8004106 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2224      	movs	r2, #36	; 0x24
 80040aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0201 	bic.w	r2, r2, #1
 80040bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80040cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	021b      	lsls	r3, r3, #8
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0201 	orr.w	r2, r2, #1
 80040ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004100:	2300      	movs	r3, #0
 8004102:	e000      	b.n	8004106 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004104:	2302      	movs	r3, #2
  }
}
 8004106:	4618      	mov	r0, r3
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004112:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004114:	b08b      	sub	sp, #44	; 0x2c
 8004116:	af06      	add	r7, sp, #24
 8004118:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e0ad      	b.n	8004280 <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b00      	cmp	r3, #0
 800412e:	d106      	bne.n	800413e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7fe fe8d 	bl	8002e58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2203      	movs	r2, #3
 8004142:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f004 fc68 	bl	8008a20 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004150:	2300      	movs	r3, #0
 8004152:	73fb      	strb	r3, [r7, #15]
 8004154:	e035      	b.n	80041c2 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004156:	7bfb      	ldrb	r3, [r7, #15]
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	015b      	lsls	r3, r3, #5
 800415c:	4413      	add	r3, r2
 800415e:	3329      	adds	r3, #41	; 0x29
 8004160:	2201      	movs	r2, #1
 8004162:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004164:	7bfb      	ldrb	r3, [r7, #15]
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	015b      	lsls	r3, r3, #5
 800416a:	4413      	add	r3, r2
 800416c:	3328      	adds	r3, #40	; 0x28
 800416e:	7bfa      	ldrb	r2, [r7, #15]
 8004170:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004172:	7bfb      	ldrb	r3, [r7, #15]
 8004174:	7bfa      	ldrb	r2, [r7, #15]
 8004176:	b291      	uxth	r1, r2
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	015b      	lsls	r3, r3, #5
 800417c:	4413      	add	r3, r2
 800417e:	3336      	adds	r3, #54	; 0x36
 8004180:	460a      	mov	r2, r1
 8004182:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004184:	7bfb      	ldrb	r3, [r7, #15]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	015b      	lsls	r3, r3, #5
 800418a:	4413      	add	r3, r2
 800418c:	332b      	adds	r3, #43	; 0x2b
 800418e:	2200      	movs	r2, #0
 8004190:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004192:	7bfb      	ldrb	r3, [r7, #15]
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	015b      	lsls	r3, r3, #5
 8004198:	4413      	add	r3, r2
 800419a:	3338      	adds	r3, #56	; 0x38
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	015b      	lsls	r3, r3, #5
 80041a6:	4413      	add	r3, r2
 80041a8:	333c      	adds	r3, #60	; 0x3c
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80041ae:	7bfb      	ldrb	r3, [r7, #15]
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	3302      	adds	r3, #2
 80041b4:	015b      	lsls	r3, r3, #5
 80041b6:	4413      	add	r3, r2
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
 80041be:	3301      	adds	r3, #1
 80041c0:	73fb      	strb	r3, [r7, #15]
 80041c2:	7bfa      	ldrb	r2, [r7, #15]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d3c4      	bcc.n	8004156 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041cc:	2300      	movs	r3, #0
 80041ce:	73fb      	strb	r3, [r7, #15]
 80041d0:	e031      	b.n	8004236 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	015b      	lsls	r3, r3, #5
 80041d8:	4413      	add	r3, r2
 80041da:	f203 1329 	addw	r3, r3, #297	; 0x129
 80041de:	2200      	movs	r2, #0
 80041e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	015b      	lsls	r3, r3, #5
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80041ee:	7bfa      	ldrb	r2, [r7, #15]
 80041f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	015b      	lsls	r3, r3, #5
 80041f8:	4413      	add	r3, r2
 80041fa:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80041fe:	2200      	movs	r2, #0
 8004200:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	015b      	lsls	r3, r3, #5
 8004208:	4413      	add	r3, r2
 800420a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004212:	7bfb      	ldrb	r3, [r7, #15]
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	015b      	lsls	r3, r3, #5
 8004218:	4413      	add	r3, r2
 800421a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004222:	7bfb      	ldrb	r3, [r7, #15]
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	330a      	adds	r3, #10
 8004228:	015b      	lsls	r3, r3, #5
 800422a:	4413      	add	r3, r2
 800422c:	2200      	movs	r2, #0
 800422e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004230:	7bfb      	ldrb	r3, [r7, #15]
 8004232:	3301      	adds	r3, #1
 8004234:	73fb      	strb	r3, [r7, #15]
 8004236:	7bfa      	ldrb	r2, [r7, #15]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	429a      	cmp	r2, r3
 800423e:	d3c8      	bcc.n	80041d2 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	603b      	str	r3, [r7, #0]
 8004246:	687e      	ldr	r6, [r7, #4]
 8004248:	466d      	mov	r5, sp
 800424a:	f106 0410 	add.w	r4, r6, #16
 800424e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004250:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	602b      	str	r3, [r5, #0]
 8004256:	1d33      	adds	r3, r6, #4
 8004258:	cb0e      	ldmia	r3, {r1, r2, r3}
 800425a:	6838      	ldr	r0, [r7, #0]
 800425c:	f004 fbfd 	bl	8008a5a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	69db      	ldr	r3, [r3, #28]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d102      	bne.n	800427e <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f805 	bl	8004288 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004288 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	f043 0301 	orr.w	r3, r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	f043 0302 	orr.w	r3, r3, #2
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042e0:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a04      	ldr	r2, [pc, #16]	; (80042f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80042e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ea:	6013      	str	r3, [r2, #0]
}
 80042ec:	bf00      	nop
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	58000400 	.word	0x58000400

080042fc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004300:	4b04      	ldr	r3, [pc, #16]	; (8004314 <HAL_PWREx_GetVoltageRange+0x18>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004308:	4618      	mov	r0, r3
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	58000400 	.word	0x58000400

08004318 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800431c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004326:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800432a:	d101      	bne.n	8004330 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800432c:	2301      	movs	r3, #1
 800432e:	e000      	b.n	8004332 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <LL_RCC_HSE_EnableBypass>:
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8004340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800434a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800434e:	6013      	str	r3, [r2, #0]
}
 8004350:	bf00      	nop
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <LL_RCC_HSE_DisableBypass>:
{
 800435a:	b480      	push	{r7}
 800435c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800435e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004368:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800436c:	6013      	str	r3, [r2, #0]
}
 800436e:	bf00      	nop
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <LL_RCC_HSE_Enable>:
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800437c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800438a:	6013      	str	r3, [r2, #0]
}
 800438c:	bf00      	nop
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <LL_RCC_HSE_Disable>:
{
 8004396:	b480      	push	{r7}
 8004398:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800439a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043a8:	6013      	str	r3, [r2, #0]
}
 80043aa:	bf00      	nop
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <LL_RCC_HSE_IsReady>:
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80043b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043c6:	d101      	bne.n	80043cc <LL_RCC_HSE_IsReady+0x18>
 80043c8:	2301      	movs	r3, #1
 80043ca:	e000      	b.n	80043ce <LL_RCC_HSE_IsReady+0x1a>
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <LL_RCC_HSI_Enable>:
{
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80043dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ea:	6013      	str	r3, [r2, #0]
}
 80043ec:	bf00      	nop
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <LL_RCC_HSI_Disable>:
{
 80043f6:	b480      	push	{r7}
 80043f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80043fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004408:	6013      	str	r3, [r2, #0]
}
 800440a:	bf00      	nop
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <LL_RCC_HSI_IsReady>:
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004426:	d101      	bne.n	800442c <LL_RCC_HSI_IsReady+0x18>
 8004428:	2301      	movs	r3, #1
 800442a:	e000      	b.n	800442e <LL_RCC_HSI_IsReady+0x1a>
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	061b      	lsls	r3, r3, #24
 800444e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004452:	4313      	orrs	r3, r2
 8004454:	604b      	str	r3, [r1, #4]
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <LL_RCC_HSI48_Enable>:
{
 8004462:	b480      	push	{r7}
 8004464:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800446a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800446e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004472:	f043 0301 	orr.w	r3, r3, #1
 8004476:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800447a:	bf00      	nop
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <LL_RCC_HSI48_Disable>:
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800448c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004490:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004494:	f023 0301 	bic.w	r3, r3, #1
 8004498:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800449c:	bf00      	nop
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <LL_RCC_HSI48_IsReady>:
{
 80044a6:	b480      	push	{r7}
 80044a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80044aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d101      	bne.n	80044be <LL_RCC_HSI48_IsReady+0x18>
 80044ba:	2301      	movs	r3, #1
 80044bc:	e000      	b.n	80044c0 <LL_RCC_HSI48_IsReady+0x1a>
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <LL_RCC_LSE_Enable>:
{
 80044ca:	b480      	push	{r7}
 80044cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80044ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044da:	f043 0301 	orr.w	r3, r3, #1
 80044de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80044e2:	bf00      	nop
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <LL_RCC_LSE_Disable>:
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80044f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044fc:	f023 0301 	bic.w	r3, r3, #1
 8004500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004504:	bf00      	nop
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <LL_RCC_LSE_EnableBypass>:
{
 800450e:	b480      	push	{r7}
 8004510:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800451e:	f043 0304 	orr.w	r3, r3, #4
 8004522:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004526:	bf00      	nop
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <LL_RCC_LSE_DisableBypass>:
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800453c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004540:	f023 0304 	bic.w	r3, r3, #4
 8004544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004548:	bf00      	nop
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <LL_RCC_LSE_IsReady>:
{
 8004552:	b480      	push	{r7}
 8004554:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800455a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b02      	cmp	r3, #2
 8004564:	d101      	bne.n	800456a <LL_RCC_LSE_IsReady+0x18>
 8004566:	2301      	movs	r3, #1
 8004568:	e000      	b.n	800456c <LL_RCC_LSE_IsReady+0x1a>
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <LL_RCC_LSI1_Enable>:
{
 8004576:	b480      	push	{r7}
 8004578:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800457a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800457e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004582:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004586:	f043 0301 	orr.w	r3, r3, #1
 800458a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800458e:	bf00      	nop
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <LL_RCC_LSI1_Disable>:
{
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800459c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045a8:	f023 0301 	bic.w	r3, r3, #1
 80045ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80045b0:	bf00      	nop
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <LL_RCC_LSI1_IsReady>:
{
 80045ba:	b480      	push	{r7}
 80045bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80045be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d101      	bne.n	80045d2 <LL_RCC_LSI1_IsReady+0x18>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <LL_RCC_LSI1_IsReady+0x1a>
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <LL_RCC_LSI2_Enable>:
{
 80045de:	b480      	push	{r7}
 80045e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80045e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045ee:	f043 0304 	orr.w	r3, r3, #4
 80045f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80045f6:	bf00      	nop
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <LL_RCC_LSI2_Disable>:
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800460c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004610:	f023 0304 	bic.w	r3, r3, #4
 8004614:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004618:	bf00      	nop
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <LL_RCC_LSI2_IsReady>:
{
 8004622:	b480      	push	{r7}
 8004624:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800462a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	2b08      	cmp	r3, #8
 8004634:	d101      	bne.n	800463a <LL_RCC_LSI2_IsReady+0x18>
 8004636:	2301      	movs	r3, #1
 8004638:	e000      	b.n	800463c <LL_RCC_LSI2_IsReady+0x1a>
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <LL_RCC_LSI2_SetTrimming>:
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800464e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004656:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	021b      	lsls	r3, r3, #8
 800465e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004662:	4313      	orrs	r3, r2
 8004664:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <LL_RCC_MSI_Enable>:
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004682:	f043 0301 	orr.w	r3, r3, #1
 8004686:	6013      	str	r3, [r2, #0]
}
 8004688:	bf00      	nop
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <LL_RCC_MSI_Disable>:
{
 8004692:	b480      	push	{r7}
 8004694:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046a0:	f023 0301 	bic.w	r3, r3, #1
 80046a4:	6013      	str	r3, [r2, #0]
}
 80046a6:	bf00      	nop
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <LL_RCC_MSI_IsReady>:
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80046b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d101      	bne.n	80046c6 <LL_RCC_MSI_IsReady+0x16>
 80046c2:	2301      	movs	r3, #1
 80046c4:	e000      	b.n	80046c8 <LL_RCC_MSI_IsReady+0x18>
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <LL_RCC_MSI_SetRange>:
{
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80046da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	600b      	str	r3, [r1, #0]
}
 80046ee:	bf00      	nop
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <LL_RCC_MSI_GetRange>:
{
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800470a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2bb0      	cmp	r3, #176	; 0xb0
 8004710:	d901      	bls.n	8004716 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004712:	23b0      	movs	r3, #176	; 0xb0
 8004714:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004716:	687b      	ldr	r3, [r7, #4]
}
 8004718:	4618      	mov	r0, r3
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800472c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	021b      	lsls	r3, r3, #8
 800473a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800473e:	4313      	orrs	r3, r2
 8004740:	604b      	str	r3, [r1, #4]
}
 8004742:	bf00      	nop
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <LL_RCC_SetSysClkSource>:
{
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f023 0203 	bic.w	r2, r3, #3
 8004760:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4313      	orrs	r3, r2
 8004768:	608b      	str	r3, [r1, #8]
}
 800476a:	bf00      	nop
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <LL_RCC_GetSysClkSource>:
{
 8004776:	b480      	push	{r7}
 8004778:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800477a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f003 030c 	and.w	r3, r3, #12
}
 8004784:	4618      	mov	r0, r3
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <LL_RCC_SetAHBPrescaler>:
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	608b      	str	r3, [r1, #8]
}
 80047aa:	bf00      	nop
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <LL_C2_RCC_SetAHBPrescaler>:
{
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80047be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80047c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <LL_RCC_SetAHB4Prescaler>:
{
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80047ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80047f2:	f023 020f 	bic.w	r2, r3, #15
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	091b      	lsrs	r3, r3, #4
 80047fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047fe:	4313      	orrs	r3, r2
 8004800:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <LL_RCC_SetAPB1Prescaler>:
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004822:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4313      	orrs	r3, r2
 800482a:	608b      	str	r3, [r1, #8]
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <LL_RCC_SetAPB2Prescaler>:
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800484a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4313      	orrs	r3, r2
 8004852:	608b      	str	r3, [r1, #8]
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <LL_RCC_GetAHBPrescaler>:
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800486e:	4618      	mov	r0, r3
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <LL_RCC_GetAHB4Prescaler>:
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800487c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004880:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004884:	011b      	lsls	r3, r3, #4
 8004886:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800488a:	4618      	mov	r0, r3
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <LL_RCC_GetAPB1Prescaler>:
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <LL_RCC_GetAPB2Prescaler>:
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80048b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80048c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048d6:	6013      	str	r3, [r2, #0]
}
 80048d8:	bf00      	nop
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80048e2:	b480      	push	{r7}
 80048e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80048e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048f4:	6013      	str	r3, [r2, #0]
}
 80048f6:	bf00      	nop
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800490e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004912:	d101      	bne.n	8004918 <LL_RCC_PLL_IsReady+0x18>
 8004914:	2301      	movs	r3, #1
 8004916:	e000      	b.n	800491a <LL_RCC_PLL_IsReady+0x1a>
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	0a1b      	lsrs	r3, r3, #8
 8004930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004934:	4618      	mov	r0, r3
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800493e:	b480      	push	{r7}
 8004940:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800494c:	4618      	mov	r0, r3
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004956:	b480      	push	{r7}
 8004958:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800495a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004964:	4618      	mov	r0, r3
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800496e:	b480      	push	{r7}
 8004970:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f003 0303 	and.w	r3, r3, #3
}
 800497c:	4618      	mov	r0, r3
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004986:	b480      	push	{r7}
 8004988:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800498a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004998:	d101      	bne.n	800499e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800499a:	2301      	movs	r3, #1
 800499c:	e000      	b.n	80049a0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80049aa:	b480      	push	{r7}
 80049ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80049ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80049b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049be:	d101      	bne.n	80049c4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80049c0:	2301      	movs	r3, #1
 80049c2:	e000      	b.n	80049c6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80049d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80049dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e4:	d101      	bne.n	80049ea <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80049e6:	2301      	movs	r3, #1
 80049e8:	e000      	b.n	80049ec <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80049f6:	b480      	push	{r7}
 80049f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80049fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a08:	d101      	bne.n	8004a0e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e000      	b.n	8004a10 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a2c:	d101      	bne.n	8004a32 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e000      	b.n	8004a34 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
	...

08004a40 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a40:	b590      	push	{r4, r7, lr}
 8004a42:	b08b      	sub	sp, #44	; 0x2c
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e34b      	b.n	80050ea <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0320 	and.w	r3, r3, #32
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 808f 	beq.w	8004b7e <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a60:	f7ff fe89 	bl	8004776 <LL_RCC_GetSysClkSource>
 8004a64:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a66:	f7ff ff82 	bl	800496e <LL_RCC_PLL_GetMainSource>
 8004a6a:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d005      	beq.n	8004a7e <HAL_RCC_OscConfig+0x3e>
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	2b0c      	cmp	r3, #12
 8004a76:	d149      	bne.n	8004b0c <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004a78:	6a3b      	ldr	r3, [r7, #32]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d146      	bne.n	8004b0c <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a7e:	f7ff fe17 	bl	80046b0 <LL_RCC_MSI_IsReady>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d005      	beq.n	8004a94 <HAL_RCC_OscConfig+0x54>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	69db      	ldr	r3, [r3, #28]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e32a      	b.n	80050ea <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004a98:	f7ff fe2f 	bl	80046fa <LL_RCC_MSI_GetRange>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	429c      	cmp	r4, r3
 8004aa0:	d914      	bls.n	8004acc <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fd0e 	bl	80054c8 <RCC_SetFlashLatencyFromMSIRange>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e319      	b.n	80050ea <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff fe09 	bl	80046d2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7ff fe2d 	bl	8004724 <LL_RCC_MSI_SetCalibTrimming>
 8004aca:	e013      	b.n	8004af4 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff fdfe 	bl	80046d2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7ff fe22 	bl	8004724 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 fcef 	bl	80054c8 <RCC_SetFlashLatencyFromMSIRange>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e2fa      	b.n	80050ea <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8004af4:	f7fd ffa8 	bl	8002a48 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004af8:	4bb4      	ldr	r3, [pc, #720]	; (8004dcc <HAL_RCC_OscConfig+0x38c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7fe fa33 	bl	8002f68 <HAL_InitTick>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d039      	beq.n	8004b7c <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e2ee      	b.n	80050ea <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	69db      	ldr	r3, [r3, #28]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d01e      	beq.n	8004b52 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b14:	f7ff fdae 	bl	8004674 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b18:	f7fe fa72 	bl	8003000 <HAL_GetTick>
 8004b1c:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b20:	f7fe fa6e 	bl	8003000 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e2db      	b.n	80050ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004b32:	f7ff fdbd 	bl	80046b0 <LL_RCC_MSI_IsReady>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0f1      	beq.n	8004b20 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7ff fdc6 	bl	80046d2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7ff fdea 	bl	8004724 <LL_RCC_MSI_SetCalibTrimming>
 8004b50:	e015      	b.n	8004b7e <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b52:	f7ff fd9e 	bl	8004692 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b56:	f7fe fa53 	bl	8003000 <HAL_GetTick>
 8004b5a:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b5e:	f7fe fa4f 	bl	8003000 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e2bc      	b.n	80050ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004b70:	f7ff fd9e 	bl	80046b0 <LL_RCC_MSI_IsReady>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1f1      	bne.n	8004b5e <HAL_RCC_OscConfig+0x11e>
 8004b7a:	e000      	b.n	8004b7e <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d05a      	beq.n	8004c40 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b8a:	f7ff fdf4 	bl	8004776 <LL_RCC_GetSysClkSource>
 8004b8e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b90:	f7ff feed 	bl	800496e <LL_RCC_PLL_GetMainSource>
 8004b94:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	2b08      	cmp	r3, #8
 8004b9a:	d005      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x168>
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	2b0c      	cmp	r3, #12
 8004ba0:	d10d      	bne.n	8004bbe <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2b03      	cmp	r3, #3
 8004ba6:	d10a      	bne.n	8004bbe <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba8:	f7ff fc04 	bl	80043b4 <LL_RCC_HSE_IsReady>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d045      	beq.n	8004c3e <HAL_RCC_OscConfig+0x1fe>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d141      	bne.n	8004c3e <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e295      	b.n	80050ea <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc6:	d102      	bne.n	8004bce <HAL_RCC_OscConfig+0x18e>
 8004bc8:	f7ff fbd6 	bl	8004378 <LL_RCC_HSE_Enable>
 8004bcc:	e00d      	b.n	8004bea <HAL_RCC_OscConfig+0x1aa>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bd6:	d104      	bne.n	8004be2 <HAL_RCC_OscConfig+0x1a2>
 8004bd8:	f7ff fbb0 	bl	800433c <LL_RCC_HSE_EnableBypass>
 8004bdc:	f7ff fbcc 	bl	8004378 <LL_RCC_HSE_Enable>
 8004be0:	e003      	b.n	8004bea <HAL_RCC_OscConfig+0x1aa>
 8004be2:	f7ff fbd8 	bl	8004396 <LL_RCC_HSE_Disable>
 8004be6:	f7ff fbb8 	bl	800435a <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d012      	beq.n	8004c18 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf2:	f7fe fa05 	bl	8003000 <HAL_GetTick>
 8004bf6:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004bf8:	e008      	b.n	8004c0c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bfa:	f7fe fa01 	bl	8003000 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b64      	cmp	r3, #100	; 0x64
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e26e      	b.n	80050ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004c0c:	f7ff fbd2 	bl	80043b4 <LL_RCC_HSE_IsReady>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0f1      	beq.n	8004bfa <HAL_RCC_OscConfig+0x1ba>
 8004c16:	e013      	b.n	8004c40 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c18:	f7fe f9f2 	bl	8003000 <HAL_GetTick>
 8004c1c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c20:	f7fe f9ee 	bl	8003000 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b64      	cmp	r3, #100	; 0x64
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e25b      	b.n	80050ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004c32:	f7ff fbbf 	bl	80043b4 <LL_RCC_HSE_IsReady>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1f1      	bne.n	8004c20 <HAL_RCC_OscConfig+0x1e0>
 8004c3c:	e000      	b.n	8004c40 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c3e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d051      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c4c:	f7ff fd93 	bl	8004776 <LL_RCC_GetSysClkSource>
 8004c50:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c52:	f7ff fe8c 	bl	800496e <LL_RCC_PLL_GetMainSource>
 8004c56:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d005      	beq.n	8004c6a <HAL_RCC_OscConfig+0x22a>
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	2b0c      	cmp	r3, #12
 8004c62:	d113      	bne.n	8004c8c <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d110      	bne.n	8004c8c <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c6a:	f7ff fbd3 	bl	8004414 <LL_RCC_HSI_IsReady>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d005      	beq.n	8004c80 <HAL_RCC_OscConfig+0x240>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e234      	b.n	80050ea <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff fbd7 	bl	8004438 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c8a:	e031      	b.n	8004cf0 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d019      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c94:	f7ff fba0 	bl	80043d8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c98:	f7fe f9b2 	bl	8003000 <HAL_GetTick>
 8004c9c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ca0:	f7fe f9ae 	bl	8003000 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e21b      	b.n	80050ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004cb2:	f7ff fbaf 	bl	8004414 <LL_RCC_HSI_IsReady>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0f1      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7ff fbb9 	bl	8004438 <LL_RCC_HSI_SetCalibTrimming>
 8004cc6:	e013      	b.n	8004cf0 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cc8:	f7ff fb95 	bl	80043f6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ccc:	f7fe f998 	bl	8003000 <HAL_GetTick>
 8004cd0:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cd4:	f7fe f994 	bl	8003000 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e201      	b.n	80050ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004ce6:	f7ff fb95 	bl	8004414 <LL_RCC_HSI_IsReady>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1f1      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0308 	and.w	r3, r3, #8
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d106      	bne.n	8004d0a <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f000 80a2 	beq.w	8004e4e <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d075      	beq.n	8004dfe <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0310 	and.w	r3, r3, #16
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d046      	beq.n	8004dac <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004d1e:	f7ff fc4c 	bl	80045ba <LL_RCC_LSI1_IsReady>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d113      	bne.n	8004d50 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004d28:	f7ff fc25 	bl	8004576 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d2c:	f7fe f968 	bl	8003000 <HAL_GetTick>
 8004d30:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004d34:	f7fe f964 	bl	8003000 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e1d1      	b.n	80050ea <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004d46:	f7ff fc38 	bl	80045ba <LL_RCC_LSI1_IsReady>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d0f1      	beq.n	8004d34 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004d50:	f7ff fc45 	bl	80045de <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d54:	f7fe f954 	bl	8003000 <HAL_GetTick>
 8004d58:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004d5c:	f7fe f950 	bl	8003000 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b03      	cmp	r3, #3
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e1bd      	b.n	80050ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004d6e:	f7ff fc58 	bl	8004622 <LL_RCC_LSI2_IsReady>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d0f1      	beq.n	8004d5c <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7ff fc62 	bl	8004646 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004d82:	f7ff fc09 	bl	8004598 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d86:	f7fe f93b 	bl	8003000 <HAL_GetTick>
 8004d8a:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004d8c:	e008      	b.n	8004da0 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004d8e:	f7fe f937 	bl	8003000 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d901      	bls.n	8004da0 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e1a4      	b.n	80050ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004da0:	f7ff fc0b 	bl	80045ba <LL_RCC_LSI1_IsReady>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1f1      	bne.n	8004d8e <HAL_RCC_OscConfig+0x34e>
 8004daa:	e050      	b.n	8004e4e <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004dac:	f7ff fbe3 	bl	8004576 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db0:	f7fe f926 	bl	8003000 <HAL_GetTick>
 8004db4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004db6:	e00b      	b.n	8004dd0 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004db8:	f7fe f922 	bl	8003000 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d904      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e18f      	b.n	80050ea <HAL_RCC_OscConfig+0x6aa>
 8004dca:	bf00      	nop
 8004dcc:	20000014 	.word	0x20000014
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004dd0:	f7ff fbf3 	bl	80045ba <LL_RCC_LSI1_IsReady>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d0ee      	beq.n	8004db8 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004dda:	f7ff fc11 	bl	8004600 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004de0:	f7fe f90e 	bl	8003000 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b03      	cmp	r3, #3
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e17b      	b.n	80050ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004df2:	f7ff fc16 	bl	8004622 <LL_RCC_LSI2_IsReady>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1f1      	bne.n	8004de0 <HAL_RCC_OscConfig+0x3a0>
 8004dfc:	e027      	b.n	8004e4e <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004dfe:	f7ff fbff 	bl	8004600 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e02:	f7fe f8fd 	bl	8003000 <HAL_GetTick>
 8004e06:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004e08:	e008      	b.n	8004e1c <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004e0a:	f7fe f8f9 	bl	8003000 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b03      	cmp	r3, #3
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e166      	b.n	80050ea <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004e1c:	f7ff fc01 	bl	8004622 <LL_RCC_LSI2_IsReady>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1f1      	bne.n	8004e0a <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004e26:	f7ff fbb7 	bl	8004598 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2a:	f7fe f8e9 	bl	8003000 <HAL_GetTick>
 8004e2e:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004e30:	e008      	b.n	8004e44 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004e32:	f7fe f8e5 	bl	8003000 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e152      	b.n	80050ea <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004e44:	f7ff fbb9 	bl	80045ba <LL_RCC_LSI1_IsReady>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1f1      	bne.n	8004e32 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0304 	and.w	r3, r3, #4
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d05b      	beq.n	8004f12 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e5a:	4ba6      	ldr	r3, [pc, #664]	; (80050f4 <HAL_RCC_OscConfig+0x6b4>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d114      	bne.n	8004e90 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004e66:	f7ff fa39 	bl	80042dc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e6a:	f7fe f8c9 	bl	8003000 <HAL_GetTick>
 8004e6e:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e70:	e008      	b.n	8004e84 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e72:	f7fe f8c5 	bl	8003000 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d901      	bls.n	8004e84 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e132      	b.n	80050ea <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e84:	4b9b      	ldr	r3, [pc, #620]	; (80050f4 <HAL_RCC_OscConfig+0x6b4>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0f0      	beq.n	8004e72 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d102      	bne.n	8004e9e <HAL_RCC_OscConfig+0x45e>
 8004e98:	f7ff fb17 	bl	80044ca <LL_RCC_LSE_Enable>
 8004e9c:	e00c      	b.n	8004eb8 <HAL_RCC_OscConfig+0x478>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	2b05      	cmp	r3, #5
 8004ea4:	d104      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x470>
 8004ea6:	f7ff fb32 	bl	800450e <LL_RCC_LSE_EnableBypass>
 8004eaa:	f7ff fb0e 	bl	80044ca <LL_RCC_LSE_Enable>
 8004eae:	e003      	b.n	8004eb8 <HAL_RCC_OscConfig+0x478>
 8004eb0:	f7ff fb1c 	bl	80044ec <LL_RCC_LSE_Disable>
 8004eb4:	f7ff fb3c 	bl	8004530 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d014      	beq.n	8004eea <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec0:	f7fe f89e 	bl	8003000 <HAL_GetTick>
 8004ec4:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004ec6:	e00a      	b.n	8004ede <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ec8:	f7fe f89a 	bl	8003000 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e105      	b.n	80050ea <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004ede:	f7ff fb38 	bl	8004552 <LL_RCC_LSE_IsReady>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0ef      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x488>
 8004ee8:	e013      	b.n	8004f12 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eea:	f7fe f889 	bl	8003000 <HAL_GetTick>
 8004eee:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004ef0:	e00a      	b.n	8004f08 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef2:	f7fe f885 	bl	8003000 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d901      	bls.n	8004f08 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e0f0      	b.n	80050ea <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004f08:	f7ff fb23 	bl	8004552 <LL_RCC_LSE_IsReady>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1ef      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d02c      	beq.n	8004f78 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d014      	beq.n	8004f50 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f26:	f7ff fa9c 	bl	8004462 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f2a:	f7fe f869 	bl	8003000 <HAL_GetTick>
 8004f2e:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004f30:	e008      	b.n	8004f44 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f32:	f7fe f865 	bl	8003000 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e0d2      	b.n	80050ea <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004f44:	f7ff faaf 	bl	80044a6 <LL_RCC_HSI48_IsReady>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d0f1      	beq.n	8004f32 <HAL_RCC_OscConfig+0x4f2>
 8004f4e:	e013      	b.n	8004f78 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f50:	f7ff fa98 	bl	8004484 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f54:	f7fe f854 	bl	8003000 <HAL_GetTick>
 8004f58:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f5c:	f7fe f850 	bl	8003000 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e0bd      	b.n	80050ea <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004f6e:	f7ff fa9a 	bl	80044a6 <LL_RCC_HSI48_IsReady>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1f1      	bne.n	8004f5c <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 80b3 	beq.w	80050e8 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f82:	f7ff fbf8 	bl	8004776 <LL_RCC_GetSysClkSource>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b0c      	cmp	r3, #12
 8004f8a:	d076      	beq.n	800507a <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d14b      	bne.n	800502c <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f94:	f7ff fca5 	bl	80048e2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f98:	f7fe f832 	bl	8003000 <HAL_GetTick>
 8004f9c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fa0:	f7fe f82e 	bl	8003000 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e09b      	b.n	80050ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004fb2:	f7ff fca5 	bl	8004900 <LL_RCC_PLL_IsReady>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1f1      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc0:	68da      	ldr	r2, [r3, #12]
 8004fc2:	4b4d      	ldr	r3, [pc, #308]	; (80050f8 <HAL_RCC_OscConfig+0x6b8>)
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004fce:	4311      	orrs	r1, r2
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fd4:	0212      	lsls	r2, r2, #8
 8004fd6:	4311      	orrs	r1, r2
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004fdc:	4311      	orrs	r1, r2
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004fe2:	4311      	orrs	r1, r2
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ff2:	f7ff fc67 	bl	80048c4 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005004:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005006:	f7fd fffb 	bl	8003000 <HAL_GetTick>
 800500a:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800500c:	e008      	b.n	8005020 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800500e:	f7fd fff7 	bl	8003000 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d901      	bls.n	8005020 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e064      	b.n	80050ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 8005020:	f7ff fc6e 	bl	8004900 <LL_RCC_PLL_IsReady>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d0f1      	beq.n	800500e <HAL_RCC_OscConfig+0x5ce>
 800502a:	e05d      	b.n	80050e8 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800502c:	f7ff fc59 	bl	80048e2 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800503a:	f023 0303 	bic.w	r3, r3, #3
 800503e:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8005040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800504a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800504e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005052:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005054:	f7fd ffd4 	bl	8003000 <HAL_GetTick>
 8005058:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800505c:	f7fd ffd0 	bl	8003000 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e03d      	b.n	80050ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800506e:	f7ff fc47 	bl	8004900 <LL_RCC_PLL_IsReady>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1f1      	bne.n	800505c <HAL_RCC_OscConfig+0x61c>
 8005078:	e036      	b.n	80050e8 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507e:	2b01      	cmp	r3, #1
 8005080:	d101      	bne.n	8005086 <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e031      	b.n	80050ea <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8005086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	f003 0203 	and.w	r2, r3, #3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005098:	429a      	cmp	r2, r3
 800509a:	d123      	bne.n	80050e4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d11c      	bne.n	80050e4 <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	0a1b      	lsrs	r3, r3, #8
 80050ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d114      	bne.n	80050e4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d10d      	bne.n	80050e4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d106      	bne.n	80050e4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d001      	beq.n	80050e8 <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e000      	b.n	80050ea <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	372c      	adds	r7, #44	; 0x2c
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd90      	pop	{r4, r7, pc}
 80050f2:	bf00      	nop
 80050f4:	58000400 	.word	0x58000400
 80050f8:	11c1808c 	.word	0x11c1808c

080050fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e12a      	b.n	8005366 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005110:	4b97      	ldr	r3, [pc, #604]	; (8005370 <HAL_RCC_ClockConfig+0x274>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d91b      	bls.n	8005156 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800511e:	4b94      	ldr	r3, [pc, #592]	; (8005370 <HAL_RCC_ClockConfig+0x274>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f023 0207 	bic.w	r2, r3, #7
 8005126:	4992      	ldr	r1, [pc, #584]	; (8005370 <HAL_RCC_ClockConfig+0x274>)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	4313      	orrs	r3, r2
 800512c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800512e:	f7fd ff67 	bl	8003000 <HAL_GetTick>
 8005132:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005134:	e008      	b.n	8005148 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005136:	f7fd ff63 	bl	8003000 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d901      	bls.n	8005148 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e10e      	b.n	8005366 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005148:	4b89      	ldr	r3, [pc, #548]	; (8005370 <HAL_RCC_ClockConfig+0x274>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0307 	and.w	r3, r3, #7
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d1ef      	bne.n	8005136 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d016      	beq.n	8005190 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	4618      	mov	r0, r3
 8005168:	f7ff fb11 	bl	800478e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800516c:	f7fd ff48 	bl	8003000 <HAL_GetTick>
 8005170:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005172:	e008      	b.n	8005186 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005174:	f7fd ff44 	bl	8003000 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b02      	cmp	r3, #2
 8005180:	d901      	bls.n	8005186 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e0ef      	b.n	8005366 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005186:	f7ff fbfe 	bl	8004986 <LL_RCC_IsActiveFlag_HPRE>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0f1      	beq.n	8005174 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0320 	and.w	r3, r3, #32
 8005198:	2b00      	cmp	r3, #0
 800519a:	d016      	beq.n	80051ca <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7ff fb08 	bl	80047b6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80051a6:	f7fd ff2b 	bl	8003000 <HAL_GetTick>
 80051aa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80051ac:	e008      	b.n	80051c0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80051ae:	f7fd ff27 	bl	8003000 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e0d2      	b.n	8005366 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80051c0:	f7ff fbf3 	bl	80049aa <LL_RCC_IsActiveFlag_C2HPRE>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0f1      	beq.n	80051ae <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d016      	beq.n	8005204 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	4618      	mov	r0, r3
 80051dc:	f7ff fb01 	bl	80047e2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80051e0:	f7fd ff0e 	bl	8003000 <HAL_GetTick>
 80051e4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80051e6:	e008      	b.n	80051fa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80051e8:	f7fd ff0a 	bl	8003000 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e0b5      	b.n	8005366 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80051fa:	f7ff fbe9 	bl	80049d0 <LL_RCC_IsActiveFlag_SHDHPRE>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0f1      	beq.n	80051e8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	2b00      	cmp	r3, #0
 800520e:	d016      	beq.n	800523e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	4618      	mov	r0, r3
 8005216:	f7ff fafb 	bl	8004810 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800521a:	f7fd fef1 	bl	8003000 <HAL_GetTick>
 800521e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005220:	e008      	b.n	8005234 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005222:	f7fd feed 	bl	8003000 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d901      	bls.n	8005234 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e098      	b.n	8005366 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005234:	f7ff fbdf 	bl	80049f6 <LL_RCC_IsActiveFlag_PPRE1>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0f1      	beq.n	8005222 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0308 	and.w	r3, r3, #8
 8005246:	2b00      	cmp	r3, #0
 8005248:	d017      	beq.n	800527a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	00db      	lsls	r3, r3, #3
 8005250:	4618      	mov	r0, r3
 8005252:	f7ff faf1 	bl	8004838 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005256:	f7fd fed3 	bl	8003000 <HAL_GetTick>
 800525a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800525c:	e008      	b.n	8005270 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800525e:	f7fd fecf 	bl	8003000 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d901      	bls.n	8005270 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e07a      	b.n	8005366 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005270:	f7ff fbd3 	bl	8004a1a <LL_RCC_IsActiveFlag_PPRE2>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0f1      	beq.n	800525e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	d043      	beq.n	800530e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2b02      	cmp	r3, #2
 800528c:	d106      	bne.n	800529c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800528e:	f7ff f891 	bl	80043b4 <LL_RCC_HSE_IsReady>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d11e      	bne.n	80052d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e064      	b.n	8005366 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2b03      	cmp	r3, #3
 80052a2:	d106      	bne.n	80052b2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80052a4:	f7ff fb2c 	bl	8004900 <LL_RCC_PLL_IsReady>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d113      	bne.n	80052d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e059      	b.n	8005366 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d106      	bne.n	80052c8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80052ba:	f7ff f9f9 	bl	80046b0 <LL_RCC_MSI_IsReady>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d108      	bne.n	80052d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e04e      	b.n	8005366 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80052c8:	f7ff f8a4 	bl	8004414 <LL_RCC_HSI_IsReady>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e047      	b.n	8005366 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	4618      	mov	r0, r3
 80052dc:	f7ff fa37 	bl	800474e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052e0:	f7fd fe8e 	bl	8003000 <HAL_GetTick>
 80052e4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052e6:	e00a      	b.n	80052fe <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052e8:	f7fd fe8a 	bl	8003000 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e033      	b.n	8005366 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052fe:	f7ff fa3a 	bl	8004776 <LL_RCC_GetSysClkSource>
 8005302:	4602      	mov	r2, r0
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	429a      	cmp	r2, r3
 800530c:	d1ec      	bne.n	80052e8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800530e:	4b18      	ldr	r3, [pc, #96]	; (8005370 <HAL_RCC_ClockConfig+0x274>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0307 	and.w	r3, r3, #7
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	429a      	cmp	r2, r3
 800531a:	d21b      	bcs.n	8005354 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800531c:	4b14      	ldr	r3, [pc, #80]	; (8005370 <HAL_RCC_ClockConfig+0x274>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f023 0207 	bic.w	r2, r3, #7
 8005324:	4912      	ldr	r1, [pc, #72]	; (8005370 <HAL_RCC_ClockConfig+0x274>)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	4313      	orrs	r3, r2
 800532a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800532c:	f7fd fe68 	bl	8003000 <HAL_GetTick>
 8005330:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005332:	e008      	b.n	8005346 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005334:	f7fd fe64 	bl	8003000 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	2b02      	cmp	r3, #2
 8005340:	d901      	bls.n	8005346 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e00f      	b.n	8005366 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005346:	4b0a      	ldr	r3, [pc, #40]	; (8005370 <HAL_RCC_ClockConfig+0x274>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d1ef      	bne.n	8005334 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8005354:	f7fd fb78 	bl	8002a48 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005358:	f7fd fe5e 	bl	8003018 <HAL_GetTickPrio>
 800535c:	4603      	mov	r3, r0
 800535e:	4618      	mov	r0, r3
 8005360:	f7fd fe02 	bl	8002f68 <HAL_InitTick>
 8005364:	4603      	mov	r3, r0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	58004000 	.word	0x58004000

08005374 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005374:	b590      	push	{r4, r7, lr}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800537a:	f7ff f9fc 	bl	8004776 <LL_RCC_GetSysClkSource>
 800537e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10a      	bne.n	800539c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005386:	f7ff f9b8 	bl	80046fa <LL_RCC_MSI_GetRange>
 800538a:	4603      	mov	r3, r0
 800538c:	091b      	lsrs	r3, r3, #4
 800538e:	f003 030f 	and.w	r3, r3, #15
 8005392:	4a2a      	ldr	r2, [pc, #168]	; (800543c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005398:	60fb      	str	r3, [r7, #12]
 800539a:	e04a      	b.n	8005432 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b04      	cmp	r3, #4
 80053a0:	d102      	bne.n	80053a8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80053a2:	4b27      	ldr	r3, [pc, #156]	; (8005440 <HAL_RCC_GetSysClockFreq+0xcc>)
 80053a4:	60fb      	str	r3, [r7, #12]
 80053a6:	e044      	b.n	8005432 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b08      	cmp	r3, #8
 80053ac:	d10a      	bne.n	80053c4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80053ae:	f7fe ffb3 	bl	8004318 <LL_RCC_HSE_IsEnabledDiv2>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d102      	bne.n	80053be <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80053b8:	4b21      	ldr	r3, [pc, #132]	; (8005440 <HAL_RCC_GetSysClockFreq+0xcc>)
 80053ba:	60fb      	str	r3, [r7, #12]
 80053bc:	e039      	b.n	8005432 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80053be:	4b21      	ldr	r3, [pc, #132]	; (8005444 <HAL_RCC_GetSysClockFreq+0xd0>)
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	e036      	b.n	8005432 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80053c4:	f7ff fad3 	bl	800496e <LL_RCC_PLL_GetMainSource>
 80053c8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d002      	beq.n	80053d6 <HAL_RCC_GetSysClockFreq+0x62>
 80053d0:	2b03      	cmp	r3, #3
 80053d2:	d003      	beq.n	80053dc <HAL_RCC_GetSysClockFreq+0x68>
 80053d4:	e00d      	b.n	80053f2 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80053d6:	4b1a      	ldr	r3, [pc, #104]	; (8005440 <HAL_RCC_GetSysClockFreq+0xcc>)
 80053d8:	60bb      	str	r3, [r7, #8]
        break;
 80053da:	e015      	b.n	8005408 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80053dc:	f7fe ff9c 	bl	8004318 <LL_RCC_HSE_IsEnabledDiv2>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d102      	bne.n	80053ec <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80053e6:	4b16      	ldr	r3, [pc, #88]	; (8005440 <HAL_RCC_GetSysClockFreq+0xcc>)
 80053e8:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80053ea:	e00d      	b.n	8005408 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 80053ec:	4b15      	ldr	r3, [pc, #84]	; (8005444 <HAL_RCC_GetSysClockFreq+0xd0>)
 80053ee:	60bb      	str	r3, [r7, #8]
        break;
 80053f0:	e00a      	b.n	8005408 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80053f2:	f7ff f982 	bl	80046fa <LL_RCC_MSI_GetRange>
 80053f6:	4603      	mov	r3, r0
 80053f8:	091b      	lsrs	r3, r3, #4
 80053fa:	f003 030f 	and.w	r3, r3, #15
 80053fe:	4a0f      	ldr	r2, [pc, #60]	; (800543c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005404:	60bb      	str	r3, [r7, #8]
        break;
 8005406:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8005408:	f7ff fa8c 	bl	8004924 <LL_RCC_PLL_GetN>
 800540c:	4602      	mov	r2, r0
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	fb03 f402 	mul.w	r4, r3, r2
 8005414:	f7ff fa9f 	bl	8004956 <LL_RCC_PLL_GetDivider>
 8005418:	4603      	mov	r3, r0
 800541a:	091b      	lsrs	r3, r3, #4
 800541c:	3301      	adds	r3, #1
 800541e:	fbb4 f4f3 	udiv	r4, r4, r3
 8005422:	f7ff fa8c 	bl	800493e <LL_RCC_PLL_GetR>
 8005426:	4603      	mov	r3, r0
 8005428:	0f5b      	lsrs	r3, r3, #29
 800542a:	3301      	adds	r3, #1
 800542c:	fbb4 f3f3 	udiv	r3, r4, r3
 8005430:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8005432:	68fb      	ldr	r3, [r7, #12]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	bd90      	pop	{r4, r7, pc}
 800543c:	0800b7a0 	.word	0x0800b7a0
 8005440:	00f42400 	.word	0x00f42400
 8005444:	01e84800 	.word	0x01e84800

08005448 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005448:	b598      	push	{r3, r4, r7, lr}
 800544a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800544c:	f7ff ff92 	bl	8005374 <HAL_RCC_GetSysClockFreq>
 8005450:	4604      	mov	r4, r0
 8005452:	f7ff fa05 	bl	8004860 <LL_RCC_GetAHBPrescaler>
 8005456:	4603      	mov	r3, r0
 8005458:	091b      	lsrs	r3, r3, #4
 800545a:	f003 030f 	and.w	r3, r3, #15
 800545e:	4a03      	ldr	r2, [pc, #12]	; (800546c <HAL_RCC_GetHCLKFreq+0x24>)
 8005460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005464:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005468:	4618      	mov	r0, r3
 800546a:	bd98      	pop	{r3, r4, r7, pc}
 800546c:	0800b740 	.word	0x0800b740

08005470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005470:	b598      	push	{r3, r4, r7, lr}
 8005472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005474:	f7ff ffe8 	bl	8005448 <HAL_RCC_GetHCLKFreq>
 8005478:	4604      	mov	r4, r0
 800547a:	f7ff fa0b 	bl	8004894 <LL_RCC_GetAPB1Prescaler>
 800547e:	4603      	mov	r3, r0
 8005480:	0a1b      	lsrs	r3, r3, #8
 8005482:	f003 0307 	and.w	r3, r3, #7
 8005486:	4a04      	ldr	r2, [pc, #16]	; (8005498 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800548c:	f003 031f 	and.w	r3, r3, #31
 8005490:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005494:	4618      	mov	r0, r3
 8005496:	bd98      	pop	{r3, r4, r7, pc}
 8005498:	0800b780 	.word	0x0800b780

0800549c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800549c:	b598      	push	{r3, r4, r7, lr}
 800549e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80054a0:	f7ff ffd2 	bl	8005448 <HAL_RCC_GetHCLKFreq>
 80054a4:	4604      	mov	r4, r0
 80054a6:	f7ff fa01 	bl	80048ac <LL_RCC_GetAPB2Prescaler>
 80054aa:	4603      	mov	r3, r0
 80054ac:	0adb      	lsrs	r3, r3, #11
 80054ae:	f003 0307 	and.w	r3, r3, #7
 80054b2:	4a04      	ldr	r2, [pc, #16]	; (80054c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80054b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054b8:	f003 031f 	and.w	r3, r3, #31
 80054bc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	bd98      	pop	{r3, r4, r7, pc}
 80054c4:	0800b780 	.word	0x0800b780

080054c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80054c8:	b590      	push	{r4, r7, lr}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2bb0      	cmp	r3, #176	; 0xb0
 80054d4:	d903      	bls.n	80054de <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80054d6:	4b15      	ldr	r3, [pc, #84]	; (800552c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80054d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	e007      	b.n	80054ee <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	091b      	lsrs	r3, r3, #4
 80054e2:	f003 030f 	and.w	r3, r3, #15
 80054e6:	4a11      	ldr	r2, [pc, #68]	; (800552c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80054e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054ec:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80054ee:	f7ff f9c3 	bl	8004878 <LL_RCC_GetAHB4Prescaler>
 80054f2:	4603      	mov	r3, r0
 80054f4:	091b      	lsrs	r3, r3, #4
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	4a0d      	ldr	r2, [pc, #52]	; (8005530 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80054fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	fbb2 f3f3 	udiv	r3, r2, r3
 8005506:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	4a0a      	ldr	r2, [pc, #40]	; (8005534 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800550c:	fba2 2303 	umull	r2, r3, r2, r3
 8005510:	0c9c      	lsrs	r4, r3, #18
 8005512:	f7fe fef3 	bl	80042fc <HAL_PWREx_GetVoltageRange>
 8005516:	4603      	mov	r3, r0
 8005518:	4619      	mov	r1, r3
 800551a:	4620      	mov	r0, r4
 800551c:	f000 f80c 	bl	8005538 <RCC_SetFlashLatency>
 8005520:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8005522:	4618      	mov	r0, r3
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	bd90      	pop	{r4, r7, pc}
 800552a:	bf00      	nop
 800552c:	0800b7a0 	.word	0x0800b7a0
 8005530:	0800b740 	.word	0x0800b740
 8005534:	431bde83 	.word	0x431bde83

08005538 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005538:	b590      	push	{r4, r7, lr}
 800553a:	b093      	sub	sp, #76	; 0x4c
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005542:	4b39      	ldr	r3, [pc, #228]	; (8005628 <RCC_SetFlashLatency+0xf0>)
 8005544:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005548:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800554a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800554e:	4a37      	ldr	r2, [pc, #220]	; (800562c <RCC_SetFlashLatency+0xf4>)
 8005550:	f107 031c 	add.w	r3, r7, #28
 8005554:	ca07      	ldmia	r2, {r0, r1, r2}
 8005556:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800555a:	4b35      	ldr	r3, [pc, #212]	; (8005630 <RCC_SetFlashLatency+0xf8>)
 800555c:	f107 040c 	add.w	r4, r7, #12
 8005560:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005562:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005566:	2300      	movs	r3, #0
 8005568:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005570:	d11c      	bne.n	80055ac <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005572:	2300      	movs	r3, #0
 8005574:	643b      	str	r3, [r7, #64]	; 0x40
 8005576:	e015      	b.n	80055a4 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005580:	4413      	add	r3, r2
 8005582:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	429a      	cmp	r2, r3
 800558a:	d808      	bhi.n	800559e <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800558c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005594:	4413      	add	r3, r2
 8005596:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800559a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800559c:	e022      	b.n	80055e4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800559e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055a0:	3301      	adds	r3, #1
 80055a2:	643b      	str	r3, [r7, #64]	; 0x40
 80055a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055a6:	2b03      	cmp	r3, #3
 80055a8:	d9e6      	bls.n	8005578 <RCC_SetFlashLatency+0x40>
 80055aa:	e01b      	b.n	80055e4 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80055ac:	2300      	movs	r3, #0
 80055ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055b0:	e015      	b.n	80055de <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80055b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80055ba:	4413      	add	r3, r2
 80055bc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d808      	bhi.n	80055d8 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80055c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80055ce:	4413      	add	r3, r2
 80055d0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80055d4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80055d6:	e005      	b.n	80055e4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80055d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055da:	3301      	adds	r3, #1
 80055dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d9e6      	bls.n	80055b2 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80055e4:	4b13      	ldr	r3, [pc, #76]	; (8005634 <RCC_SetFlashLatency+0xfc>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f023 0207 	bic.w	r2, r3, #7
 80055ec:	4911      	ldr	r1, [pc, #68]	; (8005634 <RCC_SetFlashLatency+0xfc>)
 80055ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055f0:	4313      	orrs	r3, r2
 80055f2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80055f4:	f7fd fd04 	bl	8003000 <HAL_GetTick>
 80055f8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80055fa:	e008      	b.n	800560e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80055fc:	f7fd fd00 	bl	8003000 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e007      	b.n	800561e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800560e:	4b09      	ldr	r3, [pc, #36]	; (8005634 <RCC_SetFlashLatency+0xfc>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0307 	and.w	r3, r3, #7
 8005616:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005618:	429a      	cmp	r2, r3
 800561a:	d1ef      	bne.n	80055fc <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	374c      	adds	r7, #76	; 0x4c
 8005622:	46bd      	mov	sp, r7
 8005624:	bd90      	pop	{r4, r7, pc}
 8005626:	bf00      	nop
 8005628:	0800b6a4 	.word	0x0800b6a4
 800562c:	0800b6b4 	.word	0x0800b6b4
 8005630:	0800b6c0 	.word	0x0800b6c0
 8005634:	58004000 	.word	0x58004000

08005638 <LL_RCC_LSE_IsEnabled>:
{
 8005638:	b480      	push	{r7}
 800563a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800563c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	2b01      	cmp	r3, #1
 800564a:	d101      	bne.n	8005650 <LL_RCC_LSE_IsEnabled+0x18>
 800564c:	2301      	movs	r3, #1
 800564e:	e000      	b.n	8005652 <LL_RCC_LSE_IsEnabled+0x1a>
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <LL_RCC_LSE_IsReady>:
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b02      	cmp	r3, #2
 800566e:	d101      	bne.n	8005674 <LL_RCC_LSE_IsReady+0x18>
 8005670:	2301      	movs	r3, #1
 8005672:	e000      	b.n	8005676 <LL_RCC_LSE_IsReady+0x1a>
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <LL_RCC_MSI_EnablePLLMode>:
{
 8005680:	b480      	push	{r7}
 8005682:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800568e:	f043 0304 	orr.w	r3, r3, #4
 8005692:	6013      	str	r3, [r2, #0]
}
 8005694:	bf00      	nop
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <LL_RCC_SetRFWKPClockSource>:
{
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80056a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80056be:	bf00      	nop
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <LL_RCC_SetSMPSClockSource>:
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80056d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	f023 0203 	bic.w	r2, r3, #3
 80056dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80056e6:	bf00      	nop
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <LL_RCC_SetSMPSPrescaler>:
{
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80056fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005700:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005704:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4313      	orrs	r3, r2
 800570c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800570e:	bf00      	nop
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <LL_RCC_SetUSARTClockSource>:
{
 800571a:	b480      	push	{r7}
 800571c:	b083      	sub	sp, #12
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800572a:	f023 0203 	bic.w	r2, r3, #3
 800572e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4313      	orrs	r3, r2
 8005736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800573a:	bf00      	nop
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <LL_RCC_SetLPUARTClockSource>:
{
 8005746:	b480      	push	{r7}
 8005748:	b083      	sub	sp, #12
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800574e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005756:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800575a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4313      	orrs	r3, r2
 8005762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005766:	bf00      	nop
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <LL_RCC_SetI2CClockSource>:
{
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800577a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800577e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	091b      	lsrs	r3, r3, #4
 8005786:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800578a:	43db      	mvns	r3, r3
 800578c:	401a      	ands	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	011b      	lsls	r3, r3, #4
 8005792:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005796:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800579a:	4313      	orrs	r3, r2
 800579c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <LL_RCC_SetLPTIMClockSource>:
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80057b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	0c1b      	lsrs	r3, r3, #16
 80057c0:	041b      	lsls	r3, r3, #16
 80057c2:	43db      	mvns	r3, r3
 80057c4:	401a      	ands	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	041b      	lsls	r3, r3, #16
 80057ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057ce:	4313      	orrs	r3, r2
 80057d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <LL_RCC_SetSAIClockSource>:
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80057e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <LL_RCC_SetRNGClockSource>:
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005820:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4313      	orrs	r3, r2
 8005828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <LL_RCC_SetCLK48ClockSource>:
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005848:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800584c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4313      	orrs	r3, r2
 8005854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <LL_RCC_SetUSBClockSource>:
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f7ff ffe3 	bl	8005838 <LL_RCC_SetCLK48ClockSource>
}
 8005872:	bf00      	nop
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <LL_RCC_SetADCClockSource>:
{
 800587a:	b480      	push	{r7}
 800587c:	b083      	sub	sp, #12
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800588a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800588e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4313      	orrs	r3, r2
 8005896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800589a:	bf00      	nop
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <LL_RCC_SetRTCClockSource>:
{
 80058a6:	b480      	push	{r7}
 80058a8:	b083      	sub	sp, #12
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80058ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80058c6:	bf00      	nop
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <LL_RCC_GetRTCClockSource>:
{
 80058d2:	b480      	push	{r7}
 80058d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80058d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058de:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <LL_RCC_ForceBackupDomainReset>:
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80058f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005904:	bf00      	nop
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <LL_RCC_ReleaseBackupDomainReset>:
{
 800590e:	b480      	push	{r7}
 8005910:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800591e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005922:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005926:	bf00      	nop
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <LL_RCC_PLLSAI1_Enable>:
{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800593e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005942:	6013      	str	r3, [r2, #0]
}
 8005944:	bf00      	nop
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <LL_RCC_PLLSAI1_Disable>:
{
 800594e:	b480      	push	{r7}
 8005950:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800595c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005960:	6013      	str	r3, [r2, #0]
}
 8005962:	bf00      	nop
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <LL_RCC_PLLSAI1_IsReady>:
{
 800596c:	b480      	push	{r7}
 800596e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800597a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800597e:	d101      	bne.n	8005984 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005980:	2301      	movs	r3, #1
 8005982:	e000      	b.n	8005986 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b088      	sub	sp, #32
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005998:	2300      	movs	r3, #0
 800599a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800599c:	2300      	movs	r3, #0
 800599e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d033      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059b4:	d00c      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80059b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059ba:	d802      	bhi.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d010      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80059c0:	e017      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80059c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059c6:	d017      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80059c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80059cc:	d016      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80059ce:	e010      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80059d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059de:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80059e0:	e00d      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	3304      	adds	r3, #4
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 f94d 	bl	8005c86 <RCCEx_PLLSAI1_ConfigNP>
 80059ec:	4603      	mov	r3, r0
 80059ee:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80059f0:	e005      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	77fb      	strb	r3, [r7, #31]
        break;
 80059f6:	e002      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80059f8:	bf00      	nop
 80059fa:	e000      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80059fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059fe:	7ffb      	ldrb	r3, [r7, #31]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d105      	bne.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f7ff fee9 	bl	80057e0 <LL_RCC_SetSAIClockSource>
 8005a0e:	e001      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a10:	7ffb      	ldrb	r3, [r7, #31]
 8005a12:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d046      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005a20:	f7ff ff57 	bl	80058d2 <LL_RCC_GetRTCClockSource>
 8005a24:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d03c      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005a30:	f7fe fc54 	bl	80042dc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d105      	bne.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7ff ff31 	bl	80058a6 <LL_RCC_SetRTCClockSource>
 8005a44:	e02e      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a4e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005a50:	f7ff ff4c 	bl	80058ec <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005a54:	f7ff ff5b 	bl	800590e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a62:	4313      	orrs	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005a66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005a70:	f7ff fde2 	bl	8005638 <LL_RCC_LSE_IsEnabled>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d114      	bne.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a7a:	f7fd fac1 	bl	8003000 <HAL_GetTick>
 8005a7e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005a80:	e00b      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a82:	f7fd fabd 	bl	8003000 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d902      	bls.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	77fb      	strb	r3, [r7, #31]
              break;
 8005a98:	e004      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005a9a:	f7ff fddf 	bl	800565c <LL_RCC_LSE_IsReady>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d1ee      	bne.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005aa4:	7ffb      	ldrb	r3, [r7, #31]
 8005aa6:	77bb      	strb	r3, [r7, #30]
 8005aa8:	e001      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aaa:	7ffb      	ldrb	r3, [r7, #31]
 8005aac:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d004      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7ff fe2b 	bl	800571a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0302 	and.w	r3, r3, #2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d004      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7ff fe36 	bl	8005746 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0310 	and.w	r3, r3, #16
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d004      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7ff fe5e 	bl	80057ac <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0320 	and.w	r3, r3, #32
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d004      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7ff fe53 	bl	80057ac <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0304 	and.w	r3, r3, #4
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d004      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7ff fe2b 	bl	8005772 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0308 	and.w	r3, r3, #8
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d004      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7ff fe20 	bl	8005772 <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d022      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7ff fe8e 	bl	8005864 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b50:	d107      	bne.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b60:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b6a:	d10b      	bne.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	3304      	adds	r3, #4
 8005b70:	4618      	mov	r0, r3
 8005b72:	f000 f8e3 	bl	8005d3c <RCCEx_PLLSAI1_ConfigNQ>
 8005b76:	4603      	mov	r3, r0
 8005b78:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005b7a:	7ffb      	ldrb	r3, [r7, #31]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 8005b80:	7ffb      	ldrb	r3, [r7, #31]
 8005b82:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d02b      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b98:	d008      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ba2:	d003      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d105      	bne.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7ff fe2b 	bl	800580c <LL_RCC_SetRNGClockSource>
 8005bb6:	e00a      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bc0:	60fb      	str	r3, [r7, #12]
 8005bc2:	2000      	movs	r0, #0
 8005bc4:	f7ff fe22 	bl	800580c <LL_RCC_SetRNGClockSource>
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f7ff fe35 	bl	8005838 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005bd6:	d107      	bne.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005be6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d022      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7ff fe3e 	bl	800587a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c06:	d107      	bne.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c16:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c20:	d10b      	bne.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	3304      	adds	r3, #4
 8005c26:	4618      	mov	r0, r3
 8005c28:	f000 f8e3 	bl	8005df2 <RCCEx_PLLSAI1_ConfigNR>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005c30:	7ffb      	ldrb	r3, [r7, #31]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 8005c36:	7ffb      	ldrb	r3, [r7, #31]
 8005c38:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d004      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7ff fd27 	bl	800569e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d009      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7ff fd46 	bl	80056f2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7ff fd2d 	bl	80056ca <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 8005c70:	7fbb      	ldrb	r3, [r7, #30]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3720      	adds	r7, #32
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005c7e:	f7ff fcff 	bl	8005680 <LL_RCC_MSI_EnablePLLMode>
}
 8005c82:	bf00      	nop
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b084      	sub	sp, #16
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005c92:	f7ff fe5c 	bl	800594e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c96:	f7fd f9b3 	bl	8003000 <HAL_GetTick>
 8005c9a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005c9c:	e009      	b.n	8005cb2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c9e:	f7fd f9af 	bl	8003000 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d902      	bls.n	8005cb2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	73fb      	strb	r3, [r7, #15]
      break;
 8005cb0:	e004      	b.n	8005cbc <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005cb2:	f7ff fe5b 	bl	800596c <LL_RCC_PLLSAI1_IsReady>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1f0      	bne.n	8005c9e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d137      	bne.n	8005d32 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	021b      	lsls	r3, r3, #8
 8005cd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cec:	4313      	orrs	r3, r2
 8005cee:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005cf0:	f7ff fe1e 	bl	8005930 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cf4:	f7fd f984 	bl	8003000 <HAL_GetTick>
 8005cf8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005cfa:	e009      	b.n	8005d10 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005cfc:	f7fd f980 	bl	8003000 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d902      	bls.n	8005d10 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	73fb      	strb	r3, [r7, #15]
        break;
 8005d0e:	e004      	b.n	8005d1a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005d10:	f7ff fe2c 	bl	800596c <LL_RCC_PLLSAI1_IsReady>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d1f0      	bne.n	8005cfc <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005d1a:	7bfb      	ldrb	r3, [r7, #15]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d108      	bne.n	8005d32 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d24:	691a      	ldr	r2, [r3, #16]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d44:	2300      	movs	r3, #0
 8005d46:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005d48:	f7ff fe01 	bl	800594e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005d4c:	f7fd f958 	bl	8003000 <HAL_GetTick>
 8005d50:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005d52:	e009      	b.n	8005d68 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d54:	f7fd f954 	bl	8003000 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d902      	bls.n	8005d68 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	73fb      	strb	r3, [r7, #15]
      break;
 8005d66:	e004      	b.n	8005d72 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005d68:	f7ff fe00 	bl	800596c <LL_RCC_PLLSAI1_IsReady>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1f0      	bne.n	8005d54 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005d72:	7bfb      	ldrb	r3, [r7, #15]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d137      	bne.n	8005de8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	021b      	lsls	r3, r3, #8
 8005d88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005da2:	4313      	orrs	r3, r2
 8005da4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005da6:	f7ff fdc3 	bl	8005930 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005daa:	f7fd f929 	bl	8003000 <HAL_GetTick>
 8005dae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005db0:	e009      	b.n	8005dc6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005db2:	f7fd f925 	bl	8003000 <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d902      	bls.n	8005dc6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	73fb      	strb	r3, [r7, #15]
        break;
 8005dc4:	e004      	b.n	8005dd0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005dc6:	f7ff fdd1 	bl	800596c <LL_RCC_PLLSAI1_IsReady>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d1f0      	bne.n	8005db2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005dd0:	7bfb      	ldrb	r3, [r7, #15]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d108      	bne.n	8005de8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dda:	691a      	ldr	r2, [r3, #16]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005de4:	4313      	orrs	r3, r2
 8005de6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b084      	sub	sp, #16
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005dfe:	f7ff fda6 	bl	800594e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e02:	f7fd f8fd 	bl	8003000 <HAL_GetTick>
 8005e06:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e08:	e009      	b.n	8005e1e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e0a:	f7fd f8f9 	bl	8003000 <HAL_GetTick>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d902      	bls.n	8005e1e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e1c:	e004      	b.n	8005e28 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e1e:	f7ff fda5 	bl	800596c <LL_RCC_PLLSAI1_IsReady>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1f0      	bne.n	8005e0a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d137      	bne.n	8005e9e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	021b      	lsls	r3, r3, #8
 8005e3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e42:	4313      	orrs	r3, r2
 8005e44:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005e5c:	f7ff fd68 	bl	8005930 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e60:	f7fd f8ce 	bl	8003000 <HAL_GetTick>
 8005e64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005e66:	e009      	b.n	8005e7c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e68:	f7fd f8ca 	bl	8003000 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d902      	bls.n	8005e7c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	73fb      	strb	r3, [r7, #15]
        break;
 8005e7a:	e004      	b.n	8005e86 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005e7c:	f7ff fd76 	bl	800596c <LL_RCC_PLLSAI1_IsReady>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d1f0      	bne.n	8005e68 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d108      	bne.n	8005e9e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e90:	691a      	ldr	r2, [r3, #16]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e090      	b.n	8005fdc <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d106      	bne.n	8005ed4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7fc f8f0 	bl	80020b4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	22ca      	movs	r2, #202	; 0xca
 8005ee2:	625a      	str	r2, [r3, #36]	; 0x24
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2253      	movs	r2, #83	; 0x53
 8005eea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 f89f 	bl	8006030 <RTC_EnterInitMode>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d009      	beq.n	8005f0c <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	22ff      	movs	r2, #255	; 0xff
 8005efe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2204      	movs	r2, #4
 8005f04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e067      	b.n	8005fdc <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	6812      	ldr	r2, [r2, #0]
 8005f16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005f1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f1e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6899      	ldr	r1, [r3, #8]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685a      	ldr	r2, [r3, #4]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	431a      	orrs	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	68d2      	ldr	r2, [r2, #12]
 8005f46:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6919      	ldr	r1, [r3, #16]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	041a      	lsls	r2, r3, #16
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f6a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f022 0203 	bic.w	r2, r2, #3
 8005f7a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	69da      	ldr	r2, [r3, #28]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f003 0320 	and.w	r3, r3, #32
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d113      	bne.n	8005fca <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f81e 	bl	8005fe4 <HAL_RTC_WaitForSynchro>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00d      	beq.n	8005fca <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	22ff      	movs	r2, #255	; 0xff
 8005fb4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2204      	movs	r2, #4
 8005fba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e008      	b.n	8005fdc <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	22ff      	movs	r2, #255	; 0xff
 8005fd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8005fda:	2300      	movs	r3, #0
  }
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3708      	adds	r7, #8
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68da      	ldr	r2, [r3, #12]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ffa:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005ffc:	f7fd f800 	bl	8003000 <HAL_GetTick>
 8006000:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006002:	e009      	b.n	8006018 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006004:	f7fc fffc 	bl	8003000 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006012:	d901      	bls.n	8006018 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e007      	b.n	8006028 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	f003 0320 	and.w	r3, r3, #32
 8006022:	2b00      	cmp	r3, #0
 8006024:	d0ee      	beq.n	8006004 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006042:	2b00      	cmp	r3, #0
 8006044:	d119      	bne.n	800607a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800604e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006050:	f7fc ffd6 	bl	8003000 <HAL_GetTick>
 8006054:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006056:	e009      	b.n	800606c <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8006058:	f7fc ffd2 	bl	8003000 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006066:	d901      	bls.n	800606c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e007      	b.n	800607c <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0ee      	beq.n	8006058 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d101      	bne.n	800609e <HAL_RTCEx_SetWakeUpTimer+0x1a>
 800609a:	2302      	movs	r3, #2
 800609c:	e089      	b.n	80061b2 <HAL_RTCEx_SetWakeUpTimer+0x12e>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2202      	movs	r2, #2
 80060aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	22ca      	movs	r2, #202	; 0xca
 80060b4:	625a      	str	r2, [r3, #36]	; 0x24
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2253      	movs	r2, #83	; 0x53
 80060bc:	625a      	str	r2, [r3, #36]	; 0x24
 
  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != 0U){
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d020      	beq.n	800610e <HAL_RTCEx_SetWakeUpTimer+0x8a>
    tickstart = HAL_GetTick();
 80060cc:	f7fc ff98 	bl	8003000 <HAL_GetTick>
 80060d0:	6178      	str	r0, [r7, #20]

   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80060d2:	e015      	b.n	8006100 <HAL_RTCEx_SetWakeUpTimer+0x7c>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80060d4:	f7fc ff94 	bl	8003000 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060e2:	d90d      	bls.n	8006100 <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	22ff      	movs	r2, #255	; 0xff
 80060ea:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2203      	movs	r2, #3
 80060f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 2020 	strb.w	r2, [r3, #32]

       return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e058      	b.n	80061b2 <HAL_RTCEx_SetWakeUpTimer+0x12e>
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	f003 0304 	and.w	r3, r3, #4
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1e2      	bne.n	80060d4 <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689a      	ldr	r2, [r3, #8]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800611c:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 800611e:	f7fc ff6f 	bl	8003000 <HAL_GetTick>
 8006122:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006124:	e015      	b.n	8006152 <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006126:	f7fc ff6b 	bl	8003000 <HAL_GetTick>
 800612a:	4602      	mov	r2, r0
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006134:	d90d      	bls.n	8006152 <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	22ff      	movs	r2, #255	; 0xff
 800613c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2203      	movs	r2, #3
 8006142:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e02f      	b.n	80061b2 <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	f003 0304 	and.w	r3, r3, #4
 800615c:	2b00      	cmp	r3, #0
 800615e:	d0e2      	beq.n	8006126 <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689a      	ldr	r2, [r3, #8]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f022 0207 	bic.w	r2, r2, #7
 800616e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6899      	ldr	r1, [r3, #8]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	430a      	orrs	r2, r1
 800617e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	615a      	str	r2, [r3, #20]

   /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689a      	ldr	r2, [r3, #8]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006196:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	22ff      	movs	r2, #255	; 0xff
 800619e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3718      	adds	r7, #24
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b084      	sub	sp, #16
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d101      	bne.n	80061cc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e07c      	b.n	80062c6 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d106      	bne.n	80061ec <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7fc f83e 	bl	8002268 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006202:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800620c:	d902      	bls.n	8006214 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800620e:	2300      	movs	r3, #0
 8006210:	60fb      	str	r3, [r7, #12]
 8006212:	e002      	b.n	800621a <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006218:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006222:	d007      	beq.n	8006234 <HAL_SPI_Init+0x7a>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800622c:	d002      	beq.n	8006234 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10b      	bne.n	8006254 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006244:	d903      	bls.n	800624e <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2202      	movs	r2, #2
 800624a:	631a      	str	r2, [r3, #48]	; 0x30
 800624c:	e002      	b.n	8006254 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	431a      	orrs	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	431a      	orrs	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	431a      	orrs	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006272:	431a      	orrs	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	69db      	ldr	r3, [r3, #28]
 8006278:	431a      	orrs	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	ea42 0103 	orr.w	r1, r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	430a      	orrs	r2, r1
 800628c:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	0c1b      	lsrs	r3, r3, #16
 8006294:	f003 0204 	and.w	r2, r3, #4
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629c:	431a      	orrs	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a2:	431a      	orrs	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	ea42 0103 	orr.w	r1, r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b088      	sub	sp, #32
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	60f8      	str	r0, [r7, #12]
 80062d6:	60b9      	str	r1, [r7, #8]
 80062d8:	603b      	str	r3, [r7, #0]
 80062da:	4613      	mov	r3, r2
 80062dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062de:	2300      	movs	r3, #0
 80062e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d101      	bne.n	80062f0 <HAL_SPI_Transmit+0x22>
 80062ec:	2302      	movs	r3, #2
 80062ee:	e150      	b.n	8006592 <HAL_SPI_Transmit+0x2c4>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062f8:	f7fc fe82 	bl	8003000 <HAL_GetTick>
 80062fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80062fe:	88fb      	ldrh	r3, [r7, #6]
 8006300:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b01      	cmp	r3, #1
 800630c:	d002      	beq.n	8006314 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800630e:	2302      	movs	r3, #2
 8006310:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006312:	e135      	b.n	8006580 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d002      	beq.n	8006320 <HAL_SPI_Transmit+0x52>
 800631a:	88fb      	ldrh	r3, [r7, #6]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d102      	bne.n	8006326 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006324:	e12c      	b.n	8006580 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2203      	movs	r2, #3
 800632a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	68ba      	ldr	r2, [r7, #8]
 8006338:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	88fa      	ldrh	r2, [r7, #6]
 800633e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	88fa      	ldrh	r2, [r7, #6]
 8006344:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006370:	d107      	bne.n	8006382 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006380:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638c:	2b40      	cmp	r3, #64	; 0x40
 800638e:	d007      	beq.n	80063a0 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800639e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063a8:	d94b      	bls.n	8006442 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d002      	beq.n	80063b8 <HAL_SPI_Transmit+0xea>
 80063b2:	8afb      	ldrh	r3, [r7, #22]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d13e      	bne.n	8006436 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063bc:	881a      	ldrh	r2, [r3, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c8:	1c9a      	adds	r2, r3, #2
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	3b01      	subs	r3, #1
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80063dc:	e02b      	b.n	8006436 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d112      	bne.n	8006412 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f0:	881a      	ldrh	r2, [r3, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fc:	1c9a      	adds	r2, r3, #2
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006406:	b29b      	uxth	r3, r3
 8006408:	3b01      	subs	r3, #1
 800640a:	b29a      	uxth	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006410:	e011      	b.n	8006436 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006412:	f7fc fdf5 	bl	8003000 <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	683a      	ldr	r2, [r7, #0]
 800641e:	429a      	cmp	r2, r3
 8006420:	d803      	bhi.n	800642a <HAL_SPI_Transmit+0x15c>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006428:	d102      	bne.n	8006430 <HAL_SPI_Transmit+0x162>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d102      	bne.n	8006436 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006434:	e0a4      	b.n	8006580 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800643a:	b29b      	uxth	r3, r3
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1ce      	bne.n	80063de <HAL_SPI_Transmit+0x110>
 8006440:	e07c      	b.n	800653c <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d002      	beq.n	8006450 <HAL_SPI_Transmit+0x182>
 800644a:	8afb      	ldrh	r3, [r7, #22]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d170      	bne.n	8006532 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006454:	b29b      	uxth	r3, r3
 8006456:	2b01      	cmp	r3, #1
 8006458:	d912      	bls.n	8006480 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645e:	881a      	ldrh	r2, [r3, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646a:	1c9a      	adds	r2, r3, #2
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006474:	b29b      	uxth	r3, r3
 8006476:	3b02      	subs	r3, #2
 8006478:	b29a      	uxth	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800647e:	e058      	b.n	8006532 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	330c      	adds	r3, #12
 800648a:	7812      	ldrb	r2, [r2, #0]
 800648c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800649c:	b29b      	uxth	r3, r3
 800649e:	3b01      	subs	r3, #1
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80064a6:	e044      	b.n	8006532 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d12b      	bne.n	800650e <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d912      	bls.n	80064e6 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c4:	881a      	ldrh	r2, [r3, #0]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d0:	1c9a      	adds	r2, r3, #2
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064da:	b29b      	uxth	r3, r3
 80064dc:	3b02      	subs	r3, #2
 80064de:	b29a      	uxth	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064e4:	e025      	b.n	8006532 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	330c      	adds	r3, #12
 80064f0:	7812      	ldrb	r2, [r2, #0]
 80064f2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f8:	1c5a      	adds	r2, r3, #1
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006502:	b29b      	uxth	r3, r3
 8006504:	3b01      	subs	r3, #1
 8006506:	b29a      	uxth	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800650c:	e011      	b.n	8006532 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800650e:	f7fc fd77 	bl	8003000 <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	429a      	cmp	r2, r3
 800651c:	d803      	bhi.n	8006526 <HAL_SPI_Transmit+0x258>
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006524:	d102      	bne.n	800652c <HAL_SPI_Transmit+0x25e>
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d102      	bne.n	8006532 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006530:	e026      	b.n	8006580 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006536:	b29b      	uxth	r3, r3
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1b5      	bne.n	80064a8 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800653c:	69ba      	ldr	r2, [r7, #24]
 800653e:	6839      	ldr	r1, [r7, #0]
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f000 fc94 	bl	8006e6e <SPI_EndRxTxTransaction>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d002      	beq.n	8006552 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2220      	movs	r2, #32
 8006550:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10a      	bne.n	8006570 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800655a:	2300      	movs	r3, #0
 800655c:	613b      	str	r3, [r7, #16]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	613b      	str	r3, [r7, #16]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	613b      	str	r3, [r7, #16]
 800656e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006574:	2b00      	cmp	r3, #0
 8006576:	d002      	beq.n	800657e <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	77fb      	strb	r3, [r7, #31]
 800657c:	e000      	b.n	8006580 <HAL_SPI_Transmit+0x2b2>
  }

error:
 800657e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006590:	7ffb      	ldrb	r3, [r7, #31]
}
 8006592:	4618      	mov	r0, r3
 8006594:	3720      	adds	r7, #32
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b088      	sub	sp, #32
 800659e:	af02      	add	r7, sp, #8
 80065a0:	60f8      	str	r0, [r7, #12]
 80065a2:	60b9      	str	r1, [r7, #8]
 80065a4:	603b      	str	r3, [r7, #0]
 80065a6:	4613      	mov	r3, r2
 80065a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065b6:	d112      	bne.n	80065de <HAL_SPI_Receive+0x44>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10e      	bne.n	80065de <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2204      	movs	r2, #4
 80065c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80065c8:	88fa      	ldrh	r2, [r7, #6]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	4613      	mov	r3, r2
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	68b9      	ldr	r1, [r7, #8]
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f000 f908 	bl	80067ea <HAL_SPI_TransmitReceive>
 80065da:	4603      	mov	r3, r0
 80065dc:	e101      	b.n	80067e2 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d101      	bne.n	80065ec <HAL_SPI_Receive+0x52>
 80065e8:	2302      	movs	r3, #2
 80065ea:	e0fa      	b.n	80067e2 <HAL_SPI_Receive+0x248>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065f4:	f7fc fd04 	bl	8003000 <HAL_GetTick>
 80065f8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b01      	cmp	r3, #1
 8006604:	d002      	beq.n	800660c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006606:	2302      	movs	r3, #2
 8006608:	75fb      	strb	r3, [r7, #23]
    goto error;
 800660a:	e0e1      	b.n	80067d0 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d002      	beq.n	8006618 <HAL_SPI_Receive+0x7e>
 8006612:	88fb      	ldrh	r3, [r7, #6]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d102      	bne.n	800661e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800661c:	e0d8      	b.n	80067d0 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2204      	movs	r2, #4
 8006622:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	88fa      	ldrh	r2, [r7, #6]
 8006636:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	88fa      	ldrh	r2, [r7, #6]
 800663e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006668:	d908      	bls.n	800667c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006678:	605a      	str	r2, [r3, #4]
 800667a:	e007      	b.n	800668c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800668a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006694:	d107      	bne.n	80066a6 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80066a4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b0:	2b40      	cmp	r3, #64	; 0x40
 80066b2:	d007      	beq.n	80066c4 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066c2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066cc:	d867      	bhi.n	800679e <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80066ce:	e030      	b.n	8006732 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d117      	bne.n	800670e <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f103 020c 	add.w	r2, r3, #12
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ea:	7812      	ldrb	r2, [r2, #0]
 80066ec:	b2d2      	uxtb	r2, r2
 80066ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f4:	1c5a      	adds	r2, r3, #1
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006700:	b29b      	uxth	r3, r3
 8006702:	3b01      	subs	r3, #1
 8006704:	b29a      	uxth	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800670c:	e011      	b.n	8006732 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800670e:	f7fc fc77 	bl	8003000 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	429a      	cmp	r2, r3
 800671c:	d803      	bhi.n	8006726 <HAL_SPI_Receive+0x18c>
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006724:	d102      	bne.n	800672c <HAL_SPI_Receive+0x192>
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d102      	bne.n	8006732 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006730:	e04e      	b.n	80067d0 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006738:	b29b      	uxth	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1c8      	bne.n	80066d0 <HAL_SPI_Receive+0x136>
 800673e:	e034      	b.n	80067aa <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b01      	cmp	r3, #1
 800674c:	d115      	bne.n	800677a <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68da      	ldr	r2, [r3, #12]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006758:	b292      	uxth	r2, r2
 800675a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006760:	1c9a      	adds	r2, r3, #2
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800676c:	b29b      	uxth	r3, r3
 800676e:	3b01      	subs	r3, #1
 8006770:	b29a      	uxth	r2, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006778:	e011      	b.n	800679e <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800677a:	f7fc fc41 	bl	8003000 <HAL_GetTick>
 800677e:	4602      	mov	r2, r0
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	683a      	ldr	r2, [r7, #0]
 8006786:	429a      	cmp	r2, r3
 8006788:	d803      	bhi.n	8006792 <HAL_SPI_Receive+0x1f8>
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006790:	d102      	bne.n	8006798 <HAL_SPI_Receive+0x1fe>
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d102      	bne.n	800679e <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800679c:	e018      	b.n	80067d0 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1ca      	bne.n	8006740 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	6839      	ldr	r1, [r7, #0]
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f000 fb05 	bl	8006dbe <SPI_EndRxTransaction>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d002      	beq.n	80067c0 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2220      	movs	r2, #32
 80067be:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d002      	beq.n	80067ce <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	75fb      	strb	r3, [r7, #23]
 80067cc:	e000      	b.n	80067d0 <HAL_SPI_Receive+0x236>
  }

error :
 80067ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80067e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3718      	adds	r7, #24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b08a      	sub	sp, #40	; 0x28
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	60f8      	str	r0, [r7, #12]
 80067f2:	60b9      	str	r1, [r7, #8]
 80067f4:	607a      	str	r2, [r7, #4]
 80067f6:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80067f8:	2301      	movs	r3, #1
 80067fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80067fc:	2300      	movs	r3, #0
 80067fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006808:	2b01      	cmp	r3, #1
 800680a:	d101      	bne.n	8006810 <HAL_SPI_TransmitReceive+0x26>
 800680c:	2302      	movs	r3, #2
 800680e:	e1fb      	b.n	8006c08 <HAL_SPI_TransmitReceive+0x41e>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006818:	f7fc fbf2 	bl	8003000 <HAL_GetTick>
 800681c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006824:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800682c:	887b      	ldrh	r3, [r7, #2]
 800682e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006830:	887b      	ldrh	r3, [r7, #2]
 8006832:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006834:	7efb      	ldrb	r3, [r7, #27]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d00e      	beq.n	8006858 <HAL_SPI_TransmitReceive+0x6e>
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006840:	d106      	bne.n	8006850 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d102      	bne.n	8006850 <HAL_SPI_TransmitReceive+0x66>
 800684a:	7efb      	ldrb	r3, [r7, #27]
 800684c:	2b04      	cmp	r3, #4
 800684e:	d003      	beq.n	8006858 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006850:	2302      	movs	r3, #2
 8006852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006856:	e1cd      	b.n	8006bf4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d005      	beq.n	800686a <HAL_SPI_TransmitReceive+0x80>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d002      	beq.n	800686a <HAL_SPI_TransmitReceive+0x80>
 8006864:	887b      	ldrh	r3, [r7, #2]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d103      	bne.n	8006872 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006870:	e1c0      	b.n	8006bf4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b04      	cmp	r3, #4
 800687c:	d003      	beq.n	8006886 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2205      	movs	r2, #5
 8006882:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	887a      	ldrh	r2, [r7, #2]
 8006896:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	887a      	ldrh	r2, [r7, #2]
 800689e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	887a      	ldrh	r2, [r7, #2]
 80068ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	887a      	ldrh	r2, [r7, #2]
 80068b2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068c8:	d802      	bhi.n	80068d0 <HAL_SPI_TransmitReceive+0xe6>
 80068ca:	8a3b      	ldrh	r3, [r7, #16]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d908      	bls.n	80068e2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80068de:	605a      	str	r2, [r3, #4]
 80068e0:	e007      	b.n	80068f2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	685a      	ldr	r2, [r3, #4]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068f0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fc:	2b40      	cmp	r3, #64	; 0x40
 80068fe:	d007      	beq.n	8006910 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800690e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006918:	d97c      	bls.n	8006a14 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d002      	beq.n	8006928 <HAL_SPI_TransmitReceive+0x13e>
 8006922:	8a7b      	ldrh	r3, [r7, #18]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d169      	bne.n	80069fc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692c:	881a      	ldrh	r2, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006938:	1c9a      	adds	r2, r3, #2
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006942:	b29b      	uxth	r3, r3
 8006944:	3b01      	subs	r3, #1
 8006946:	b29a      	uxth	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800694c:	e056      	b.n	80069fc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f003 0302 	and.w	r3, r3, #2
 8006958:	2b02      	cmp	r3, #2
 800695a:	d11b      	bne.n	8006994 <HAL_SPI_TransmitReceive+0x1aa>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006960:	b29b      	uxth	r3, r3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d016      	beq.n	8006994 <HAL_SPI_TransmitReceive+0x1aa>
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	2b01      	cmp	r3, #1
 800696a:	d113      	bne.n	8006994 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006970:	881a      	ldrh	r2, [r3, #0]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697c:	1c9a      	adds	r2, r3, #2
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006986:	b29b      	uxth	r3, r3
 8006988:	3b01      	subs	r3, #1
 800698a:	b29a      	uxth	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006990:	2300      	movs	r3, #0
 8006992:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d11c      	bne.n	80069dc <HAL_SPI_TransmitReceive+0x1f2>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d016      	beq.n	80069dc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68da      	ldr	r2, [r3, #12]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b8:	b292      	uxth	r2, r2
 80069ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c0:	1c9a      	adds	r2, r3, #2
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	3b01      	subs	r3, #1
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069d8:	2301      	movs	r3, #1
 80069da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80069dc:	f7fc fb10 	bl	8003000 <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d807      	bhi.n	80069fc <HAL_SPI_TransmitReceive+0x212>
 80069ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069f2:	d003      	beq.n	80069fc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80069fa:	e0fb      	b.n	8006bf4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1a3      	bne.n	800694e <HAL_SPI_TransmitReceive+0x164>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d19d      	bne.n	800694e <HAL_SPI_TransmitReceive+0x164>
 8006a12:	e0df      	b.n	8006bd4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d003      	beq.n	8006a24 <HAL_SPI_TransmitReceive+0x23a>
 8006a1c:	8a7b      	ldrh	r3, [r7, #18]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	f040 80cb 	bne.w	8006bba <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d912      	bls.n	8006a54 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a32:	881a      	ldrh	r2, [r3, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3e:	1c9a      	adds	r2, r3, #2
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	3b02      	subs	r3, #2
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a52:	e0b2      	b.n	8006bba <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	330c      	adds	r3, #12
 8006a5e:	7812      	ldrb	r2, [r2, #0]
 8006a60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a66:	1c5a      	adds	r2, r3, #1
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	3b01      	subs	r3, #1
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a7a:	e09e      	b.n	8006bba <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f003 0302 	and.w	r3, r3, #2
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d134      	bne.n	8006af4 <HAL_SPI_TransmitReceive+0x30a>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d02f      	beq.n	8006af4 <HAL_SPI_TransmitReceive+0x30a>
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d12c      	bne.n	8006af4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d912      	bls.n	8006aca <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa8:	881a      	ldrh	r2, [r3, #0]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab4:	1c9a      	adds	r2, r3, #2
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	3b02      	subs	r3, #2
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ac8:	e012      	b.n	8006af0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	330c      	adds	r3, #12
 8006ad4:	7812      	ldrb	r2, [r2, #0]
 8006ad6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006adc:	1c5a      	adds	r2, r3, #1
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006af0:	2300      	movs	r3, #0
 8006af2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d148      	bne.n	8006b94 <HAL_SPI_TransmitReceive+0x3aa>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d042      	beq.n	8006b94 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d923      	bls.n	8006b62 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68da      	ldr	r2, [r3, #12]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b24:	b292      	uxth	r2, r2
 8006b26:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2c:	1c9a      	adds	r2, r3, #2
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	3b02      	subs	r3, #2
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d81f      	bhi.n	8006b90 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b5e:	605a      	str	r2, [r3, #4]
 8006b60:	e016      	b.n	8006b90 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f103 020c 	add.w	r2, r3, #12
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6e:	7812      	ldrb	r2, [r2, #0]
 8006b70:	b2d2      	uxtb	r2, r2
 8006b72:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b78:	1c5a      	adds	r2, r3, #1
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	3b01      	subs	r3, #1
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b90:	2301      	movs	r3, #1
 8006b92:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b94:	f7fc fa34 	bl	8003000 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d803      	bhi.n	8006bac <HAL_SPI_TransmitReceive+0x3c2>
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006baa:	d102      	bne.n	8006bb2 <HAL_SPI_TransmitReceive+0x3c8>
 8006bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d103      	bne.n	8006bba <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006bb8:	e01c      	b.n	8006bf4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f47f af5b 	bne.w	8006a7c <HAL_SPI_TransmitReceive+0x292>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f47f af54 	bne.w	8006a7c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bd4:	69fa      	ldr	r2, [r7, #28]
 8006bd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f000 f948 	bl	8006e6e <SPI_EndRxTxTransaction>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d006      	beq.n	8006bf2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2220      	movs	r2, #32
 8006bee:	661a      	str	r2, [r3, #96]	; 0x60
 8006bf0:	e000      	b.n	8006bf4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006bf2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006c04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3728      	adds	r7, #40	; 0x28
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	603b      	str	r3, [r7, #0]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c20:	e04c      	b.n	8006cbc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c28:	d048      	beq.n	8006cbc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006c2a:	f7fc f9e9 	bl	8003000 <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	683a      	ldr	r2, [r7, #0]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d902      	bls.n	8006c40 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d13d      	bne.n	8006cbc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	685a      	ldr	r2, [r3, #4]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c4e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c58:	d111      	bne.n	8006c7e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c62:	d004      	beq.n	8006c6e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c6c:	d107      	bne.n	8006c7e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c7c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c86:	d10f      	bne.n	8006ca8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c96:	601a      	str	r2, [r3, #0]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ca6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e00f      	b.n	8006cdc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	689a      	ldr	r2, [r3, #8]
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	bf0c      	ite	eq
 8006ccc:	2301      	moveq	r3, #1
 8006cce:	2300      	movne	r3, #0
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	79fb      	ldrb	r3, [r7, #7]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d1a3      	bne.n	8006c22 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
 8006cf0:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8006cf2:	e057      	b.n	8006da4 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006cfa:	d106      	bne.n	8006d0a <SPI_WaitFifoStateUntilTimeout+0x26>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d103      	bne.n	8006d0a <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	330c      	adds	r3, #12
 8006d08:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d10:	d048      	beq.n	8006da4 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006d12:	f7fc f975 	bl	8003000 <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	683a      	ldr	r2, [r7, #0]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d902      	bls.n	8006d28 <SPI_WaitFifoStateUntilTimeout+0x44>
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d13d      	bne.n	8006da4 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	685a      	ldr	r2, [r3, #4]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d36:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d40:	d111      	bne.n	8006d66 <SPI_WaitFifoStateUntilTimeout+0x82>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d4a:	d004      	beq.n	8006d56 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d54:	d107      	bne.n	8006d66 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d64:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d6e:	d10f      	bne.n	8006d90 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d7e:	601a      	str	r2, [r3, #0]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d8e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006da0:	2303      	movs	r3, #3
 8006da2:	e008      	b.n	8006db6 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689a      	ldr	r2, [r3, #8]
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	4013      	ands	r3, r2
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d19f      	bne.n	8006cf4 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b086      	sub	sp, #24
 8006dc2:	af02      	add	r7, sp, #8
 8006dc4:	60f8      	str	r0, [r7, #12]
 8006dc6:	60b9      	str	r1, [r7, #8]
 8006dc8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dd2:	d111      	bne.n	8006df8 <SPI_EndRxTransaction+0x3a>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ddc:	d004      	beq.n	8006de8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006de6:	d107      	bne.n	8006df8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006df6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	9300      	str	r3, [sp, #0]
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	2180      	movs	r1, #128	; 0x80
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f7ff ff04 	bl	8006c10 <SPI_WaitFlagStateUntilTimeout>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d007      	beq.n	8006e1e <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e12:	f043 0220 	orr.w	r2, r3, #32
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e023      	b.n	8006e66 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e26:	d11d      	bne.n	8006e64 <SPI_EndRxTransaction+0xa6>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e30:	d004      	beq.n	8006e3c <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e3a:	d113      	bne.n	8006e64 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f7ff ff4b 	bl	8006ce4 <SPI_WaitFifoStateUntilTimeout>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d007      	beq.n	8006e64 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e58:	f043 0220 	orr.w	r2, r3, #32
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006e60:	2303      	movs	r3, #3
 8006e62:	e000      	b.n	8006e66 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b086      	sub	sp, #24
 8006e72:	af02      	add	r7, sp, #8
 8006e74:	60f8      	str	r0, [r7, #12]
 8006e76:	60b9      	str	r1, [r7, #8]
 8006e78:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f7ff ff2c 	bl	8006ce4 <SPI_WaitFifoStateUntilTimeout>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d007      	beq.n	8006ea2 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e96:	f043 0220 	orr.w	r2, r3, #32
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e027      	b.n	8006ef2 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	2180      	movs	r1, #128	; 0x80
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f7ff feaf 	bl	8006c10 <SPI_WaitFlagStateUntilTimeout>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d007      	beq.n	8006ec8 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ebc:	f043 0220 	orr.w	r2, r3, #32
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e014      	b.n	8006ef2 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f7ff ff05 	bl	8006ce4 <SPI_WaitFifoStateUntilTimeout>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d007      	beq.n	8006ef0 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ee4:	f043 0220 	orr.w	r2, r3, #32
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e000      	b.n	8006ef2 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b082      	sub	sp, #8
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d101      	bne.n	8006f0c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e01d      	b.n	8006f48 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d106      	bne.n	8006f26 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f7fb fe75 	bl	8002c10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2202      	movs	r2, #2
 8006f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	3304      	adds	r3, #4
 8006f36:	4619      	mov	r1, r3
 8006f38:	4610      	mov	r0, r2
 8006f3a:	f000 f97b 	bl	8007234 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3708      	adds	r7, #8
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68da      	ldr	r2, [r3, #12]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f042 0201 	orr.w	r2, r2, #1
 8006f66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	689a      	ldr	r2, [r3, #8]
 8006f6e:	4b0c      	ldr	r3, [pc, #48]	; (8006fa0 <HAL_TIM_Base_Start_IT+0x50>)
 8006f70:	4013      	ands	r3, r2
 8006f72:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2b06      	cmp	r3, #6
 8006f78:	d00b      	beq.n	8006f92 <HAL_TIM_Base_Start_IT+0x42>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f80:	d007      	beq.n	8006f92 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f042 0201 	orr.w	r2, r2, #1
 8006f90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3714      	adds	r7, #20
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	00010007 	.word	0x00010007

08006fa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d122      	bne.n	8007000 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d11b      	bne.n	8007000 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f06f 0202 	mvn.w	r2, #2
 8006fd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	f003 0303 	and.w	r3, r3, #3
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d003      	beq.n	8006fee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f905 	bl	80071f6 <HAL_TIM_IC_CaptureCallback>
 8006fec:	e005      	b.n	8006ffa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f8f7 	bl	80071e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f908 	bl	800720a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	f003 0304 	and.w	r3, r3, #4
 800700a:	2b04      	cmp	r3, #4
 800700c:	d122      	bne.n	8007054 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	f003 0304 	and.w	r3, r3, #4
 8007018:	2b04      	cmp	r3, #4
 800701a:	d11b      	bne.n	8007054 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f06f 0204 	mvn.w	r2, #4
 8007024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2202      	movs	r2, #2
 800702a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007036:	2b00      	cmp	r3, #0
 8007038:	d003      	beq.n	8007042 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f8db 	bl	80071f6 <HAL_TIM_IC_CaptureCallback>
 8007040:	e005      	b.n	800704e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f8cd 	bl	80071e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 f8de 	bl	800720a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	f003 0308 	and.w	r3, r3, #8
 800705e:	2b08      	cmp	r3, #8
 8007060:	d122      	bne.n	80070a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	f003 0308 	and.w	r3, r3, #8
 800706c:	2b08      	cmp	r3, #8
 800706e:	d11b      	bne.n	80070a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f06f 0208 	mvn.w	r2, #8
 8007078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2204      	movs	r2, #4
 800707e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	f003 0303 	and.w	r3, r3, #3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d003      	beq.n	8007096 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f8b1 	bl	80071f6 <HAL_TIM_IC_CaptureCallback>
 8007094:	e005      	b.n	80070a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f8a3 	bl	80071e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f8b4 	bl	800720a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	f003 0310 	and.w	r3, r3, #16
 80070b2:	2b10      	cmp	r3, #16
 80070b4:	d122      	bne.n	80070fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	f003 0310 	and.w	r3, r3, #16
 80070c0:	2b10      	cmp	r3, #16
 80070c2:	d11b      	bne.n	80070fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f06f 0210 	mvn.w	r2, #16
 80070cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2208      	movs	r2, #8
 80070d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	69db      	ldr	r3, [r3, #28]
 80070da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d003      	beq.n	80070ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 f887 	bl	80071f6 <HAL_TIM_IC_CaptureCallback>
 80070e8:	e005      	b.n	80070f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f879 	bl	80071e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f88a 	bl	800720a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	2b01      	cmp	r3, #1
 8007108:	d10e      	bne.n	8007128 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	f003 0301 	and.w	r3, r3, #1
 8007114:	2b01      	cmp	r3, #1
 8007116:	d107      	bne.n	8007128 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f06f 0201 	mvn.w	r2, #1
 8007120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f7fa ff66 	bl	8001ff4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007132:	2b80      	cmp	r3, #128	; 0x80
 8007134:	d10e      	bne.n	8007154 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007140:	2b80      	cmp	r3, #128	; 0x80
 8007142:	d107      	bne.n	8007154 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800714c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f8de 	bl	8007310 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800715e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007162:	d10e      	bne.n	8007182 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800716e:	2b80      	cmp	r3, #128	; 0x80
 8007170:	d107      	bne.n	8007182 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800717a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 f8d1 	bl	8007324 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800718c:	2b40      	cmp	r3, #64	; 0x40
 800718e:	d10e      	bne.n	80071ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719a:	2b40      	cmp	r3, #64	; 0x40
 800719c:	d107      	bne.n	80071ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f838 	bl	800721e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	f003 0320 	and.w	r3, r3, #32
 80071b8:	2b20      	cmp	r3, #32
 80071ba:	d10e      	bne.n	80071da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	f003 0320 	and.w	r3, r3, #32
 80071c6:	2b20      	cmp	r3, #32
 80071c8:	d107      	bne.n	80071da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f06f 0220 	mvn.w	r2, #32
 80071d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f891 	bl	80072fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071da:	bf00      	nop
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071e2:	b480      	push	{r7}
 80071e4:	b083      	sub	sp, #12
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071ea:	bf00      	nop
 80071ec:	370c      	adds	r7, #12
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071f6:	b480      	push	{r7}
 80071f8:	b083      	sub	sp, #12
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071fe:	bf00      	nop
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800720a:	b480      	push	{r7}
 800720c:	b083      	sub	sp, #12
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007212:	bf00      	nop
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800721e:	b480      	push	{r7}
 8007220:	b083      	sub	sp, #12
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007226:	bf00      	nop
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
	...

08007234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a2a      	ldr	r2, [pc, #168]	; (80072f0 <TIM_Base_SetConfig+0xbc>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d003      	beq.n	8007254 <TIM_Base_SetConfig+0x20>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007252:	d108      	bne.n	8007266 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800725a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	4313      	orrs	r3, r2
 8007264:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4a21      	ldr	r2, [pc, #132]	; (80072f0 <TIM_Base_SetConfig+0xbc>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d00b      	beq.n	8007286 <TIM_Base_SetConfig+0x52>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007274:	d007      	beq.n	8007286 <TIM_Base_SetConfig+0x52>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a1e      	ldr	r2, [pc, #120]	; (80072f4 <TIM_Base_SetConfig+0xc0>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d003      	beq.n	8007286 <TIM_Base_SetConfig+0x52>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a1d      	ldr	r2, [pc, #116]	; (80072f8 <TIM_Base_SetConfig+0xc4>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d108      	bne.n	8007298 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800728c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	4313      	orrs	r3, r2
 8007296:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	689a      	ldr	r2, [r3, #8]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a0c      	ldr	r2, [pc, #48]	; (80072f0 <TIM_Base_SetConfig+0xbc>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d007      	beq.n	80072d4 <TIM_Base_SetConfig+0xa0>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a0b      	ldr	r2, [pc, #44]	; (80072f4 <TIM_Base_SetConfig+0xc0>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d003      	beq.n	80072d4 <TIM_Base_SetConfig+0xa0>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a0a      	ldr	r2, [pc, #40]	; (80072f8 <TIM_Base_SetConfig+0xc4>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d103      	bne.n	80072dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	691a      	ldr	r2, [r3, #16]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	615a      	str	r2, [r3, #20]
}
 80072e2:	bf00      	nop
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	40012c00 	.word	0x40012c00
 80072f4:	40014400 	.word	0x40014400
 80072f8:	40014800 	.word	0x40014800

080072fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <LL_RCC_GetUSARTClockSource>:
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007344:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4013      	ands	r3, r2
}
 800734c:	4618      	mov	r0, r3
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <LL_RCC_GetLPUARTClockSource>:
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007364:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4013      	ands	r3, r2
}
 800736c:	4618      	mov	r0, r3
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d101      	bne.n	800738a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e042      	b.n	8007410 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007390:	2b00      	cmp	r3, #0
 8007392:	d106      	bne.n	80073a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f7fb fcd1 	bl	8002d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2224      	movs	r2, #36	; 0x24
 80073a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f022 0201 	bic.w	r2, r2, #1
 80073b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f82c 	bl	8007418 <UART_SetConfig>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d101      	bne.n	80073ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e022      	b.n	8007410 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f001 f884 	bl	80084e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	685a      	ldr	r2, [r3, #4]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	689a      	ldr	r2, [r3, #8]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f042 0201 	orr.w	r2, r2, #1
 8007406:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f001 f90b 	bl	8008624 <UART_CheckIdleState>
 800740e:	4603      	mov	r3, r0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007418:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800741c:	b08a      	sub	sp, #40	; 0x28
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007422:	2300      	movs	r3, #0
 8007424:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007426:	2300      	movs	r3, #0
 8007428:	76fb      	strb	r3, [r7, #27]
#if defined(LPUART1)
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800742a:	2300      	movs	r3, #0
 800742c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	689a      	ldr	r2, [r3, #8]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	431a      	orrs	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	695b      	ldr	r3, [r3, #20]
 800743c:	431a      	orrs	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	69db      	ldr	r3, [r3, #28]
 8007442:	4313      	orrs	r3, r2
 8007444:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800744a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800744c:	4313      	orrs	r3, r2
 800744e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	4ba4      	ldr	r3, [pc, #656]	; (80076e8 <UART_SetConfig+0x2d0>)
 8007458:	4013      	ands	r3, r2
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	6812      	ldr	r2, [r2, #0]
 800745e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007460:	430b      	orrs	r3, r1
 8007462:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	68da      	ldr	r2, [r3, #12]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	430a      	orrs	r2, r1
 8007478:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	699b      	ldr	r3, [r3, #24]
 800747e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a99      	ldr	r2, [pc, #612]	; (80076ec <UART_SetConfig+0x2d4>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d004      	beq.n	8007494 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007490:	4313      	orrs	r3, r2
 8007492:	627b      	str	r3, [r7, #36]	; 0x24
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800749e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	6812      	ldr	r2, [r2, #0]
 80074a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074a8:	430b      	orrs	r3, r1
 80074aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b2:	f023 010f 	bic.w	r1, r3, #15
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	430a      	orrs	r2, r1
 80074c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a8a      	ldr	r2, [pc, #552]	; (80076f0 <UART_SetConfig+0x2d8>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d126      	bne.n	800751a <UART_SetConfig+0x102>
 80074cc:	2003      	movs	r0, #3
 80074ce:	f7ff ff33 	bl	8007338 <LL_RCC_GetUSARTClockSource>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b03      	cmp	r3, #3
 80074d6:	d81b      	bhi.n	8007510 <UART_SetConfig+0xf8>
 80074d8:	a201      	add	r2, pc, #4	; (adr r2, 80074e0 <UART_SetConfig+0xc8>)
 80074da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074de:	bf00      	nop
 80074e0:	080074f1 	.word	0x080074f1
 80074e4:	08007501 	.word	0x08007501
 80074e8:	080074f9 	.word	0x080074f9
 80074ec:	08007509 	.word	0x08007509
 80074f0:	2301      	movs	r3, #1
 80074f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074f6:	e042      	b.n	800757e <UART_SetConfig+0x166>
 80074f8:	2302      	movs	r3, #2
 80074fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074fe:	e03e      	b.n	800757e <UART_SetConfig+0x166>
 8007500:	2304      	movs	r3, #4
 8007502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007506:	e03a      	b.n	800757e <UART_SetConfig+0x166>
 8007508:	2308      	movs	r3, #8
 800750a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800750e:	e036      	b.n	800757e <UART_SetConfig+0x166>
 8007510:	2310      	movs	r3, #16
 8007512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007516:	bf00      	nop
 8007518:	e031      	b.n	800757e <UART_SetConfig+0x166>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a73      	ldr	r2, [pc, #460]	; (80076ec <UART_SetConfig+0x2d4>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d129      	bne.n	8007578 <UART_SetConfig+0x160>
 8007524:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007528:	f7ff ff16 	bl	8007358 <LL_RCC_GetLPUARTClockSource>
 800752c:	4603      	mov	r3, r0
 800752e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007532:	d014      	beq.n	800755e <UART_SetConfig+0x146>
 8007534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007538:	d802      	bhi.n	8007540 <UART_SetConfig+0x128>
 800753a:	2b00      	cmp	r3, #0
 800753c:	d007      	beq.n	800754e <UART_SetConfig+0x136>
 800753e:	e016      	b.n	800756e <UART_SetConfig+0x156>
 8007540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007544:	d007      	beq.n	8007556 <UART_SetConfig+0x13e>
 8007546:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800754a:	d00c      	beq.n	8007566 <UART_SetConfig+0x14e>
 800754c:	e00f      	b.n	800756e <UART_SetConfig+0x156>
 800754e:	2300      	movs	r3, #0
 8007550:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007554:	e013      	b.n	800757e <UART_SetConfig+0x166>
 8007556:	2302      	movs	r3, #2
 8007558:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800755c:	e00f      	b.n	800757e <UART_SetConfig+0x166>
 800755e:	2304      	movs	r3, #4
 8007560:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007564:	e00b      	b.n	800757e <UART_SetConfig+0x166>
 8007566:	2308      	movs	r3, #8
 8007568:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800756c:	e007      	b.n	800757e <UART_SetConfig+0x166>
 800756e:	2310      	movs	r3, #16
 8007570:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007574:	bf00      	nop
 8007576:	e002      	b.n	800757e <UART_SetConfig+0x166>
 8007578:	2310      	movs	r3, #16
 800757a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a5a      	ldr	r2, [pc, #360]	; (80076ec <UART_SetConfig+0x2d4>)
 8007584:	4293      	cmp	r3, r2
 8007586:	f040 8428 	bne.w	8007dda <UART_SetConfig+0x9c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800758a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800758e:	2b08      	cmp	r3, #8
 8007590:	f200 8171 	bhi.w	8007876 <UART_SetConfig+0x45e>
 8007594:	a201      	add	r2, pc, #4	; (adr r2, 800759c <UART_SetConfig+0x184>)
 8007596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800759a:	bf00      	nop
 800759c:	080075c1 	.word	0x080075c1
 80075a0:	08007877 	.word	0x08007877
 80075a4:	08007663 	.word	0x08007663
 80075a8:	08007877 	.word	0x08007877
 80075ac:	08007727 	.word	0x08007727
 80075b0:	08007877 	.word	0x08007877
 80075b4:	08007877 	.word	0x08007877
 80075b8:	08007877 	.word	0x08007877
 80075bc:	080077c9 	.word	0x080077c9
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80075c0:	f7fd ff56 	bl	8005470 <HAL_RCC_GetPCLK1Freq>
 80075c4:	4602      	mov	r2, r0
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d044      	beq.n	8007658 <UART_SetConfig+0x240>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d03e      	beq.n	8007654 <UART_SetConfig+0x23c>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d038      	beq.n	8007650 <UART_SetConfig+0x238>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e2:	2b03      	cmp	r3, #3
 80075e4:	d032      	beq.n	800764c <UART_SetConfig+0x234>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ea:	2b04      	cmp	r3, #4
 80075ec:	d02c      	beq.n	8007648 <UART_SetConfig+0x230>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f2:	2b05      	cmp	r3, #5
 80075f4:	d026      	beq.n	8007644 <UART_SetConfig+0x22c>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fa:	2b06      	cmp	r3, #6
 80075fc:	d020      	beq.n	8007640 <UART_SetConfig+0x228>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007602:	2b07      	cmp	r3, #7
 8007604:	d01a      	beq.n	800763c <UART_SetConfig+0x224>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760a:	2b08      	cmp	r3, #8
 800760c:	d014      	beq.n	8007638 <UART_SetConfig+0x220>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007612:	2b09      	cmp	r3, #9
 8007614:	d00e      	beq.n	8007634 <UART_SetConfig+0x21c>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761a:	2b0a      	cmp	r3, #10
 800761c:	d008      	beq.n	8007630 <UART_SetConfig+0x218>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007622:	2b0b      	cmp	r3, #11
 8007624:	d102      	bne.n	800762c <UART_SetConfig+0x214>
 8007626:	f44f 7380 	mov.w	r3, #256	; 0x100
 800762a:	e016      	b.n	800765a <UART_SetConfig+0x242>
 800762c:	2301      	movs	r3, #1
 800762e:	e014      	b.n	800765a <UART_SetConfig+0x242>
 8007630:	2380      	movs	r3, #128	; 0x80
 8007632:	e012      	b.n	800765a <UART_SetConfig+0x242>
 8007634:	2340      	movs	r3, #64	; 0x40
 8007636:	e010      	b.n	800765a <UART_SetConfig+0x242>
 8007638:	2320      	movs	r3, #32
 800763a:	e00e      	b.n	800765a <UART_SetConfig+0x242>
 800763c:	2310      	movs	r3, #16
 800763e:	e00c      	b.n	800765a <UART_SetConfig+0x242>
 8007640:	230c      	movs	r3, #12
 8007642:	e00a      	b.n	800765a <UART_SetConfig+0x242>
 8007644:	230a      	movs	r3, #10
 8007646:	e008      	b.n	800765a <UART_SetConfig+0x242>
 8007648:	2308      	movs	r3, #8
 800764a:	e006      	b.n	800765a <UART_SetConfig+0x242>
 800764c:	2306      	movs	r3, #6
 800764e:	e004      	b.n	800765a <UART_SetConfig+0x242>
 8007650:	2304      	movs	r3, #4
 8007652:	e002      	b.n	800765a <UART_SetConfig+0x242>
 8007654:	2302      	movs	r3, #2
 8007656:	e000      	b.n	800765a <UART_SetConfig+0x242>
 8007658:	2301      	movs	r3, #1
 800765a:	fbb2 f3f3 	udiv	r3, r2, r3
 800765e:	617b      	str	r3, [r7, #20]
        break;
 8007660:	e10c      	b.n	800787c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007666:	2b00      	cmp	r3, #0
 8007668:	d05a      	beq.n	8007720 <UART_SetConfig+0x308>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766e:	2b01      	cmp	r3, #1
 8007670:	d054      	beq.n	800771c <UART_SetConfig+0x304>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007676:	2b02      	cmp	r3, #2
 8007678:	d04e      	beq.n	8007718 <UART_SetConfig+0x300>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767e:	2b03      	cmp	r3, #3
 8007680:	d048      	beq.n	8007714 <UART_SetConfig+0x2fc>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007686:	2b04      	cmp	r3, #4
 8007688:	d02c      	beq.n	80076e4 <UART_SetConfig+0x2cc>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768e:	2b05      	cmp	r3, #5
 8007690:	d026      	beq.n	80076e0 <UART_SetConfig+0x2c8>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007696:	2b06      	cmp	r3, #6
 8007698:	d020      	beq.n	80076dc <UART_SetConfig+0x2c4>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769e:	2b07      	cmp	r3, #7
 80076a0:	d01a      	beq.n	80076d8 <UART_SetConfig+0x2c0>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a6:	2b08      	cmp	r3, #8
 80076a8:	d014      	beq.n	80076d4 <UART_SetConfig+0x2bc>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ae:	2b09      	cmp	r3, #9
 80076b0:	d00e      	beq.n	80076d0 <UART_SetConfig+0x2b8>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b6:	2b0a      	cmp	r3, #10
 80076b8:	d008      	beq.n	80076cc <UART_SetConfig+0x2b4>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076be:	2b0b      	cmp	r3, #11
 80076c0:	d102      	bne.n	80076c8 <UART_SetConfig+0x2b0>
 80076c2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80076c6:	e02c      	b.n	8007722 <UART_SetConfig+0x30a>
 80076c8:	4b0a      	ldr	r3, [pc, #40]	; (80076f4 <UART_SetConfig+0x2dc>)
 80076ca:	e02a      	b.n	8007722 <UART_SetConfig+0x30a>
 80076cc:	4b0a      	ldr	r3, [pc, #40]	; (80076f8 <UART_SetConfig+0x2e0>)
 80076ce:	e028      	b.n	8007722 <UART_SetConfig+0x30a>
 80076d0:	4b0a      	ldr	r3, [pc, #40]	; (80076fc <UART_SetConfig+0x2e4>)
 80076d2:	e026      	b.n	8007722 <UART_SetConfig+0x30a>
 80076d4:	4b0a      	ldr	r3, [pc, #40]	; (8007700 <UART_SetConfig+0x2e8>)
 80076d6:	e024      	b.n	8007722 <UART_SetConfig+0x30a>
 80076d8:	4b0a      	ldr	r3, [pc, #40]	; (8007704 <UART_SetConfig+0x2ec>)
 80076da:	e022      	b.n	8007722 <UART_SetConfig+0x30a>
 80076dc:	4b0a      	ldr	r3, [pc, #40]	; (8007708 <UART_SetConfig+0x2f0>)
 80076de:	e020      	b.n	8007722 <UART_SetConfig+0x30a>
 80076e0:	4b0a      	ldr	r3, [pc, #40]	; (800770c <UART_SetConfig+0x2f4>)
 80076e2:	e01e      	b.n	8007722 <UART_SetConfig+0x30a>
 80076e4:	4b0a      	ldr	r3, [pc, #40]	; (8007710 <UART_SetConfig+0x2f8>)
 80076e6:	e01c      	b.n	8007722 <UART_SetConfig+0x30a>
 80076e8:	cfff69f3 	.word	0xcfff69f3
 80076ec:	40008000 	.word	0x40008000
 80076f0:	40013800 	.word	0x40013800
 80076f4:	00f42400 	.word	0x00f42400
 80076f8:	0001e848 	.word	0x0001e848
 80076fc:	0003d090 	.word	0x0003d090
 8007700:	0007a120 	.word	0x0007a120
 8007704:	000f4240 	.word	0x000f4240
 8007708:	00145855 	.word	0x00145855
 800770c:	00186a00 	.word	0x00186a00
 8007710:	001e8480 	.word	0x001e8480
 8007714:	4ba6      	ldr	r3, [pc, #664]	; (80079b0 <UART_SetConfig+0x598>)
 8007716:	e004      	b.n	8007722 <UART_SetConfig+0x30a>
 8007718:	4ba6      	ldr	r3, [pc, #664]	; (80079b4 <UART_SetConfig+0x59c>)
 800771a:	e002      	b.n	8007722 <UART_SetConfig+0x30a>
 800771c:	4ba6      	ldr	r3, [pc, #664]	; (80079b8 <UART_SetConfig+0x5a0>)
 800771e:	e000      	b.n	8007722 <UART_SetConfig+0x30a>
 8007720:	4ba6      	ldr	r3, [pc, #664]	; (80079bc <UART_SetConfig+0x5a4>)
 8007722:	617b      	str	r3, [r7, #20]
        break;
 8007724:	e0aa      	b.n	800787c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007726:	f7fd fe25 	bl	8005374 <HAL_RCC_GetSysClockFreq>
 800772a:	4602      	mov	r2, r0
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007730:	2b00      	cmp	r3, #0
 8007732:	d044      	beq.n	80077be <UART_SetConfig+0x3a6>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007738:	2b01      	cmp	r3, #1
 800773a:	d03e      	beq.n	80077ba <UART_SetConfig+0x3a2>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007740:	2b02      	cmp	r3, #2
 8007742:	d038      	beq.n	80077b6 <UART_SetConfig+0x39e>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007748:	2b03      	cmp	r3, #3
 800774a:	d032      	beq.n	80077b2 <UART_SetConfig+0x39a>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007750:	2b04      	cmp	r3, #4
 8007752:	d02c      	beq.n	80077ae <UART_SetConfig+0x396>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007758:	2b05      	cmp	r3, #5
 800775a:	d026      	beq.n	80077aa <UART_SetConfig+0x392>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007760:	2b06      	cmp	r3, #6
 8007762:	d020      	beq.n	80077a6 <UART_SetConfig+0x38e>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007768:	2b07      	cmp	r3, #7
 800776a:	d01a      	beq.n	80077a2 <UART_SetConfig+0x38a>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007770:	2b08      	cmp	r3, #8
 8007772:	d014      	beq.n	800779e <UART_SetConfig+0x386>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007778:	2b09      	cmp	r3, #9
 800777a:	d00e      	beq.n	800779a <UART_SetConfig+0x382>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007780:	2b0a      	cmp	r3, #10
 8007782:	d008      	beq.n	8007796 <UART_SetConfig+0x37e>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007788:	2b0b      	cmp	r3, #11
 800778a:	d102      	bne.n	8007792 <UART_SetConfig+0x37a>
 800778c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007790:	e016      	b.n	80077c0 <UART_SetConfig+0x3a8>
 8007792:	2301      	movs	r3, #1
 8007794:	e014      	b.n	80077c0 <UART_SetConfig+0x3a8>
 8007796:	2380      	movs	r3, #128	; 0x80
 8007798:	e012      	b.n	80077c0 <UART_SetConfig+0x3a8>
 800779a:	2340      	movs	r3, #64	; 0x40
 800779c:	e010      	b.n	80077c0 <UART_SetConfig+0x3a8>
 800779e:	2320      	movs	r3, #32
 80077a0:	e00e      	b.n	80077c0 <UART_SetConfig+0x3a8>
 80077a2:	2310      	movs	r3, #16
 80077a4:	e00c      	b.n	80077c0 <UART_SetConfig+0x3a8>
 80077a6:	230c      	movs	r3, #12
 80077a8:	e00a      	b.n	80077c0 <UART_SetConfig+0x3a8>
 80077aa:	230a      	movs	r3, #10
 80077ac:	e008      	b.n	80077c0 <UART_SetConfig+0x3a8>
 80077ae:	2308      	movs	r3, #8
 80077b0:	e006      	b.n	80077c0 <UART_SetConfig+0x3a8>
 80077b2:	2306      	movs	r3, #6
 80077b4:	e004      	b.n	80077c0 <UART_SetConfig+0x3a8>
 80077b6:	2304      	movs	r3, #4
 80077b8:	e002      	b.n	80077c0 <UART_SetConfig+0x3a8>
 80077ba:	2302      	movs	r3, #2
 80077bc:	e000      	b.n	80077c0 <UART_SetConfig+0x3a8>
 80077be:	2301      	movs	r3, #1
 80077c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c4:	617b      	str	r3, [r7, #20]
        break;
 80077c6:	e059      	b.n	800787c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d04e      	beq.n	800786e <UART_SetConfig+0x456>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d047      	beq.n	8007868 <UART_SetConfig+0x450>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d040      	beq.n	8007862 <UART_SetConfig+0x44a>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e4:	2b03      	cmp	r3, #3
 80077e6:	d039      	beq.n	800785c <UART_SetConfig+0x444>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ec:	2b04      	cmp	r3, #4
 80077ee:	d032      	beq.n	8007856 <UART_SetConfig+0x43e>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f4:	2b05      	cmp	r3, #5
 80077f6:	d02b      	beq.n	8007850 <UART_SetConfig+0x438>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fc:	2b06      	cmp	r3, #6
 80077fe:	d024      	beq.n	800784a <UART_SetConfig+0x432>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007804:	2b07      	cmp	r3, #7
 8007806:	d01d      	beq.n	8007844 <UART_SetConfig+0x42c>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780c:	2b08      	cmp	r3, #8
 800780e:	d016      	beq.n	800783e <UART_SetConfig+0x426>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007814:	2b09      	cmp	r3, #9
 8007816:	d00f      	beq.n	8007838 <UART_SetConfig+0x420>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781c:	2b0a      	cmp	r3, #10
 800781e:	d008      	beq.n	8007832 <UART_SetConfig+0x41a>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007824:	2b0b      	cmp	r3, #11
 8007826:	d101      	bne.n	800782c <UART_SetConfig+0x414>
 8007828:	2380      	movs	r3, #128	; 0x80
 800782a:	e022      	b.n	8007872 <UART_SetConfig+0x45a>
 800782c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007830:	e01f      	b.n	8007872 <UART_SetConfig+0x45a>
 8007832:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007836:	e01c      	b.n	8007872 <UART_SetConfig+0x45a>
 8007838:	f44f 7300 	mov.w	r3, #512	; 0x200
 800783c:	e019      	b.n	8007872 <UART_SetConfig+0x45a>
 800783e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007842:	e016      	b.n	8007872 <UART_SetConfig+0x45a>
 8007844:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007848:	e013      	b.n	8007872 <UART_SetConfig+0x45a>
 800784a:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800784e:	e010      	b.n	8007872 <UART_SetConfig+0x45a>
 8007850:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007854:	e00d      	b.n	8007872 <UART_SetConfig+0x45a>
 8007856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800785a:	e00a      	b.n	8007872 <UART_SetConfig+0x45a>
 800785c:	f241 5355 	movw	r3, #5461	; 0x1555
 8007860:	e007      	b.n	8007872 <UART_SetConfig+0x45a>
 8007862:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007866:	e004      	b.n	8007872 <UART_SetConfig+0x45a>
 8007868:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800786c:	e001      	b.n	8007872 <UART_SetConfig+0x45a>
 800786e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007872:	617b      	str	r3, [r7, #20]
        break;
 8007874:	e002      	b.n	800787c <UART_SetConfig+0x464>
      default:
        ret = HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	76fb      	strb	r3, [r7, #27]
        break;
 800787a:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	2b00      	cmp	r3, #0
 8007880:	f000 8604 	beq.w	800848c <UART_SetConfig+0x1074>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685a      	ldr	r2, [r3, #4]
 8007888:	4613      	mov	r3, r2
 800788a:	005b      	lsls	r3, r3, #1
 800788c:	4413      	add	r3, r2
 800788e:	697a      	ldr	r2, [r7, #20]
 8007890:	429a      	cmp	r2, r3
 8007892:	d305      	bcc.n	80078a0 <UART_SetConfig+0x488>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800789a:	697a      	ldr	r2, [r7, #20]
 800789c:	429a      	cmp	r2, r3
 800789e:	d903      	bls.n	80078a8 <UART_SetConfig+0x490>
      {
        ret = HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	76fb      	strb	r3, [r7, #27]
 80078a4:	f000 bdf2 	b.w	800848c <UART_SetConfig+0x1074>
      }
      else
      {
        switch (clocksource)
 80078a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078ac:	2b08      	cmp	r3, #8
 80078ae:	f200 8281 	bhi.w	8007db4 <UART_SetConfig+0x99c>
 80078b2:	a201      	add	r2, pc, #4	; (adr r2, 80078b8 <UART_SetConfig+0x4a0>)
 80078b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b8:	080078dd 	.word	0x080078dd
 80078bc:	08007db5 	.word	0x08007db5
 80078c0:	08007a2d 	.word	0x08007a2d
 80078c4:	08007db5 	.word	0x08007db5
 80078c8:	08007b23 	.word	0x08007b23
 80078cc:	08007db5 	.word	0x08007db5
 80078d0:	08007db5 	.word	0x08007db5
 80078d4:	08007db5 	.word	0x08007db5
 80078d8:	08007c61 	.word	0x08007c61
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80078dc:	f7fd fdc8 	bl	8005470 <HAL_RCC_GetPCLK1Freq>
 80078e0:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	4618      	mov	r0, r3
 80078e6:	f04f 0100 	mov.w	r1, #0
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d070      	beq.n	80079d4 <UART_SetConfig+0x5bc>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d067      	beq.n	80079ca <UART_SetConfig+0x5b2>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d05e      	beq.n	80079c0 <UART_SetConfig+0x5a8>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007906:	2b03      	cmp	r3, #3
 8007908:	d04c      	beq.n	80079a4 <UART_SetConfig+0x58c>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790e:	2b04      	cmp	r3, #4
 8007910:	d043      	beq.n	800799a <UART_SetConfig+0x582>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007916:	2b05      	cmp	r3, #5
 8007918:	d03a      	beq.n	8007990 <UART_SetConfig+0x578>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791e:	2b06      	cmp	r3, #6
 8007920:	d031      	beq.n	8007986 <UART_SetConfig+0x56e>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007926:	2b07      	cmp	r3, #7
 8007928:	d028      	beq.n	800797c <UART_SetConfig+0x564>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792e:	2b08      	cmp	r3, #8
 8007930:	d01f      	beq.n	8007972 <UART_SetConfig+0x55a>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007936:	2b09      	cmp	r3, #9
 8007938:	d016      	beq.n	8007968 <UART_SetConfig+0x550>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793e:	2b0a      	cmp	r3, #10
 8007940:	d00d      	beq.n	800795e <UART_SetConfig+0x546>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007946:	2b0b      	cmp	r3, #11
 8007948:	d104      	bne.n	8007954 <UART_SetConfig+0x53c>
 800794a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800794e:	f04f 0400 	mov.w	r4, #0
 8007952:	e043      	b.n	80079dc <UART_SetConfig+0x5c4>
 8007954:	f04f 0301 	mov.w	r3, #1
 8007958:	f04f 0400 	mov.w	r4, #0
 800795c:	e03e      	b.n	80079dc <UART_SetConfig+0x5c4>
 800795e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007962:	f04f 0400 	mov.w	r4, #0
 8007966:	e039      	b.n	80079dc <UART_SetConfig+0x5c4>
 8007968:	f04f 0340 	mov.w	r3, #64	; 0x40
 800796c:	f04f 0400 	mov.w	r4, #0
 8007970:	e034      	b.n	80079dc <UART_SetConfig+0x5c4>
 8007972:	f04f 0320 	mov.w	r3, #32
 8007976:	f04f 0400 	mov.w	r4, #0
 800797a:	e02f      	b.n	80079dc <UART_SetConfig+0x5c4>
 800797c:	f04f 0310 	mov.w	r3, #16
 8007980:	f04f 0400 	mov.w	r4, #0
 8007984:	e02a      	b.n	80079dc <UART_SetConfig+0x5c4>
 8007986:	f04f 030c 	mov.w	r3, #12
 800798a:	f04f 0400 	mov.w	r4, #0
 800798e:	e025      	b.n	80079dc <UART_SetConfig+0x5c4>
 8007990:	f04f 030a 	mov.w	r3, #10
 8007994:	f04f 0400 	mov.w	r4, #0
 8007998:	e020      	b.n	80079dc <UART_SetConfig+0x5c4>
 800799a:	f04f 0308 	mov.w	r3, #8
 800799e:	f04f 0400 	mov.w	r4, #0
 80079a2:	e01b      	b.n	80079dc <UART_SetConfig+0x5c4>
 80079a4:	f04f 0306 	mov.w	r3, #6
 80079a8:	f04f 0400 	mov.w	r4, #0
 80079ac:	e016      	b.n	80079dc <UART_SetConfig+0x5c4>
 80079ae:	bf00      	nop
 80079b0:	0028b0aa 	.word	0x0028b0aa
 80079b4:	003d0900 	.word	0x003d0900
 80079b8:	007a1200 	.word	0x007a1200
 80079bc:	00f42400 	.word	0x00f42400
 80079c0:	f04f 0304 	mov.w	r3, #4
 80079c4:	f04f 0400 	mov.w	r4, #0
 80079c8:	e008      	b.n	80079dc <UART_SetConfig+0x5c4>
 80079ca:	f04f 0302 	mov.w	r3, #2
 80079ce:	f04f 0400 	mov.w	r4, #0
 80079d2:	e003      	b.n	80079dc <UART_SetConfig+0x5c4>
 80079d4:	f04f 0301 	mov.w	r3, #1
 80079d8:	f04f 0400 	mov.w	r4, #0
 80079dc:	461a      	mov	r2, r3
 80079de:	4623      	mov	r3, r4
 80079e0:	f7f8 fbd6 	bl	8000190 <__aeabi_uldivmod>
 80079e4:	4603      	mov	r3, r0
 80079e6:	460c      	mov	r4, r1
 80079e8:	4619      	mov	r1, r3
 80079ea:	4622      	mov	r2, r4
 80079ec:	f04f 0300 	mov.w	r3, #0
 80079f0:	f04f 0400 	mov.w	r4, #0
 80079f4:	0214      	lsls	r4, r2, #8
 80079f6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80079fa:	020b      	lsls	r3, r1, #8
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	6852      	ldr	r2, [r2, #4]
 8007a00:	0852      	lsrs	r2, r2, #1
 8007a02:	4611      	mov	r1, r2
 8007a04:	f04f 0200 	mov.w	r2, #0
 8007a08:	eb13 0b01 	adds.w	fp, r3, r1
 8007a0c:	eb44 0c02 	adc.w	ip, r4, r2
 8007a10:	4658      	mov	r0, fp
 8007a12:	4661      	mov	r1, ip
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	f04f 0400 	mov.w	r4, #0
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	4623      	mov	r3, r4
 8007a20:	f7f8 fbb6 	bl	8000190 <__aeabi_uldivmod>
 8007a24:	4603      	mov	r3, r0
 8007a26:	460c      	mov	r4, r1
 8007a28:	61fb      	str	r3, [r7, #28]
            break;
 8007a2a:	e1c6      	b.n	8007dba <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d05b      	beq.n	8007aec <UART_SetConfig+0x6d4>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d053      	beq.n	8007ae4 <UART_SetConfig+0x6cc>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d04b      	beq.n	8007adc <UART_SetConfig+0x6c4>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a48:	2b03      	cmp	r3, #3
 8007a4a:	d043      	beq.n	8007ad4 <UART_SetConfig+0x6bc>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a50:	2b04      	cmp	r3, #4
 8007a52:	d03b      	beq.n	8007acc <UART_SetConfig+0x6b4>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a58:	2b05      	cmp	r3, #5
 8007a5a:	d033      	beq.n	8007ac4 <UART_SetConfig+0x6ac>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a60:	2b06      	cmp	r3, #6
 8007a62:	d02b      	beq.n	8007abc <UART_SetConfig+0x6a4>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a68:	2b07      	cmp	r3, #7
 8007a6a:	d023      	beq.n	8007ab4 <UART_SetConfig+0x69c>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a70:	2b08      	cmp	r3, #8
 8007a72:	d01b      	beq.n	8007aac <UART_SetConfig+0x694>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a78:	2b09      	cmp	r3, #9
 8007a7a:	d013      	beq.n	8007aa4 <UART_SetConfig+0x68c>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a80:	2b0a      	cmp	r3, #10
 8007a82:	d00b      	beq.n	8007a9c <UART_SetConfig+0x684>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a88:	2b0b      	cmp	r3, #11
 8007a8a:	d103      	bne.n	8007a94 <UART_SetConfig+0x67c>
 8007a8c:	4bae      	ldr	r3, [pc, #696]	; (8007d48 <UART_SetConfig+0x930>)
 8007a8e:	f04f 0400 	mov.w	r4, #0
 8007a92:	e02e      	b.n	8007af2 <UART_SetConfig+0x6da>
 8007a94:	4bad      	ldr	r3, [pc, #692]	; (8007d4c <UART_SetConfig+0x934>)
 8007a96:	f04f 0400 	mov.w	r4, #0
 8007a9a:	e02a      	b.n	8007af2 <UART_SetConfig+0x6da>
 8007a9c:	4bac      	ldr	r3, [pc, #688]	; (8007d50 <UART_SetConfig+0x938>)
 8007a9e:	f04f 0400 	mov.w	r4, #0
 8007aa2:	e026      	b.n	8007af2 <UART_SetConfig+0x6da>
 8007aa4:	4bab      	ldr	r3, [pc, #684]	; (8007d54 <UART_SetConfig+0x93c>)
 8007aa6:	f04f 0400 	mov.w	r4, #0
 8007aaa:	e022      	b.n	8007af2 <UART_SetConfig+0x6da>
 8007aac:	4baa      	ldr	r3, [pc, #680]	; (8007d58 <UART_SetConfig+0x940>)
 8007aae:	f04f 0400 	mov.w	r4, #0
 8007ab2:	e01e      	b.n	8007af2 <UART_SetConfig+0x6da>
 8007ab4:	4ba9      	ldr	r3, [pc, #676]	; (8007d5c <UART_SetConfig+0x944>)
 8007ab6:	f04f 0400 	mov.w	r4, #0
 8007aba:	e01a      	b.n	8007af2 <UART_SetConfig+0x6da>
 8007abc:	a49e      	add	r4, pc, #632	; (adr r4, 8007d38 <UART_SetConfig+0x920>)
 8007abe:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007ac2:	e016      	b.n	8007af2 <UART_SetConfig+0x6da>
 8007ac4:	4ba6      	ldr	r3, [pc, #664]	; (8007d60 <UART_SetConfig+0x948>)
 8007ac6:	f04f 0400 	mov.w	r4, #0
 8007aca:	e012      	b.n	8007af2 <UART_SetConfig+0x6da>
 8007acc:	4ba5      	ldr	r3, [pc, #660]	; (8007d64 <UART_SetConfig+0x94c>)
 8007ace:	f04f 0400 	mov.w	r4, #0
 8007ad2:	e00e      	b.n	8007af2 <UART_SetConfig+0x6da>
 8007ad4:	a49a      	add	r4, pc, #616	; (adr r4, 8007d40 <UART_SetConfig+0x928>)
 8007ad6:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007ada:	e00a      	b.n	8007af2 <UART_SetConfig+0x6da>
 8007adc:	4ba2      	ldr	r3, [pc, #648]	; (8007d68 <UART_SetConfig+0x950>)
 8007ade:	f04f 0400 	mov.w	r4, #0
 8007ae2:	e006      	b.n	8007af2 <UART_SetConfig+0x6da>
 8007ae4:	4ba1      	ldr	r3, [pc, #644]	; (8007d6c <UART_SetConfig+0x954>)
 8007ae6:	f04f 0400 	mov.w	r4, #0
 8007aea:	e002      	b.n	8007af2 <UART_SetConfig+0x6da>
 8007aec:	4b97      	ldr	r3, [pc, #604]	; (8007d4c <UART_SetConfig+0x934>)
 8007aee:	f04f 0400 	mov.w	r4, #0
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	6852      	ldr	r2, [r2, #4]
 8007af6:	0852      	lsrs	r2, r2, #1
 8007af8:	4611      	mov	r1, r2
 8007afa:	f04f 0200 	mov.w	r2, #0
 8007afe:	eb13 0b01 	adds.w	fp, r3, r1
 8007b02:	eb44 0c02 	adc.w	ip, r4, r2
 8007b06:	4658      	mov	r0, fp
 8007b08:	4661      	mov	r1, ip
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	f04f 0400 	mov.w	r4, #0
 8007b12:	461a      	mov	r2, r3
 8007b14:	4623      	mov	r3, r4
 8007b16:	f7f8 fb3b 	bl	8000190 <__aeabi_uldivmod>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	460c      	mov	r4, r1
 8007b1e:	61fb      	str	r3, [r7, #28]
            break;
 8007b20:	e14b      	b.n	8007dba <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8007b22:	f7fd fc27 	bl	8005374 <HAL_RCC_GetSysClockFreq>
 8007b26:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f04f 0100 	mov.w	r1, #0
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d067      	beq.n	8007c08 <UART_SetConfig+0x7f0>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d05e      	beq.n	8007bfe <UART_SetConfig+0x7e6>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	d055      	beq.n	8007bf4 <UART_SetConfig+0x7dc>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4c:	2b03      	cmp	r3, #3
 8007b4e:	d04c      	beq.n	8007bea <UART_SetConfig+0x7d2>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b54:	2b04      	cmp	r3, #4
 8007b56:	d043      	beq.n	8007be0 <UART_SetConfig+0x7c8>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5c:	2b05      	cmp	r3, #5
 8007b5e:	d03a      	beq.n	8007bd6 <UART_SetConfig+0x7be>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b64:	2b06      	cmp	r3, #6
 8007b66:	d031      	beq.n	8007bcc <UART_SetConfig+0x7b4>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6c:	2b07      	cmp	r3, #7
 8007b6e:	d028      	beq.n	8007bc2 <UART_SetConfig+0x7aa>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b74:	2b08      	cmp	r3, #8
 8007b76:	d01f      	beq.n	8007bb8 <UART_SetConfig+0x7a0>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7c:	2b09      	cmp	r3, #9
 8007b7e:	d016      	beq.n	8007bae <UART_SetConfig+0x796>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b84:	2b0a      	cmp	r3, #10
 8007b86:	d00d      	beq.n	8007ba4 <UART_SetConfig+0x78c>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8c:	2b0b      	cmp	r3, #11
 8007b8e:	d104      	bne.n	8007b9a <UART_SetConfig+0x782>
 8007b90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b94:	f04f 0400 	mov.w	r4, #0
 8007b98:	e03a      	b.n	8007c10 <UART_SetConfig+0x7f8>
 8007b9a:	f04f 0301 	mov.w	r3, #1
 8007b9e:	f04f 0400 	mov.w	r4, #0
 8007ba2:	e035      	b.n	8007c10 <UART_SetConfig+0x7f8>
 8007ba4:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007ba8:	f04f 0400 	mov.w	r4, #0
 8007bac:	e030      	b.n	8007c10 <UART_SetConfig+0x7f8>
 8007bae:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007bb2:	f04f 0400 	mov.w	r4, #0
 8007bb6:	e02b      	b.n	8007c10 <UART_SetConfig+0x7f8>
 8007bb8:	f04f 0320 	mov.w	r3, #32
 8007bbc:	f04f 0400 	mov.w	r4, #0
 8007bc0:	e026      	b.n	8007c10 <UART_SetConfig+0x7f8>
 8007bc2:	f04f 0310 	mov.w	r3, #16
 8007bc6:	f04f 0400 	mov.w	r4, #0
 8007bca:	e021      	b.n	8007c10 <UART_SetConfig+0x7f8>
 8007bcc:	f04f 030c 	mov.w	r3, #12
 8007bd0:	f04f 0400 	mov.w	r4, #0
 8007bd4:	e01c      	b.n	8007c10 <UART_SetConfig+0x7f8>
 8007bd6:	f04f 030a 	mov.w	r3, #10
 8007bda:	f04f 0400 	mov.w	r4, #0
 8007bde:	e017      	b.n	8007c10 <UART_SetConfig+0x7f8>
 8007be0:	f04f 0308 	mov.w	r3, #8
 8007be4:	f04f 0400 	mov.w	r4, #0
 8007be8:	e012      	b.n	8007c10 <UART_SetConfig+0x7f8>
 8007bea:	f04f 0306 	mov.w	r3, #6
 8007bee:	f04f 0400 	mov.w	r4, #0
 8007bf2:	e00d      	b.n	8007c10 <UART_SetConfig+0x7f8>
 8007bf4:	f04f 0304 	mov.w	r3, #4
 8007bf8:	f04f 0400 	mov.w	r4, #0
 8007bfc:	e008      	b.n	8007c10 <UART_SetConfig+0x7f8>
 8007bfe:	f04f 0302 	mov.w	r3, #2
 8007c02:	f04f 0400 	mov.w	r4, #0
 8007c06:	e003      	b.n	8007c10 <UART_SetConfig+0x7f8>
 8007c08:	f04f 0301 	mov.w	r3, #1
 8007c0c:	f04f 0400 	mov.w	r4, #0
 8007c10:	461a      	mov	r2, r3
 8007c12:	4623      	mov	r3, r4
 8007c14:	f7f8 fabc 	bl	8000190 <__aeabi_uldivmod>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	460c      	mov	r4, r1
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	4622      	mov	r2, r4
 8007c20:	f04f 0300 	mov.w	r3, #0
 8007c24:	f04f 0400 	mov.w	r4, #0
 8007c28:	0214      	lsls	r4, r2, #8
 8007c2a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007c2e:	020b      	lsls	r3, r1, #8
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	6852      	ldr	r2, [r2, #4]
 8007c34:	0852      	lsrs	r2, r2, #1
 8007c36:	4611      	mov	r1, r2
 8007c38:	f04f 0200 	mov.w	r2, #0
 8007c3c:	eb13 0b01 	adds.w	fp, r3, r1
 8007c40:	eb44 0c02 	adc.w	ip, r4, r2
 8007c44:	4658      	mov	r0, fp
 8007c46:	4661      	mov	r1, ip
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	f04f 0400 	mov.w	r4, #0
 8007c50:	461a      	mov	r2, r3
 8007c52:	4623      	mov	r3, r4
 8007c54:	f7f8 fa9c 	bl	8000190 <__aeabi_uldivmod>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	460c      	mov	r4, r1
 8007c5c:	61fb      	str	r3, [r7, #28]
            break;
 8007c5e:	e0ac      	b.n	8007dba <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f000 8089 	beq.w	8007d7c <UART_SetConfig+0x964>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d05b      	beq.n	8007d2a <UART_SetConfig+0x912>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d052      	beq.n	8007d20 <UART_SetConfig+0x908>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	d04a      	beq.n	8007d18 <UART_SetConfig+0x900>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c86:	2b04      	cmp	r3, #4
 8007c88:	d041      	beq.n	8007d0e <UART_SetConfig+0x8f6>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8e:	2b05      	cmp	r3, #5
 8007c90:	d039      	beq.n	8007d06 <UART_SetConfig+0x8ee>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c96:	2b06      	cmp	r3, #6
 8007c98:	d031      	beq.n	8007cfe <UART_SetConfig+0x8e6>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9e:	2b07      	cmp	r3, #7
 8007ca0:	d028      	beq.n	8007cf4 <UART_SetConfig+0x8dc>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca6:	2b08      	cmp	r3, #8
 8007ca8:	d01f      	beq.n	8007cea <UART_SetConfig+0x8d2>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cae:	2b09      	cmp	r3, #9
 8007cb0:	d016      	beq.n	8007ce0 <UART_SetConfig+0x8c8>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb6:	2b0a      	cmp	r3, #10
 8007cb8:	d00d      	beq.n	8007cd6 <UART_SetConfig+0x8be>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbe:	2b0b      	cmp	r3, #11
 8007cc0:	d104      	bne.n	8007ccc <UART_SetConfig+0x8b4>
 8007cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cc6:	f04f 0400 	mov.w	r4, #0
 8007cca:	e05b      	b.n	8007d84 <UART_SetConfig+0x96c>
 8007ccc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007cd0:	f04f 0400 	mov.w	r4, #0
 8007cd4:	e056      	b.n	8007d84 <UART_SetConfig+0x96c>
 8007cd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007cda:	f04f 0400 	mov.w	r4, #0
 8007cde:	e051      	b.n	8007d84 <UART_SetConfig+0x96c>
 8007ce0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007ce4:	f04f 0400 	mov.w	r4, #0
 8007ce8:	e04c      	b.n	8007d84 <UART_SetConfig+0x96c>
 8007cea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007cee:	f04f 0400 	mov.w	r4, #0
 8007cf2:	e047      	b.n	8007d84 <UART_SetConfig+0x96c>
 8007cf4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007cf8:	f04f 0400 	mov.w	r4, #0
 8007cfc:	e042      	b.n	8007d84 <UART_SetConfig+0x96c>
 8007cfe:	4b1c      	ldr	r3, [pc, #112]	; (8007d70 <UART_SetConfig+0x958>)
 8007d00:	f04f 0400 	mov.w	r4, #0
 8007d04:	e03e      	b.n	8007d84 <UART_SetConfig+0x96c>
 8007d06:	4b1b      	ldr	r3, [pc, #108]	; (8007d74 <UART_SetConfig+0x95c>)
 8007d08:	f04f 0400 	mov.w	r4, #0
 8007d0c:	e03a      	b.n	8007d84 <UART_SetConfig+0x96c>
 8007d0e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007d12:	f04f 0400 	mov.w	r4, #0
 8007d16:	e035      	b.n	8007d84 <UART_SetConfig+0x96c>
 8007d18:	4b17      	ldr	r3, [pc, #92]	; (8007d78 <UART_SetConfig+0x960>)
 8007d1a:	f04f 0400 	mov.w	r4, #0
 8007d1e:	e031      	b.n	8007d84 <UART_SetConfig+0x96c>
 8007d20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007d24:	f04f 0400 	mov.w	r4, #0
 8007d28:	e02c      	b.n	8007d84 <UART_SetConfig+0x96c>
 8007d2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007d2e:	f04f 0400 	mov.w	r4, #0
 8007d32:	e027      	b.n	8007d84 <UART_SetConfig+0x96c>
 8007d34:	f3af 8000 	nop.w
 8007d38:	14585500 	.word	0x14585500
 8007d3c:	00000000 	.word	0x00000000
 8007d40:	28b0aa00 	.word	0x28b0aa00
 8007d44:	00000000 	.word	0x00000000
 8007d48:	00f42400 	.word	0x00f42400
 8007d4c:	f4240000 	.word	0xf4240000
 8007d50:	01e84800 	.word	0x01e84800
 8007d54:	03d09000 	.word	0x03d09000
 8007d58:	07a12000 	.word	0x07a12000
 8007d5c:	0f424000 	.word	0x0f424000
 8007d60:	186a0000 	.word	0x186a0000
 8007d64:	1e848000 	.word	0x1e848000
 8007d68:	3d090000 	.word	0x3d090000
 8007d6c:	7a120000 	.word	0x7a120000
 8007d70:	000aaa00 	.word	0x000aaa00
 8007d74:	000ccc00 	.word	0x000ccc00
 8007d78:	00155500 	.word	0x00155500
 8007d7c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007d80:	f04f 0400 	mov.w	r4, #0
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	6852      	ldr	r2, [r2, #4]
 8007d88:	0852      	lsrs	r2, r2, #1
 8007d8a:	4611      	mov	r1, r2
 8007d8c:	f04f 0200 	mov.w	r2, #0
 8007d90:	eb13 0b01 	adds.w	fp, r3, r1
 8007d94:	eb44 0c02 	adc.w	ip, r4, r2
 8007d98:	4658      	mov	r0, fp
 8007d9a:	4661      	mov	r1, ip
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	f04f 0400 	mov.w	r4, #0
 8007da4:	461a      	mov	r2, r3
 8007da6:	4623      	mov	r3, r4
 8007da8:	f7f8 f9f2 	bl	8000190 <__aeabi_uldivmod>
 8007dac:	4603      	mov	r3, r0
 8007dae:	460c      	mov	r4, r1
 8007db0:	61fb      	str	r3, [r7, #28]
            break;
 8007db2:	e002      	b.n	8007dba <UART_SetConfig+0x9a2>
          default:
            ret = HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	76fb      	strb	r3, [r7, #27]
            break;
 8007db8:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dc0:	d308      	bcc.n	8007dd4 <UART_SetConfig+0x9bc>
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dc8:	d204      	bcs.n	8007dd4 <UART_SetConfig+0x9bc>
        {
          huart->Instance->BRR = usartdiv;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	69fa      	ldr	r2, [r7, #28]
 8007dd0:	60da      	str	r2, [r3, #12]
 8007dd2:	e35b      	b.n	800848c <UART_SetConfig+0x1074>
        }
        else
        {
          ret = HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	76fb      	strb	r3, [r7, #27]
 8007dd8:	e358      	b.n	800848c <UART_SetConfig+0x1074>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	69db      	ldr	r3, [r3, #28]
 8007dde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007de2:	f040 81a6 	bne.w	8008132 <UART_SetConfig+0xd1a>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007de6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007dea:	3b01      	subs	r3, #1
 8007dec:	2b07      	cmp	r3, #7
 8007dee:	f200 8180 	bhi.w	80080f2 <UART_SetConfig+0xcda>
 8007df2:	a201      	add	r2, pc, #4	; (adr r2, 8007df8 <UART_SetConfig+0x9e0>)
 8007df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df8:	08007e19 	.word	0x08007e19
 8007dfc:	08007ed1 	.word	0x08007ed1
 8007e00:	080080f3 	.word	0x080080f3
 8007e04:	08007f79 	.word	0x08007f79
 8007e08:	080080f3 	.word	0x080080f3
 8007e0c:	080080f3 	.word	0x080080f3
 8007e10:	080080f3 	.word	0x080080f3
 8007e14:	08008031 	.word	0x08008031
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e18:	f7fd fb40 	bl	800549c <HAL_RCC_GetPCLK2Freq>
 8007e1c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d044      	beq.n	8007eb0 <UART_SetConfig+0xa98>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d03e      	beq.n	8007eac <UART_SetConfig+0xa94>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d038      	beq.n	8007ea8 <UART_SetConfig+0xa90>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3a:	2b03      	cmp	r3, #3
 8007e3c:	d032      	beq.n	8007ea4 <UART_SetConfig+0xa8c>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e42:	2b04      	cmp	r3, #4
 8007e44:	d02c      	beq.n	8007ea0 <UART_SetConfig+0xa88>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4a:	2b05      	cmp	r3, #5
 8007e4c:	d026      	beq.n	8007e9c <UART_SetConfig+0xa84>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e52:	2b06      	cmp	r3, #6
 8007e54:	d020      	beq.n	8007e98 <UART_SetConfig+0xa80>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5a:	2b07      	cmp	r3, #7
 8007e5c:	d01a      	beq.n	8007e94 <UART_SetConfig+0xa7c>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e62:	2b08      	cmp	r3, #8
 8007e64:	d014      	beq.n	8007e90 <UART_SetConfig+0xa78>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6a:	2b09      	cmp	r3, #9
 8007e6c:	d00e      	beq.n	8007e8c <UART_SetConfig+0xa74>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e72:	2b0a      	cmp	r3, #10
 8007e74:	d008      	beq.n	8007e88 <UART_SetConfig+0xa70>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7a:	2b0b      	cmp	r3, #11
 8007e7c:	d102      	bne.n	8007e84 <UART_SetConfig+0xa6c>
 8007e7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e82:	e016      	b.n	8007eb2 <UART_SetConfig+0xa9a>
 8007e84:	2301      	movs	r3, #1
 8007e86:	e014      	b.n	8007eb2 <UART_SetConfig+0xa9a>
 8007e88:	2380      	movs	r3, #128	; 0x80
 8007e8a:	e012      	b.n	8007eb2 <UART_SetConfig+0xa9a>
 8007e8c:	2340      	movs	r3, #64	; 0x40
 8007e8e:	e010      	b.n	8007eb2 <UART_SetConfig+0xa9a>
 8007e90:	2320      	movs	r3, #32
 8007e92:	e00e      	b.n	8007eb2 <UART_SetConfig+0xa9a>
 8007e94:	2310      	movs	r3, #16
 8007e96:	e00c      	b.n	8007eb2 <UART_SetConfig+0xa9a>
 8007e98:	230c      	movs	r3, #12
 8007e9a:	e00a      	b.n	8007eb2 <UART_SetConfig+0xa9a>
 8007e9c:	230a      	movs	r3, #10
 8007e9e:	e008      	b.n	8007eb2 <UART_SetConfig+0xa9a>
 8007ea0:	2308      	movs	r3, #8
 8007ea2:	e006      	b.n	8007eb2 <UART_SetConfig+0xa9a>
 8007ea4:	2306      	movs	r3, #6
 8007ea6:	e004      	b.n	8007eb2 <UART_SetConfig+0xa9a>
 8007ea8:	2304      	movs	r3, #4
 8007eaa:	e002      	b.n	8007eb2 <UART_SetConfig+0xa9a>
 8007eac:	2302      	movs	r3, #2
 8007eae:	e000      	b.n	8007eb2 <UART_SetConfig+0xa9a>
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eb8:	005a      	lsls	r2, r3, #1
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	085b      	lsrs	r3, r3, #1
 8007ec0:	441a      	add	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	61fb      	str	r3, [r7, #28]
        break;
 8007ece:	e113      	b.n	80080f8 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d043      	beq.n	8007f60 <UART_SetConfig+0xb48>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d03d      	beq.n	8007f5c <UART_SetConfig+0xb44>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d037      	beq.n	8007f58 <UART_SetConfig+0xb40>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eec:	2b03      	cmp	r3, #3
 8007eee:	d031      	beq.n	8007f54 <UART_SetConfig+0xb3c>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef4:	2b04      	cmp	r3, #4
 8007ef6:	d02b      	beq.n	8007f50 <UART_SetConfig+0xb38>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efc:	2b05      	cmp	r3, #5
 8007efe:	d025      	beq.n	8007f4c <UART_SetConfig+0xb34>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f04:	2b06      	cmp	r3, #6
 8007f06:	d01f      	beq.n	8007f48 <UART_SetConfig+0xb30>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0c:	2b07      	cmp	r3, #7
 8007f0e:	d019      	beq.n	8007f44 <UART_SetConfig+0xb2c>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f14:	2b08      	cmp	r3, #8
 8007f16:	d013      	beq.n	8007f40 <UART_SetConfig+0xb28>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1c:	2b09      	cmp	r3, #9
 8007f1e:	d00d      	beq.n	8007f3c <UART_SetConfig+0xb24>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f24:	2b0a      	cmp	r3, #10
 8007f26:	d007      	beq.n	8007f38 <UART_SetConfig+0xb20>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2c:	2b0b      	cmp	r3, #11
 8007f2e:	d101      	bne.n	8007f34 <UART_SetConfig+0xb1c>
 8007f30:	4b8c      	ldr	r3, [pc, #560]	; (8008164 <UART_SetConfig+0xd4c>)
 8007f32:	e016      	b.n	8007f62 <UART_SetConfig+0xb4a>
 8007f34:	4b8c      	ldr	r3, [pc, #560]	; (8008168 <UART_SetConfig+0xd50>)
 8007f36:	e014      	b.n	8007f62 <UART_SetConfig+0xb4a>
 8007f38:	4b8c      	ldr	r3, [pc, #560]	; (800816c <UART_SetConfig+0xd54>)
 8007f3a:	e012      	b.n	8007f62 <UART_SetConfig+0xb4a>
 8007f3c:	4b8c      	ldr	r3, [pc, #560]	; (8008170 <UART_SetConfig+0xd58>)
 8007f3e:	e010      	b.n	8007f62 <UART_SetConfig+0xb4a>
 8007f40:	4b8c      	ldr	r3, [pc, #560]	; (8008174 <UART_SetConfig+0xd5c>)
 8007f42:	e00e      	b.n	8007f62 <UART_SetConfig+0xb4a>
 8007f44:	4b8c      	ldr	r3, [pc, #560]	; (8008178 <UART_SetConfig+0xd60>)
 8007f46:	e00c      	b.n	8007f62 <UART_SetConfig+0xb4a>
 8007f48:	4b8c      	ldr	r3, [pc, #560]	; (800817c <UART_SetConfig+0xd64>)
 8007f4a:	e00a      	b.n	8007f62 <UART_SetConfig+0xb4a>
 8007f4c:	4b8c      	ldr	r3, [pc, #560]	; (8008180 <UART_SetConfig+0xd68>)
 8007f4e:	e008      	b.n	8007f62 <UART_SetConfig+0xb4a>
 8007f50:	4b8c      	ldr	r3, [pc, #560]	; (8008184 <UART_SetConfig+0xd6c>)
 8007f52:	e006      	b.n	8007f62 <UART_SetConfig+0xb4a>
 8007f54:	4b8c      	ldr	r3, [pc, #560]	; (8008188 <UART_SetConfig+0xd70>)
 8007f56:	e004      	b.n	8007f62 <UART_SetConfig+0xb4a>
 8007f58:	4b8c      	ldr	r3, [pc, #560]	; (800818c <UART_SetConfig+0xd74>)
 8007f5a:	e002      	b.n	8007f62 <UART_SetConfig+0xb4a>
 8007f5c:	4b8c      	ldr	r3, [pc, #560]	; (8008190 <UART_SetConfig+0xd78>)
 8007f5e:	e000      	b.n	8007f62 <UART_SetConfig+0xb4a>
 8007f60:	4b81      	ldr	r3, [pc, #516]	; (8008168 <UART_SetConfig+0xd50>)
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	6852      	ldr	r2, [r2, #4]
 8007f66:	0852      	lsrs	r2, r2, #1
 8007f68:	441a      	add	r2, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	61fb      	str	r3, [r7, #28]
        break;
 8007f76:	e0bf      	b.n	80080f8 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f78:	f7fd f9fc 	bl	8005374 <HAL_RCC_GetSysClockFreq>
 8007f7c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d044      	beq.n	8008010 <UART_SetConfig+0xbf8>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d03e      	beq.n	800800c <UART_SetConfig+0xbf4>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d038      	beq.n	8008008 <UART_SetConfig+0xbf0>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9a:	2b03      	cmp	r3, #3
 8007f9c:	d032      	beq.n	8008004 <UART_SetConfig+0xbec>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa2:	2b04      	cmp	r3, #4
 8007fa4:	d02c      	beq.n	8008000 <UART_SetConfig+0xbe8>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007faa:	2b05      	cmp	r3, #5
 8007fac:	d026      	beq.n	8007ffc <UART_SetConfig+0xbe4>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb2:	2b06      	cmp	r3, #6
 8007fb4:	d020      	beq.n	8007ff8 <UART_SetConfig+0xbe0>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fba:	2b07      	cmp	r3, #7
 8007fbc:	d01a      	beq.n	8007ff4 <UART_SetConfig+0xbdc>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc2:	2b08      	cmp	r3, #8
 8007fc4:	d014      	beq.n	8007ff0 <UART_SetConfig+0xbd8>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fca:	2b09      	cmp	r3, #9
 8007fcc:	d00e      	beq.n	8007fec <UART_SetConfig+0xbd4>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd2:	2b0a      	cmp	r3, #10
 8007fd4:	d008      	beq.n	8007fe8 <UART_SetConfig+0xbd0>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fda:	2b0b      	cmp	r3, #11
 8007fdc:	d102      	bne.n	8007fe4 <UART_SetConfig+0xbcc>
 8007fde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fe2:	e016      	b.n	8008012 <UART_SetConfig+0xbfa>
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e014      	b.n	8008012 <UART_SetConfig+0xbfa>
 8007fe8:	2380      	movs	r3, #128	; 0x80
 8007fea:	e012      	b.n	8008012 <UART_SetConfig+0xbfa>
 8007fec:	2340      	movs	r3, #64	; 0x40
 8007fee:	e010      	b.n	8008012 <UART_SetConfig+0xbfa>
 8007ff0:	2320      	movs	r3, #32
 8007ff2:	e00e      	b.n	8008012 <UART_SetConfig+0xbfa>
 8007ff4:	2310      	movs	r3, #16
 8007ff6:	e00c      	b.n	8008012 <UART_SetConfig+0xbfa>
 8007ff8:	230c      	movs	r3, #12
 8007ffa:	e00a      	b.n	8008012 <UART_SetConfig+0xbfa>
 8007ffc:	230a      	movs	r3, #10
 8007ffe:	e008      	b.n	8008012 <UART_SetConfig+0xbfa>
 8008000:	2308      	movs	r3, #8
 8008002:	e006      	b.n	8008012 <UART_SetConfig+0xbfa>
 8008004:	2306      	movs	r3, #6
 8008006:	e004      	b.n	8008012 <UART_SetConfig+0xbfa>
 8008008:	2304      	movs	r3, #4
 800800a:	e002      	b.n	8008012 <UART_SetConfig+0xbfa>
 800800c:	2302      	movs	r3, #2
 800800e:	e000      	b.n	8008012 <UART_SetConfig+0xbfa>
 8008010:	2301      	movs	r3, #1
 8008012:	693a      	ldr	r2, [r7, #16]
 8008014:	fbb2 f3f3 	udiv	r3, r2, r3
 8008018:	005a      	lsls	r2, r3, #1
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	085b      	lsrs	r3, r3, #1
 8008020:	441a      	add	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	fbb2 f3f3 	udiv	r3, r2, r3
 800802a:	b29b      	uxth	r3, r3
 800802c:	61fb      	str	r3, [r7, #28]
        break;
 800802e:	e063      	b.n	80080f8 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008034:	2b00      	cmp	r3, #0
 8008036:	d04f      	beq.n	80080d8 <UART_SetConfig+0xcc0>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803c:	2b01      	cmp	r3, #1
 800803e:	d048      	beq.n	80080d2 <UART_SetConfig+0xcba>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008044:	2b02      	cmp	r3, #2
 8008046:	d041      	beq.n	80080cc <UART_SetConfig+0xcb4>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804c:	2b03      	cmp	r3, #3
 800804e:	d03a      	beq.n	80080c6 <UART_SetConfig+0xcae>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008054:	2b04      	cmp	r3, #4
 8008056:	d033      	beq.n	80080c0 <UART_SetConfig+0xca8>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805c:	2b05      	cmp	r3, #5
 800805e:	d02c      	beq.n	80080ba <UART_SetConfig+0xca2>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008064:	2b06      	cmp	r3, #6
 8008066:	d025      	beq.n	80080b4 <UART_SetConfig+0xc9c>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806c:	2b07      	cmp	r3, #7
 800806e:	d01e      	beq.n	80080ae <UART_SetConfig+0xc96>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008074:	2b08      	cmp	r3, #8
 8008076:	d017      	beq.n	80080a8 <UART_SetConfig+0xc90>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807c:	2b09      	cmp	r3, #9
 800807e:	d010      	beq.n	80080a2 <UART_SetConfig+0xc8a>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008084:	2b0a      	cmp	r3, #10
 8008086:	d009      	beq.n	800809c <UART_SetConfig+0xc84>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808c:	2b0b      	cmp	r3, #11
 800808e:	d102      	bne.n	8008096 <UART_SetConfig+0xc7e>
 8008090:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008094:	e022      	b.n	80080dc <UART_SetConfig+0xcc4>
 8008096:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800809a:	e01f      	b.n	80080dc <UART_SetConfig+0xcc4>
 800809c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080a0:	e01c      	b.n	80080dc <UART_SetConfig+0xcc4>
 80080a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080a6:	e019      	b.n	80080dc <UART_SetConfig+0xcc4>
 80080a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80080ac:	e016      	b.n	80080dc <UART_SetConfig+0xcc4>
 80080ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080b2:	e013      	b.n	80080dc <UART_SetConfig+0xcc4>
 80080b4:	f241 5354 	movw	r3, #5460	; 0x1554
 80080b8:	e010      	b.n	80080dc <UART_SetConfig+0xcc4>
 80080ba:	f641 1398 	movw	r3, #6552	; 0x1998
 80080be:	e00d      	b.n	80080dc <UART_SetConfig+0xcc4>
 80080c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80080c4:	e00a      	b.n	80080dc <UART_SetConfig+0xcc4>
 80080c6:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80080ca:	e007      	b.n	80080dc <UART_SetConfig+0xcc4>
 80080cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80080d0:	e004      	b.n	80080dc <UART_SetConfig+0xcc4>
 80080d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080d6:	e001      	b.n	80080dc <UART_SetConfig+0xcc4>
 80080d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	6852      	ldr	r2, [r2, #4]
 80080e0:	0852      	lsrs	r2, r2, #1
 80080e2:	441a      	add	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	61fb      	str	r3, [r7, #28]
        break;
 80080f0:	e002      	b.n	80080f8 <UART_SetConfig+0xce0>
      default:
        ret = HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	76fb      	strb	r3, [r7, #27]
        break;
 80080f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	2b0f      	cmp	r3, #15
 80080fc:	d916      	bls.n	800812c <UART_SetConfig+0xd14>
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008104:	d212      	bcs.n	800812c <UART_SetConfig+0xd14>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	b29b      	uxth	r3, r3
 800810a:	f023 030f 	bic.w	r3, r3, #15
 800810e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	085b      	lsrs	r3, r3, #1
 8008114:	b29b      	uxth	r3, r3
 8008116:	f003 0307 	and.w	r3, r3, #7
 800811a:	b29a      	uxth	r2, r3
 800811c:	89fb      	ldrh	r3, [r7, #14]
 800811e:	4313      	orrs	r3, r2
 8008120:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	89fa      	ldrh	r2, [r7, #14]
 8008128:	60da      	str	r2, [r3, #12]
 800812a:	e1af      	b.n	800848c <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	76fb      	strb	r3, [r7, #27]
 8008130:	e1ac      	b.n	800848c <UART_SetConfig+0x1074>
    }
  }
  else
  {
    switch (clocksource)
 8008132:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008136:	3b01      	subs	r3, #1
 8008138:	2b07      	cmp	r3, #7
 800813a:	f200 8196 	bhi.w	800846a <UART_SetConfig+0x1052>
 800813e:	a201      	add	r2, pc, #4	; (adr r2, 8008144 <UART_SetConfig+0xd2c>)
 8008140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008144:	08008195 	.word	0x08008195
 8008148:	0800824b 	.word	0x0800824b
 800814c:	0800846b 	.word	0x0800846b
 8008150:	080082f5 	.word	0x080082f5
 8008154:	0800846b 	.word	0x0800846b
 8008158:	0800846b 	.word	0x0800846b
 800815c:	0800846b 	.word	0x0800846b
 8008160:	080083ab 	.word	0x080083ab
 8008164:	0001e848 	.word	0x0001e848
 8008168:	01e84800 	.word	0x01e84800
 800816c:	0003d090 	.word	0x0003d090
 8008170:	0007a120 	.word	0x0007a120
 8008174:	000f4240 	.word	0x000f4240
 8008178:	001e8480 	.word	0x001e8480
 800817c:	0028b0aa 	.word	0x0028b0aa
 8008180:	0030d400 	.word	0x0030d400
 8008184:	003d0900 	.word	0x003d0900
 8008188:	00516154 	.word	0x00516154
 800818c:	007a1200 	.word	0x007a1200
 8008190:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008194:	f7fd f982 	bl	800549c <HAL_RCC_GetPCLK2Freq>
 8008198:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d044      	beq.n	800822c <UART_SetConfig+0xe14>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d03e      	beq.n	8008228 <UART_SetConfig+0xe10>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d038      	beq.n	8008224 <UART_SetConfig+0xe0c>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b6:	2b03      	cmp	r3, #3
 80081b8:	d032      	beq.n	8008220 <UART_SetConfig+0xe08>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081be:	2b04      	cmp	r3, #4
 80081c0:	d02c      	beq.n	800821c <UART_SetConfig+0xe04>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c6:	2b05      	cmp	r3, #5
 80081c8:	d026      	beq.n	8008218 <UART_SetConfig+0xe00>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ce:	2b06      	cmp	r3, #6
 80081d0:	d020      	beq.n	8008214 <UART_SetConfig+0xdfc>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d6:	2b07      	cmp	r3, #7
 80081d8:	d01a      	beq.n	8008210 <UART_SetConfig+0xdf8>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081de:	2b08      	cmp	r3, #8
 80081e0:	d014      	beq.n	800820c <UART_SetConfig+0xdf4>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e6:	2b09      	cmp	r3, #9
 80081e8:	d00e      	beq.n	8008208 <UART_SetConfig+0xdf0>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ee:	2b0a      	cmp	r3, #10
 80081f0:	d008      	beq.n	8008204 <UART_SetConfig+0xdec>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f6:	2b0b      	cmp	r3, #11
 80081f8:	d102      	bne.n	8008200 <UART_SetConfig+0xde8>
 80081fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081fe:	e016      	b.n	800822e <UART_SetConfig+0xe16>
 8008200:	2301      	movs	r3, #1
 8008202:	e014      	b.n	800822e <UART_SetConfig+0xe16>
 8008204:	2380      	movs	r3, #128	; 0x80
 8008206:	e012      	b.n	800822e <UART_SetConfig+0xe16>
 8008208:	2340      	movs	r3, #64	; 0x40
 800820a:	e010      	b.n	800822e <UART_SetConfig+0xe16>
 800820c:	2320      	movs	r3, #32
 800820e:	e00e      	b.n	800822e <UART_SetConfig+0xe16>
 8008210:	2310      	movs	r3, #16
 8008212:	e00c      	b.n	800822e <UART_SetConfig+0xe16>
 8008214:	230c      	movs	r3, #12
 8008216:	e00a      	b.n	800822e <UART_SetConfig+0xe16>
 8008218:	230a      	movs	r3, #10
 800821a:	e008      	b.n	800822e <UART_SetConfig+0xe16>
 800821c:	2308      	movs	r3, #8
 800821e:	e006      	b.n	800822e <UART_SetConfig+0xe16>
 8008220:	2306      	movs	r3, #6
 8008222:	e004      	b.n	800822e <UART_SetConfig+0xe16>
 8008224:	2304      	movs	r3, #4
 8008226:	e002      	b.n	800822e <UART_SetConfig+0xe16>
 8008228:	2302      	movs	r3, #2
 800822a:	e000      	b.n	800822e <UART_SetConfig+0xe16>
 800822c:	2301      	movs	r3, #1
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	fbb2 f2f3 	udiv	r2, r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	085b      	lsrs	r3, r3, #1
 800823a:	441a      	add	r2, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	fbb2 f3f3 	udiv	r3, r2, r3
 8008244:	b29b      	uxth	r3, r3
 8008246:	61fb      	str	r3, [r7, #28]
        break;
 8008248:	e112      	b.n	8008470 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824e:	2b00      	cmp	r3, #0
 8008250:	d044      	beq.n	80082dc <UART_SetConfig+0xec4>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008256:	2b01      	cmp	r3, #1
 8008258:	d03e      	beq.n	80082d8 <UART_SetConfig+0xec0>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825e:	2b02      	cmp	r3, #2
 8008260:	d038      	beq.n	80082d4 <UART_SetConfig+0xebc>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008266:	2b03      	cmp	r3, #3
 8008268:	d032      	beq.n	80082d0 <UART_SetConfig+0xeb8>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826e:	2b04      	cmp	r3, #4
 8008270:	d02c      	beq.n	80082cc <UART_SetConfig+0xeb4>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008276:	2b05      	cmp	r3, #5
 8008278:	d026      	beq.n	80082c8 <UART_SetConfig+0xeb0>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827e:	2b06      	cmp	r3, #6
 8008280:	d020      	beq.n	80082c4 <UART_SetConfig+0xeac>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008286:	2b07      	cmp	r3, #7
 8008288:	d01a      	beq.n	80082c0 <UART_SetConfig+0xea8>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828e:	2b08      	cmp	r3, #8
 8008290:	d014      	beq.n	80082bc <UART_SetConfig+0xea4>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008296:	2b09      	cmp	r3, #9
 8008298:	d00e      	beq.n	80082b8 <UART_SetConfig+0xea0>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829e:	2b0a      	cmp	r3, #10
 80082a0:	d008      	beq.n	80082b4 <UART_SetConfig+0xe9c>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a6:	2b0b      	cmp	r3, #11
 80082a8:	d102      	bne.n	80082b0 <UART_SetConfig+0xe98>
 80082aa:	f24f 4324 	movw	r3, #62500	; 0xf424
 80082ae:	e016      	b.n	80082de <UART_SetConfig+0xec6>
 80082b0:	4b80      	ldr	r3, [pc, #512]	; (80084b4 <UART_SetConfig+0x109c>)
 80082b2:	e014      	b.n	80082de <UART_SetConfig+0xec6>
 80082b4:	4b80      	ldr	r3, [pc, #512]	; (80084b8 <UART_SetConfig+0x10a0>)
 80082b6:	e012      	b.n	80082de <UART_SetConfig+0xec6>
 80082b8:	4b80      	ldr	r3, [pc, #512]	; (80084bc <UART_SetConfig+0x10a4>)
 80082ba:	e010      	b.n	80082de <UART_SetConfig+0xec6>
 80082bc:	4b80      	ldr	r3, [pc, #512]	; (80084c0 <UART_SetConfig+0x10a8>)
 80082be:	e00e      	b.n	80082de <UART_SetConfig+0xec6>
 80082c0:	4b80      	ldr	r3, [pc, #512]	; (80084c4 <UART_SetConfig+0x10ac>)
 80082c2:	e00c      	b.n	80082de <UART_SetConfig+0xec6>
 80082c4:	4b80      	ldr	r3, [pc, #512]	; (80084c8 <UART_SetConfig+0x10b0>)
 80082c6:	e00a      	b.n	80082de <UART_SetConfig+0xec6>
 80082c8:	4b80      	ldr	r3, [pc, #512]	; (80084cc <UART_SetConfig+0x10b4>)
 80082ca:	e008      	b.n	80082de <UART_SetConfig+0xec6>
 80082cc:	4b80      	ldr	r3, [pc, #512]	; (80084d0 <UART_SetConfig+0x10b8>)
 80082ce:	e006      	b.n	80082de <UART_SetConfig+0xec6>
 80082d0:	4b80      	ldr	r3, [pc, #512]	; (80084d4 <UART_SetConfig+0x10bc>)
 80082d2:	e004      	b.n	80082de <UART_SetConfig+0xec6>
 80082d4:	4b80      	ldr	r3, [pc, #512]	; (80084d8 <UART_SetConfig+0x10c0>)
 80082d6:	e002      	b.n	80082de <UART_SetConfig+0xec6>
 80082d8:	4b80      	ldr	r3, [pc, #512]	; (80084dc <UART_SetConfig+0x10c4>)
 80082da:	e000      	b.n	80082de <UART_SetConfig+0xec6>
 80082dc:	4b75      	ldr	r3, [pc, #468]	; (80084b4 <UART_SetConfig+0x109c>)
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	6852      	ldr	r2, [r2, #4]
 80082e2:	0852      	lsrs	r2, r2, #1
 80082e4:	441a      	add	r2, r3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	61fb      	str	r3, [r7, #28]
        break;
 80082f2:	e0bd      	b.n	8008470 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082f4:	f7fd f83e 	bl	8005374 <HAL_RCC_GetSysClockFreq>
 80082f8:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d044      	beq.n	800838c <UART_SetConfig+0xf74>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008306:	2b01      	cmp	r3, #1
 8008308:	d03e      	beq.n	8008388 <UART_SetConfig+0xf70>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830e:	2b02      	cmp	r3, #2
 8008310:	d038      	beq.n	8008384 <UART_SetConfig+0xf6c>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008316:	2b03      	cmp	r3, #3
 8008318:	d032      	beq.n	8008380 <UART_SetConfig+0xf68>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831e:	2b04      	cmp	r3, #4
 8008320:	d02c      	beq.n	800837c <UART_SetConfig+0xf64>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008326:	2b05      	cmp	r3, #5
 8008328:	d026      	beq.n	8008378 <UART_SetConfig+0xf60>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832e:	2b06      	cmp	r3, #6
 8008330:	d020      	beq.n	8008374 <UART_SetConfig+0xf5c>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008336:	2b07      	cmp	r3, #7
 8008338:	d01a      	beq.n	8008370 <UART_SetConfig+0xf58>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833e:	2b08      	cmp	r3, #8
 8008340:	d014      	beq.n	800836c <UART_SetConfig+0xf54>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008346:	2b09      	cmp	r3, #9
 8008348:	d00e      	beq.n	8008368 <UART_SetConfig+0xf50>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834e:	2b0a      	cmp	r3, #10
 8008350:	d008      	beq.n	8008364 <UART_SetConfig+0xf4c>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008356:	2b0b      	cmp	r3, #11
 8008358:	d102      	bne.n	8008360 <UART_SetConfig+0xf48>
 800835a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800835e:	e016      	b.n	800838e <UART_SetConfig+0xf76>
 8008360:	2301      	movs	r3, #1
 8008362:	e014      	b.n	800838e <UART_SetConfig+0xf76>
 8008364:	2380      	movs	r3, #128	; 0x80
 8008366:	e012      	b.n	800838e <UART_SetConfig+0xf76>
 8008368:	2340      	movs	r3, #64	; 0x40
 800836a:	e010      	b.n	800838e <UART_SetConfig+0xf76>
 800836c:	2320      	movs	r3, #32
 800836e:	e00e      	b.n	800838e <UART_SetConfig+0xf76>
 8008370:	2310      	movs	r3, #16
 8008372:	e00c      	b.n	800838e <UART_SetConfig+0xf76>
 8008374:	230c      	movs	r3, #12
 8008376:	e00a      	b.n	800838e <UART_SetConfig+0xf76>
 8008378:	230a      	movs	r3, #10
 800837a:	e008      	b.n	800838e <UART_SetConfig+0xf76>
 800837c:	2308      	movs	r3, #8
 800837e:	e006      	b.n	800838e <UART_SetConfig+0xf76>
 8008380:	2306      	movs	r3, #6
 8008382:	e004      	b.n	800838e <UART_SetConfig+0xf76>
 8008384:	2304      	movs	r3, #4
 8008386:	e002      	b.n	800838e <UART_SetConfig+0xf76>
 8008388:	2302      	movs	r3, #2
 800838a:	e000      	b.n	800838e <UART_SetConfig+0xf76>
 800838c:	2301      	movs	r3, #1
 800838e:	693a      	ldr	r2, [r7, #16]
 8008390:	fbb2 f2f3 	udiv	r2, r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	085b      	lsrs	r3, r3, #1
 800839a:	441a      	add	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	61fb      	str	r3, [r7, #28]
        break;
 80083a8:	e062      	b.n	8008470 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d04e      	beq.n	8008450 <UART_SetConfig+0x1038>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d047      	beq.n	800844a <UART_SetConfig+0x1032>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d040      	beq.n	8008444 <UART_SetConfig+0x102c>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c6:	2b03      	cmp	r3, #3
 80083c8:	d039      	beq.n	800843e <UART_SetConfig+0x1026>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ce:	2b04      	cmp	r3, #4
 80083d0:	d032      	beq.n	8008438 <UART_SetConfig+0x1020>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d6:	2b05      	cmp	r3, #5
 80083d8:	d02b      	beq.n	8008432 <UART_SetConfig+0x101a>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083de:	2b06      	cmp	r3, #6
 80083e0:	d024      	beq.n	800842c <UART_SetConfig+0x1014>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e6:	2b07      	cmp	r3, #7
 80083e8:	d01d      	beq.n	8008426 <UART_SetConfig+0x100e>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ee:	2b08      	cmp	r3, #8
 80083f0:	d016      	beq.n	8008420 <UART_SetConfig+0x1008>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f6:	2b09      	cmp	r3, #9
 80083f8:	d00f      	beq.n	800841a <UART_SetConfig+0x1002>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fe:	2b0a      	cmp	r3, #10
 8008400:	d008      	beq.n	8008414 <UART_SetConfig+0xffc>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008406:	2b0b      	cmp	r3, #11
 8008408:	d101      	bne.n	800840e <UART_SetConfig+0xff6>
 800840a:	2380      	movs	r3, #128	; 0x80
 800840c:	e022      	b.n	8008454 <UART_SetConfig+0x103c>
 800840e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008412:	e01f      	b.n	8008454 <UART_SetConfig+0x103c>
 8008414:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008418:	e01c      	b.n	8008454 <UART_SetConfig+0x103c>
 800841a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800841e:	e019      	b.n	8008454 <UART_SetConfig+0x103c>
 8008420:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008424:	e016      	b.n	8008454 <UART_SetConfig+0x103c>
 8008426:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800842a:	e013      	b.n	8008454 <UART_SetConfig+0x103c>
 800842c:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008430:	e010      	b.n	8008454 <UART_SetConfig+0x103c>
 8008432:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008436:	e00d      	b.n	8008454 <UART_SetConfig+0x103c>
 8008438:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800843c:	e00a      	b.n	8008454 <UART_SetConfig+0x103c>
 800843e:	f241 5355 	movw	r3, #5461	; 0x1555
 8008442:	e007      	b.n	8008454 <UART_SetConfig+0x103c>
 8008444:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008448:	e004      	b.n	8008454 <UART_SetConfig+0x103c>
 800844a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800844e:	e001      	b.n	8008454 <UART_SetConfig+0x103c>
 8008450:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	6852      	ldr	r2, [r2, #4]
 8008458:	0852      	lsrs	r2, r2, #1
 800845a:	441a      	add	r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	fbb2 f3f3 	udiv	r3, r2, r3
 8008464:	b29b      	uxth	r3, r3
 8008466:	61fb      	str	r3, [r7, #28]
        break;
 8008468:	e002      	b.n	8008470 <UART_SetConfig+0x1058>
      default:
        ret = HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	76fb      	strb	r3, [r7, #27]
        break;
 800846e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	2b0f      	cmp	r3, #15
 8008474:	d908      	bls.n	8008488 <UART_SetConfig+0x1070>
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800847c:	d204      	bcs.n	8008488 <UART_SetConfig+0x1070>
    {
      huart->Instance->BRR = usartdiv;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	69fa      	ldr	r2, [r7, #28]
 8008484:	60da      	str	r2, [r3, #12]
 8008486:	e001      	b.n	800848c <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80084a8:	7efb      	ldrb	r3, [r7, #27]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3728      	adds	r7, #40	; 0x28
 80084ae:	46bd      	mov	sp, r7
 80084b0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80084b4:	00f42400 	.word	0x00f42400
 80084b8:	0001e848 	.word	0x0001e848
 80084bc:	0003d090 	.word	0x0003d090
 80084c0:	0007a120 	.word	0x0007a120
 80084c4:	000f4240 	.word	0x000f4240
 80084c8:	00145855 	.word	0x00145855
 80084cc:	00186a00 	.word	0x00186a00
 80084d0:	001e8480 	.word	0x001e8480
 80084d4:	0028b0aa 	.word	0x0028b0aa
 80084d8:	003d0900 	.word	0x003d0900
 80084dc:	007a1200 	.word	0x007a1200

080084e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ec:	f003 0301 	and.w	r3, r3, #1
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00a      	beq.n	800850a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	430a      	orrs	r2, r1
 8008508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800850e:	f003 0302 	and.w	r3, r3, #2
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00a      	beq.n	800852c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	430a      	orrs	r2, r1
 800852a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008530:	f003 0304 	and.w	r3, r3, #4
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00a      	beq.n	800854e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	430a      	orrs	r2, r1
 800854c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008552:	f003 0308 	and.w	r3, r3, #8
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00a      	beq.n	8008570 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	430a      	orrs	r2, r1
 800856e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008574:	f003 0310 	and.w	r3, r3, #16
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00a      	beq.n	8008592 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	430a      	orrs	r2, r1
 8008590:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008596:	f003 0320 	and.w	r3, r3, #32
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00a      	beq.n	80085b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	430a      	orrs	r2, r1
 80085b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d01a      	beq.n	80085f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	430a      	orrs	r2, r1
 80085d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085de:	d10a      	bne.n	80085f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	430a      	orrs	r2, r1
 80085f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00a      	beq.n	8008618 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	430a      	orrs	r2, r1
 8008616:	605a      	str	r2, [r3, #4]
  }
}
 8008618:	bf00      	nop
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af02      	add	r7, sp, #8
 800862a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008634:	f7fa fce4 	bl	8003000 <HAL_GetTick>
 8008638:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0308 	and.w	r3, r3, #8
 8008644:	2b08      	cmp	r3, #8
 8008646:	d10e      	bne.n	8008666 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008648:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800864c:	9300      	str	r3, [sp, #0]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2200      	movs	r2, #0
 8008652:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f82c 	bl	80086b4 <UART_WaitOnFlagUntilTimeout>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d001      	beq.n	8008666 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008662:	2303      	movs	r3, #3
 8008664:	e022      	b.n	80086ac <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 0304 	and.w	r3, r3, #4
 8008670:	2b04      	cmp	r3, #4
 8008672:	d10e      	bne.n	8008692 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008674:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008678:	9300      	str	r3, [sp, #0]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f816 	bl	80086b4 <UART_WaitOnFlagUntilTimeout>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d001      	beq.n	8008692 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800868e:	2303      	movs	r3, #3
 8008690:	e00c      	b.n	80086ac <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2220      	movs	r2, #32
 8008696:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2220      	movs	r2, #32
 800869e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3710      	adds	r7, #16
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	603b      	str	r3, [r7, #0]
 80086c0:	4613      	mov	r3, r2
 80086c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086c4:	e062      	b.n	800878c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086cc:	d05e      	beq.n	800878c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086ce:	f7fa fc97 	bl	8003000 <HAL_GetTick>
 80086d2:	4602      	mov	r2, r0
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	1ad3      	subs	r3, r2, r3
 80086d8:	69ba      	ldr	r2, [r7, #24]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d302      	bcc.n	80086e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d11d      	bne.n	8008720 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80086f2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	689a      	ldr	r2, [r3, #8]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f022 0201 	bic.w	r2, r2, #1
 8008702:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2220      	movs	r2, #32
 8008708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2220      	movs	r2, #32
 8008710:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2200      	movs	r2, #0
 8008718:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800871c:	2303      	movs	r3, #3
 800871e:	e045      	b.n	80087ac <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 0304 	and.w	r3, r3, #4
 800872a:	2b00      	cmp	r3, #0
 800872c:	d02e      	beq.n	800878c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	69db      	ldr	r3, [r3, #28]
 8008734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800873c:	d126      	bne.n	800878c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008746:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008756:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	689a      	ldr	r2, [r3, #8]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f022 0201 	bic.w	r2, r2, #1
 8008766:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2220      	movs	r2, #32
 800876c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2220      	movs	r2, #32
 8008774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2220      	movs	r2, #32
 800877c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2200      	movs	r2, #0
 8008784:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8008788:	2303      	movs	r3, #3
 800878a:	e00f      	b.n	80087ac <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	69da      	ldr	r2, [r3, #28]
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	4013      	ands	r3, r2
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	429a      	cmp	r2, r3
 800879a:	bf0c      	ite	eq
 800879c:	2301      	moveq	r3, #1
 800879e:	2300      	movne	r3, #0
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	461a      	mov	r2, r3
 80087a4:	79fb      	ldrb	r3, [r7, #7]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d08d      	beq.n	80086c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d101      	bne.n	80087ca <HAL_UARTEx_DisableFifoMode+0x16>
 80087c6:	2302      	movs	r3, #2
 80087c8:	e027      	b.n	800881a <HAL_UARTEx_DisableFifoMode+0x66>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2201      	movs	r2, #1
 80087ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2224      	movs	r2, #36	; 0x24
 80087d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f022 0201 	bic.w	r2, r2, #1
 80087f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80087f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2220      	movs	r2, #32
 800880c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	3714      	adds	r7, #20
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008826:	b580      	push	{r7, lr}
 8008828:	b084      	sub	sp, #16
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
 800882e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008836:	2b01      	cmp	r3, #1
 8008838:	d101      	bne.n	800883e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800883a:	2302      	movs	r3, #2
 800883c:	e02d      	b.n	800889a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2201      	movs	r2, #1
 8008842:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2224      	movs	r2, #36	; 0x24
 800884a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f022 0201 	bic.w	r2, r2, #1
 8008864:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	683a      	ldr	r2, [r7, #0]
 8008876:	430a      	orrs	r2, r1
 8008878:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 f850 	bl	8008920 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2220      	movs	r2, #32
 800888c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b084      	sub	sp, #16
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
 80088aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d101      	bne.n	80088ba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80088b6:	2302      	movs	r3, #2
 80088b8:	e02d      	b.n	8008916 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2201      	movs	r2, #1
 80088be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2224      	movs	r2, #36	; 0x24
 80088c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f022 0201 	bic.w	r2, r2, #1
 80088e0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	683a      	ldr	r2, [r7, #0]
 80088f2:	430a      	orrs	r2, r1
 80088f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 f812 	bl	8008920 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	68fa      	ldr	r2, [r7, #12]
 8008902:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2220      	movs	r2, #32
 8008908:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
	...

08008920 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008920:	b480      	push	{r7}
 8008922:	b089      	sub	sp, #36	; 0x24
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008928:	4a2f      	ldr	r2, [pc, #188]	; (80089e8 <UARTEx_SetNbDataToProcess+0xc8>)
 800892a:	f107 0314 	add.w	r3, r7, #20
 800892e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008932:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008936:	4a2d      	ldr	r2, [pc, #180]	; (80089ec <UARTEx_SetNbDataToProcess+0xcc>)
 8008938:	f107 030c 	add.w	r3, r7, #12
 800893c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008940:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008948:	2b00      	cmp	r3, #0
 800894a:	d108      	bne.n	800895e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800895c:	e03d      	b.n	80089da <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800895e:	2308      	movs	r3, #8
 8008960:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008962:	2308      	movs	r3, #8
 8008964:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	0e5b      	lsrs	r3, r3, #25
 800896e:	b2db      	uxtb	r3, r3
 8008970:	f003 0307 	and.w	r3, r3, #7
 8008974:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	0f5b      	lsrs	r3, r3, #29
 800897e:	b2db      	uxtb	r3, r3
 8008980:	f003 0307 	and.w	r3, r3, #7
 8008984:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008986:	7fbb      	ldrb	r3, [r7, #30]
 8008988:	7f3a      	ldrb	r2, [r7, #28]
 800898a:	f107 0120 	add.w	r1, r7, #32
 800898e:	440a      	add	r2, r1
 8008990:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008994:	fb02 f303 	mul.w	r3, r2, r3
 8008998:	7f3a      	ldrb	r2, [r7, #28]
 800899a:	f107 0120 	add.w	r1, r7, #32
 800899e:	440a      	add	r2, r1
 80089a0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80089a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80089a8:	b29a      	uxth	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80089b0:	7ffb      	ldrb	r3, [r7, #31]
 80089b2:	7f7a      	ldrb	r2, [r7, #29]
 80089b4:	f107 0120 	add.w	r1, r7, #32
 80089b8:	440a      	add	r2, r1
 80089ba:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80089be:	fb02 f303 	mul.w	r3, r2, r3
 80089c2:	7f7a      	ldrb	r2, [r7, #29]
 80089c4:	f107 0120 	add.w	r1, r7, #32
 80089c8:	440a      	add	r2, r1
 80089ca:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80089ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80089da:	bf00      	nop
 80089dc:	3724      	adds	r7, #36	; 0x24
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	0800b6d0 	.word	0x0800b6d0
 80089ec:	0800b6d8 	.word	0x0800b6d8

080089f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80089f8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80089fc:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008a04:	b29a      	uxth	r2, r3
 8008a06:	89fb      	ldrh	r3, [r7, #14]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3714      	adds	r7, #20
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b085      	sub	sp, #20
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008a28:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008a2c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	b21a      	sxth	r2, r3
 8008a38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008a3c:	43db      	mvns	r3, r3
 8008a3e:	b21b      	sxth	r3, r3
 8008a40:	4013      	ands	r3, r2
 8008a42:	b21b      	sxth	r3, r3
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3714      	adds	r7, #20
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr

08008a5a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	f107 0014 	add.w	r0, r7, #20
 8008a68:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f7ff ffaf 	bl	80089f0 <USB_EnableGlobalInt>

  return HAL_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3708      	adds	r7, #8
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a9e:	b004      	add	sp, #16
 8008aa0:	4770      	bx	lr

08008aa2 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable(void)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b088      	sub	sp, #32
 8008aa6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8008aac:	f107 0308 	add.w	r3, r7, #8
 8008ab0:	2218      	movs	r2, #24
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f001 f97f 	bl	8009db8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008aba:	233f      	movs	r3, #63	; 0x3f
 8008abc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8008abe:	2381      	movs	r3, #129	; 0x81
 8008ac0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008ac2:	1dfb      	adds	r3, r7, #7
 8008ac4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8008aca:	f107 0308 	add.w	r3, r7, #8
 8008ace:	2100      	movs	r1, #0
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f001 f835 	bl	8009b40 <hci_send_req>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	da01      	bge.n	8008ae0 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008adc:	23ff      	movs	r3, #255	; 0xff
 8008ade:	e005      	b.n	8008aec <aci_gap_set_non_discoverable+0x4a>
  if (status) 
 8008ae0:	79fb      	ldrb	r3, [r7, #7]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d001      	beq.n	8008aea <aci_gap_set_non_discoverable+0x48>
  {
    return status;
 8008ae6:	79fb      	ldrb	r3, [r7, #7]
 8008ae8:	e000      	b.n	8008aec <aci_gap_set_non_discoverable+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3720      	adds	r7, #32
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 8008af4:	b5b0      	push	{r4, r5, r7, lr}
 8008af6:	b0ce      	sub	sp, #312	; 0x138
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	4605      	mov	r5, r0
 8008afc:	460c      	mov	r4, r1
 8008afe:	4610      	mov	r0, r2
 8008b00:	4619      	mov	r1, r3
 8008b02:	1dfb      	adds	r3, r7, #7
 8008b04:	462a      	mov	r2, r5
 8008b06:	701a      	strb	r2, [r3, #0]
 8008b08:	1d3b      	adds	r3, r7, #4
 8008b0a:	4622      	mov	r2, r4
 8008b0c:	801a      	strh	r2, [r3, #0]
 8008b0e:	1cbb      	adds	r3, r7, #2
 8008b10:	4602      	mov	r2, r0
 8008b12:	801a      	strh	r2, [r3, #0]
 8008b14:	1dbb      	adds	r3, r7, #6
 8008b16:	460a      	mov	r2, r1
 8008b18:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8008b1a:	f107 0310 	add.w	r3, r7, #16
 8008b1e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8008b22:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008b26:	3308      	adds	r3, #8
 8008b28:	f107 0210 	add.w	r2, r7, #16
 8008b2c:	4413      	add	r3, r2
 8008b2e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8008b32:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008b36:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008b3a:	4413      	add	r3, r2
 8008b3c:	3309      	adds	r3, #9
 8008b3e:	f107 0210 	add.w	r2, r7, #16
 8008b42:	4413      	add	r3, r2
 8008b44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008b48:	f107 030f 	add.w	r3, r7, #15
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008b50:	2300      	movs	r3, #0
 8008b52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 8008b56:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008b5a:	1dfa      	adds	r2, r7, #7
 8008b5c:	7812      	ldrb	r2, [r2, #0]
 8008b5e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008b60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b64:	3301      	adds	r3, #1
 8008b66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 8008b6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008b6e:	1d3a      	adds	r2, r7, #4
 8008b70:	8812      	ldrh	r2, [r2, #0]
 8008b72:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8008b76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b7a:	3302      	adds	r3, #2
 8008b7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 8008b80:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008b84:	1cba      	adds	r2, r7, #2
 8008b86:	8812      	ldrh	r2, [r2, #0]
 8008b88:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8008b8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b90:	3302      	adds	r3, #2
 8008b92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8008b96:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008b9a:	1dba      	adds	r2, r7, #6
 8008b9c:	7812      	ldrb	r2, [r2, #0]
 8008b9e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008ba0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8008baa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008bae:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008bb2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008bb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008bb8:	3301      	adds	r3, #1
 8008bba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 8008bbe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008bc2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008bc6:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8008bc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008bcc:	3301      	adds	r3, #1
 8008bce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 8008bd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008bd6:	3308      	adds	r3, #8
 8008bd8:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008bdc:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8008be0:	4618      	mov	r0, r3
 8008be2:	f001 f8d9 	bl	8009d98 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8008be6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008bea:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008bee:	4413      	add	r3, r2
 8008bf0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 8008bf4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008bf8:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008bfc:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008bfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c02:	3301      	adds	r3, #1
 8008c04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length);
 8008c08:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008c12:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8008c16:	4618      	mov	r0, r3
 8008c18:	f001 f8be 	bl	8009d98 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8008c1c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008c20:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008c24:	4413      	add	r3, r2
 8008c26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 8008c2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c2e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8008c32:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008c34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c38:	3302      	adds	r3, #2
 8008c3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 8008c3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c42:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8008c46:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8008c48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c4c:	3302      	adds	r3, #2
 8008c4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 8008c52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c56:	2218      	movs	r2, #24
 8008c58:	2100      	movs	r1, #0
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f001 f8ac 	bl	8009db8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008c60:	233f      	movs	r3, #63	; 0x3f
 8008c62:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8008c66:	2383      	movs	r3, #131	; 0x83
 8008c68:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008c6c:	f107 0310 	add.w	r3, r7, #16
 8008c70:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008c74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c78:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008c7c:	f107 030f 	add.w	r3, r7, #15
 8008c80:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008c84:	2301      	movs	r3, #1
 8008c86:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008c8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c8e:	2100      	movs	r1, #0
 8008c90:	4618      	mov	r0, r3
 8008c92:	f000 ff55 	bl	8009b40 <hci_send_req>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	da01      	bge.n	8008ca0 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8008c9c:	23ff      	movs	r3, #255	; 0xff
 8008c9e:	e009      	b.n	8008cb4 <aci_gap_set_discoverable+0x1c0>
  if (status) 
 8008ca0:	f107 030f 	add.w	r3, r7, #15
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d003      	beq.n	8008cb2 <aci_gap_set_discoverable+0x1be>
  {
    return status;
 8008caa:	f107 030f 	add.w	r3, r7, #15
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	e000      	b.n	8008cb4 <aci_gap_set_discoverable+0x1c0>
  }
  return BLE_STATUS_SUCCESS;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bdb0      	pop	{r4, r5, r7, pc}

08008cbe <aci_gap_set_io_capability>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b0cc      	sub	sp, #304	; 0x130
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	1dfb      	adds	r3, r7, #7
 8008cc8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8008cca:	f107 0310 	add.w	r3, r7, #16
 8008cce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008cd2:	f107 030f 	add.w	r3, r7, #15
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = htob(IO_Capability, 1);
 8008ce0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ce4:	1dfa      	adds	r2, r7, #7
 8008ce6:	7812      	ldrb	r2, [r2, #0]
 8008ce8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008cea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cee:	3301      	adds	r3, #1
 8008cf0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8008cf4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008cf8:	2218      	movs	r2, #24
 8008cfa:	2100      	movs	r1, #0
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f001 f85b 	bl	8009db8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008d02:	233f      	movs	r3, #63	; 0x3f
 8008d04:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8008d08:	2385      	movs	r3, #133	; 0x85
 8008d0a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008d0e:	f107 0310 	add.w	r3, r7, #16
 8008d12:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008d16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d1a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008d1e:	f107 030f 	add.w	r3, r7, #15
 8008d22:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008d26:	2301      	movs	r3, #1
 8008d28:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008d2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008d30:	2100      	movs	r1, #0
 8008d32:	4618      	mov	r0, r3
 8008d34:	f000 ff04 	bl	8009b40 <hci_send_req>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	da01      	bge.n	8008d42 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8008d3e:	23ff      	movs	r3, #255	; 0xff
 8008d40:	e009      	b.n	8008d56 <aci_gap_set_io_capability+0x98>
  if (status) 
 8008d42:	f107 030f 	add.w	r3, r7, #15
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d003      	beq.n	8008d54 <aci_gap_set_io_capability+0x96>
  {
    return status;
 8008d4c:	f107 030f 	add.w	r3, r7, #15
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	e000      	b.n	8008d56 <aci_gap_set_io_capability+0x98>
  }
  return BLE_STATUS_SUCCESS;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 8008d60:	b5b0      	push	{r4, r5, r7, lr}
 8008d62:	b0cc      	sub	sp, #304	; 0x130
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	4605      	mov	r5, r0
 8008d68:	460c      	mov	r4, r1
 8008d6a:	4610      	mov	r0, r2
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	1dfb      	adds	r3, r7, #7
 8008d70:	462a      	mov	r2, r5
 8008d72:	701a      	strb	r2, [r3, #0]
 8008d74:	1dbb      	adds	r3, r7, #6
 8008d76:	4622      	mov	r2, r4
 8008d78:	701a      	strb	r2, [r3, #0]
 8008d7a:	1d7b      	adds	r3, r7, #5
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	701a      	strb	r2, [r3, #0]
 8008d80:	1d3b      	adds	r3, r7, #4
 8008d82:	460a      	mov	r2, r1
 8008d84:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8008d86:	f107 0310 	add.w	r3, r7, #16
 8008d8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008d8e:	f107 030f 	add.w	r3, r7, #15
 8008d92:	2200      	movs	r2, #0
 8008d94:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008d96:	2300      	movs	r3, #0
 8008d98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 8008d9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008da0:	1dfa      	adds	r2, r7, #7
 8008da2:	7812      	ldrb	r2, [r2, #0]
 8008da4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008da6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008daa:	3301      	adds	r3, #1
 8008dac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 8008db0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008db4:	1dba      	adds	r2, r7, #6
 8008db6:	7812      	ldrb	r2, [r2, #0]
 8008db8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008dba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = htob(SC_Support, 1);
 8008dc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dc8:	1d7a      	adds	r2, r7, #5
 8008dca:	7812      	ldrb	r2, [r2, #0]
 8008dcc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008dce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 8008dd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ddc:	1d3a      	adds	r2, r7, #4
 8008dde:	7812      	ldrb	r2, [r2, #0]
 8008de0:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8008de2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008de6:	3301      	adds	r3, #1
 8008de8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 8008dec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008df0:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8008df4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008df6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 8008e00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e04:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8008e08:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008e0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e0e:	3301      	adds	r3, #1
 8008e10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 8008e14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e18:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008e1c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008e1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e22:	3301      	adds	r3, #1
 8008e24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 8008e28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e2c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008e30:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8008e34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e38:	3304      	adds	r3, #4
 8008e3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 8008e3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e42:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008e46:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8008e48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8008e52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008e56:	2218      	movs	r2, #24
 8008e58:	2100      	movs	r1, #0
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 ffac 	bl	8009db8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008e60:	233f      	movs	r3, #63	; 0x3f
 8008e62:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8008e66:	2386      	movs	r3, #134	; 0x86
 8008e68:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008e6c:	f107 0310 	add.w	r3, r7, #16
 8008e70:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008e74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e78:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008e7c:	f107 030f 	add.w	r3, r7, #15
 8008e80:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008e84:	2301      	movs	r3, #1
 8008e86:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008e8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008e8e:	2100      	movs	r1, #0
 8008e90:	4618      	mov	r0, r3
 8008e92:	f000 fe55 	bl	8009b40 <hci_send_req>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	da01      	bge.n	8008ea0 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8008e9c:	23ff      	movs	r3, #255	; 0xff
 8008e9e:	e009      	b.n	8008eb4 <aci_gap_set_authentication_requirement+0x154>
  if (status) 
 8008ea0:	f107 030f 	add.w	r3, r7, #15
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d003      	beq.n	8008eb2 <aci_gap_set_authentication_requirement+0x152>
  {
    return status;
 8008eaa:	f107 030f 	add.w	r3, r7, #15
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	e000      	b.n	8008eb4 <aci_gap_set_authentication_requirement+0x154>
  }
  return BLE_STATUS_SUCCESS;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bdb0      	pop	{r4, r5, r7, pc}

08008ebe <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8008ebe:	b590      	push	{r4, r7, lr}
 8008ec0:	b0cd      	sub	sp, #308	; 0x134
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	4604      	mov	r4, r0
 8008ec6:	4608      	mov	r0, r1
 8008ec8:	4611      	mov	r1, r2
 8008eca:	463a      	mov	r2, r7
 8008ecc:	6013      	str	r3, [r2, #0]
 8008ece:	1dfb      	adds	r3, r7, #7
 8008ed0:	4622      	mov	r2, r4
 8008ed2:	701a      	strb	r2, [r3, #0]
 8008ed4:	1dbb      	adds	r3, r7, #6
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	701a      	strb	r2, [r3, #0]
 8008eda:	1d7b      	adds	r3, r7, #5
 8008edc:	460a      	mov	r2, r1
 8008ede:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8008ee0:	f107 0310 	add.w	r3, r7, #16
 8008ee4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 8008ee8:	f107 0308 	add.w	r3, r7, #8
 8008eec:	2207      	movs	r2, #7
 8008eee:	2100      	movs	r1, #0
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f000 ff61 	bl	8009db8 <Osal_MemSet>
  int index_input = 0;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = htob(Role, 1);
 8008efc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f00:	1dfa      	adds	r2, r7, #7
 8008f02:	7812      	ldrb	r2, [r2, #0]
 8008f04:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008f06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8008f10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f14:	1dba      	adds	r2, r7, #6
 8008f16:	7812      	ldrb	r2, [r2, #0]
 8008f18:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008f1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f1e:	3301      	adds	r3, #1
 8008f20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 8008f24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f28:	1d7a      	adds	r2, r7, #5
 8008f2a:	7812      	ldrb	r2, [r2, #0]
 8008f2c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008f2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f32:	3301      	adds	r3, #1
 8008f34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8008f38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f3c:	2218      	movs	r2, #24
 8008f3e:	2100      	movs	r1, #0
 8008f40:	4618      	mov	r0, r3
 8008f42:	f000 ff39 	bl	8009db8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008f46:	233f      	movs	r3, #63	; 0x3f
 8008f48:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8008f4c:	238a      	movs	r3, #138	; 0x8a
 8008f4e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008f52:	f107 0310 	add.w	r3, r7, #16
 8008f56:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008f5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008f62:	f107 0308 	add.w	r3, r7, #8
 8008f66:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008f6a:	2307      	movs	r3, #7
 8008f6c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008f70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f74:	2100      	movs	r1, #0
 8008f76:	4618      	mov	r0, r3
 8008f78:	f000 fde2 	bl	8009b40 <hci_send_req>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	da01      	bge.n	8008f86 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8008f82:	23ff      	movs	r3, #255	; 0xff
 8008f84:	e021      	b.n	8008fca <aci_gap_init+0x10c>
  if (resp.Status) 
 8008f86:	f107 0308 	add.w	r3, r7, #8
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d003      	beq.n	8008f98 <aci_gap_init+0xda>
  {
    return resp.Status;
 8008f90:	f107 0308 	add.w	r3, r7, #8
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	e018      	b.n	8008fca <aci_gap_init+0x10c>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8008f98:	f107 0308 	add.w	r3, r7, #8
 8008f9c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	463b      	mov	r3, r7
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8008fa8:	f107 0308 	add.w	r3, r7, #8
 8008fac:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008fb0:	b29a      	uxth	r2, r3
 8008fb2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008fb6:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8008fb8:	f107 0308 	add.w	r3, r7, #8
 8008fbc:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008fc0:	b29a      	uxth	r2, r3
 8008fc2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008fc6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd90      	pop	{r4, r7, pc}

08008fd4 <aci_gap_update_adv_data>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b0cc      	sub	sp, #304	; 0x130
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	4602      	mov	r2, r0
 8008fdc:	463b      	mov	r3, r7
 8008fde:	6019      	str	r1, [r3, #0]
 8008fe0:	1dfb      	adds	r3, r7, #7
 8008fe2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8008fe4:	f107 0310 	add.w	r3, r7, #16
 8008fe8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008fec:	f107 030f 	add.w	r3, r7, #15
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 8008ffa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ffe:	1dfa      	adds	r2, r7, #7
 8009000:	7812      	ldrb	r2, [r2, #0]
 8009002:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009004:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009008:	3301      	adds	r3, #1
 800900a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen);
 800900e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009012:	1c58      	adds	r0, r3, #1
 8009014:	1dfb      	adds	r3, r7, #7
 8009016:	781a      	ldrb	r2, [r3, #0]
 8009018:	463b      	mov	r3, r7
 800901a:	6819      	ldr	r1, [r3, #0]
 800901c:	f000 febc 	bl	8009d98 <Osal_MemCpy>
  index_input += AdvDataLen;
 8009020:	1dfb      	adds	r3, r7, #7
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009028:	4413      	add	r3, r2
 800902a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800902e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009032:	2218      	movs	r2, #24
 8009034:	2100      	movs	r1, #0
 8009036:	4618      	mov	r0, r3
 8009038:	f000 febe 	bl	8009db8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800903c:	233f      	movs	r3, #63	; 0x3f
 800903e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8009042:	238e      	movs	r3, #142	; 0x8e
 8009044:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009048:	f107 0310 	add.w	r3, r7, #16
 800904c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009050:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009054:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009058:	f107 030f 	add.w	r3, r7, #15
 800905c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009060:	2301      	movs	r3, #1
 8009062:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8009066:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800906a:	2100      	movs	r1, #0
 800906c:	4618      	mov	r0, r3
 800906e:	f000 fd67 	bl	8009b40 <hci_send_req>
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	da01      	bge.n	800907c <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 8009078:	23ff      	movs	r3, #255	; 0xff
 800907a:	e009      	b.n	8009090 <aci_gap_update_adv_data+0xbc>
  if (status) 
 800907c:	f107 030f 	add.w	r3, r7, #15
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d003      	beq.n	800908e <aci_gap_update_adv_data+0xba>
  {
    return status;
 8009086:	f107 030f 	add.w	r3, r7, #15
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	e000      	b.n	8009090 <aci_gap_update_adv_data+0xbc>
  }
  return BLE_STATUS_SUCCESS;
 800908e:	2300      	movs	r3, #0
}
 8009090:	4618      	mov	r0, r3
 8009092:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <aci_gap_configure_whitelist>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_configure_whitelist(void)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b088      	sub	sp, #32
 800909e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80090a0:	2300      	movs	r3, #0
 80090a2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 80090a4:	f107 0308 	add.w	r3, r7, #8
 80090a8:	2218      	movs	r2, #24
 80090aa:	2100      	movs	r1, #0
 80090ac:	4618      	mov	r0, r3
 80090ae:	f000 fe83 	bl	8009db8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80090b2:	233f      	movs	r3, #63	; 0x3f
 80090b4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80090b6:	2392      	movs	r3, #146	; 0x92
 80090b8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80090ba:	1dfb      	adds	r3, r7, #7
 80090bc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80090be:	2301      	movs	r3, #1
 80090c0:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80090c2:	f107 0308 	add.w	r3, r7, #8
 80090c6:	2100      	movs	r1, #0
 80090c8:	4618      	mov	r0, r3
 80090ca:	f000 fd39 	bl	8009b40 <hci_send_req>
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	da01      	bge.n	80090d8 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 80090d4:	23ff      	movs	r3, #255	; 0xff
 80090d6:	e005      	b.n	80090e4 <aci_gap_configure_whitelist+0x4a>
  if (status) 
 80090d8:	79fb      	ldrb	r3, [r7, #7]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d001      	beq.n	80090e2 <aci_gap_configure_whitelist+0x48>
  {
    return status;
 80090de:	79fb      	ldrb	r3, [r7, #7]
 80090e0:	e000      	b.n	80090e4 <aci_gap_configure_whitelist+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3720      	adds	r7, #32
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init(void)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b088      	sub	sp, #32
 80090f0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80090f2:	2300      	movs	r3, #0
 80090f4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 80090f6:	f107 0308 	add.w	r3, r7, #8
 80090fa:	2218      	movs	r2, #24
 80090fc:	2100      	movs	r1, #0
 80090fe:	4618      	mov	r0, r3
 8009100:	f000 fe5a 	bl	8009db8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009104:	233f      	movs	r3, #63	; 0x3f
 8009106:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8009108:	f240 1301 	movw	r3, #257	; 0x101
 800910c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800910e:	1dfb      	adds	r3, r7, #7
 8009110:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009112:	2301      	movs	r3, #1
 8009114:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8009116:	f107 0308 	add.w	r3, r7, #8
 800911a:	2100      	movs	r1, #0
 800911c:	4618      	mov	r0, r3
 800911e:	f000 fd0f 	bl	8009b40 <hci_send_req>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	da01      	bge.n	800912c <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8009128:	23ff      	movs	r3, #255	; 0xff
 800912a:	e005      	b.n	8009138 <aci_gatt_init+0x4c>
  if (status) 
 800912c:	79fb      	ldrb	r3, [r7, #7]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d001      	beq.n	8009136 <aci_gatt_init+0x4a>
  {
    return status;
 8009132:	79fb      	ldrb	r3, [r7, #7]
 8009134:	e000      	b.n	8009138 <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3720      	adds	r7, #32
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8009140:	b590      	push	{r4, r7, lr}
 8009142:	b0cf      	sub	sp, #316	; 0x13c
 8009144:	af00      	add	r7, sp, #0
 8009146:	4604      	mov	r4, r0
 8009148:	4638      	mov	r0, r7
 800914a:	6001      	str	r1, [r0, #0]
 800914c:	4610      	mov	r0, r2
 800914e:	4619      	mov	r1, r3
 8009150:	1dfb      	adds	r3, r7, #7
 8009152:	4622      	mov	r2, r4
 8009154:	701a      	strb	r2, [r3, #0]
 8009156:	1dbb      	adds	r3, r7, #6
 8009158:	4602      	mov	r2, r0
 800915a:	701a      	strb	r2, [r3, #0]
 800915c:	1d7b      	adds	r3, r7, #5
 800915e:	460a      	mov	r2, r1
 8009160:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8009162:	f107 0310 	add.w	r3, r7, #16
 8009166:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800916a:	1dfb      	adds	r3, r7, #7
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	2b01      	cmp	r3, #1
 8009170:	d007      	beq.n	8009182 <aci_gatt_add_service+0x42>
 8009172:	1dfb      	adds	r3, r7, #7
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	2b02      	cmp	r3, #2
 8009178:	d101      	bne.n	800917e <aci_gatt_add_service+0x3e>
 800917a:	2311      	movs	r3, #17
 800917c:	e002      	b.n	8009184 <aci_gatt_add_service+0x44>
 800917e:	2301      	movs	r3, #1
 8009180:	e000      	b.n	8009184 <aci_gatt_add_service+0x44>
 8009182:	2303      	movs	r3, #3
 8009184:	f107 0210 	add.w	r2, r7, #16
 8009188:	4413      	add	r3, r2
 800918a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800918e:	f107 030c 	add.w	r3, r7, #12
 8009192:	2203      	movs	r2, #3
 8009194:	2100      	movs	r1, #0
 8009196:	4618      	mov	r0, r3
 8009198:	f000 fe0e 	bl	8009db8 <Osal_MemSet>
  int index_input = 0;
 800919c:	2300      	movs	r3, #0
 800919e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 80091a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80091a6:	1dfa      	adds	r2, r7, #7
 80091a8:	7812      	ldrb	r2, [r2, #0]
 80091aa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80091ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091b0:	3301      	adds	r3, #1
 80091b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 80091b6:	1dfb      	adds	r3, r7, #7
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d002      	beq.n	80091c4 <aci_gatt_add_service+0x84>
 80091be:	2b02      	cmp	r3, #2
 80091c0:	d004      	beq.n	80091cc <aci_gatt_add_service+0x8c>
 80091c2:	e007      	b.n	80091d4 <aci_gatt_add_service+0x94>
      case 1: size = 2; break;
 80091c4:	2302      	movs	r3, #2
 80091c6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80091ca:	e005      	b.n	80091d8 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 80091cc:	2310      	movs	r3, #16
 80091ce:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80091d2:	e001      	b.n	80091d8 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 80091d4:	2347      	movs	r3, #71	; 0x47
 80091d6:	e05d      	b.n	8009294 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 80091d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80091dc:	1c58      	adds	r0, r3, #1
 80091de:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80091e2:	463b      	mov	r3, r7
 80091e4:	6819      	ldr	r1, [r3, #0]
 80091e6:	f000 fdd7 	bl	8009d98 <Osal_MemCpy>
    index_input += size;
 80091ea:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80091ee:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80091f2:	4413      	add	r3, r2
 80091f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = htob(Service_Type, 1);
 80091f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091fc:	1dba      	adds	r2, r7, #6
 80091fe:	7812      	ldrb	r2, [r2, #0]
 8009200:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009202:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009206:	3301      	adds	r3, #1
 8009208:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 800920c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009210:	1d7a      	adds	r2, r7, #5
 8009212:	7812      	ldrb	r2, [r2, #0]
 8009214:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8009216:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800921a:	3301      	adds	r3, #1
 800921c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 8009220:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009224:	2218      	movs	r2, #24
 8009226:	2100      	movs	r1, #0
 8009228:	4618      	mov	r0, r3
 800922a:	f000 fdc5 	bl	8009db8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800922e:	233f      	movs	r3, #63	; 0x3f
 8009230:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8009234:	f44f 7381 	mov.w	r3, #258	; 0x102
 8009238:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800923c:	f107 0310 	add.w	r3, r7, #16
 8009240:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009244:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009248:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800924c:	f107 030c 	add.w	r3, r7, #12
 8009250:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8009254:	2303      	movs	r3, #3
 8009256:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800925a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800925e:	2100      	movs	r1, #0
 8009260:	4618      	mov	r0, r3
 8009262:	f000 fc6d 	bl	8009b40 <hci_send_req>
 8009266:	4603      	mov	r3, r0
 8009268:	2b00      	cmp	r3, #0
 800926a:	da01      	bge.n	8009270 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 800926c:	23ff      	movs	r3, #255	; 0xff
 800926e:	e011      	b.n	8009294 <aci_gatt_add_service+0x154>
  if (resp.Status) 
 8009270:	f107 030c 	add.w	r3, r7, #12
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d003      	beq.n	8009282 <aci_gatt_add_service+0x142>
  {
    return resp.Status;
 800927a:	f107 030c 	add.w	r3, r7, #12
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	e008      	b.n	8009294 <aci_gatt_add_service+0x154>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8009282:	f107 030c 	add.w	r3, r7, #12
 8009286:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800928a:	b29a      	uxth	r2, r3
 800928c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009290:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800929a:	46bd      	mov	sp, r7
 800929c:	bd90      	pop	{r4, r7, pc}

0800929e <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 800929e:	b590      	push	{r4, r7, lr}
 80092a0:	b0d1      	sub	sp, #324	; 0x144
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	4604      	mov	r4, r0
 80092a6:	4608      	mov	r0, r1
 80092a8:	f107 0108 	add.w	r1, r7, #8
 80092ac:	600a      	str	r2, [r1, #0]
 80092ae:	4619      	mov	r1, r3
 80092b0:	f107 030e 	add.w	r3, r7, #14
 80092b4:	4622      	mov	r2, r4
 80092b6:	801a      	strh	r2, [r3, #0]
 80092b8:	f107 030d 	add.w	r3, r7, #13
 80092bc:	4602      	mov	r2, r0
 80092be:	701a      	strb	r2, [r3, #0]
 80092c0:	1dbb      	adds	r3, r7, #6
 80092c2:	460a      	mov	r2, r1
 80092c4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80092c6:	f107 0318 	add.w	r3, r7, #24
 80092ca:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80092ce:	f107 030d 	add.w	r3, r7, #13
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d008      	beq.n	80092ea <aci_gatt_add_char+0x4c>
 80092d8:	f107 030d 	add.w	r3, r7, #13
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d101      	bne.n	80092e6 <aci_gatt_add_char+0x48>
 80092e2:	2313      	movs	r3, #19
 80092e4:	e002      	b.n	80092ec <aci_gatt_add_char+0x4e>
 80092e6:	2303      	movs	r3, #3
 80092e8:	e000      	b.n	80092ec <aci_gatt_add_char+0x4e>
 80092ea:	2305      	movs	r3, #5
 80092ec:	f107 0218 	add.w	r2, r7, #24
 80092f0:	4413      	add	r3, r2
 80092f2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 80092f6:	f107 0314 	add.w	r3, r7, #20
 80092fa:	2203      	movs	r2, #3
 80092fc:	2100      	movs	r1, #0
 80092fe:	4618      	mov	r0, r3
 8009300:	f000 fd5a 	bl	8009db8 <Osal_MemSet>
  int index_input = 0;
 8009304:	2300      	movs	r3, #0
 8009306:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = htob(Service_Handle, 2);
 800930a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800930e:	f107 020e 	add.w	r2, r7, #14
 8009312:	8812      	ldrh	r2, [r2, #0]
 8009314:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009316:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800931a:	3302      	adds	r3, #2
 800931c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8009320:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009324:	f107 020d 	add.w	r2, r7, #13
 8009328:	7812      	ldrb	r2, [r2, #0]
 800932a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800932c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009330:	3301      	adds	r3, #1
 8009332:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 8009336:	f107 030d 	add.w	r3, r7, #13
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	2b01      	cmp	r3, #1
 800933e:	d002      	beq.n	8009346 <aci_gatt_add_char+0xa8>
 8009340:	2b02      	cmp	r3, #2
 8009342:	d004      	beq.n	800934e <aci_gatt_add_char+0xb0>
 8009344:	e007      	b.n	8009356 <aci_gatt_add_char+0xb8>
      case 1: size = 2; break;
 8009346:	2302      	movs	r3, #2
 8009348:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800934c:	e005      	b.n	800935a <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 800934e:	2310      	movs	r3, #16
 8009350:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8009354:	e001      	b.n	800935a <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 8009356:	2347      	movs	r3, #71	; 0x47
 8009358:	e086      	b.n	8009468 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 800935a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800935e:	1cd8      	adds	r0, r3, #3
 8009360:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8009364:	f107 0308 	add.w	r3, r7, #8
 8009368:	6819      	ldr	r1, [r3, #0]
 800936a:	f000 fd15 	bl	8009d98 <Osal_MemCpy>
    index_input += size;
 800936e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8009372:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8009376:	4413      	add	r3, r2
 8009378:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 800937c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009380:	1dba      	adds	r2, r7, #6
 8009382:	8812      	ldrh	r2, [r2, #0]
 8009384:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009386:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800938a:	3302      	adds	r3, #2
 800938c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 8009390:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009394:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8009398:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800939a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800939e:	3301      	adds	r3, #1
 80093a0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 80093a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80093a8:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80093ac:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80093ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80093b2:	3301      	adds	r3, #1
 80093b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 80093b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80093bc:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80093c0:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80093c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80093c6:	3301      	adds	r3, #1
 80093c8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 80093cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80093d0:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 80093d4:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80093d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80093da:	3301      	adds	r3, #1
 80093dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 80093e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80093e4:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 80093e8:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80093ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80093ee:	3301      	adds	r3, #1
 80093f0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 80093f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80093f8:	2218      	movs	r2, #24
 80093fa:	2100      	movs	r1, #0
 80093fc:	4618      	mov	r0, r3
 80093fe:	f000 fcdb 	bl	8009db8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009402:	233f      	movs	r3, #63	; 0x3f
 8009404:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8009408:	f44f 7382 	mov.w	r3, #260	; 0x104
 800940c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8009410:	f107 0318 	add.w	r3, r7, #24
 8009414:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009418:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800941c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8009420:	f107 0314 	add.w	r3, r7, #20
 8009424:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8009428:	2303      	movs	r3, #3
 800942a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800942e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009432:	2100      	movs	r1, #0
 8009434:	4618      	mov	r0, r3
 8009436:	f000 fb83 	bl	8009b40 <hci_send_req>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	da01      	bge.n	8009444 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8009440:	23ff      	movs	r3, #255	; 0xff
 8009442:	e011      	b.n	8009468 <aci_gatt_add_char+0x1ca>
  if (resp.Status) 
 8009444:	f107 0314 	add.w	r3, r7, #20
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d003      	beq.n	8009456 <aci_gatt_add_char+0x1b8>
  {
    return resp.Status;
 800944e:	f107 0314 	add.w	r3, r7, #20
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	e008      	b.n	8009468 <aci_gatt_add_char+0x1ca>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 8009456:	f107 0314 	add.w	r3, r7, #20
 800945a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800945e:	b29a      	uxth	r2, r3
 8009460:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8009464:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009466:	2300      	movs	r3, #0
}
 8009468:	4618      	mov	r0, r3
 800946a:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800946e:	46bd      	mov	sp, r7
 8009470:	bd90      	pop	{r4, r7, pc}

08009472 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 8009472:	b5b0      	push	{r4, r5, r7, lr}
 8009474:	b0cc      	sub	sp, #304	; 0x130
 8009476:	af00      	add	r7, sp, #0
 8009478:	4605      	mov	r5, r0
 800947a:	460c      	mov	r4, r1
 800947c:	4610      	mov	r0, r2
 800947e:	4619      	mov	r1, r3
 8009480:	1dbb      	adds	r3, r7, #6
 8009482:	462a      	mov	r2, r5
 8009484:	801a      	strh	r2, [r3, #0]
 8009486:	1d3b      	adds	r3, r7, #4
 8009488:	4622      	mov	r2, r4
 800948a:	801a      	strh	r2, [r3, #0]
 800948c:	1cfb      	adds	r3, r7, #3
 800948e:	4602      	mov	r2, r0
 8009490:	701a      	strb	r2, [r3, #0]
 8009492:	1cbb      	adds	r3, r7, #2
 8009494:	460a      	mov	r2, r1
 8009496:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8009498:	f107 0310 	add.w	r3, r7, #16
 800949c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80094a0:	f107 030f 	add.w	r3, r7, #15
 80094a4:	2200      	movs	r2, #0
 80094a6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80094a8:	2300      	movs	r3, #0
 80094aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = htob(Service_Handle, 2);
 80094ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094b2:	1dba      	adds	r2, r7, #6
 80094b4:	8812      	ldrh	r2, [r2, #0]
 80094b6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80094b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094bc:	3302      	adds	r3, #2
 80094be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = htob(Char_Handle, 2);
 80094c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094c6:	1d3a      	adds	r2, r7, #4
 80094c8:	8812      	ldrh	r2, [r2, #0]
 80094ca:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80094cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094d0:	3302      	adds	r3, #2
 80094d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = htob(Val_Offset, 1);
 80094d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094da:	1cfa      	adds	r2, r7, #3
 80094dc:	7812      	ldrb	r2, [r2, #0]
 80094de:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80094e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094e4:	3301      	adds	r3, #1
 80094e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 80094ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094ee:	1cba      	adds	r2, r7, #2
 80094f0:	7812      	ldrb	r2, [r2, #0]
 80094f2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80094f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094f8:	3301      	adds	r3, #1
 80094fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 80094fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009502:	1d98      	adds	r0, r3, #6
 8009504:	1cbb      	adds	r3, r7, #2
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	461a      	mov	r2, r3
 800950a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800950e:	f000 fc43 	bl	8009d98 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8009512:	1cbb      	adds	r3, r7, #2
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800951a:	4413      	add	r3, r2
 800951c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8009520:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009524:	2218      	movs	r2, #24
 8009526:	2100      	movs	r1, #0
 8009528:	4618      	mov	r0, r3
 800952a:	f000 fc45 	bl	8009db8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800952e:	233f      	movs	r3, #63	; 0x3f
 8009530:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8009534:	f44f 7383 	mov.w	r3, #262	; 0x106
 8009538:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800953c:	f107 0310 	add.w	r3, r7, #16
 8009540:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009544:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009548:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800954c:	f107 030f 	add.w	r3, r7, #15
 8009550:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009554:	2301      	movs	r3, #1
 8009556:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800955a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800955e:	2100      	movs	r1, #0
 8009560:	4618      	mov	r0, r3
 8009562:	f000 faed 	bl	8009b40 <hci_send_req>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	da01      	bge.n	8009570 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800956c:	23ff      	movs	r3, #255	; 0xff
 800956e:	e009      	b.n	8009584 <aci_gatt_update_char_value+0x112>
  if (status) 
 8009570:	f107 030f 	add.w	r3, r7, #15
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d003      	beq.n	8009582 <aci_gatt_update_char_value+0x110>
  {
    return status;
 800957a:	f107 030f 	add.w	r3, r7, #15
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	e000      	b.n	8009584 <aci_gatt_update_char_value+0x112>
  }
  return BLE_STATUS_SUCCESS;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800958a:	46bd      	mov	sp, r7
 800958c:	bdb0      	pop	{r4, r5, r7, pc}

0800958e <aci_gatt_exchange_config>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gatt_exchange_config(uint16_t Connection_Handle)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b0cc      	sub	sp, #304	; 0x130
 8009592:	af00      	add	r7, sp, #0
 8009594:	4602      	mov	r2, r0
 8009596:	1dbb      	adds	r3, r7, #6
 8009598:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_exchange_config_cp0 *cp0 = (aci_gatt_exchange_config_cp0*)(cmd_buffer);
 800959a:	f107 0310 	add.w	r3, r7, #16
 800959e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80095a2:	f107 030f 	add.w	r3, r7, #15
 80095a6:	2200      	movs	r2, #0
 80095a8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80095aa:	2300      	movs	r3, #0
 80095ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 80095b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095b4:	1dba      	adds	r2, r7, #6
 80095b6:	8812      	ldrh	r2, [r2, #0]
 80095b8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80095ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095be:	3302      	adds	r3, #2
 80095c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 80095c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80095c8:	2218      	movs	r2, #24
 80095ca:	2100      	movs	r1, #0
 80095cc:	4618      	mov	r0, r3
 80095ce:	f000 fbf3 	bl	8009db8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80095d2:	233f      	movs	r3, #63	; 0x3f
 80095d4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x10b;
 80095d8:	f240 130b 	movw	r3, #267	; 0x10b
 80095dc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80095e0:	230f      	movs	r3, #15
 80095e2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80095e6:	f107 0310 	add.w	r3, r7, #16
 80095ea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80095ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80095f6:	f107 030f 	add.w	r3, r7, #15
 80095fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80095fe:	2301      	movs	r3, #1
 8009600:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8009604:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009608:	2100      	movs	r1, #0
 800960a:	4618      	mov	r0, r3
 800960c:	f000 fa98 	bl	8009b40 <hci_send_req>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	da01      	bge.n	800961a <aci_gatt_exchange_config+0x8c>
    return BLE_STATUS_TIMEOUT;
 8009616:	23ff      	movs	r3, #255	; 0xff
 8009618:	e009      	b.n	800962e <aci_gatt_exchange_config+0xa0>
  if (status) 
 800961a:	f107 030f 	add.w	r3, r7, #15
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d003      	beq.n	800962c <aci_gatt_exchange_config+0x9e>
  {
    return status;
 8009624:	f107 030f 	add.w	r3, r7, #15
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	e000      	b.n	800962e <aci_gatt_exchange_config+0xa0>
  }
  return BLE_STATUS_SUCCESS;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b0cc      	sub	sp, #304	; 0x130
 800963c:	af00      	add	r7, sp, #0
 800963e:	463b      	mov	r3, r7
 8009640:	601a      	str	r2, [r3, #0]
 8009642:	1dfb      	adds	r3, r7, #7
 8009644:	4602      	mov	r2, r0
 8009646:	701a      	strb	r2, [r3, #0]
 8009648:	1dbb      	adds	r3, r7, #6
 800964a:	460a      	mov	r2, r1
 800964c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800964e:	f107 0310 	add.w	r3, r7, #16
 8009652:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009656:	f107 030f 	add.w	r3, r7, #15
 800965a:	2200      	movs	r2, #0
 800965c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800965e:	2300      	movs	r3, #0
 8009660:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = htob(Offset, 1);
 8009664:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009668:	1dfa      	adds	r2, r7, #7
 800966a:	7812      	ldrb	r2, [r2, #0]
 800966c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800966e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009672:	3301      	adds	r3, #1
 8009674:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = htob(Length, 1);
 8009678:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800967c:	1dba      	adds	r2, r7, #6
 800967e:	7812      	ldrb	r2, [r2, #0]
 8009680:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009682:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009686:	3301      	adds	r3, #1
 8009688:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 800968c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009690:	1c98      	adds	r0, r3, #2
 8009692:	1dbb      	adds	r3, r7, #6
 8009694:	781a      	ldrb	r2, [r3, #0]
 8009696:	463b      	mov	r3, r7
 8009698:	6819      	ldr	r1, [r3, #0]
 800969a:	f000 fb7d 	bl	8009d98 <Osal_MemCpy>
  index_input += Length;
 800969e:	1dbb      	adds	r3, r7, #6
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80096a6:	4413      	add	r3, r2
 80096a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 80096ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096b0:	2218      	movs	r2, #24
 80096b2:	2100      	movs	r1, #0
 80096b4:	4618      	mov	r0, r3
 80096b6:	f000 fb7f 	bl	8009db8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80096ba:	233f      	movs	r3, #63	; 0x3f
 80096bc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80096c0:	230c      	movs	r3, #12
 80096c2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80096c6:	f107 0310 	add.w	r3, r7, #16
 80096ca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80096ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80096d6:	f107 030f 	add.w	r3, r7, #15
 80096da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80096de:	2301      	movs	r3, #1
 80096e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80096e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096e8:	2100      	movs	r1, #0
 80096ea:	4618      	mov	r0, r3
 80096ec:	f000 fa28 	bl	8009b40 <hci_send_req>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	da01      	bge.n	80096fa <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 80096f6:	23ff      	movs	r3, #255	; 0xff
 80096f8:	e009      	b.n	800970e <aci_hal_write_config_data+0xd6>
  if (status) 
 80096fa:	f107 030f 	add.w	r3, r7, #15
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d003      	beq.n	800970c <aci_hal_write_config_data+0xd4>
  {
    return status;
 8009704:	f107 030f 	add.w	r3, r7, #15
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	e000      	b.n	800970e <aci_hal_write_config_data+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b0cc      	sub	sp, #304	; 0x130
 800971c:	af00      	add	r7, sp, #0
 800971e:	4602      	mov	r2, r0
 8009720:	1dfb      	adds	r3, r7, #7
 8009722:	701a      	strb	r2, [r3, #0]
 8009724:	1dbb      	adds	r3, r7, #6
 8009726:	460a      	mov	r2, r1
 8009728:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800972a:	f107 0310 	add.w	r3, r7, #16
 800972e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009732:	f107 030f 	add.w	r3, r7, #15
 8009736:	2200      	movs	r2, #0
 8009738:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800973a:	2300      	movs	r3, #0
 800973c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = htob(En_High_Power, 1);
 8009740:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009744:	1dfa      	adds	r2, r7, #7
 8009746:	7812      	ldrb	r2, [r2, #0]
 8009748:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800974a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800974e:	3301      	adds	r3, #1
 8009750:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = htob(PA_Level, 1);
 8009754:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009758:	1dba      	adds	r2, r7, #6
 800975a:	7812      	ldrb	r2, [r2, #0]
 800975c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800975e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009762:	3301      	adds	r3, #1
 8009764:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8009768:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800976c:	2218      	movs	r2, #24
 800976e:	2100      	movs	r1, #0
 8009770:	4618      	mov	r0, r3
 8009772:	f000 fb21 	bl	8009db8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009776:	233f      	movs	r3, #63	; 0x3f
 8009778:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800977c:	230f      	movs	r3, #15
 800977e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009782:	f107 0310 	add.w	r3, r7, #16
 8009786:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800978a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800978e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009792:	f107 030f 	add.w	r3, r7, #15
 8009796:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800979a:	2301      	movs	r3, #1
 800979c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80097a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80097a4:	2100      	movs	r1, #0
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 f9ca 	bl	8009b40 <hci_send_req>
 80097ac:	4603      	mov	r3, r0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	da01      	bge.n	80097b6 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 80097b2:	23ff      	movs	r3, #255	; 0xff
 80097b4:	e009      	b.n	80097ca <aci_hal_set_tx_power_level+0xb2>
  if (status) 
 80097b6:	f107 030f 	add.w	r3, r7, #15
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d003      	beq.n	80097c8 <aci_hal_set_tx_power_level+0xb0>
  {
    return status;
 80097c0:	f107 030f 	add.w	r3, r7, #15
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	e000      	b.n	80097ca <aci_hal_set_tx_power_level+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy((void *) Link_Connection_Handle, (const void *) resp.Link_Connection_Handle, 16);
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask(uint16_t Radio_Activity_Mask)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b0cc      	sub	sp, #304	; 0x130
 80097d8:	af00      	add	r7, sp, #0
 80097da:	4602      	mov	r2, r0
 80097dc:	1dbb      	adds	r3, r7, #6
 80097de:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80097e0:	f107 0310 	add.w	r3, r7, #16
 80097e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80097e8:	f107 030f 	add.w	r3, r7, #15
 80097ec:	2200      	movs	r2, #0
 80097ee:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80097f0:	2300      	movs	r3, #0
 80097f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = htob(Radio_Activity_Mask, 2);
 80097f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097fa:	1dba      	adds	r2, r7, #6
 80097fc:	8812      	ldrh	r2, [r2, #0]
 80097fe:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009800:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009804:	3302      	adds	r3, #2
 8009806:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800980a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800980e:	2218      	movs	r2, #24
 8009810:	2100      	movs	r1, #0
 8009812:	4618      	mov	r0, r3
 8009814:	f000 fad0 	bl	8009db8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009818:	233f      	movs	r3, #63	; 0x3f
 800981a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800981e:	2318      	movs	r3, #24
 8009820:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009824:	f107 0310 	add.w	r3, r7, #16
 8009828:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800982c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009830:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009834:	f107 030f 	add.w	r3, r7, #15
 8009838:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800983c:	2301      	movs	r3, #1
 800983e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8009842:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009846:	2100      	movs	r1, #0
 8009848:	4618      	mov	r0, r3
 800984a:	f000 f979 	bl	8009b40 <hci_send_req>
 800984e:	4603      	mov	r3, r0
 8009850:	2b00      	cmp	r3, #0
 8009852:	da01      	bge.n	8009858 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 8009854:	23ff      	movs	r3, #255	; 0xff
 8009856:	e009      	b.n	800986c <aci_hal_set_radio_activity_mask+0x98>
  if (status) 
 8009858:	f107 030f 	add.w	r3, r7, #15
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d003      	beq.n	800986a <aci_hal_set_radio_activity_mask+0x96>
  {
    return status;
 8009862:	f107 030f 	add.w	r3, r7, #15
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	e000      	b.n	800986c <aci_hal_set_radio_activity_mask+0x98>
  }
  return BLE_STATUS_SUCCESS;
 800986a:	2300      	movs	r3, #0
}
 800986c:	4618      	mov	r0, r3
 800986e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <hci_reset>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_reset(void)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b088      	sub	sp, #32
 800987a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800987c:	2300      	movs	r3, #0
 800987e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8009880:	f107 0308 	add.w	r3, r7, #8
 8009884:	2218      	movs	r2, #24
 8009886:	2100      	movs	r1, #0
 8009888:	4618      	mov	r0, r3
 800988a:	f000 fa95 	bl	8009db8 <Osal_MemSet>
  rq.ogf = 0x03;
 800988e:	2303      	movs	r3, #3
 8009890:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8009892:	2303      	movs	r3, #3
 8009894:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009896:	1dfb      	adds	r3, r7, #7
 8009898:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800989a:	2301      	movs	r3, #1
 800989c:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800989e:	f107 0308 	add.w	r3, r7, #8
 80098a2:	2100      	movs	r1, #0
 80098a4:	4618      	mov	r0, r3
 80098a6:	f000 f94b 	bl	8009b40 <hci_send_req>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	da01      	bge.n	80098b4 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80098b0:	23ff      	movs	r3, #255	; 0xff
 80098b2:	e005      	b.n	80098c0 <hci_reset+0x4a>
  if (status) 
 80098b4:	79fb      	ldrb	r3, [r7, #7]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d001      	beq.n	80098be <hci_reset+0x48>
  {
    return status;
 80098ba:	79fb      	ldrb	r3, [r7, #7]
 80098bc:	e000      	b.n	80098c0 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 80098be:	2300      	movs	r3, #0
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3720      	adds	r7, #32
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy(uint16_t Connection_Handle,
                           uint8_t *TX_PHY,
                           uint8_t *RX_PHY)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b0ce      	sub	sp, #312	; 0x138
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	f107 0308 	add.w	r3, r7, #8
 80098d2:	6019      	str	r1, [r3, #0]
 80098d4:	1d3b      	adds	r3, r7, #4
 80098d6:	601a      	str	r2, [r3, #0]
 80098d8:	f107 030e 	add.w	r3, r7, #14
 80098dc:	4602      	mov	r2, r0
 80098de:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 80098e0:	f107 0318 	add.w	r3, r7, #24
 80098e4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 80098e8:	f107 0310 	add.w	r3, r7, #16
 80098ec:	2205      	movs	r2, #5
 80098ee:	2100      	movs	r1, #0
 80098f0:	4618      	mov	r0, r3
 80098f2:	f000 fa61 	bl	8009db8 <Osal_MemSet>
  int index_input = 0;
 80098f6:	2300      	movs	r3, #0
 80098f8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 80098fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009900:	f107 020e 	add.w	r2, r7, #14
 8009904:	8812      	ldrh	r2, [r2, #0]
 8009906:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009908:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800990c:	3302      	adds	r3, #2
 800990e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet(&rq, 0, sizeof(rq));
 8009912:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009916:	2218      	movs	r2, #24
 8009918:	2100      	movs	r1, #0
 800991a:	4618      	mov	r0, r3
 800991c:	f000 fa4c 	bl	8009db8 <Osal_MemSet>
  rq.ogf = 0x08;
 8009920:	2308      	movs	r3, #8
 8009922:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 8009926:	2330      	movs	r3, #48	; 0x30
 8009928:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800992c:	f107 0318 	add.w	r3, r7, #24
 8009930:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009934:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009938:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800993c:	f107 0310 	add.w	r3, r7, #16
 8009940:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8009944:	2305      	movs	r3, #5
 8009946:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800994a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800994e:	2100      	movs	r1, #0
 8009950:	4618      	mov	r0, r3
 8009952:	f000 f8f5 	bl	8009b40 <hci_send_req>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	da01      	bge.n	8009960 <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 800995c:	23ff      	movs	r3, #255	; 0xff
 800995e:	e016      	b.n	800998e <hci_le_read_phy+0xc6>
  if (resp.Status) 
 8009960:	f107 0310 	add.w	r3, r7, #16
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d003      	beq.n	8009972 <hci_le_read_phy+0xaa>
  {
    return resp.Status;
 800996a:	f107 0310 	add.w	r3, r7, #16
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	e00d      	b.n	800998e <hci_le_read_phy+0xc6>
  }
  *TX_PHY = btoh(resp.TX_PHY, 1);
 8009972:	f107 0310 	add.w	r3, r7, #16
 8009976:	78da      	ldrb	r2, [r3, #3]
 8009978:	f107 0308 	add.w	r3, r7, #8
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	701a      	strb	r2, [r3, #0]
  *RX_PHY = btoh(resp.RX_PHY, 1);
 8009980:	f107 0310 	add.w	r3, r7, #16
 8009984:	791a      	ldrb	r2, [r3, #4]
 8009986:	1d3b      	adds	r3, r7, #4
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy(uint8_t ALL_PHYS,
                                  uint8_t TX_PHYS,
                                  uint8_t RX_PHYS)
{
 8009998:	b590      	push	{r4, r7, lr}
 800999a:	b0cd      	sub	sp, #308	; 0x134
 800999c:	af00      	add	r7, sp, #0
 800999e:	4604      	mov	r4, r0
 80099a0:	4608      	mov	r0, r1
 80099a2:	4611      	mov	r1, r2
 80099a4:	1dfb      	adds	r3, r7, #7
 80099a6:	4622      	mov	r2, r4
 80099a8:	701a      	strb	r2, [r3, #0]
 80099aa:	1dbb      	adds	r3, r7, #6
 80099ac:	4602      	mov	r2, r0
 80099ae:	701a      	strb	r2, [r3, #0]
 80099b0:	1d7b      	adds	r3, r7, #5
 80099b2:	460a      	mov	r2, r1
 80099b4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80099b6:	f107 0310 	add.w	r3, r7, #16
 80099ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80099be:	f107 030f 	add.w	r3, r7, #15
 80099c2:	2200      	movs	r2, #0
 80099c4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80099c6:	2300      	movs	r3, #0
 80099c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = htob(ALL_PHYS, 1);
 80099cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099d0:	1dfa      	adds	r2, r7, #7
 80099d2:	7812      	ldrb	r2, [r2, #0]
 80099d4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80099d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80099da:	3301      	adds	r3, #1
 80099dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = htob(TX_PHYS, 1);
 80099e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099e4:	1dba      	adds	r2, r7, #6
 80099e6:	7812      	ldrb	r2, [r2, #0]
 80099e8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80099ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80099ee:	3301      	adds	r3, #1
 80099f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = htob(RX_PHYS, 1);
 80099f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099f8:	1d7a      	adds	r2, r7, #5
 80099fa:	7812      	ldrb	r2, [r2, #0]
 80099fc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80099fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a02:	3301      	adds	r3, #1
 8009a04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8009a08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009a0c:	2218      	movs	r2, #24
 8009a0e:	2100      	movs	r1, #0
 8009a10:	4618      	mov	r0, r3
 8009a12:	f000 f9d1 	bl	8009db8 <Osal_MemSet>
  rq.ogf = 0x08;
 8009a16:	2308      	movs	r3, #8
 8009a18:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8009a1c:	2331      	movs	r3, #49	; 0x31
 8009a1e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009a22:	f107 0310 	add.w	r3, r7, #16
 8009a26:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009a2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009a32:	f107 030f 	add.w	r3, r7, #15
 8009a36:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8009a40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009a44:	2100      	movs	r1, #0
 8009a46:	4618      	mov	r0, r3
 8009a48:	f000 f87a 	bl	8009b40 <hci_send_req>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	da01      	bge.n	8009a56 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 8009a52:	23ff      	movs	r3, #255	; 0xff
 8009a54:	e009      	b.n	8009a6a <hci_le_set_default_phy+0xd2>
  if (status) 
 8009a56:	f107 030f 	add.w	r3, r7, #15
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d003      	beq.n	8009a68 <hci_le_set_default_phy+0xd0>
  {
    return status;
 8009a60:	f107 030f 	add.w	r3, r7, #15
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	e000      	b.n	8009a6a <hci_le_set_default_phy+0xd2>
  }
  return BLE_STATUS_SUCCESS;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd90      	pop	{r4, r7, pc}

08009a74 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	4a08      	ldr	r2, [pc, #32]	; (8009aa4 <hci_init+0x30>)
 8009a84:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8009a86:	4a08      	ldr	r2, [pc, #32]	; (8009aa8 <hci_init+0x34>)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8009a8c:	4806      	ldr	r0, [pc, #24]	; (8009aa8 <hci_init+0x34>)
 8009a8e:	f000 f96f 	bl	8009d70 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4618      	mov	r0, r3
 8009a98:	f000 f8d0 	bl	8009c3c <TlInit>

  return;
 8009a9c:	bf00      	nop
}
 8009a9e:	3708      	adds	r7, #8
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}
 8009aa4:	20000300 	.word	0x20000300
 8009aa8:	200002d8 	.word	0x200002d8

08009aac <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009ab2:	4820      	ldr	r0, [pc, #128]	; (8009b34 <hci_user_evt_proc+0x88>)
 8009ab4:	f000 fc34 	bl	800a320 <LST_is_empty>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d128      	bne.n	8009b10 <hci_user_evt_proc+0x64>
 8009abe:	4b1e      	ldr	r3, [pc, #120]	; (8009b38 <hci_user_evt_proc+0x8c>)
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d024      	beq.n	8009b10 <hci_user_evt_proc+0x64>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009ac6:	f107 030c 	add.w	r3, r7, #12
 8009aca:	4619      	mov	r1, r3
 8009acc:	4819      	ldr	r0, [pc, #100]	; (8009b34 <hci_user_evt_proc+0x88>)
 8009ace:	f000 fcae 	bl	800a42e <LST_remove_head>

    UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009ad2:	4b19      	ldr	r3, [pc, #100]	; (8009b38 <hci_user_evt_proc+0x8c>)
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	701a      	strb	r2, [r3, #0]

    if (hciContext.UserEvtRx != NULL)
 8009ad8:	4b18      	ldr	r3, [pc, #96]	; (8009b3c <hci_user_evt_proc+0x90>)
 8009ada:	69db      	ldr	r3, [r3, #28]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d009      	beq.n	8009af4 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	60bb      	str	r3, [r7, #8]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009ae4:	4b15      	ldr	r3, [pc, #84]	; (8009b3c <hci_user_evt_proc+0x90>)
 8009ae6:	69db      	ldr	r3, [r3, #28]
 8009ae8:	1d3a      	adds	r2, r7, #4
 8009aea:	4610      	mov	r0, r2
 8009aec:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8009aee:	793a      	ldrb	r2, [r7, #4]
 8009af0:	4b11      	ldr	r3, [pc, #68]	; (8009b38 <hci_user_evt_proc+0x8c>)
 8009af2:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8009af4:	4b10      	ldr	r3, [pc, #64]	; (8009b38 <hci_user_evt_proc+0x8c>)
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d004      	beq.n	8009b06 <hci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	4618      	mov	r0, r3
 8009b00:	f000 ff0c 	bl	800a91c <TL_MM_EvtDone>
 8009b04:	e004      	b.n	8009b10 <hci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	4619      	mov	r1, r3
 8009b0a:	480a      	ldr	r0, [pc, #40]	; (8009b34 <hci_user_evt_proc+0x88>)
 8009b0c:	f000 fc28 	bl	800a360 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009b10:	4808      	ldr	r0, [pc, #32]	; (8009b34 <hci_user_evt_proc+0x88>)
 8009b12:	f000 fc05 	bl	800a320 <LST_is_empty>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d107      	bne.n	8009b2c <hci_user_evt_proc+0x80>
 8009b1c:	4b06      	ldr	r3, [pc, #24]	; (8009b38 <hci_user_evt_proc+0x8c>)
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d003      	beq.n	8009b2c <hci_user_evt_proc+0x80>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8009b24:	4803      	ldr	r0, [pc, #12]	; (8009b34 <hci_user_evt_proc+0x88>)
 8009b26:	f001 fa8e 	bl	800b046 <hci_notify_asynch_evt>
  }


  return;
 8009b2a:	bf00      	nop
 8009b2c:	bf00      	nop
}
 8009b2e:	3710      	adds	r7, #16
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	200000cc 	.word	0x200000cc
 8009b38:	200000d8 	.word	0x200000d8
 8009b3c:	200002d8 	.word	0x200002d8

08009b40 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b088      	sub	sp, #32
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	460b      	mov	r3, r1
 8009b4a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8009b4c:	2000      	movs	r0, #0
 8009b4e:	f000 f8cb 	bl	8009ce8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8009b52:	2300      	movs	r3, #0
 8009b54:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	885b      	ldrh	r3, [r3, #2]
 8009b5a:	b21b      	sxth	r3, r3
 8009b5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b60:	b21a      	sxth	r2, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	881b      	ldrh	r3, [r3, #0]
 8009b66:	029b      	lsls	r3, r3, #10
 8009b68:	b21b      	sxth	r3, r3
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	b21b      	sxth	r3, r3
 8009b6e:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	b2d9      	uxtb	r1, r3
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	689a      	ldr	r2, [r3, #8]
 8009b7a:	8bbb      	ldrh	r3, [r7, #28]
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f000 f88d 	bl	8009c9c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8009b82:	e04e      	b.n	8009c22 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8009b84:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009b88:	f001 fa74 	bl	800b074 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009b8c:	e043      	b.n	8009c16 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8009b8e:	f107 030c 	add.w	r3, r7, #12
 8009b92:	4619      	mov	r1, r3
 8009b94:	4828      	ldr	r0, [pc, #160]	; (8009c38 <hci_send_req+0xf8>)
 8009b96:	f000 fc4a 	bl	800a42e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	7a5b      	ldrb	r3, [r3, #9]
 8009b9e:	2b0f      	cmp	r3, #15
 8009ba0:	d114      	bne.n	8009bcc <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	330b      	adds	r3, #11
 8009ba6:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	885b      	ldrh	r3, [r3, #2]
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	8bba      	ldrh	r2, [r7, #28]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d104      	bne.n	8009bbe <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	691b      	ldr	r3, [r3, #16]
 8009bb8:	693a      	ldr	r2, [r7, #16]
 8009bba:	7812      	ldrb	r2, [r2, #0]
 8009bbc:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	785b      	ldrb	r3, [r3, #1]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d027      	beq.n	8009c16 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	77fb      	strb	r3, [r7, #31]
 8009bca:	e024      	b.n	8009c16 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	330b      	adds	r3, #11
 8009bd0:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	8bba      	ldrh	r2, [r7, #28]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d114      	bne.n	8009c0a <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	7a9b      	ldrb	r3, [r3, #10]
 8009be4:	3b03      	subs	r3, #3
 8009be6:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	695a      	ldr	r2, [r3, #20]
 8009bec:	7dfb      	ldrb	r3, [r7, #23]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	bfa8      	it	ge
 8009bf2:	461a      	movge	r2, r3
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6918      	ldr	r0, [r3, #16]
 8009bfc:	69bb      	ldr	r3, [r7, #24]
 8009bfe:	1cd9      	adds	r1, r3, #3
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	695b      	ldr	r3, [r3, #20]
 8009c04:	461a      	mov	r2, r3
 8009c06:	f001 fd2d 	bl	800b664 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d001      	beq.n	8009c16 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009c12:	2301      	movs	r3, #1
 8009c14:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009c16:	4808      	ldr	r0, [pc, #32]	; (8009c38 <hci_send_req+0xf8>)
 8009c18:	f000 fb82 	bl	800a320 <LST_is_empty>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d0b5      	beq.n	8009b8e <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8009c22:	7ffb      	ldrb	r3, [r7, #31]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d0ad      	beq.n	8009b84 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8009c28:	2001      	movs	r0, #1
 8009c2a:	f000 f85d 	bl	8009ce8 <NotifyCmdStatus>

  return 0;
 8009c2e:	2300      	movs	r3, #0
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3720      	adds	r7, #32
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	200002f8 	.word	0x200002f8

08009c3c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8009c44:	480f      	ldr	r0, [pc, #60]	; (8009c84 <TlInit+0x48>)
 8009c46:	f000 fb5b 	bl	800a300 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8009c4a:	4a0f      	ldr	r2, [pc, #60]	; (8009c88 <TlInit+0x4c>)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8009c50:	480e      	ldr	r0, [pc, #56]	; (8009c8c <TlInit+0x50>)
 8009c52:	f000 fb55 	bl	800a300 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009c56:	4b0e      	ldr	r3, [pc, #56]	; (8009c90 <TlInit+0x54>)
 8009c58:	2201      	movs	r2, #1
 8009c5a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8009c5c:	4b0d      	ldr	r3, [pc, #52]	; (8009c94 <TlInit+0x58>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d00a      	beq.n	8009c7a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8009c68:	4b0b      	ldr	r3, [pc, #44]	; (8009c98 <TlInit+0x5c>)
 8009c6a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8009c6c:	4b09      	ldr	r3, [pc, #36]	; (8009c94 <TlInit+0x58>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f107 0208 	add.w	r2, r7, #8
 8009c74:	4610      	mov	r0, r2
 8009c76:	4798      	blx	r3
  }

  return;
 8009c78:	bf00      	nop
 8009c7a:	bf00      	nop
}
 8009c7c:	3718      	adds	r7, #24
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	200002f8 	.word	0x200002f8
 8009c88:	200000d4 	.word	0x200000d4
 8009c8c:	200000cc 	.word	0x200000cc
 8009c90:	200000d8 	.word	0x200000d8
 8009c94:	200002d8 	.word	0x200002d8
 8009c98:	08009d29 	.word	0x08009d29

08009c9c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	603a      	str	r2, [r7, #0]
 8009ca6:	80fb      	strh	r3, [r7, #6]
 8009ca8:	460b      	mov	r3, r1
 8009caa:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8009cac:	4b0c      	ldr	r3, [pc, #48]	; (8009ce0 <SendCmd+0x44>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	88fa      	ldrh	r2, [r7, #6]
 8009cb2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8009cb6:	4b0a      	ldr	r3, [pc, #40]	; (8009ce0 <SendCmd+0x44>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	797a      	ldrb	r2, [r7, #5]
 8009cbc:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8009cbe:	4b08      	ldr	r3, [pc, #32]	; (8009ce0 <SendCmd+0x44>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	330c      	adds	r3, #12
 8009cc4:	797a      	ldrb	r2, [r7, #5]
 8009cc6:	6839      	ldr	r1, [r7, #0]
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f001 fccb 	bl	800b664 <memcpy>

  hciContext.io.Send(0,0);
 8009cce:	4b05      	ldr	r3, [pc, #20]	; (8009ce4 <SendCmd+0x48>)
 8009cd0:	691b      	ldr	r3, [r3, #16]
 8009cd2:	2100      	movs	r1, #0
 8009cd4:	2000      	movs	r0, #0
 8009cd6:	4798      	blx	r3

  return;
 8009cd8:	bf00      	nop
}
 8009cda:	3708      	adds	r7, #8
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}
 8009ce0:	200000d4 	.word	0x200000d4
 8009ce4:	200002d8 	.word	0x200002d8

08009ce8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	4603      	mov	r3, r0
 8009cf0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8009cf2:	79fb      	ldrb	r3, [r7, #7]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d108      	bne.n	8009d0a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8009cf8:	4b0a      	ldr	r3, [pc, #40]	; (8009d24 <NotifyCmdStatus+0x3c>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d00d      	beq.n	8009d1c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8009d00:	4b08      	ldr	r3, [pc, #32]	; (8009d24 <NotifyCmdStatus+0x3c>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2000      	movs	r0, #0
 8009d06:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8009d08:	e008      	b.n	8009d1c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8009d0a:	4b06      	ldr	r3, [pc, #24]	; (8009d24 <NotifyCmdStatus+0x3c>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d004      	beq.n	8009d1c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8009d12:	4b04      	ldr	r3, [pc, #16]	; (8009d24 <NotifyCmdStatus+0x3c>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2001      	movs	r0, #1
 8009d18:	4798      	blx	r3
  return;
 8009d1a:	bf00      	nop
 8009d1c:	bf00      	nop
}
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	20000300 	.word	0x20000300

08009d28 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	7a5b      	ldrb	r3, [r3, #9]
 8009d34:	2b0f      	cmp	r3, #15
 8009d36:	d003      	beq.n	8009d40 <TlEvtReceived+0x18>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	7a5b      	ldrb	r3, [r3, #9]
 8009d3c:	2b0e      	cmp	r3, #14
 8009d3e:	d107      	bne.n	8009d50 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8009d40:	6879      	ldr	r1, [r7, #4]
 8009d42:	4809      	ldr	r0, [pc, #36]	; (8009d68 <TlEvtReceived+0x40>)
 8009d44:	f000 fb30 	bl	800a3a8 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8009d48:	2000      	movs	r0, #0
 8009d4a:	f001 f988 	bl	800b05e <hci_cmd_resp_release>
 8009d4e:	e006      	b.n	8009d5e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8009d50:	6879      	ldr	r1, [r7, #4]
 8009d52:	4806      	ldr	r0, [pc, #24]	; (8009d6c <TlEvtReceived+0x44>)
 8009d54:	f000 fb28 	bl	800a3a8 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009d58:	4804      	ldr	r0, [pc, #16]	; (8009d6c <TlEvtReceived+0x44>)
 8009d5a:	f001 f974 	bl	800b046 <hci_notify_asynch_evt>
  }

  return;
 8009d5e:	bf00      	nop
}
 8009d60:	3708      	adds	r7, #8
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	200002f8 	.word	0x200002f8
 8009d6c:	200000cc 	.word	0x200000cc

08009d70 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	4a05      	ldr	r2, [pc, #20]	; (8009d90 <hci_register_io_bus+0x20>)
 8009d7c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4a04      	ldr	r2, [pc, #16]	; (8009d94 <hci_register_io_bus+0x24>)
 8009d82:	611a      	str	r2, [r3, #16]

  return;
 8009d84:	bf00      	nop
}
 8009d86:	370c      	adds	r7, #12
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr
 8009d90:	0800a6f5 	.word	0x0800a6f5
 8009d94:	0800a75d 	.word	0x0800a75d

08009d98 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	68b9      	ldr	r1, [r7, #8]
 8009da8:	68f8      	ldr	r0, [r7, #12]
 8009daa:	f001 fc5b 	bl	800b664 <memcpy>
 8009dae:	4603      	mov	r3, r0
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3710      	adds	r7, #16
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	68b9      	ldr	r1, [r7, #8]
 8009dc8:	68f8      	ldr	r0, [r7, #12]
 8009dca:	f001 fc56 	bl	800b67a <memset>
 8009dce:	4603      	mov	r3, r0
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3710      	adds	r7, #16
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b085      	sub	sp, #20
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	4603      	mov	r3, r0
 8009de0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8009de2:	4b0f      	ldr	r3, [pc, #60]	; (8009e20 <OTP_Read+0x48>)
 8009de4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009de6:	e002      	b.n	8009dee <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	3b08      	subs	r3, #8
 8009dec:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	3307      	adds	r3, #7
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	79fa      	ldrb	r2, [r7, #7]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d003      	beq.n	8009e02 <OTP_Read+0x2a>
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	4a09      	ldr	r2, [pc, #36]	; (8009e24 <OTP_Read+0x4c>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d1f2      	bne.n	8009de8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	3307      	adds	r3, #7
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	79fa      	ldrb	r2, [r7, #7]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d001      	beq.n	8009e12 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8009e12:	68fb      	ldr	r3, [r7, #12]
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3714      	adds	r7, #20
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr
 8009e20:	1fff73f8 	.word	0x1fff73f8
 8009e24:	1fff7000 	.word	0x1fff7000

08009e28 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b08a      	sub	sp, #40	; 0x28
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8009e30:	2300      	movs	r3, #0
 8009e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	3301      	adds	r3, #1
 8009e3a:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8009e3c:	6a3b      	ldr	r3, [r7, #32]
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	2bff      	cmp	r3, #255	; 0xff
 8009e42:	d000      	beq.n	8009e46 <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8009e44:	e04a      	b.n	8009edc <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 8009e46:	6a3b      	ldr	r3, [r7, #32]
 8009e48:	3302      	adds	r3, #2
 8009e4a:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	881b      	ldrh	r3, [r3, #0]
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	461a      	mov	r2, r3
 8009e54:	f640 4301 	movw	r3, #3073	; 0xc01
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d000      	beq.n	8009e5e <PeerToPeer_Event_Handler+0x36>
          break;
 8009e5c:	e03d      	b.n	8009eda <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	3302      	adds	r3, #2
 8009e62:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8009e64:	69bb      	ldr	r3, [r7, #24]
 8009e66:	885b      	ldrh	r3, [r3, #2]
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	4b1e      	ldr	r3, [pc, #120]	; (8009ee8 <PeerToPeer_Event_Handler+0xc0>)
 8009e6e:	889b      	ldrh	r3, [r3, #4]
 8009e70:	3302      	adds	r3, #2
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d118      	bne.n	8009ea8 <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 8009e76:	2301      	movs	r3, #1
 8009e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	7a1b      	ldrb	r3, [r3, #8]
 8009e80:	f003 0301 	and.w	r3, r3, #1
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d007      	beq.n	8009e98 <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8009e8c:	f107 0308 	add.w	r3, r7, #8
 8009e90:	4618      	mov	r0, r3
 8009e92:	f001 f931 	bl	800b0f8 <P2PS_STM_App_Notification>
        break;
 8009e96:	e01f      	b.n	8009ed8 <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8009e9c:	f107 0308 	add.w	r3, r7, #8
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f001 f929 	bl	800b0f8 <P2PS_STM_App_Notification>
        break;
 8009ea6:	e017      	b.n	8009ed8 <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8009ea8:	69bb      	ldr	r3, [r7, #24]
 8009eaa:	885b      	ldrh	r3, [r3, #2]
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	461a      	mov	r2, r3
 8009eb0:	4b0d      	ldr	r3, [pc, #52]	; (8009ee8 <PeerToPeer_Event_Handler+0xc0>)
 8009eb2:	885b      	ldrh	r3, [r3, #2]
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d10e      	bne.n	8009ed8 <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8009eba:	2303      	movs	r3, #3
 8009ebc:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	88db      	ldrh	r3, [r3, #6]
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8009ec8:	69bb      	ldr	r3, [r7, #24]
 8009eca:	3308      	adds	r3, #8
 8009ecc:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8009ece:	f107 0308 	add.w	r3, r7, #8
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f001 f910 	bl	800b0f8 <P2PS_STM_App_Notification>
        break;
 8009ed8:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 8009eda:	bf00      	nop
  }

  return(return_value);
 8009edc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3728      	adds	r7, #40	; 0x28
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	200000dc 	.word	0x200000dc

08009eec <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b08a      	sub	sp, #40	; 0x28
 8009ef0:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8009ef2:	484a      	ldr	r0, [pc, #296]	; (800a01c <P2PS_STM_Init+0x130>)
 8009ef4:	f000 fb56 	bl	800a5a4 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8009ef8:	238f      	movs	r3, #143	; 0x8f
 8009efa:	703b      	strb	r3, [r7, #0]
 8009efc:	23e5      	movs	r3, #229	; 0xe5
 8009efe:	707b      	strb	r3, [r7, #1]
 8009f00:	23b3      	movs	r3, #179	; 0xb3
 8009f02:	70bb      	strb	r3, [r7, #2]
 8009f04:	23d5      	movs	r3, #213	; 0xd5
 8009f06:	70fb      	strb	r3, [r7, #3]
 8009f08:	232e      	movs	r3, #46	; 0x2e
 8009f0a:	713b      	strb	r3, [r7, #4]
 8009f0c:	237f      	movs	r3, #127	; 0x7f
 8009f0e:	717b      	strb	r3, [r7, #5]
 8009f10:	234a      	movs	r3, #74	; 0x4a
 8009f12:	71bb      	strb	r3, [r7, #6]
 8009f14:	2398      	movs	r3, #152	; 0x98
 8009f16:	71fb      	strb	r3, [r7, #7]
 8009f18:	232a      	movs	r3, #42	; 0x2a
 8009f1a:	723b      	strb	r3, [r7, #8]
 8009f1c:	2348      	movs	r3, #72	; 0x48
 8009f1e:	727b      	strb	r3, [r7, #9]
 8009f20:	237a      	movs	r3, #122	; 0x7a
 8009f22:	72bb      	strb	r3, [r7, #10]
 8009f24:	23cc      	movs	r3, #204	; 0xcc
 8009f26:	72fb      	strb	r3, [r7, #11]
 8009f28:	2340      	movs	r3, #64	; 0x40
 8009f2a:	733b      	strb	r3, [r7, #12]
 8009f2c:	23fe      	movs	r3, #254	; 0xfe
 8009f2e:	737b      	strb	r3, [r7, #13]
 8009f30:	2300      	movs	r3, #0
 8009f32:	73bb      	strb	r3, [r7, #14]
 8009f34:	2300      	movs	r3, #0
 8009f36:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8009f38:	4639      	mov	r1, r7
 8009f3a:	4b39      	ldr	r3, [pc, #228]	; (800a020 <P2PS_STM_Init+0x134>)
 8009f3c:	9300      	str	r3, [sp, #0]
 8009f3e:	2308      	movs	r3, #8
 8009f40:	2201      	movs	r2, #1
 8009f42:	2002      	movs	r0, #2
 8009f44:	f7ff f8fc 	bl	8009140 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8009f48:	2319      	movs	r3, #25
 8009f4a:	703b      	strb	r3, [r7, #0]
 8009f4c:	23ed      	movs	r3, #237	; 0xed
 8009f4e:	707b      	strb	r3, [r7, #1]
 8009f50:	2382      	movs	r3, #130	; 0x82
 8009f52:	70bb      	strb	r3, [r7, #2]
 8009f54:	23ae      	movs	r3, #174	; 0xae
 8009f56:	70fb      	strb	r3, [r7, #3]
 8009f58:	23ed      	movs	r3, #237	; 0xed
 8009f5a:	713b      	strb	r3, [r7, #4]
 8009f5c:	2321      	movs	r3, #33	; 0x21
 8009f5e:	717b      	strb	r3, [r7, #5]
 8009f60:	234c      	movs	r3, #76	; 0x4c
 8009f62:	71bb      	strb	r3, [r7, #6]
 8009f64:	239d      	movs	r3, #157	; 0x9d
 8009f66:	71fb      	strb	r3, [r7, #7]
 8009f68:	2341      	movs	r3, #65	; 0x41
 8009f6a:	723b      	strb	r3, [r7, #8]
 8009f6c:	2345      	movs	r3, #69	; 0x45
 8009f6e:	727b      	strb	r3, [r7, #9]
 8009f70:	2322      	movs	r3, #34	; 0x22
 8009f72:	72bb      	strb	r3, [r7, #10]
 8009f74:	238e      	movs	r3, #142	; 0x8e
 8009f76:	72fb      	strb	r3, [r7, #11]
 8009f78:	2341      	movs	r3, #65	; 0x41
 8009f7a:	733b      	strb	r3, [r7, #12]
 8009f7c:	23fe      	movs	r3, #254	; 0xfe
 8009f7e:	737b      	strb	r3, [r7, #13]
 8009f80:	2300      	movs	r3, #0
 8009f82:	73bb      	strb	r3, [r7, #14]
 8009f84:	2300      	movs	r3, #0
 8009f86:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8009f88:	4b25      	ldr	r3, [pc, #148]	; (800a020 <P2PS_STM_Init+0x134>)
 8009f8a:	8818      	ldrh	r0, [r3, #0]
 8009f8c:	463a      	mov	r2, r7
 8009f8e:	4b25      	ldr	r3, [pc, #148]	; (800a024 <P2PS_STM_Init+0x138>)
 8009f90:	9305      	str	r3, [sp, #20]
 8009f92:	2301      	movs	r3, #1
 8009f94:	9304      	str	r3, [sp, #16]
 8009f96:	230a      	movs	r3, #10
 8009f98:	9303      	str	r3, [sp, #12]
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	9302      	str	r3, [sp, #8]
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	9301      	str	r3, [sp, #4]
 8009fa2:	2306      	movs	r3, #6
 8009fa4:	9300      	str	r3, [sp, #0]
 8009fa6:	2330      	movs	r3, #48	; 0x30
 8009fa8:	2102      	movs	r1, #2
 8009faa:	f7ff f978 	bl	800929e <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8009fae:	2319      	movs	r3, #25
 8009fb0:	703b      	strb	r3, [r7, #0]
 8009fb2:	23ed      	movs	r3, #237	; 0xed
 8009fb4:	707b      	strb	r3, [r7, #1]
 8009fb6:	2382      	movs	r3, #130	; 0x82
 8009fb8:	70bb      	strb	r3, [r7, #2]
 8009fba:	23ae      	movs	r3, #174	; 0xae
 8009fbc:	70fb      	strb	r3, [r7, #3]
 8009fbe:	23ed      	movs	r3, #237	; 0xed
 8009fc0:	713b      	strb	r3, [r7, #4]
 8009fc2:	2321      	movs	r3, #33	; 0x21
 8009fc4:	717b      	strb	r3, [r7, #5]
 8009fc6:	234c      	movs	r3, #76	; 0x4c
 8009fc8:	71bb      	strb	r3, [r7, #6]
 8009fca:	239d      	movs	r3, #157	; 0x9d
 8009fcc:	71fb      	strb	r3, [r7, #7]
 8009fce:	2341      	movs	r3, #65	; 0x41
 8009fd0:	723b      	strb	r3, [r7, #8]
 8009fd2:	2345      	movs	r3, #69	; 0x45
 8009fd4:	727b      	strb	r3, [r7, #9]
 8009fd6:	2322      	movs	r3, #34	; 0x22
 8009fd8:	72bb      	strb	r3, [r7, #10]
 8009fda:	238e      	movs	r3, #142	; 0x8e
 8009fdc:	72fb      	strb	r3, [r7, #11]
 8009fde:	2342      	movs	r3, #66	; 0x42
 8009fe0:	733b      	strb	r3, [r7, #12]
 8009fe2:	23fe      	movs	r3, #254	; 0xfe
 8009fe4:	737b      	strb	r3, [r7, #13]
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	73bb      	strb	r3, [r7, #14]
 8009fea:	2300      	movs	r3, #0
 8009fec:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8009fee:	4b0c      	ldr	r3, [pc, #48]	; (800a020 <P2PS_STM_Init+0x134>)
 8009ff0:	8818      	ldrh	r0, [r3, #0]
 8009ff2:	463a      	mov	r2, r7
 8009ff4:	4b0c      	ldr	r3, [pc, #48]	; (800a028 <P2PS_STM_Init+0x13c>)
 8009ff6:	9305      	str	r3, [sp, #20]
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	9304      	str	r3, [sp, #16]
 8009ffc:	230a      	movs	r3, #10
 8009ffe:	9303      	str	r3, [sp, #12]
 800a000:	2301      	movs	r3, #1
 800a002:	9302      	str	r3, [sp, #8]
 800a004:	2300      	movs	r3, #0
 800a006:	9301      	str	r3, [sp, #4]
 800a008:	2310      	movs	r3, #16
 800a00a:	9300      	str	r3, [sp, #0]
 800a00c:	2330      	movs	r3, #48	; 0x30
 800a00e:	2102      	movs	r1, #2
 800a010:	f7ff f945 	bl	800929e <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 800a014:	bf00      	nop
}
 800a016:	3710      	adds	r7, #16
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	08009e29 	.word	0x08009e29
 800a020:	200000dc 	.word	0x200000dc
 800a024:	200000de 	.word	0x200000de
 800a028:	200000e0 	.word	0x200000e0

0800a02c <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b086      	sub	sp, #24
 800a030:	af02      	add	r7, sp, #8
 800a032:	4603      	mov	r3, r0
 800a034:	6039      	str	r1, [r7, #0]
 800a036:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800a038:	2342      	movs	r3, #66	; 0x42
 800a03a:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800a03c:	88fb      	ldrh	r3, [r7, #6]
 800a03e:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800a042:	4293      	cmp	r3, r2
 800a044:	d000      	beq.n	800a048 <P2PS_STM_App_Update_Char+0x1c>
                             (uint8_t *)  pPayload);
    
      break;

    default:
      break;
 800a046:	e00c      	b.n	800a062 <P2PS_STM_App_Update_Char+0x36>
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800a048:	4b08      	ldr	r3, [pc, #32]	; (800a06c <P2PS_STM_App_Update_Char+0x40>)
 800a04a:	8818      	ldrh	r0, [r3, #0]
 800a04c:	4b07      	ldr	r3, [pc, #28]	; (800a06c <P2PS_STM_App_Update_Char+0x40>)
 800a04e:	8899      	ldrh	r1, [r3, #4]
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	9300      	str	r3, [sp, #0]
 800a054:	2330      	movs	r3, #48	; 0x30
 800a056:	2200      	movs	r2, #0
 800a058:	f7ff fa0b 	bl	8009472 <aci_gatt_update_char_value>
 800a05c:	4603      	mov	r3, r0
 800a05e:	73fb      	strb	r3, [r7, #15]
      break;
 800a060:	bf00      	nop
  }

  return result;
 800a062:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 800a064:	4618      	mov	r0, r3
 800a066:	3710      	adds	r7, #16
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	200000dc 	.word	0x200000dc

0800a070 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b088      	sub	sp, #32
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a078:	f107 030c 	add.w	r3, r7, #12
 800a07c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	2121      	movs	r1, #33	; 0x21
 800a088:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800a08c:	f000 f86e 	bl	800a16c <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a090:	69fb      	ldr	r3, [r7, #28]
 800a092:	330b      	adds	r3, #11
 800a094:	78db      	ldrb	r3, [r3, #3]
}
 800a096:	4618      	mov	r0, r3
 800a098:	3720      	adds	r7, #32
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
	...

0800a0a0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	4a08      	ldr	r2, [pc, #32]	; (800a0d0 <shci_init+0x30>)
 800a0b0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800a0b2:	4a08      	ldr	r2, [pc, #32]	; (800a0d4 <shci_init+0x34>)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800a0b8:	4806      	ldr	r0, [pc, #24]	; (800a0d4 <shci_init+0x34>)
 800a0ba:	f000 f90d 	bl	800a2d8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f000 f890 	bl	800a1e8 <TlInit>

  return;
 800a0c8:	bf00      	nop
}
 800a0ca:	3708      	adds	r7, #8
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}
 800a0d0:	20000324 	.word	0x20000324
 800a0d4:	20000304 	.word	0x20000304

0800a0d8 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a0de:	4820      	ldr	r0, [pc, #128]	; (800a160 <shci_user_evt_proc+0x88>)
 800a0e0:	f000 f91e 	bl	800a320 <LST_is_empty>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d128      	bne.n	800a13c <shci_user_evt_proc+0x64>
 800a0ea:	4b1e      	ldr	r3, [pc, #120]	; (800a164 <shci_user_evt_proc+0x8c>)
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d024      	beq.n	800a13c <shci_user_evt_proc+0x64>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a0f2:	f107 030c 	add.w	r3, r7, #12
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	4819      	ldr	r0, [pc, #100]	; (800a160 <shci_user_evt_proc+0x88>)
 800a0fa:	f000 f998 	bl	800a42e <LST_remove_head>

    SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a0fe:	4b19      	ldr	r3, [pc, #100]	; (800a164 <shci_user_evt_proc+0x8c>)
 800a100:	2201      	movs	r2, #1
 800a102:	701a      	strb	r2, [r3, #0]

    if (shciContext.UserEvtRx != NULL)
 800a104:	4b18      	ldr	r3, [pc, #96]	; (800a168 <shci_user_evt_proc+0x90>)
 800a106:	69db      	ldr	r3, [r3, #28]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d009      	beq.n	800a120 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	60bb      	str	r3, [r7, #8]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a110:	4b15      	ldr	r3, [pc, #84]	; (800a168 <shci_user_evt_proc+0x90>)
 800a112:	69db      	ldr	r3, [r3, #28]
 800a114:	1d3a      	adds	r2, r7, #4
 800a116:	4610      	mov	r0, r2
 800a118:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800a11a:	793a      	ldrb	r2, [r7, #4]
 800a11c:	4b11      	ldr	r3, [pc, #68]	; (800a164 <shci_user_evt_proc+0x8c>)
 800a11e:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800a120:	4b10      	ldr	r3, [pc, #64]	; (800a164 <shci_user_evt_proc+0x8c>)
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d004      	beq.n	800a132 <shci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	4618      	mov	r0, r3
 800a12c:	f000 fbf6 	bl	800a91c <TL_MM_EvtDone>
 800a130:	e004      	b.n	800a13c <shci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	4619      	mov	r1, r3
 800a136:	480a      	ldr	r0, [pc, #40]	; (800a160 <shci_user_evt_proc+0x88>)
 800a138:	f000 f912 	bl	800a360 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a13c:	4808      	ldr	r0, [pc, #32]	; (800a160 <shci_user_evt_proc+0x88>)
 800a13e:	f000 f8ef 	bl	800a320 <LST_is_empty>
 800a142:	4603      	mov	r3, r0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d107      	bne.n	800a158 <shci_user_evt_proc+0x80>
 800a148:	4b06      	ldr	r3, [pc, #24]	; (800a164 <shci_user_evt_proc+0x8c>)
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d003      	beq.n	800a158 <shci_user_evt_proc+0x80>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800a150:	4803      	ldr	r0, [pc, #12]	; (800a160 <shci_user_evt_proc+0x88>)
 800a152:	f7f6 fd07 	bl	8000b64 <shci_notify_asynch_evt>
  }


  return;
 800a156:	bf00      	nop
 800a158:	bf00      	nop
}
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	20000108 	.word	0x20000108
 800a164:	20000118 	.word	0x20000118
 800a168:	20000304 	.word	0x20000304

0800a16c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	60ba      	str	r2, [r7, #8]
 800a174:	607b      	str	r3, [r7, #4]
 800a176:	4603      	mov	r3, r0
 800a178:	81fb      	strh	r3, [r7, #14]
 800a17a:	460b      	mov	r3, r1
 800a17c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800a17e:	2000      	movs	r0, #0
 800a180:	f000 f864 	bl	800a24c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800a184:	4b16      	ldr	r3, [pc, #88]	; (800a1e0 <shci_send+0x74>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	89fa      	ldrh	r2, [r7, #14]
 800a18a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800a18e:	4b14      	ldr	r3, [pc, #80]	; (800a1e0 <shci_send+0x74>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	7b7a      	ldrb	r2, [r7, #13]
 800a194:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800a196:	4b12      	ldr	r3, [pc, #72]	; (800a1e0 <shci_send+0x74>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	330c      	adds	r3, #12
 800a19c:	7b7a      	ldrb	r2, [r7, #13]
 800a19e:	68b9      	ldr	r1, [r7, #8]
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f001 fa5f 	bl	800b664 <memcpy>

  shciContext.io.Send(0,0);
 800a1a6:	4b0f      	ldr	r3, [pc, #60]	; (800a1e4 <shci_send+0x78>)
 800a1a8:	691b      	ldr	r3, [r3, #16]
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	2000      	movs	r0, #0
 800a1ae:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800a1b0:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a1b4:	f7f6 fced 	bl	8000b92 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f103 0008 	add.w	r0, r3, #8
 800a1be:	4b08      	ldr	r3, [pc, #32]	; (800a1e0 <shci_send+0x74>)
 800a1c0:	6819      	ldr	r1, [r3, #0]
 800a1c2:	4b07      	ldr	r3, [pc, #28]	; (800a1e0 <shci_send+0x74>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	789b      	ldrb	r3, [r3, #2]
 800a1c8:	3303      	adds	r3, #3
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	f001 fa4a 	bl	800b664 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a1d0:	2001      	movs	r0, #1
 800a1d2:	f000 f83b 	bl	800a24c <Cmd_SetStatus>

  return;
 800a1d6:	bf00      	nop
}
 800a1d8:	3710      	adds	r7, #16
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	20000114 	.word	0x20000114
 800a1e4:	20000304 	.word	0x20000304

0800a1e8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b086      	sub	sp, #24
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800a1f0:	4a10      	ldr	r2, [pc, #64]	; (800a234 <TlInit+0x4c>)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800a1f6:	4810      	ldr	r0, [pc, #64]	; (800a238 <TlInit+0x50>)
 800a1f8:	f000 f882 	bl	800a300 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a1fc:	2001      	movs	r0, #1
 800a1fe:	f000 f825 	bl	800a24c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a202:	4b0e      	ldr	r3, [pc, #56]	; (800a23c <TlInit+0x54>)
 800a204:	2201      	movs	r2, #1
 800a206:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800a208:	4b0d      	ldr	r3, [pc, #52]	; (800a240 <TlInit+0x58>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d00c      	beq.n	800a22a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800a214:	4b0b      	ldr	r3, [pc, #44]	; (800a244 <TlInit+0x5c>)
 800a216:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800a218:	4b0b      	ldr	r3, [pc, #44]	; (800a248 <TlInit+0x60>)
 800a21a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800a21c:	4b08      	ldr	r3, [pc, #32]	; (800a240 <TlInit+0x58>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f107 020c 	add.w	r2, r7, #12
 800a224:	4610      	mov	r0, r2
 800a226:	4798      	blx	r3
  }

  return;
 800a228:	bf00      	nop
 800a22a:	bf00      	nop
}
 800a22c:	3718      	adds	r7, #24
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	20000114 	.word	0x20000114
 800a238:	20000108 	.word	0x20000108
 800a23c:	20000118 	.word	0x20000118
 800a240:	20000304 	.word	0x20000304
 800a244:	0800a29d 	.word	0x0800a29d
 800a248:	0800a2b5 	.word	0x0800a2b5

0800a24c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	4603      	mov	r3, r0
 800a254:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800a256:	79fb      	ldrb	r3, [r7, #7]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d10b      	bne.n	800a274 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800a25c:	4b0d      	ldr	r3, [pc, #52]	; (800a294 <Cmd_SetStatus+0x48>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d003      	beq.n	800a26c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800a264:	4b0b      	ldr	r3, [pc, #44]	; (800a294 <Cmd_SetStatus+0x48>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2000      	movs	r0, #0
 800a26a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800a26c:	4b0a      	ldr	r3, [pc, #40]	; (800a298 <Cmd_SetStatus+0x4c>)
 800a26e:	2200      	movs	r2, #0
 800a270:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800a272:	e00b      	b.n	800a28c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800a274:	4b08      	ldr	r3, [pc, #32]	; (800a298 <Cmd_SetStatus+0x4c>)
 800a276:	2201      	movs	r2, #1
 800a278:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800a27a:	4b06      	ldr	r3, [pc, #24]	; (800a294 <Cmd_SetStatus+0x48>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d004      	beq.n	800a28c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800a282:	4b04      	ldr	r3, [pc, #16]	; (800a294 <Cmd_SetStatus+0x48>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	2001      	movs	r0, #1
 800a288:	4798      	blx	r3
  return;
 800a28a:	bf00      	nop
 800a28c:	bf00      	nop
}
 800a28e:	3708      	adds	r7, #8
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}
 800a294:	20000324 	.word	0x20000324
 800a298:	20000110 	.word	0x20000110

0800a29c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	f7f6 fc69 	bl	8000b7c <shci_cmd_resp_release>

  return;
 800a2aa:	bf00      	nop
}
 800a2ac:	3708      	adds	r7, #8
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
	...

0800a2b4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800a2bc:	6879      	ldr	r1, [r7, #4]
 800a2be:	4805      	ldr	r0, [pc, #20]	; (800a2d4 <TlUserEvtReceived+0x20>)
 800a2c0:	f000 f872 	bl	800a3a8 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a2c4:	4803      	ldr	r0, [pc, #12]	; (800a2d4 <TlUserEvtReceived+0x20>)
 800a2c6:	f7f6 fc4d 	bl	8000b64 <shci_notify_asynch_evt>

  return;
 800a2ca:	bf00      	nop
}
 800a2cc:	3708      	adds	r7, #8
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	20000108 	.word	0x20000108

0800a2d8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	4a05      	ldr	r2, [pc, #20]	; (800a2f8 <shci_register_io_bus+0x20>)
 800a2e4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	4a04      	ldr	r2, [pc, #16]	; (800a2fc <shci_register_io_bus+0x24>)
 800a2ea:	611a      	str	r2, [r3, #16]

  return;
 800a2ec:	bf00      	nop
}
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr
 800a2f8:	0800a7d1 	.word	0x0800a7d1
 800a2fc:	0800a825 	.word	0x0800a825

0800a300 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800a300:	b480      	push	{r7}
 800a302:	b083      	sub	sp, #12
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	605a      	str	r2, [r3, #4]
}
 800a314:	bf00      	nop
 800a316:	370c      	adds	r7, #12
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800a320:	b480      	push	{r7}
 800a322:	b087      	sub	sp, #28
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a328:	f3ef 8310 	mrs	r3, PRIMASK
 800a32c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a32e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a330:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a332:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d102      	bne.n	800a344 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800a33e:	2301      	movs	r3, #1
 800a340:	75fb      	strb	r3, [r7, #23]
 800a342:	e001      	b.n	800a348 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800a344:	2300      	movs	r3, #0
 800a346:	75fb      	strb	r3, [r7, #23]
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800a352:	7dfb      	ldrb	r3, [r7, #23]
}
 800a354:	4618      	mov	r0, r3
 800a356:	371c      	adds	r7, #28
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800a360:	b480      	push	{r7}
 800a362:	b087      	sub	sp, #28
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a36a:	f3ef 8310 	mrs	r3, PRIMASK
 800a36e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a370:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a372:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a374:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	683a      	ldr	r2, [r7, #0]
 800a388:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	683a      	ldr	r2, [r7, #0]
 800a390:	605a      	str	r2, [r3, #4]
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a39c:	bf00      	nop
 800a39e:	371c      	adds	r7, #28
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b087      	sub	sp, #28
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3b2:	f3ef 8310 	mrs	r3, PRIMASK
 800a3b6:	60fb      	str	r3, [r7, #12]
  return(result);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a3ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a3bc:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	685a      	ldr	r2, [r3, #4]
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	683a      	ldr	r2, [r7, #0]
 800a3d0:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	683a      	ldr	r2, [r7, #0]
 800a3d8:	601a      	str	r2, [r3, #0]
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a3e4:	bf00      	nop
 800a3e6:	371c      	adds	r7, #28
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b087      	sub	sp, #28
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3f8:	f3ef 8310 	mrs	r3, PRIMASK
 800a3fc:	60fb      	str	r3, [r7, #12]
  return(result);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a400:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a402:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	687a      	ldr	r2, [r7, #4]
 800a40a:	6812      	ldr	r2, [r2, #0]
 800a40c:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	6852      	ldr	r2, [r2, #4]
 800a416:	605a      	str	r2, [r3, #4]
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a422:	bf00      	nop
 800a424:	371c      	adds	r7, #28
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr

0800a42e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800a42e:	b580      	push	{r7, lr}
 800a430:	b086      	sub	sp, #24
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
 800a436:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a438:	f3ef 8310 	mrs	r3, PRIMASK
 800a43c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a43e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a440:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a442:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4618      	mov	r0, r3
 800a452:	f7ff ffcd 	bl	800a3f0 <LST_remove_node>
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a460:	bf00      	nop
 800a462:	3718      	adds	r7, #24
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 800a468:	b480      	push	{r7}
 800a46a:	af00      	add	r7, sp, #0
  return;
 800a46c:	bf00      	nop
}
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr

0800a476 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800a476:	b480      	push	{r7}
 800a478:	af00      	add	r7, sp, #0
  return;
 800a47a:	bf00      	nop
}
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr

0800a484 <DIS_Init>:
__weak void DIS_Init( void )
{
 800a484:	b480      	push	{r7}
 800a486:	af00      	add	r7, sp, #0
  return;
 800a488:	bf00      	nop
}
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr

0800a492 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 800a492:	b480      	push	{r7}
 800a494:	af00      	add	r7, sp, #0
  return;
 800a496:	bf00      	nop
}
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	af00      	add	r7, sp, #0
  return;
 800a4a4:	bf00      	nop
}
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr

0800a4ae <HRS_Init>:
__weak void HRS_Init( void )
{
 800a4ae:	b480      	push	{r7}
 800a4b0:	af00      	add	r7, sp, #0
  return;
 800a4b2:	bf00      	nop
}
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr

0800a4bc <HTS_Init>:
__weak void HTS_Init( void )
{
 800a4bc:	b480      	push	{r7}
 800a4be:	af00      	add	r7, sp, #0
  return;
 800a4c0:	bf00      	nop
}
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr

0800a4ca <IAS_Init>:
__weak void IAS_Init( void )
{
 800a4ca:	b480      	push	{r7}
 800a4cc:	af00      	add	r7, sp, #0
  return;
 800a4ce:	bf00      	nop
}
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <LLS_Init>:
__weak void LLS_Init( void )
{
 800a4d8:	b480      	push	{r7}
 800a4da:	af00      	add	r7, sp, #0
  return;
 800a4dc:	bf00      	nop
}
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr

0800a4e6 <TPS_Init>:
__weak void TPS_Init( void )
{
 800a4e6:	b480      	push	{r7}
 800a4e8:	af00      	add	r7, sp, #0
  return;
 800a4ea:	bf00      	nop
}
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr

0800a4f4 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	af00      	add	r7, sp, #0
  return;
 800a4f8:	bf00      	nop
}
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr

0800a502 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800a502:	b480      	push	{r7}
 800a504:	af00      	add	r7, sp, #0
  return;
 800a506:	bf00      	nop
}
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr

0800a510 <MESH_Init>:
__weak void MESH_Init( void )
{
 800a510:	b480      	push	{r7}
 800a512:	af00      	add	r7, sp, #0
  return;
 800a514:	bf00      	nop
}
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr

0800a51e <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800a51e:	b480      	push	{r7}
 800a520:	af00      	add	r7, sp, #0
  return;
 800a522:	bf00      	nop
}
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr

0800a52c <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 800a52c:	b480      	push	{r7}
 800a52e:	af00      	add	r7, sp, #0
  return;
 800a530:	bf00      	nop
}
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr
	...

0800a53c <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800a540:	4b04      	ldr	r3, [pc, #16]	; (800a554 <SVCCTL_Init+0x18>)
 800a542:	2200      	movs	r2, #0
 800a544:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800a546:	4b04      	ldr	r3, [pc, #16]	; (800a558 <SVCCTL_Init+0x1c>)
 800a548:	2200      	movs	r2, #0
 800a54a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800a54c:	f000 f806 	bl	800a55c <SVCCTL_SvcInit>

  return;
 800a550:	bf00      	nop
}
 800a552:	bd80      	pop	{r7, pc}
 800a554:	200000e4 	.word	0x200000e4
 800a558:	20000104 	.word	0x20000104

0800a55c <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	af00      	add	r7, sp, #0
  BLS_Init();
 800a560:	f7ff ff82 	bl	800a468 <BLS_Init>

  CRS_STM_Init();
 800a564:	f7ff ff87 	bl	800a476 <CRS_STM_Init>

  DIS_Init();
 800a568:	f7ff ff8c 	bl	800a484 <DIS_Init>

  EDS_STM_Init();
 800a56c:	f7ff ff91 	bl	800a492 <EDS_STM_Init>

  HIDS_Init();
 800a570:	f7ff ff96 	bl	800a4a0 <HIDS_Init>

  HRS_Init();
 800a574:	f7ff ff9b 	bl	800a4ae <HRS_Init>

  HTS_Init();
 800a578:	f7ff ffa0 	bl	800a4bc <HTS_Init>

  IAS_Init();
 800a57c:	f7ff ffa5 	bl	800a4ca <IAS_Init>

  LLS_Init();
 800a580:	f7ff ffaa 	bl	800a4d8 <LLS_Init>

  TPS_Init();
 800a584:	f7ff ffaf 	bl	800a4e6 <TPS_Init>

  MOTENV_STM_Init();
 800a588:	f7ff ffb4 	bl	800a4f4 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800a58c:	f7ff fcae 	bl	8009eec <P2PS_STM_Init>

  OTAS_STM_Init();
 800a590:	f7ff ffb7 	bl	800a502 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800a594:	f7ff ffc3 	bl	800a51e <BVOPUS_STM_Init>

  MESH_Init();
 800a598:	f7ff ffba 	bl	800a510 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800a59c:	f7ff ffc6 	bl	800a52c <SVCCTL_InitCustomSvc>
  
  return;
 800a5a0:	bf00      	nop
}
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800a5ac:	4b09      	ldr	r3, [pc, #36]	; (800a5d4 <SVCCTL_RegisterSvcHandler+0x30>)
 800a5ae:	7f1b      	ldrb	r3, [r3, #28]
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	4a08      	ldr	r2, [pc, #32]	; (800a5d4 <SVCCTL_RegisterSvcHandler+0x30>)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800a5ba:	4b06      	ldr	r3, [pc, #24]	; (800a5d4 <SVCCTL_RegisterSvcHandler+0x30>)
 800a5bc:	7f1b      	ldrb	r3, [r3, #28]
 800a5be:	3301      	adds	r3, #1
 800a5c0:	b2da      	uxtb	r2, r3
 800a5c2:	4b04      	ldr	r3, [pc, #16]	; (800a5d4 <SVCCTL_RegisterSvcHandler+0x30>)
 800a5c4:	771a      	strb	r2, [r3, #28]

  return;
 800a5c6:	bf00      	nop
}
 800a5c8:	370c      	adds	r7, #12
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr
 800a5d2:	bf00      	nop
 800a5d4:	200000e4 	.word	0x200000e4

0800a5d8 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b086      	sub	sp, #24
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	2bff      	cmp	r3, #255	; 0xff
 800a5f0:	d000      	beq.n	800a5f4 <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800a5f2:	e025      	b.n	800a640 <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	3302      	adds	r3, #2
 800a5f8:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	881b      	ldrh	r3, [r3, #0]
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a604:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a608:	d000      	beq.n	800a60c <SVCCTL_UserEvtRx+0x34>
          break;
 800a60a:	e018      	b.n	800a63e <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a60c:	2300      	movs	r3, #0
 800a60e:	757b      	strb	r3, [r7, #21]
 800a610:	e00d      	b.n	800a62e <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800a612:	7d7b      	ldrb	r3, [r7, #21]
 800a614:	4a18      	ldr	r2, [pc, #96]	; (800a678 <SVCCTL_UserEvtRx+0xa0>)
 800a616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	4798      	blx	r3
 800a61e:	4603      	mov	r3, r0
 800a620:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800a622:	7dfb      	ldrb	r3, [r7, #23]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d108      	bne.n	800a63a <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a628:	7d7b      	ldrb	r3, [r7, #21]
 800a62a:	3301      	adds	r3, #1
 800a62c:	757b      	strb	r3, [r7, #21]
 800a62e:	4b12      	ldr	r3, [pc, #72]	; (800a678 <SVCCTL_UserEvtRx+0xa0>)
 800a630:	7f1b      	ldrb	r3, [r3, #28]
 800a632:	7d7a      	ldrb	r2, [r7, #21]
 800a634:	429a      	cmp	r2, r3
 800a636:	d3ec      	bcc.n	800a612 <SVCCTL_UserEvtRx+0x3a>
          break;
 800a638:	e000      	b.n	800a63c <SVCCTL_UserEvtRx+0x64>
              break;
 800a63a:	bf00      	nop
          break;
 800a63c:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800a63e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800a640:	7dfb      	ldrb	r3, [r7, #23]
 800a642:	2b01      	cmp	r3, #1
 800a644:	d009      	beq.n	800a65a <SVCCTL_UserEvtRx+0x82>
 800a646:	2b02      	cmp	r3, #2
 800a648:	d00a      	beq.n	800a660 <SVCCTL_UserEvtRx+0x88>
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d10b      	bne.n	800a666 <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 fa62 	bl	800ab18 <SVCCTL_App_Notification>
 800a654:	4603      	mov	r3, r0
 800a656:	75bb      	strb	r3, [r7, #22]
      break;
 800a658:	e008      	b.n	800a66c <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a65a:	2301      	movs	r3, #1
 800a65c:	75bb      	strb	r3, [r7, #22]
      break;
 800a65e:	e005      	b.n	800a66c <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800a660:	2300      	movs	r3, #0
 800a662:	75bb      	strb	r3, [r7, #22]
      break;
 800a664:	e002      	b.n	800a66c <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a666:	2301      	movs	r3, #1
 800a668:	75bb      	strb	r3, [r7, #22]
      break;
 800a66a:	bf00      	nop
  }

  return (return_status);
 800a66c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3718      	adds	r7, #24
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	200000e4 	.word	0x200000e4

0800a67c <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800a680:	f000 ff06 	bl	800b490 <HW_IPCC_Enable>

  return;
 800a684:	bf00      	nop
}
 800a686:	bd80      	pop	{r7, pc}

0800a688 <TL_Init>:


void TL_Init( void )
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800a68c:	4b0f      	ldr	r3, [pc, #60]	; (800a6cc <TL_Init+0x44>)
 800a68e:	4a10      	ldr	r2, [pc, #64]	; (800a6d0 <TL_Init+0x48>)
 800a690:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800a692:	4b0e      	ldr	r3, [pc, #56]	; (800a6cc <TL_Init+0x44>)
 800a694:	4a0f      	ldr	r2, [pc, #60]	; (800a6d4 <TL_Init+0x4c>)
 800a696:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800a698:	4b0c      	ldr	r3, [pc, #48]	; (800a6cc <TL_Init+0x44>)
 800a69a:	4a0f      	ldr	r2, [pc, #60]	; (800a6d8 <TL_Init+0x50>)
 800a69c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800a69e:	4b0b      	ldr	r3, [pc, #44]	; (800a6cc <TL_Init+0x44>)
 800a6a0:	4a0e      	ldr	r2, [pc, #56]	; (800a6dc <TL_Init+0x54>)
 800a6a2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 800a6a4:	4b09      	ldr	r3, [pc, #36]	; (800a6cc <TL_Init+0x44>)
 800a6a6:	4a0e      	ldr	r2, [pc, #56]	; (800a6e0 <TL_Init+0x58>)
 800a6a8:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800a6aa:	4b08      	ldr	r3, [pc, #32]	; (800a6cc <TL_Init+0x44>)
 800a6ac:	4a0d      	ldr	r2, [pc, #52]	; (800a6e4 <TL_Init+0x5c>)
 800a6ae:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800a6b0:	4b06      	ldr	r3, [pc, #24]	; (800a6cc <TL_Init+0x44>)
 800a6b2:	4a0d      	ldr	r2, [pc, #52]	; (800a6e8 <TL_Init+0x60>)
 800a6b4:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800a6b6:	4b05      	ldr	r3, [pc, #20]	; (800a6cc <TL_Init+0x44>)
 800a6b8:	4a0c      	ldr	r2, [pc, #48]	; (800a6ec <TL_Init+0x64>)
 800a6ba:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800a6bc:	4b03      	ldr	r3, [pc, #12]	; (800a6cc <TL_Init+0x44>)
 800a6be:	4a0c      	ldr	r2, [pc, #48]	; (800a6f0 <TL_Init+0x68>)
 800a6c0:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800a6c2:	f000 feed 	bl	800b4a0 <HW_IPCC_Init>

  return;
 800a6c6:	bf00      	nop
}
 800a6c8:	bd80      	pop	{r7, pc}
 800a6ca:	bf00      	nop
 800a6cc:	20030000 	.word	0x20030000
 800a6d0:	20030024 	.word	0x20030024
 800a6d4:	20030044 	.word	0x20030044
 800a6d8:	20030054 	.word	0x20030054
 800a6dc:	20030060 	.word	0x20030060
 800a6e0:	20030068 	.word	0x20030068
 800a6e4:	20030070 	.word	0x20030070
 800a6e8:	2003008c 	.word	0x2003008c
 800a6ec:	20030090 	.word	0x20030090
 800a6f0:	2003009c 	.word	0x2003009c

0800a6f4 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800a700:	4811      	ldr	r0, [pc, #68]	; (800a748 <TL_BLE_Init+0x54>)
 800a702:	f7ff fdfd 	bl	800a300 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800a706:	4b11      	ldr	r3, [pc, #68]	; (800a74c <TL_BLE_Init+0x58>)
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	689a      	ldr	r2, [r3, #8]
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	68da      	ldr	r2, [r3, #12]
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	4a0c      	ldr	r2, [pc, #48]	; (800a750 <TL_BLE_Init+0x5c>)
 800a720:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	4a08      	ldr	r2, [pc, #32]	; (800a748 <TL_BLE_Init+0x54>)
 800a726:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800a728:	f000 fed0 	bl	800b4cc <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a08      	ldr	r2, [pc, #32]	; (800a754 <TL_BLE_Init+0x60>)
 800a732:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	4a07      	ldr	r2, [pc, #28]	; (800a758 <TL_BLE_Init+0x64>)
 800a73a:	6013      	str	r3, [r2, #0]

  return 0;
 800a73c:	2300      	movs	r3, #0
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3710      	adds	r7, #16
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	20030a34 	.word	0x20030a34
 800a74c:	20030000 	.word	0x20030000
 800a750:	20030a24 	.word	0x20030a24
 800a754:	20000330 	.word	0x20000330
 800a758:	20000334 	.word	0x20000334

0800a75c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b082      	sub	sp, #8
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	460b      	mov	r3, r1
 800a766:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800a768:	4b05      	ldr	r3, [pc, #20]	; (800a780 <TL_BLE_SendCmd+0x24>)
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	2201      	movs	r2, #1
 800a770:	721a      	strb	r2, [r3, #8]

  HW_IPCC_BLE_SendCmd();
 800a772:	f000 feb5 	bl	800b4e0 <HW_IPCC_BLE_SendCmd>

  return 0;
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3708      	adds	r7, #8
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	20030000 	.word	0x20030000

0800a784 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800a78a:	e009      	b.n	800a7a0 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800a78c:	1d3b      	adds	r3, r7, #4
 800a78e:	4619      	mov	r1, r3
 800a790:	4808      	ldr	r0, [pc, #32]	; (800a7b4 <HW_IPCC_BLE_RxEvtNot+0x30>)
 800a792:	f7ff fe4c 	bl	800a42e <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 800a796:	4b08      	ldr	r3, [pc, #32]	; (800a7b8 <HW_IPCC_BLE_RxEvtNot+0x34>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	4610      	mov	r0, r2
 800a79e:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800a7a0:	4804      	ldr	r0, [pc, #16]	; (800a7b4 <HW_IPCC_BLE_RxEvtNot+0x30>)
 800a7a2:	f7ff fdbd 	bl	800a320 <LST_is_empty>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d0ef      	beq.n	800a78c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800a7ac:	bf00      	nop
}
 800a7ae:	3708      	adds	r7, #8
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}
 800a7b4:	20030a34 	.word	0x20030a34
 800a7b8:	20000330 	.word	0x20000330

0800a7bc <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800a7c0:	4b02      	ldr	r3, [pc, #8]	; (800a7cc <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4798      	blx	r3

  return;
 800a7c6:	bf00      	nop
}
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	20000334 	.word	0x20000334

0800a7d0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800a7dc:	480d      	ldr	r0, [pc, #52]	; (800a814 <TL_SYS_Init+0x44>)
 800a7de:	f7ff fd8f 	bl	800a300 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800a7e2:	4b0d      	ldr	r3, [pc, #52]	; (800a818 <TL_SYS_Init+0x48>)
 800a7e4:	68db      	ldr	r3, [r3, #12]
 800a7e6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	689a      	ldr	r2, [r3, #8]
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	4a08      	ldr	r2, [pc, #32]	; (800a814 <TL_SYS_Init+0x44>)
 800a7f4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800a7f6:	f000 fe95 	bl	800b524 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4a07      	ldr	r2, [pc, #28]	; (800a81c <TL_SYS_Init+0x4c>)
 800a800:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	4a06      	ldr	r2, [pc, #24]	; (800a820 <TL_SYS_Init+0x50>)
 800a808:	6013      	str	r3, [r2, #0]

  return 0;
 800a80a:	2300      	movs	r3, #0
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3710      	adds	r7, #16
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	20030a3c 	.word	0x20030a3c
 800a818:	20030000 	.word	0x20030000
 800a81c:	20000338 	.word	0x20000338
 800a820:	2000033c 	.word	0x2000033c

0800a824 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	460b      	mov	r3, r1
 800a82e:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800a830:	4b05      	ldr	r3, [pc, #20]	; (800a848 <TL_SYS_SendCmd+0x24>)
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	2210      	movs	r2, #16
 800a838:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 800a83a:	f000 fe7d 	bl	800b538 <HW_IPCC_SYS_SendCmd>

  return 0;
 800a83e:	2300      	movs	r3, #0
}
 800a840:	4618      	mov	r0, r3
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	20030000 	.word	0x20030000

0800a84c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a850:	4b04      	ldr	r3, [pc, #16]	; (800a864 <HW_IPCC_SYS_CmdEvtNot+0x18>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a04      	ldr	r2, [pc, #16]	; (800a868 <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 800a856:	68d2      	ldr	r2, [r2, #12]
 800a858:	6812      	ldr	r2, [r2, #0]
 800a85a:	4610      	mov	r0, r2
 800a85c:	4798      	blx	r3

  return;
 800a85e:	bf00      	nop
}
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	20000338 	.word	0x20000338
 800a868:	20030000 	.word	0x20030000

0800a86c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b082      	sub	sp, #8
 800a870:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a872:	e009      	b.n	800a888 <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800a874:	1d3b      	adds	r3, r7, #4
 800a876:	4619      	mov	r1, r3
 800a878:	4808      	ldr	r0, [pc, #32]	; (800a89c <HW_IPCC_SYS_EvtNot+0x30>)
 800a87a:	f7ff fdd8 	bl	800a42e <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 800a87e:	4b08      	ldr	r3, [pc, #32]	; (800a8a0 <HW_IPCC_SYS_EvtNot+0x34>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	4610      	mov	r0, r2
 800a886:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a888:	4804      	ldr	r0, [pc, #16]	; (800a89c <HW_IPCC_SYS_EvtNot+0x30>)
 800a88a:	f7ff fd49 	bl	800a320 <LST_is_empty>
 800a88e:	4603      	mov	r3, r0
 800a890:	2b00      	cmp	r3, #0
 800a892:	d0ef      	beq.n	800a874 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800a894:	bf00      	nop
}
 800a896:	3708      	adds	r7, #8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}
 800a89c:	20030a3c 	.word	0x20030a3c
 800a8a0:	2000033c 	.word	0x2000033c

0800a8a4 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800a8ac:	4817      	ldr	r0, [pc, #92]	; (800a90c <TL_MM_Init+0x68>)
 800a8ae:	f7ff fd27 	bl	800a300 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800a8b2:	4817      	ldr	r0, [pc, #92]	; (800a910 <TL_MM_Init+0x6c>)
 800a8b4:	f7ff fd24 	bl	800a300 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800a8b8:	4b16      	ldr	r3, [pc, #88]	; (800a914 <TL_MM_Init+0x70>)
 800a8ba:	691b      	ldr	r3, [r3, #16]
 800a8bc:	4a16      	ldr	r2, [pc, #88]	; (800a918 <TL_MM_Init+0x74>)
 800a8be:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800a8c0:	4b15      	ldr	r3, [pc, #84]	; (800a918 <TL_MM_Init+0x74>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	6892      	ldr	r2, [r2, #8]
 800a8c8:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800a8ca:	4b13      	ldr	r3, [pc, #76]	; (800a918 <TL_MM_Init+0x74>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	68d2      	ldr	r2, [r2, #12]
 800a8d2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800a8d4:	4b10      	ldr	r3, [pc, #64]	; (800a918 <TL_MM_Init+0x74>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a0c      	ldr	r2, [pc, #48]	; (800a90c <TL_MM_Init+0x68>)
 800a8da:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800a8dc:	4b0e      	ldr	r3, [pc, #56]	; (800a918 <TL_MM_Init+0x74>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	6812      	ldr	r2, [r2, #0]
 800a8e4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800a8e6:	4b0c      	ldr	r3, [pc, #48]	; (800a918 <TL_MM_Init+0x74>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	687a      	ldr	r2, [r7, #4]
 800a8ec:	6852      	ldr	r2, [r2, #4]
 800a8ee:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800a8f0:	4b09      	ldr	r3, [pc, #36]	; (800a918 <TL_MM_Init+0x74>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	6912      	ldr	r2, [r2, #16]
 800a8f8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800a8fa:	4b07      	ldr	r3, [pc, #28]	; (800a918 <TL_MM_Init+0x74>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	6952      	ldr	r2, [r2, #20]
 800a902:	619a      	str	r2, [r3, #24]

  return;
 800a904:	bf00      	nop
}
 800a906:	3708      	adds	r7, #8
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}
 800a90c:	200300a8 	.word	0x200300a8
 800a910:	20000328 	.word	0x20000328
 800a914:	20030000 	.word	0x20030000
 800a918:	20000340 	.word	0x20000340

0800a91c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800a924:	6879      	ldr	r1, [r7, #4]
 800a926:	4805      	ldr	r0, [pc, #20]	; (800a93c <TL_MM_EvtDone+0x20>)
 800a928:	f7ff fd3e 	bl	800a3a8 <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800a92c:	4804      	ldr	r0, [pc, #16]	; (800a940 <TL_MM_EvtDone+0x24>)
 800a92e:	f000 fe29 	bl	800b584 <HW_IPCC_MM_SendFreeBuf>

  return;
 800a932:	bf00      	nop
}
 800a934:	3708      	adds	r7, #8
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	20000328 	.word	0x20000328
 800a940:	0800a945 	.word	0x0800a945

0800a944 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a94a:	e00c      	b.n	800a966 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800a94c:	1d3b      	adds	r3, r7, #4
 800a94e:	4619      	mov	r1, r3
 800a950:	480a      	ldr	r0, [pc, #40]	; (800a97c <SendFreeBuf+0x38>)
 800a952:	f7ff fd6c 	bl	800a42e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800a956:	4b0a      	ldr	r3, [pc, #40]	; (800a980 <SendFreeBuf+0x3c>)
 800a958:	691b      	ldr	r3, [r3, #16]
 800a95a:	691b      	ldr	r3, [r3, #16]
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	4611      	mov	r1, r2
 800a960:	4618      	mov	r0, r3
 800a962:	f7ff fd21 	bl	800a3a8 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a966:	4805      	ldr	r0, [pc, #20]	; (800a97c <SendFreeBuf+0x38>)
 800a968:	f7ff fcda 	bl	800a320 <LST_is_empty>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d0ec      	beq.n	800a94c <SendFreeBuf+0x8>
  }

  return;
 800a972:	bf00      	nop
}
 800a974:	3708      	adds	r7, #8
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	20000328 	.word	0x20000328
 800a980:	20030000 	.word	0x20030000

0800a984 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800a984:	b580      	push	{r7, lr}
 800a986:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800a988:	4805      	ldr	r0, [pc, #20]	; (800a9a0 <TL_TRACES_Init+0x1c>)
 800a98a:	f7ff fcb9 	bl	800a300 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800a98e:	4b05      	ldr	r3, [pc, #20]	; (800a9a4 <TL_TRACES_Init+0x20>)
 800a990:	695b      	ldr	r3, [r3, #20]
 800a992:	4a03      	ldr	r2, [pc, #12]	; (800a9a0 <TL_TRACES_Init+0x1c>)
 800a994:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800a996:	f000 fe2b 	bl	800b5f0 <HW_IPCC_TRACES_Init>

  return;
 800a99a:	bf00      	nop
}
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	200300b0 	.word	0x200300b0
 800a9a4:	20030000 	.word	0x20030000

0800a9a8 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a9ae:	e008      	b.n	800a9c2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800a9b0:	1d3b      	adds	r3, r7, #4
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	4808      	ldr	r0, [pc, #32]	; (800a9d8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a9b6:	f7ff fd3a 	bl	800a42e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f000 f80d 	bl	800a9dc <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a9c2:	4805      	ldr	r0, [pc, #20]	; (800a9d8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a9c4:	f7ff fcac 	bl	800a320 <LST_is_empty>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d0f0      	beq.n	800a9b0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800a9ce:	bf00      	nop
}
 800a9d0:	3708      	adds	r7, #8
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	200300b0 	.word	0x200300b0

0800a9dc <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt ){};
 800a9dc:	b480      	push	{r7}
 800a9de:	b083      	sub	sp, #12
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	bf00      	nop
 800a9e6:	370c      	adds	r7, #12
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800a9f4:	4b03      	ldr	r3, [pc, #12]	; (800aa04 <LL_FLASH_GetUDN+0x14>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop
 800aa04:	1fff7580 	.word	0x1fff7580

0800aa08 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800aa0c:	4b03      	ldr	r3, [pc, #12]	; (800aa1c <LL_FLASH_GetDeviceID+0x14>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	b2db      	uxtb	r3, r3
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr
 800aa1c:	1fff7584 	.word	0x1fff7584

0800aa20 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800aa20:	b480      	push	{r7}
 800aa22:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800aa24:	4b03      	ldr	r3, [pc, #12]	; (800aa34 <LL_FLASH_GetSTCompanyID+0x14>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	0a1b      	lsrs	r3, r3, #8
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr
 800aa34:	1fff7584 	.word	0x1fff7584

0800aa38 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800aa38:	b5b0      	push	{r4, r5, r7, lr}
 800aa3a:	b08c      	sub	sp, #48	; 0x30
 800aa3c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800aa3e:	4b2b      	ldr	r3, [pc, #172]	; (800aaec <APP_BLE_Init+0xb4>)
 800aa40:	463c      	mov	r4, r7
 800aa42:	461d      	mov	r5, r3
 800aa44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa4c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800aa50:	c407      	stmia	r4!, {r0, r1, r2}
 800aa52:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800aa54:	f000 f928 	bl	800aca8 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800aa58:	2101      	movs	r1, #1
 800aa5a:	2002      	movs	r0, #2
 800aa5c:	f7f7 fc68 	bl	8002330 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800aa60:	4a23      	ldr	r2, [pc, #140]	; (800aaf0 <APP_BLE_Init+0xb8>)
 800aa62:	2100      	movs	r1, #0
 800aa64:	2004      	movs	r0, #4
 800aa66:	f7f7 fdcb 	bl	8002600 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 800aa6a:	463b      	mov	r3, r7
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7ff faff 	bl	800a070 <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800aa72:	f000 f92f 	bl	800acd4 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800aa76:	f7ff fd61 	bl	800a53c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800aa7a:	4b1e      	ldr	r3, [pc, #120]	; (800aaf4 <APP_BLE_Init+0xbc>)
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;  
 800aa82:	4b1c      	ldr	r3, [pc, #112]	; (800aaf4 <APP_BLE_Init+0xbc>)
 800aa84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa88:	84da      	strh	r2, [r3, #38]	; 0x26
  /**
   * From here, all initialization are BLE application specific
   */
    UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800aa8a:	4a1b      	ldr	r2, [pc, #108]	; (800aaf8 <APP_BLE_Init+0xc0>)
 800aa8c:	2100      	movs	r1, #0
 800aa8e:	2001      	movs	r0, #1
 800aa90:	f7f7 fdb6 	bl	8002600 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)  
    manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)  
  aci_hal_set_radio_activity_mask(0x0006);
 800aa94:	2006      	movs	r0, #6
 800aa96:	f7fe fe9d 	bl	80097d4 <aci_hal_set_radio_activity_mask>
  mutex = 1; 
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800aa9a:	f000 fb63 	bl	800b164 <P2PS_APP_Init>

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800aa9e:	4b17      	ldr	r3, [pc, #92]	; (800aafc <APP_BLE_Init+0xc4>)
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	4917      	ldr	r1, [pc, #92]	; (800ab00 <APP_BLE_Init+0xc8>)
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	f7f6 fe13 	bl	80016d0 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800aaaa:	4b16      	ldr	r3, [pc, #88]	; (800ab04 <APP_BLE_Init+0xcc>)
 800aaac:	2200      	movs	r2, #0
 800aaae:	4916      	ldr	r1, [pc, #88]	; (800ab08 <APP_BLE_Init+0xd0>)
 800aab0:	2000      	movs	r0, #0
 800aab2:	f7f6 fe0d 	bl	80016d0 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800aab6:	4b0f      	ldr	r3, [pc, #60]	; (800aaf4 <APP_BLE_Init+0xbc>)
 800aab8:	2200      	movs	r2, #0
 800aaba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800aabe:	4b0d      	ldr	r3, [pc, #52]	; (800aaf4 <APP_BLE_Init+0xbc>)
 800aac0:	2200      	movs	r2, #0
 800aac2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800aac6:	4b11      	ldr	r3, [pc, #68]	; (800ab0c <APP_BLE_Init+0xd4>)
 800aac8:	2280      	movs	r2, #128	; 0x80
 800aaca:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800aacc:	4b10      	ldr	r3, [pc, #64]	; (800ab10 <APP_BLE_Init+0xd8>)
 800aace:	22a0      	movs	r2, #160	; 0xa0
 800aad0:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 800aad2:	2001      	movs	r0, #1
 800aad4:	f000 f9d8 	bl	800ae88 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */
   HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800aad8:	2201      	movs	r2, #1
 800aada:	2120      	movs	r1, #32
 800aadc:	480d      	ldr	r0, [pc, #52]	; (800ab14 <APP_BLE_Init+0xdc>)
 800aade:	f7f8 fdd1 	bl	8003684 <HAL_GPIO_WritePin>
/* USER CODE END APP_BLE_Init_2 */
  return;
 800aae2:	bf00      	nop
}
 800aae4:	3730      	adds	r7, #48	; 0x30
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bdb0      	pop	{r4, r5, r7, pc}
 800aaea:	bf00      	nop
 800aaec:	0800b6e0 	.word	0x0800b6e0
 800aaf0:	08009aad 	.word	0x08009aad
 800aaf4:	2000011c 	.word	0x2000011c
 800aaf8:	0800aff5 	.word	0x0800aff5
 800aafc:	0800b029 	.word	0x0800b029
 800ab00:	200001ad 	.word	0x200001ad
 800ab04:	0800b039 	.word	0x0800b039
 800ab08:	200001ae 	.word	0x200001ae
 800ab0c:	200001b0 	.word	0x200001b0
 800ab10:	200001b2 	.word	0x200001b2
 800ab14:	48000400 	.word	0x48000400

0800ab18 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b08a      	sub	sp, #40	; 0x28
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete; 
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ab20:	2342      	movs	r3, #66	; 0x42
 800ab22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	3301      	adds	r3, #1
 800ab2a:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800ab2c:	6a3b      	ldr	r3, [r7, #32]
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	2b3e      	cmp	r3, #62	; 0x3e
 800ab32:	d02f      	beq.n	800ab94 <SVCCTL_App_Notification+0x7c>
 800ab34:	2bff      	cmp	r3, #255	; 0xff
 800ab36:	f000 808c 	beq.w	800ac52 <SVCCTL_App_Notification+0x13a>
 800ab3a:	2b05      	cmp	r3, #5
 800ab3c:	d000      	beq.n	800ab40 <SVCCTL_App_Notification+0x28>

        default:
        /* USER CODE BEGIN ECODE_DEFAULT*/

        /* USER CODE END ECODE_DEFAULT*/
          break;
 800ab3e:	e09b      	b.n	800ac78 <SVCCTL_App_Notification+0x160>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 800ab40:	6a3b      	ldr	r3, [r7, #32]
 800ab42:	3302      	adds	r3, #2
 800ab44:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ab4c:	b29a      	uxth	r2, r3
 800ab4e:	4b4d      	ldr	r3, [pc, #308]	; (800ac84 <SVCCTL_App_Notification+0x16c>)
 800ab50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d106      	bne.n	800ab64 <SVCCTL_App_Notification+0x4c>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800ab56:	4b4b      	ldr	r3, [pc, #300]	; (800ac84 <SVCCTL_App_Notification+0x16c>)
 800ab58:	2200      	movs	r2, #0
 800ab5a:	84da      	strh	r2, [r3, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ab5c:	4b49      	ldr	r3, [pc, #292]	; (800ac84 <SVCCTL_App_Notification+0x16c>)
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      Adv_Request(APP_BLE_FAST_ADV);
 800ab64:	2001      	movs	r0, #1
 800ab66:	f000 f98f 	bl	800ae88 <Adv_Request>
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800ab6a:	4b47      	ldr	r3, [pc, #284]	; (800ac88 <SVCCTL_App_Notification+0x170>)
 800ab6c:	2201      	movs	r2, #1
 800ab6e:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800ab70:	4b44      	ldr	r3, [pc, #272]	; (800ac84 <SVCCTL_App_Notification+0x16c>)
 800ab72:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800ab74:	4b44      	ldr	r3, [pc, #272]	; (800ac88 <SVCCTL_App_Notification+0x170>)
 800ab76:	805a      	strh	r2, [r3, #2]
        P2PS_APP_Notification(&handleNotification);
 800ab78:	4843      	ldr	r0, [pc, #268]	; (800ac88 <SVCCTL_App_Notification+0x170>)
 800ab7a:	f000 fadf 	bl	800b13c <P2PS_APP_Notification>
        HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800ab7e:	2200      	movs	r2, #0
 800ab80:	2101      	movs	r1, #1
 800ab82:	4842      	ldr	r0, [pc, #264]	; (800ac8c <SVCCTL_App_Notification+0x174>)
 800ab84:	f7f8 fd7e 	bl	8003684 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800ab88:	2201      	movs	r2, #1
 800ab8a:	2120      	movs	r1, #32
 800ab8c:	483f      	ldr	r0, [pc, #252]	; (800ac8c <SVCCTL_App_Notification+0x174>)
 800ab8e:	f7f8 fd79 	bl	8003684 <HAL_GPIO_WritePin>
    break; /* EVT_DISCONN_COMPLETE */
 800ab92:	e071      	b.n	800ac78 <SVCCTL_App_Notification+0x160>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800ab94:	6a3b      	ldr	r3, [r7, #32]
 800ab96:	3302      	adds	r3, #2
 800ab98:	61bb      	str	r3, [r7, #24]
      switch (meta_evt->subevent)
 800ab9a:	69bb      	ldr	r3, [r7, #24]
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	2b03      	cmp	r3, #3
 800aba0:	d053      	beq.n	800ac4a <SVCCTL_App_Notification+0x132>
 800aba2:	2b0c      	cmp	r3, #12
 800aba4:	d002      	beq.n	800abac <SVCCTL_App_Notification+0x94>
 800aba6:	2b01      	cmp	r3, #1
 800aba8:	d016      	beq.n	800abd8 <SVCCTL_App_Notification+0xc0>
          break;
 800abaa:	e051      	b.n	800ac50 <SVCCTL_App_Notification+0x138>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 800abac:	69bb      	ldr	r3, [r7, #24]
 800abae:	3301      	adds	r3, #1
 800abb0:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 800abb2:	4b34      	ldr	r3, [pc, #208]	; (800ac84 <SVCCTL_App_Notification+0x16c>)
 800abb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800abb6:	f107 020a 	add.w	r2, r7, #10
 800abba:	f107 010b 	add.w	r1, r7, #11
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7fe fe82 	bl	80098c8 <hci_le_read_phy>
 800abc4:	4603      	mov	r3, r0
 800abc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret == BLE_STATUS_SUCCESS)
 800abca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d13d      	bne.n	800ac4e <SVCCTL_App_Notification+0x136>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 800abd2:	7afb      	ldrb	r3, [r7, #11]
 800abd4:	2b02      	cmp	r3, #2
          break;
 800abd6:	e03a      	b.n	800ac4e <SVCCTL_App_Notification+0x136>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800abd8:	69bb      	ldr	r3, [r7, #24]
 800abda:	3301      	adds	r3, #1
 800abdc:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800abde:	4b29      	ldr	r3, [pc, #164]	; (800ac84 <SVCCTL_App_Notification+0x16c>)
 800abe0:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800abe4:	4618      	mov	r0, r3
 800abe6:	f7f6 fde9 	bl	80017bc <HW_TS_Stop>
            if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800abea:	4b26      	ldr	r3, [pc, #152]	; (800ac84 <SVCCTL_App_Notification+0x16c>)
 800abec:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800abf0:	2b04      	cmp	r3, #4
 800abf2:	d104      	bne.n	800abfe <SVCCTL_App_Notification+0xe6>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800abf4:	4b23      	ldr	r3, [pc, #140]	; (800ac84 <SVCCTL_App_Notification+0x16c>)
 800abf6:	2206      	movs	r2, #6
 800abf8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800abfc:	e003      	b.n	800ac06 <SVCCTL_App_Notification+0xee>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800abfe:	4b21      	ldr	r3, [pc, #132]	; (800ac84 <SVCCTL_App_Notification+0x16c>)
 800ac00:	2205      	movs	r2, #5
 800ac02:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                connection_complete_event->Connection_Handle;
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ac0c:	b29a      	uxth	r2, r3
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle =
 800ac0e:	4b1d      	ldr	r3, [pc, #116]	; (800ac84 <SVCCTL_App_Notification+0x16c>)
 800ac10:	84da      	strh	r2, [r3, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800ac12:	4b1d      	ldr	r3, [pc, #116]	; (800ac88 <SVCCTL_App_Notification+0x170>)
 800ac14:	2200      	movs	r2, #0
 800ac16:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800ac18:	4b1a      	ldr	r3, [pc, #104]	; (800ac84 <SVCCTL_App_Notification+0x16c>)
 800ac1a:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800ac1c:	4b1a      	ldr	r3, [pc, #104]	; (800ac88 <SVCCTL_App_Notification+0x170>)
 800ac1e:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 800ac20:	4819      	ldr	r0, [pc, #100]	; (800ac88 <SVCCTL_App_Notification+0x170>)
 800ac22:	f000 fa8b 	bl	800b13c <P2PS_APP_Notification>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800ac26:	2201      	movs	r2, #1
 800ac28:	2101      	movs	r1, #1
 800ac2a:	4818      	ldr	r0, [pc, #96]	; (800ac8c <SVCCTL_App_Notification+0x174>)
 800ac2c:	f7f8 fd2a 	bl	8003684 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800ac30:	2200      	movs	r2, #0
 800ac32:	2120      	movs	r1, #32
 800ac34:	4815      	ldr	r0, [pc, #84]	; (800ac8c <SVCCTL_App_Notification+0x174>)
 800ac36:	f7f8 fd25 	bl	8003684 <HAL_GPIO_WritePin>
          aci_gatt_exchange_config(connection_complete_event->Connection_Handle);
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7fe fca3 	bl	800958e <aci_gatt_exchange_config>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 800ac48:	e002      	b.n	800ac50 <SVCCTL_App_Notification+0x138>
          break;
 800ac4a:	bf00      	nop
 800ac4c:	e014      	b.n	800ac78 <SVCCTL_App_Notification+0x160>
          break;
 800ac4e:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 800ac50:	e012      	b.n	800ac78 <SVCCTL_App_Notification+0x160>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800ac52:	6a3b      	ldr	r3, [r7, #32]
 800ac54:	3302      	adds	r3, #2
 800ac56:	61fb      	str	r3, [r7, #28]
      switch (blue_evt->ecode)
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	881b      	ldrh	r3, [r3, #0]
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	f240 4207 	movw	r2, #1031	; 0x407
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d004      	beq.n	800ac70 <SVCCTL_App_Notification+0x158>
 800ac66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac6a:	d003      	beq.n	800ac74 <SVCCTL_App_Notification+0x15c>
 800ac6c:	2b04      	cmp	r3, #4
        break; /* RADIO_ACTIVITY_EVENT */
 800ac6e:	e002      	b.n	800ac76 <SVCCTL_App_Notification+0x15e>
        break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800ac70:	bf00      	nop
 800ac72:	e000      	b.n	800ac76 <SVCCTL_App_Notification+0x15e>
      break;
 800ac74:	bf00      	nop
      break; /* EVT_VENDOR */
 800ac76:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800ac78:	2301      	movs	r3, #1
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3728      	adds	r7, #40	; 0x28
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
 800ac82:	bf00      	nop
 800ac84:	2000011c 	.word	0x2000011c
 800ac88:	2000081c 	.word	0x2000081c
 800ac8c:	48000400 	.word	0x48000400

0800ac90 <APP_BLE_Get_Server_Connection_Status>:

APP_BLE_ConnStatus_t APP_BLE_Get_Server_Connection_Status(void)
{
 800ac90:	b480      	push	{r7}
 800ac92:	af00      	add	r7, sp, #0
    return BleApplicationContext.Device_Connection_Status;
 800ac94:	4b03      	ldr	r3, [pc, #12]	; (800aca4 <APP_BLE_Get_Server_Connection_Status+0x14>)
 800ac96:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr
 800aca4:	2000011c 	.word	0x2000011c

0800aca8 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b082      	sub	sp, #8
 800acac:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800acae:	4b06      	ldr	r3, [pc, #24]	; (800acc8 <Ble_Tl_Init+0x20>)
 800acb0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800acb2:	4b06      	ldr	r3, [pc, #24]	; (800accc <Ble_Tl_Init+0x24>)
 800acb4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800acb6:	463b      	mov	r3, r7
 800acb8:	4619      	mov	r1, r3
 800acba:	4805      	ldr	r0, [pc, #20]	; (800acd0 <Ble_Tl_Init+0x28>)
 800acbc:	f7fe feda 	bl	8009a74 <hci_init>

  return;
 800acc0:	bf00      	nop
}
 800acc2:	3708      	adds	r7, #8
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	200300b8 	.word	0x200300b8
 800accc:	0800b0c3 	.word	0x0800b0c3
 800acd0:	0800b08b 	.word	0x0800b08b

0800acd4 <Ble_Hci_Gap_Gatt_Init>:

 static void Ble_Hci_Gap_Gatt_Init(void){
 800acd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acd6:	b091      	sub	sp, #68	; 0x44
 800acd8:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 800acda:	2300      	movs	r3, #0
 800acdc:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 800acde:	f7fe fdca 	bl	8009876 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800ace2:	f000 f943 	bl	800af6c <BleGetBdAddress>
 800ace6:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800ace8:	6a3a      	ldr	r2, [r7, #32]
 800acea:	2106      	movs	r1, #6
 800acec:	2000      	movs	r0, #0
 800acee:	f7fe fca3 	bl	8009638 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800acf2:	6a3b      	ldr	r3, [r7, #32]
 800acf4:	795a      	ldrb	r2, [r3, #5]
 800acf6:	4b5e      	ldr	r3, [pc, #376]	; (800ae70 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800acf8:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 800acfa:	6a3b      	ldr	r3, [r7, #32]
 800acfc:	791a      	ldrb	r2, [r3, #4]
 800acfe:	4b5c      	ldr	r3, [pc, #368]	; (800ae70 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ad00:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800ad02:	6a3b      	ldr	r3, [r7, #32]
 800ad04:	78da      	ldrb	r2, [r3, #3]
 800ad06:	4b5a      	ldr	r3, [pc, #360]	; (800ae70 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ad08:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 800ad0a:	6a3b      	ldr	r3, [r7, #32]
 800ad0c:	789a      	ldrb	r2, [r3, #2]
 800ad0e:	4b58      	ldr	r3, [pc, #352]	; (800ae70 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ad10:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 800ad12:	6a3b      	ldr	r3, [r7, #32]
 800ad14:	785a      	ldrb	r2, [r3, #1]
 800ad16:	4b56      	ldr	r3, [pc, #344]	; (800ae70 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ad18:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 800ad1a:	6a3b      	ldr	r3, [r7, #32]
 800ad1c:	781a      	ldrb	r2, [r3, #0]
 800ad1e:	4b54      	ldr	r3, [pc, #336]	; (800ae70 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ad20:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 800ad22:	f64e 536e 	movw	r3, #60782	; 0xed6e
 800ad26:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 800ad28:	f7ff fe62 	bl	800a9f0 <LL_FLASH_GetUDN>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800ad30:	f107 0308 	add.w	r3, r7, #8
 800ad34:	461a      	mov	r2, r3
 800ad36:	2106      	movs	r1, #6
 800ad38:	202e      	movs	r0, #46	; 0x2e
 800ad3a:	f7fe fc7d 	bl	8009638 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK 
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800ad3e:	4a4d      	ldr	r2, [pc, #308]	; (800ae74 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 800ad40:	2110      	movs	r1, #16
 800ad42:	2018      	movs	r0, #24
 800ad44:	f7fe fc78 	bl	8009638 <aci_hal_write_config_data>
    
   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800ad48:	4a4b      	ldr	r2, [pc, #300]	; (800ae78 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 800ad4a:	2110      	movs	r1, #16
 800ad4c:	2008      	movs	r0, #8
 800ad4e:	f7fe fc73 	bl	8009638 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800ad52:	2118      	movs	r1, #24
 800ad54:	2001      	movs	r0, #1
 800ad56:	f7fe fcdf 	bl	8009718 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800ad5a:	f7fe f9c7 	bl	80090ec <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800ad62:	7ffb      	ldrb	r3, [r7, #31]
 800ad64:	f043 0301 	orr.w	r3, r3, #1
 800ad68:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 800ad6a:	7ffb      	ldrb	r3, [r7, #31]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d01e      	beq.n	800adae <Ble_Hci_Gap_Gatt_Init+0xda>
  {
    const char *name = "STM32WB";
 800ad70:	4b42      	ldr	r3, [pc, #264]	; (800ae7c <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 800ad72:	61bb      	str	r3, [r7, #24]
    aci_gap_init(role, 0,
 800ad74:	f107 0216 	add.w	r2, r7, #22
 800ad78:	7ff8      	ldrb	r0, [r7, #31]
 800ad7a:	f107 0312 	add.w	r3, r7, #18
 800ad7e:	9301      	str	r3, [sp, #4]
 800ad80:	f107 0314 	add.w	r3, r7, #20
 800ad84:	9300      	str	r3, [sp, #0]
 800ad86:	4613      	mov	r3, r2
 800ad88:	2207      	movs	r2, #7
 800ad8a:	2100      	movs	r1, #0
 800ad8c:	f7fe f897 	bl	8008ebe <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800ad90:	8afc      	ldrh	r4, [r7, #22]
 800ad92:	8abd      	ldrh	r5, [r7, #20]
 800ad94:	69b8      	ldr	r0, [r7, #24]
 800ad96:	f7f5 f9f3 	bl	8000180 <strlen>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	b2da      	uxtb	r2, r3
 800ad9e:	69bb      	ldr	r3, [r7, #24]
 800ada0:	9300      	str	r3, [sp, #0]
 800ada2:	4613      	mov	r3, r2
 800ada4:	2200      	movs	r2, #0
 800ada6:	4629      	mov	r1, r5
 800ada8:	4620      	mov	r0, r4
 800adaa:	f7fe fb62 	bl	8009472 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800adae:	8af8      	ldrh	r0, [r7, #22]
 800adb0:	8a79      	ldrh	r1, [r7, #18]
 800adb2:	1d3b      	adds	r3, r7, #4
 800adb4:	9300      	str	r3, [sp, #0]
 800adb6:	2302      	movs	r3, #2
 800adb8:	2200      	movs	r2, #0
 800adba:	f7fe fb5a 	bl	8009472 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
/**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED); 
 800adbe:	2202      	movs	r2, #2
 800adc0:	2102      	movs	r1, #2
 800adc2:	2000      	movs	r0, #0
 800adc4:	f7fe fde8 	bl	8009998 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800adc8:	4b2d      	ldr	r3, [pc, #180]	; (800ae80 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800adca:	2201      	movs	r2, #1
 800adcc:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800adce:	4b2c      	ldr	r3, [pc, #176]	; (800ae80 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	4618      	mov	r0, r3
 800add4:	f7fd ff73 	bl	8008cbe <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800add8:	4b29      	ldr	r3, [pc, #164]	; (800ae80 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800adda:	2201      	movs	r2, #1
 800addc:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 800adde:	4b28      	ldr	r3, [pc, #160]	; (800ae80 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ade0:	2200      	movs	r2, #0
 800ade2:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
 800ade4:	4b26      	ldr	r3, [pc, #152]	; (800ae80 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ade6:	2208      	movs	r2, #8
 800ade8:	755a      	strb	r2, [r3, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 800adea:	4b25      	ldr	r3, [pc, #148]	; (800ae80 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800adec:	2210      	movs	r2, #16
 800adee:	759a      	strb	r2, [r3, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = 1;
 800adf0:	4b23      	ldr	r3, [pc, #140]	; (800ae80 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800adf2:	2201      	movs	r2, #1
 800adf4:	751a      	strb	r2, [r3, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 800adf6:	4b22      	ldr	r3, [pc, #136]	; (800ae80 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800adf8:	4a22      	ldr	r2, [pc, #136]	; (800ae84 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800adfa:	619a      	str	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = 1;
 800adfc:	4b20      	ldr	r3, [pc, #128]	; (800ae80 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800adfe:	2201      	movs	r2, #1
 800ae00:	709a      	strb	r2, [r3, #2]
  for (index = 0; index < 16; index++)
 800ae02:	2300      	movs	r3, #0
 800ae04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ae08:	e00b      	b.n	800ae22 <Ble_Hci_Gap_Gatt_Init+0x14e>
  {
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 800ae0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae0e:	4a1c      	ldr	r2, [pc, #112]	; (800ae80 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ae10:	4413      	add	r3, r2
 800ae12:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ae16:	711a      	strb	r2, [r3, #4]
  for (index = 0; index < 16; index++)
 800ae18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ae22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae26:	2b0f      	cmp	r3, #15
 800ae28:	d9ef      	bls.n	800ae0a <Ble_Hci_Gap_Gatt_Init+0x136>
  }

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800ae2a:	4b15      	ldr	r3, [pc, #84]	; (800ae80 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ae2c:	789d      	ldrb	r5, [r3, #2]
 800ae2e:	4b14      	ldr	r3, [pc, #80]	; (800ae80 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ae30:	785e      	ldrb	r6, [r3, #1]
 800ae32:	4b13      	ldr	r3, [pc, #76]	; (800ae80 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ae34:	7d5b      	ldrb	r3, [r3, #21]
 800ae36:	4a12      	ldr	r2, [pc, #72]	; (800ae80 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ae38:	7d92      	ldrb	r2, [r2, #22]
 800ae3a:	4911      	ldr	r1, [pc, #68]	; (800ae80 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ae3c:	7d09      	ldrb	r1, [r1, #20]
 800ae3e:	4810      	ldr	r0, [pc, #64]	; (800ae80 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ae40:	6980      	ldr	r0, [r0, #24]
 800ae42:	2400      	movs	r4, #0
 800ae44:	9404      	str	r4, [sp, #16]
 800ae46:	9003      	str	r0, [sp, #12]
 800ae48:	9102      	str	r1, [sp, #8]
 800ae4a:	9201      	str	r2, [sp, #4]
 800ae4c:	9300      	str	r3, [sp, #0]
 800ae4e:	2300      	movs	r3, #0
 800ae50:	2201      	movs	r2, #1
 800ae52:	4631      	mov	r1, r6
 800ae54:	4628      	mov	r0, r5
 800ae56:	f7fd ff83 	bl	8008d60 <aci_gap_set_authentication_requirement>
                                        );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800ae5a:	4b09      	ldr	r3, [pc, #36]	; (800ae80 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ae5c:	789b      	ldrb	r3, [r3, #2]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d001      	beq.n	800ae66 <Ble_Hci_Gap_Gatt_Init+0x192>
   {
     aci_gap_configure_whitelist();
 800ae62:	f7fe f91a 	bl	800909a <aci_gap_configure_whitelist>
   }
}
 800ae66:	bf00      	nop
 800ae68:	372c      	adds	r7, #44	; 0x2c
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	2000001c 	.word	0x2000001c
 800ae74:	0800b7e8 	.word	0x0800b7e8
 800ae78:	0800b7f8 	.word	0x0800b7f8
 800ae7c:	0800b710 	.word	0x0800b710
 800ae80:	2000011c 	.word	0x2000011c
 800ae84:	0001b207 	.word	0x0001b207

0800ae88 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b08c      	sub	sp, #48	; 0x30
 800ae8c:	af08      	add	r7, sp, #32
 800ae8e:	4603      	mov	r3, r0
 800ae90:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ae92:	2342      	movs	r3, #66	; 0x42
 800ae94:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;
 
  if (New_Status == APP_BLE_FAST_ADV)
 800ae96:	79fb      	ldrb	r3, [r7, #7]
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d106      	bne.n	800aeaa <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800ae9c:	4b2c      	ldr	r3, [pc, #176]	; (800af50 <Adv_Request+0xc8>)
 800ae9e:	881b      	ldrh	r3, [r3, #0]
 800aea0:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800aea2:	4b2c      	ldr	r3, [pc, #176]	; (800af54 <Adv_Request+0xcc>)
 800aea4:	881b      	ldrh	r3, [r3, #0]
 800aea6:	81bb      	strh	r3, [r7, #12]
 800aea8:	e005      	b.n	800aeb6 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800aeaa:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800aeae:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800aeb0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800aeb4:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800aeb6:	4b28      	ldr	r3, [pc, #160]	; (800af58 <Adv_Request+0xd0>)
 800aeb8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800aebc:	4618      	mov	r0, r3
 800aebe:	f7f6 fc7d 	bl	80017bc <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
    if ((New_Status == APP_BLE_LP_ADV)
 800aec2:	79fb      	ldrb	r3, [r7, #7]
 800aec4:	2b02      	cmp	r3, #2
 800aec6:	d10d      	bne.n	800aee4 <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800aec8:	4b23      	ldr	r3, [pc, #140]	; (800af58 <Adv_Request+0xd0>)
 800aeca:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800aece:	2b01      	cmp	r3, #1
 800aed0:	d004      	beq.n	800aedc <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800aed2:	4b21      	ldr	r3, [pc, #132]	; (800af58 <Adv_Request+0xd0>)
 800aed4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800aed8:	2b02      	cmp	r3, #2
 800aeda:	d103      	bne.n	800aee4 <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 800aedc:	f7fd fde1 	bl	8008aa2 <aci_gap_set_non_discoverable>
 800aee0:	4603      	mov	r3, r0
 800aee2:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 800aee4:	4a1c      	ldr	r2, [pc, #112]	; (800af58 <Adv_Request+0xd0>)
 800aee6:	79fb      	ldrb	r3, [r7, #7]
 800aee8:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 800aeec:	4b1a      	ldr	r3, [pc, #104]	; (800af58 <Adv_Request+0xd0>)
 800aeee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aef2:	89b8      	ldrh	r0, [r7, #12]
 800aef4:	89f9      	ldrh	r1, [r7, #14]
 800aef6:	2200      	movs	r2, #0
 800aef8:	9206      	str	r2, [sp, #24]
 800aefa:	2200      	movs	r2, #0
 800aefc:	9205      	str	r2, [sp, #20]
 800aefe:	4a17      	ldr	r2, [pc, #92]	; (800af5c <Adv_Request+0xd4>)
 800af00:	9204      	str	r2, [sp, #16]
 800af02:	9303      	str	r3, [sp, #12]
 800af04:	4b16      	ldr	r3, [pc, #88]	; (800af60 <Adv_Request+0xd8>)
 800af06:	9302      	str	r3, [sp, #8]
 800af08:	2308      	movs	r3, #8
 800af0a:	9301      	str	r3, [sp, #4]
 800af0c:	2300      	movs	r3, #0
 800af0e:	9300      	str	r3, [sp, #0]
 800af10:	2300      	movs	r3, #0
 800af12:	4602      	mov	r2, r0
 800af14:	2000      	movs	r0, #0
 800af16:	f7fd fded 	bl	8008af4 <aci_gap_set_discoverable>
 800af1a:	4603      	mov	r3, r0
 800af1c:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);
    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800af1e:	4911      	ldr	r1, [pc, #68]	; (800af64 <Adv_Request+0xdc>)
 800af20:	200e      	movs	r0, #14
 800af22:	f7fe f857 	bl	8008fd4 <aci_gap_update_adv_data>
 800af26:	4603      	mov	r3, r0
 800af28:	72fb      	strb	r3, [r7, #11]

     if (ret == BLE_STATUS_SUCCESS)
 800af2a:	7afb      	ldrb	r3, [r7, #11]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d10a      	bne.n	800af46 <Adv_Request+0xbe>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 800af30:	79fb      	ldrb	r3, [r7, #7]
 800af32:	2b01      	cmp	r3, #1
 800af34:	d107      	bne.n	800af46 <Adv_Request+0xbe>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800af36:	4b08      	ldr	r3, [pc, #32]	; (800af58 <Adv_Request+0xd0>)
 800af38:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800af3c:	490a      	ldr	r1, [pc, #40]	; (800af68 <Adv_Request+0xe0>)
 800af3e:	4618      	mov	r0, r3
 800af40:	f7f6 fcc6 	bl	80018d0 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 800af44:	bf00      	nop
 800af46:	bf00      	nop
}
 800af48:	3710      	adds	r7, #16
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop
 800af50:	200001b0 	.word	0x200001b0
 800af54:	200001b2 	.word	0x200001b2
 800af58:	2000011c 	.word	0x2000011c
 800af5c:	20000145 	.word	0x20000145
 800af60:	0800b808 	.word	0x0800b808
 800af64:	2000001c 	.word	0x2000001c
 800af68:	0001e046 	.word	0x0001e046

0800af6c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b086      	sub	sp, #24
 800af70:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800af72:	f7ff fd3d 	bl	800a9f0 <LL_FLASH_GetUDN>
 800af76:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af7e:	d023      	beq.n	800afc8 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800af80:	f7ff fd4e 	bl	800aa20 <LL_FLASH_GetSTCompanyID>
 800af84:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800af86:	f7ff fd3f 	bl	800aa08 <LL_FLASH_GetDeviceID>
 800af8a:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	b2da      	uxtb	r2, r3
 800af90:	4b16      	ldr	r3, [pc, #88]	; (800afec <BleGetBdAddress+0x80>)
 800af92:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	0a1b      	lsrs	r3, r3, #8
 800af98:	b2da      	uxtb	r2, r3
 800af9a:	4b14      	ldr	r3, [pc, #80]	; (800afec <BleGetBdAddress+0x80>)
 800af9c:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	0c1b      	lsrs	r3, r3, #16
 800afa2:	b2da      	uxtb	r2, r3
 800afa4:	4b11      	ldr	r3, [pc, #68]	; (800afec <BleGetBdAddress+0x80>)
 800afa6:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	b2da      	uxtb	r2, r3
 800afac:	4b0f      	ldr	r3, [pc, #60]	; (800afec <BleGetBdAddress+0x80>)
 800afae:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	b2da      	uxtb	r2, r3
 800afb4:	4b0d      	ldr	r3, [pc, #52]	; (800afec <BleGetBdAddress+0x80>)
 800afb6:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	0a1b      	lsrs	r3, r3, #8
 800afbc:	b2da      	uxtb	r2, r3
 800afbe:	4b0b      	ldr	r3, [pc, #44]	; (800afec <BleGetBdAddress+0x80>)
 800afc0:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800afc2:	4b0a      	ldr	r3, [pc, #40]	; (800afec <BleGetBdAddress+0x80>)
 800afc4:	617b      	str	r3, [r7, #20]
 800afc6:	e00b      	b.n	800afe0 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800afc8:	2000      	movs	r0, #0
 800afca:	f7fe ff05 	bl	8009dd8 <OTP_Read>
 800afce:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d002      	beq.n	800afdc <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	617b      	str	r3, [r7, #20]
 800afda:	e001      	b.n	800afe0 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800afdc:	4b04      	ldr	r3, [pc, #16]	; (800aff0 <BleGetBdAddress+0x84>)
 800afde:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 800afe0:	697b      	ldr	r3, [r7, #20]
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3718      	adds	r7, #24
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	bf00      	nop
 800afec:	20000344 	.word	0x20000344
 800aff0:	0800b7e0 	.word	0x0800b7e0

0800aff4 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800affa:	4b0a      	ldr	r3, [pc, #40]	; (800b024 <Adv_Cancel+0x30>)
 800affc:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800b000:	2b05      	cmp	r3, #5
 800b002:	d00a      	beq.n	800b01a <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 800b004:	2300      	movs	r3, #0
 800b006:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 800b008:	f7fd fd4b 	bl	8008aa2 <aci_gap_set_non_discoverable>
 800b00c:	4603      	mov	r3, r0
 800b00e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b010:	4b04      	ldr	r3, [pc, #16]	; (800b024 <Adv_Cancel+0x30>)
 800b012:	2200      	movs	r2, #0
 800b014:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 800b018:	bf00      	nop
 800b01a:	bf00      	nop
}
 800b01c:	3708      	adds	r7, #8
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
 800b022:	bf00      	nop
 800b024:	2000011c 	.word	0x2000011c

0800b028 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800b02c:	2100      	movs	r1, #0
 800b02e:	2001      	movs	r0, #1
 800b030:	f7f7 fb06 	bl	8002640 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 800b034:	bf00      	nop
}
 800b036:	bd80      	pop	{r7, pc}

0800b038 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 800b038:	b480      	push	{r7}
 800b03a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 800b03c:	bf00      	nop
 800b03e:	46bd      	mov	sp, r7
 800b040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b044:	4770      	bx	lr

0800b046 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800b046:	b580      	push	{r7, lr}
 800b048:	b082      	sub	sp, #8
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800b04e:	2100      	movs	r1, #0
 800b050:	2004      	movs	r0, #4
 800b052:	f7f7 faf5 	bl	8002640 <UTIL_SEQ_SetTask>
  return;
 800b056:	bf00      	nop
}
 800b058:	3708      	adds	r7, #8
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}

0800b05e <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800b05e:	b580      	push	{r7, lr}
 800b060:	b082      	sub	sp, #8
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b066:	2001      	movs	r0, #1
 800b068:	f7f7 fb50 	bl	800270c <UTIL_SEQ_SetEvt>
  return;
 800b06c:	bf00      	nop
}
 800b06e:	3708      	adds	r7, #8
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b07c:	2001      	movs	r0, #1
 800b07e:	f7f7 fb63 	bl	8002748 <UTIL_SEQ_WaitEvt>
  return;
 800b082:	bf00      	nop
}
 800b084:	3708      	adds	r7, #8
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}

0800b08a <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800b08a:	b580      	push	{r7, lr}
 800b08c:	b084      	sub	sp, #16
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload; 
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	3308      	adds	r3, #8
 800b09c:	4618      	mov	r0, r3
 800b09e:	f7ff fa9b 	bl	800a5d8 <SVCCTL_UserEvtRx>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800b0a6:	7afb      	ldrb	r3, [r7, #11]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d003      	beq.n	800b0b4 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 800b0b2:	e002      	b.n	800b0ba <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	701a      	strb	r2, [r3, #0]
}
 800b0ba:	bf00      	nop
 800b0bc:	3710      	adds	r7, #16
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}

0800b0c2 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800b0c2:	b580      	push	{r7, lr}
 800b0c4:	b084      	sub	sp, #16
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800b0cc:	79fb      	ldrb	r3, [r7, #7]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d002      	beq.n	800b0d8 <BLE_StatusNot+0x16>
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d006      	beq.n	800b0e4 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 800b0d6:	e00b      	b.n	800b0f0 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b0d8:	233f      	movs	r3, #63	; 0x3f
 800b0da:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800b0dc:	68f8      	ldr	r0, [r7, #12]
 800b0de:	f7f7 fad9 	bl	8002694 <UTIL_SEQ_PauseTask>
      break;
 800b0e2:	e005      	b.n	800b0f0 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b0e4:	233f      	movs	r3, #63	; 0x3f
 800b0e6:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800b0e8:	68f8      	ldr	r0, [r7, #12]
 800b0ea:	f7f7 faf1 	bl	80026d0 <UTIL_SEQ_ResumeTask>
      break;
 800b0ee:	bf00      	nop
  }
  return;
 800b0f0:	bf00      	nop
}
 800b0f2:	3710      	adds	r7, #16
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <P2PS_STM_App_Notification>:
static void P2PS_DataChange_Timer_Callback(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b082      	sub	sp, #8
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	2b01      	cmp	r3, #1
 800b106:	d00b      	beq.n	800b120 <P2PS_STM_App_Notification+0x28>
 800b108:	2b03      	cmp	r3, #3
 800b10a:	d00d      	beq.n	800b128 <P2PS_STM_App_Notification+0x30>
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d000      	beq.n	800b112 <P2PS_STM_App_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800b110:	e00b      	b.n	800b12a <P2PS_STM_App_Notification+0x32>
    	P2P_Server_App_Context.NotificationStatus = 1;
 800b112:	4b08      	ldr	r3, [pc, #32]	; (800b134 <P2PS_STM_App_Notification+0x3c>)
 800b114:	2201      	movs	r2, #1
 800b116:	701a      	strb	r2, [r3, #0]
    	HAL_TIM_Base_Start_IT(&htim16);
 800b118:	4807      	ldr	r0, [pc, #28]	; (800b138 <P2PS_STM_App_Notification+0x40>)
 800b11a:	f7fb ff19 	bl	8006f50 <HAL_TIM_Base_Start_IT>
      break;
 800b11e:	e004      	b.n	800b12a <P2PS_STM_App_Notification+0x32>
    	P2P_Server_App_Context.NotificationStatus = 0;
 800b120:	4b04      	ldr	r3, [pc, #16]	; (800b134 <P2PS_STM_App_Notification+0x3c>)
 800b122:	2200      	movs	r2, #0
 800b124:	701a      	strb	r2, [r3, #0]
      break;
 800b126:	e000      	b.n	800b12a <P2PS_STM_App_Notification+0x32>
      break;
 800b128:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800b12a:	bf00      	nop
}
 800b12c:	3708      	adds	r7, #8
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
 800b132:	bf00      	nop
 800b134:	200001b4 	.word	0x200001b4
 800b138:	200004d8 	.word	0x200004d8

0800b13c <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b083      	sub	sp, #12
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d002      	beq.n	800b152 <P2PS_APP_Notification+0x16>
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d002      	beq.n	800b156 <P2PS_APP_Notification+0x1a>
    
    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800b150:	e002      	b.n	800b158 <P2PS_APP_Notification+0x1c>
    break;
 800b152:	bf00      	nop
 800b154:	e000      	b.n	800b158 <P2PS_APP_Notification+0x1c>
    break;
 800b156:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800b158:	bf00      	nop
}
 800b15a:	370c      	adds	r7, #12
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
	/* Register task used to update the characteristic (send the notification) */
		UTIL_SEQ_RegTask(1 << CFG_MY_TASK_NOTIFY_DATA ,UTIL_SEQ_RFU, P2PS_Send_Notification_Task);
 800b168:	4a05      	ldr	r2, [pc, #20]	; (800b180 <P2PS_APP_Init+0x1c>)
 800b16a:	2100      	movs	r1, #0
 800b16c:	2008      	movs	r0, #8
 800b16e:	f7f7 fa47 	bl	8002600 <UTIL_SEQ_RegTask>
//				P2PS_DataChange_Timer_Callback);

	  /**
	   * Initialize Template application context
	   */
	  P2P_Server_App_Context.NotificationStatus=0;
 800b172:	4b04      	ldr	r3, [pc, #16]	; (800b184 <P2PS_APP_Init+0x20>)
 800b174:	2200      	movs	r2, #0
 800b176:	701a      	strb	r2, [r3, #0]
	  P2PS_APP_context_Init();
 800b178:	f000 f824 	bl	800b1c4 <P2PS_APP_context_Init>
/* USER CODE END P2PS_APP_Init */
  return;
 800b17c:	bf00      	nop
}
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	0800b189 	.word	0x0800b189
 800b184:	200001b4 	.word	0x200001b4

0800b188 <P2PS_Send_Notification_Task>:

/* USER CODE BEGIN FD */

static void P2PS_Send_Notification_Task(void)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b08c      	sub	sp, #48	; 0x30
 800b18c:	af00      	add	r7, sp, #0
  /* Update P2P_NOTIFY characteristic */
	uint8_t value[PAYLOAD_LENGTH] = {0};
 800b18e:	463b      	mov	r3, r7
 800b190:	2230      	movs	r2, #48	; 0x30
 800b192:	2100      	movs	r1, #0
 800b194:	4618      	mov	r0, r3
 800b196:	f000 fa70 	bl	800b67a <memset>

	if(P2P_Server_App_Context.NotificationStatus)
 800b19a:	4b09      	ldr	r3, [pc, #36]	; (800b1c0 <P2PS_Send_Notification_Task+0x38>)
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d00a      	beq.n	800b1b8 <P2PS_Send_Notification_Task+0x30>
	{
		get_buffer_values(&value[0]);
 800b1a2:	463b      	mov	r3, r7
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f7f6 ff03 	bl	8001fb0 <get_buffer_values>
//		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
		P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID,&value[0]);
 800b1aa:	463b      	mov	r3, r7
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800b1b2:	f7fe ff3b 	bl	800a02c <P2PS_STM_App_Update_Char>
	else
	{

	}

  return;
 800b1b6:	bf00      	nop
 800b1b8:	bf00      	nop
}
 800b1ba:	3730      	adds	r7, #48	; 0x30
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}
 800b1c0:	200001b4 	.word	0x200001b4

0800b1c4 <P2PS_APP_context_Init>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
static void P2PS_APP_context_Init(void)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	af00      	add	r7, sp, #0
  P2P_Server_App_Context.Parameter = 0;
 800b1c8:	4b0b      	ldr	r3, [pc, #44]	; (800b1f8 <P2PS_APP_context_Init+0x34>)
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	805a      	strh	r2, [r3, #2]
  P2P_Server_App_Context.ACC.X = 0;
 800b1ce:	4b0a      	ldr	r3, [pc, #40]	; (800b1f8 <P2PS_APP_context_Init+0x34>)
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	809a      	strh	r2, [r3, #4]
  P2P_Server_App_Context.ACC.Y = 0;
 800b1d4:	4b08      	ldr	r3, [pc, #32]	; (800b1f8 <P2PS_APP_context_Init+0x34>)
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	80da      	strh	r2, [r3, #6]
  P2P_Server_App_Context.ACC.Z = 0;
 800b1da:	4b07      	ldr	r3, [pc, #28]	; (800b1f8 <P2PS_APP_context_Init+0x34>)
 800b1dc:	2200      	movs	r2, #0
 800b1de:	811a      	strh	r2, [r3, #8]
  P2P_Server_App_Context.ECG.ecg_value = 0;
 800b1e0:	4b05      	ldr	r3, [pc, #20]	; (800b1f8 <P2PS_APP_context_Init+0x34>)
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	815a      	strh	r2, [r3, #10]
  P2P_Server_App_Context.PPG.ppg_value = 0;
 800b1e6:	4b04      	ldr	r3, [pc, #16]	; (800b1f8 <P2PS_APP_context_Init+0x34>)
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	819a      	strh	r2, [r3, #12]
}
 800b1ec:	bf00      	nop
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr
 800b1f6:	bf00      	nop
 800b1f8:	200001b4 	.word	0x200001b4

0800b1fc <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800b200:	4b05      	ldr	r3, [pc, #20]	; (800b218 <LL_PWR_EnableBootC2+0x1c>)
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	4a04      	ldr	r2, [pc, #16]	; (800b218 <LL_PWR_EnableBootC2+0x1c>)
 800b206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b20a:	60d3      	str	r3, [r2, #12]
}
 800b20c:	bf00      	nop
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr
 800b216:	bf00      	nop
 800b218:	58000400 	.word	0x58000400

0800b21c <LL_AHB3_GRP1_EnableClock>:
{
 800b21c:	b480      	push	{r7}
 800b21e:	b085      	sub	sp, #20
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800b224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b228:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b22a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	4313      	orrs	r3, r2
 800b232:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800b234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b238:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	4013      	ands	r3, r2
 800b23e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b240:	68fb      	ldr	r3, [r7, #12]
}
 800b242:	bf00      	nop
 800b244:	3714      	adds	r7, #20
 800b246:	46bd      	mov	sp, r7
 800b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24c:	4770      	bx	lr

0800b24e <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800b24e:	b480      	push	{r7}
 800b250:	b083      	sub	sp, #12
 800b252:	af00      	add	r7, sp, #0
 800b254:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	601a      	str	r2, [r3, #0]
}
 800b262:	bf00      	nop
 800b264:	370c      	adds	r7, #12
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr

0800b26e <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800b26e:	b480      	push	{r7}
 800b270:	b083      	sub	sp, #12
 800b272:	af00      	add	r7, sp, #0
 800b274:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f043 0201 	orr.w	r2, r3, #1
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	601a      	str	r2, [r3, #0]
}
 800b282:	bf00      	nop
 800b284:	370c      	adds	r7, #12
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr

0800b28e <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b28e:	b480      	push	{r7}
 800b290:	b083      	sub	sp, #12
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
 800b296:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	685a      	ldr	r2, [r3, #4]
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	041b      	lsls	r3, r3, #16
 800b2a0:	43db      	mvns	r3, r3
 800b2a2:	401a      	ands	r2, r3
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	605a      	str	r2, [r3, #4]
}
 800b2a8:	bf00      	nop
 800b2aa:	370c      	adds	r7, #12
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr

0800b2b4 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	685a      	ldr	r2, [r3, #4]
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	041b      	lsls	r3, r3, #16
 800b2c6:	431a      	orrs	r2, r3
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	605a      	str	r2, [r3, #4]
}
 800b2cc:	bf00      	nop
 800b2ce:	370c      	adds	r7, #12
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	685a      	ldr	r2, [r3, #4]
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	43db      	mvns	r3, r3
 800b2ea:	401a      	ands	r2, r3
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	605a      	str	r2, [r3, #4]
}
 800b2f0:	bf00      	nop
 800b2f2:	370c      	adds	r7, #12
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr

0800b2fc <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b083      	sub	sp, #12
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	683a      	ldr	r2, [r7, #0]
 800b30a:	609a      	str	r2, [r3, #8]
}
 800b30c:	bf00      	nop
 800b30e:	370c      	adds	r7, #12
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr

0800b318 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	041a      	lsls	r2, r3, #16
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	609a      	str	r2, [r3, #8]
}
 800b32a:	bf00      	nop
 800b32c:	370c      	adds	r7, #12
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr

0800b336 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800b336:	b480      	push	{r7}
 800b338:	b083      	sub	sp, #12
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
 800b33e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	68da      	ldr	r2, [r3, #12]
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	4013      	ands	r3, r2
 800b348:	683a      	ldr	r2, [r7, #0]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d101      	bne.n	800b352 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800b34e:	2301      	movs	r3, #1
 800b350:	e000      	b.n	800b354 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800b352:	2300      	movs	r3, #0
}
 800b354:	4618      	mov	r0, r3
 800b356:	370c      	adds	r7, #12
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr

0800b360 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	69da      	ldr	r2, [r3, #28]
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	4013      	ands	r3, r2
 800b372:	683a      	ldr	r2, [r7, #0]
 800b374:	429a      	cmp	r2, r3
 800b376:	d101      	bne.n	800b37c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800b378:	2301      	movs	r3, #1
 800b37a:	e000      	b.n	800b37e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800b37c:	2300      	movs	r3, #0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	370c      	adds	r7, #12
 800b382:	46bd      	mov	sp, r7
 800b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b388:	4770      	bx	lr
	...

0800b38c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800b390:	2102      	movs	r1, #2
 800b392:	4819      	ldr	r0, [pc, #100]	; (800b3f8 <HW_IPCC_Rx_Handler+0x6c>)
 800b394:	f7ff ffe4 	bl	800b360 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b398:	4603      	mov	r3, r0
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d009      	beq.n	800b3b2 <HW_IPCC_Rx_Handler+0x26>
 800b39e:	4b16      	ldr	r3, [pc, #88]	; (800b3f8 <HW_IPCC_Rx_Handler+0x6c>)
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	43db      	mvns	r3, r3
 800b3a4:	f003 0302 	and.w	r3, r3, #2
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d002      	beq.n	800b3b2 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800b3ac:	f000 f8de 	bl	800b56c <HW_IPCC_SYS_EvtHandler>
 800b3b0:	e01f      	b.n	800b3f2 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800b3b2:	2101      	movs	r1, #1
 800b3b4:	4810      	ldr	r0, [pc, #64]	; (800b3f8 <HW_IPCC_Rx_Handler+0x6c>)
 800b3b6:	f7ff ffd3 	bl	800b360 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d008      	beq.n	800b3d2 <HW_IPCC_Rx_Handler+0x46>
 800b3c0:	4b0d      	ldr	r3, [pc, #52]	; (800b3f8 <HW_IPCC_Rx_Handler+0x6c>)
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	f003 0301 	and.w	r3, r3, #1
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d102      	bne.n	800b3d2 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800b3cc:	f000 f892 	bl	800b4f4 <HW_IPCC_BLE_EvtHandler>
 800b3d0:	e00f      	b.n	800b3f2 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800b3d2:	2108      	movs	r1, #8
 800b3d4:	4808      	ldr	r0, [pc, #32]	; (800b3f8 <HW_IPCC_Rx_Handler+0x6c>)
 800b3d6:	f7ff ffc3 	bl	800b360 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d009      	beq.n	800b3f4 <HW_IPCC_Rx_Handler+0x68>
 800b3e0:	4b05      	ldr	r3, [pc, #20]	; (800b3f8 <HW_IPCC_Rx_Handler+0x6c>)
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	43db      	mvns	r3, r3
 800b3e6:	f003 0308 	and.w	r3, r3, #8
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d002      	beq.n	800b3f4 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800b3ee:	f000 f909 	bl	800b604 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800b3f2:	bf00      	nop
 800b3f4:	bf00      	nop
}
 800b3f6:	bd80      	pop	{r7, pc}
 800b3f8:	58000c00 	.word	0x58000c00

0800b3fc <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800b400:	2102      	movs	r1, #2
 800b402:	4822      	ldr	r0, [pc, #136]	; (800b48c <HW_IPCC_Tx_Handler+0x90>)
 800b404:	f7ff ff97 	bl	800b336 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b408:	4603      	mov	r3, r0
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d109      	bne.n	800b422 <HW_IPCC_Tx_Handler+0x26>
 800b40e:	4b1f      	ldr	r3, [pc, #124]	; (800b48c <HW_IPCC_Tx_Handler+0x90>)
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	43db      	mvns	r3, r3
 800b414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d002      	beq.n	800b422 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800b41c:	f000 f89a 	bl	800b554 <HW_IPCC_SYS_CmdEvtHandler>
 800b420:	e031      	b.n	800b486 <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800b422:	2102      	movs	r1, #2
 800b424:	4819      	ldr	r0, [pc, #100]	; (800b48c <HW_IPCC_Tx_Handler+0x90>)
 800b426:	f7ff ff86 	bl	800b336 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b42a:	4603      	mov	r3, r0
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d109      	bne.n	800b444 <HW_IPCC_Tx_Handler+0x48>
 800b430:	4b16      	ldr	r3, [pc, #88]	; (800b48c <HW_IPCC_Tx_Handler+0x90>)
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	43db      	mvns	r3, r3
 800b436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d002      	beq.n	800b444 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800b43e:	f000 f889 	bl	800b554 <HW_IPCC_SYS_CmdEvtHandler>
 800b442:	e020      	b.n	800b486 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800b444:	2108      	movs	r1, #8
 800b446:	4811      	ldr	r0, [pc, #68]	; (800b48c <HW_IPCC_Tx_Handler+0x90>)
 800b448:	f7ff ff75 	bl	800b336 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b44c:	4603      	mov	r3, r0
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d109      	bne.n	800b466 <HW_IPCC_Tx_Handler+0x6a>
 800b452:	4b0e      	ldr	r3, [pc, #56]	; (800b48c <HW_IPCC_Tx_Handler+0x90>)
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	43db      	mvns	r3, r3
 800b458:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d002      	beq.n	800b466 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 800b460:	f000 f8b2 	bl	800b5c8 <HW_IPCC_MM_FreeBufHandler>
 800b464:	e00f      	b.n	800b486 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800b466:	2120      	movs	r1, #32
 800b468:	4808      	ldr	r0, [pc, #32]	; (800b48c <HW_IPCC_Tx_Handler+0x90>)
 800b46a:	f7ff ff64 	bl	800b336 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b46e:	4603      	mov	r3, r0
 800b470:	2b00      	cmp	r3, #0
 800b472:	d109      	bne.n	800b488 <HW_IPCC_Tx_Handler+0x8c>
 800b474:	4b05      	ldr	r3, [pc, #20]	; (800b48c <HW_IPCC_Tx_Handler+0x90>)
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	43db      	mvns	r3, r3
 800b47a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d002      	beq.n	800b488 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800b482:	f000 f843 	bl	800b50c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800b486:	bf00      	nop
 800b488:	bf00      	nop
}
 800b48a:	bd80      	pop	{r7, pc}
 800b48c:	58000c00 	.word	0x58000c00

0800b490 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800b490:	b580      	push	{r7, lr}
 800b492:	af00      	add	r7, sp, #0
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800b494:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800b496:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800b498:	f7ff feb0 	bl	800b1fc <LL_PWR_EnableBootC2>

  return;
 800b49c:	bf00      	nop
}
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800b4a4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b4a8:	f7ff feb8 	bl	800b21c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800b4ac:	4806      	ldr	r0, [pc, #24]	; (800b4c8 <HW_IPCC_Init+0x28>)
 800b4ae:	f7ff fede 	bl	800b26e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800b4b2:	4805      	ldr	r0, [pc, #20]	; (800b4c8 <HW_IPCC_Init+0x28>)
 800b4b4:	f7ff fecb 	bl	800b24e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800b4b8:	202c      	movs	r0, #44	; 0x2c
 800b4ba:	f7f7 ff2e 	bl	800331a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800b4be:	202d      	movs	r0, #45	; 0x2d
 800b4c0:	f7f7 ff2b 	bl	800331a <HAL_NVIC_EnableIRQ>

  return;
 800b4c4:	bf00      	nop
}
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	58000c00 	.word	0x58000c00

0800b4cc <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800b4d0:	2101      	movs	r1, #1
 800b4d2:	4802      	ldr	r0, [pc, #8]	; (800b4dc <HW_IPCC_BLE_Init+0x10>)
 800b4d4:	f7ff ff00 	bl	800b2d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b4d8:	bf00      	nop
}
 800b4da:	bd80      	pop	{r7, pc}
 800b4dc:	58000c00 	.word	0x58000c00

0800b4e0 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800b4e4:	2101      	movs	r1, #1
 800b4e6:	4802      	ldr	r0, [pc, #8]	; (800b4f0 <HW_IPCC_BLE_SendCmd+0x10>)
 800b4e8:	f7ff ff16 	bl	800b318 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800b4ec:	bf00      	nop
}
 800b4ee:	bd80      	pop	{r7, pc}
 800b4f0:	58000c00 	.word	0x58000c00

0800b4f4 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800b4f8:	f7ff f944 	bl	800a784 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800b4fc:	2101      	movs	r1, #1
 800b4fe:	4802      	ldr	r0, [pc, #8]	; (800b508 <HW_IPCC_BLE_EvtHandler+0x14>)
 800b500:	f7ff fefc 	bl	800b2fc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b504:	bf00      	nop
}
 800b506:	bd80      	pop	{r7, pc}
 800b508:	58000c00 	.word	0x58000c00

0800b50c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800b510:	2120      	movs	r1, #32
 800b512:	4803      	ldr	r0, [pc, #12]	; (800b520 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800b514:	f7ff fece 	bl	800b2b4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800b518:	f7ff f950 	bl	800a7bc <HW_IPCC_BLE_AclDataAckNot>

  return;
 800b51c:	bf00      	nop
}
 800b51e:	bd80      	pop	{r7, pc}
 800b520:	58000c00 	.word	0x58000c00

0800b524 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800b524:	b580      	push	{r7, lr}
 800b526:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800b528:	2102      	movs	r1, #2
 800b52a:	4802      	ldr	r0, [pc, #8]	; (800b534 <HW_IPCC_SYS_Init+0x10>)
 800b52c:	f7ff fed4 	bl	800b2d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b530:	bf00      	nop
}
 800b532:	bd80      	pop	{r7, pc}
 800b534:	58000c00 	.word	0x58000c00

0800b538 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b53c:	2102      	movs	r1, #2
 800b53e:	4804      	ldr	r0, [pc, #16]	; (800b550 <HW_IPCC_SYS_SendCmd+0x18>)
 800b540:	f7ff feea 	bl	800b318 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b544:	2102      	movs	r1, #2
 800b546:	4802      	ldr	r0, [pc, #8]	; (800b550 <HW_IPCC_SYS_SendCmd+0x18>)
 800b548:	f7ff fea1 	bl	800b28e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800b54c:	bf00      	nop
}
 800b54e:	bd80      	pop	{r7, pc}
 800b550:	58000c00 	.word	0x58000c00

0800b554 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800b554:	b580      	push	{r7, lr}
 800b556:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b558:	2102      	movs	r1, #2
 800b55a:	4803      	ldr	r0, [pc, #12]	; (800b568 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800b55c:	f7ff feaa 	bl	800b2b4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800b560:	f7ff f974 	bl	800a84c <HW_IPCC_SYS_CmdEvtNot>

  return;
 800b564:	bf00      	nop
}
 800b566:	bd80      	pop	{r7, pc}
 800b568:	58000c00 	.word	0x58000c00

0800b56c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800b570:	f7ff f97c 	bl	800a86c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800b574:	2102      	movs	r1, #2
 800b576:	4802      	ldr	r0, [pc, #8]	; (800b580 <HW_IPCC_SYS_EvtHandler+0x14>)
 800b578:	f7ff fec0 	bl	800b2fc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b57c:	bf00      	nop
}
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	58000c00 	.word	0x58000c00

0800b584 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b082      	sub	sp, #8
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800b58c:	2108      	movs	r1, #8
 800b58e:	480c      	ldr	r0, [pc, #48]	; (800b5c0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b590:	f7ff fed1 	bl	800b336 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b594:	4603      	mov	r3, r0
 800b596:	2b00      	cmp	r3, #0
 800b598:	d007      	beq.n	800b5aa <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800b59a:	4a0a      	ldr	r2, [pc, #40]	; (800b5c4 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b5a0:	2108      	movs	r1, #8
 800b5a2:	4807      	ldr	r0, [pc, #28]	; (800b5c0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b5a4:	f7ff fe73 	bl	800b28e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800b5a8:	e006      	b.n	800b5b8 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b5ae:	2108      	movs	r1, #8
 800b5b0:	4803      	ldr	r0, [pc, #12]	; (800b5c0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b5b2:	f7ff feb1 	bl	800b318 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800b5b6:	bf00      	nop
}
 800b5b8:	3708      	adds	r7, #8
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	58000c00 	.word	0x58000c00
 800b5c4:	2000034c 	.word	0x2000034c

0800b5c8 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b5cc:	2108      	movs	r1, #8
 800b5ce:	4806      	ldr	r0, [pc, #24]	; (800b5e8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800b5d0:	f7ff fe70 	bl	800b2b4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800b5d4:	4b05      	ldr	r3, [pc, #20]	; (800b5ec <HW_IPCC_MM_FreeBufHandler+0x24>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b5da:	2108      	movs	r1, #8
 800b5dc:	4802      	ldr	r0, [pc, #8]	; (800b5e8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800b5de:	f7ff fe9b 	bl	800b318 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800b5e2:	bf00      	nop
}
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	bf00      	nop
 800b5e8:	58000c00 	.word	0x58000c00
 800b5ec:	2000034c 	.word	0x2000034c

0800b5f0 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800b5f4:	2108      	movs	r1, #8
 800b5f6:	4802      	ldr	r0, [pc, #8]	; (800b600 <HW_IPCC_TRACES_Init+0x10>)
 800b5f8:	f7ff fe6e 	bl	800b2d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b5fc:	bf00      	nop
}
 800b5fe:	bd80      	pop	{r7, pc}
 800b600:	58000c00 	.word	0x58000c00

0800b604 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800b604:	b580      	push	{r7, lr}
 800b606:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800b608:	f7ff f9ce 	bl	800a9a8 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800b60c:	2108      	movs	r1, #8
 800b60e:	4802      	ldr	r0, [pc, #8]	; (800b618 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800b610:	f7ff fe74 	bl	800b2fc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b614:	bf00      	nop
}
 800b616:	bd80      	pop	{r7, pc}
 800b618:	58000c00 	.word	0x58000c00

0800b61c <__libc_init_array>:
 800b61c:	b570      	push	{r4, r5, r6, lr}
 800b61e:	4e0d      	ldr	r6, [pc, #52]	; (800b654 <__libc_init_array+0x38>)
 800b620:	4c0d      	ldr	r4, [pc, #52]	; (800b658 <__libc_init_array+0x3c>)
 800b622:	1ba4      	subs	r4, r4, r6
 800b624:	10a4      	asrs	r4, r4, #2
 800b626:	2500      	movs	r5, #0
 800b628:	42a5      	cmp	r5, r4
 800b62a:	d109      	bne.n	800b640 <__libc_init_array+0x24>
 800b62c:	4e0b      	ldr	r6, [pc, #44]	; (800b65c <__libc_init_array+0x40>)
 800b62e:	4c0c      	ldr	r4, [pc, #48]	; (800b660 <__libc_init_array+0x44>)
 800b630:	f000 f82c 	bl	800b68c <_init>
 800b634:	1ba4      	subs	r4, r4, r6
 800b636:	10a4      	asrs	r4, r4, #2
 800b638:	2500      	movs	r5, #0
 800b63a:	42a5      	cmp	r5, r4
 800b63c:	d105      	bne.n	800b64a <__libc_init_array+0x2e>
 800b63e:	bd70      	pop	{r4, r5, r6, pc}
 800b640:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b644:	4798      	blx	r3
 800b646:	3501      	adds	r5, #1
 800b648:	e7ee      	b.n	800b628 <__libc_init_array+0xc>
 800b64a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b64e:	4798      	blx	r3
 800b650:	3501      	adds	r5, #1
 800b652:	e7f2      	b.n	800b63a <__libc_init_array+0x1e>
 800b654:	0800b818 	.word	0x0800b818
 800b658:	0800b818 	.word	0x0800b818
 800b65c:	0800b818 	.word	0x0800b818
 800b660:	0800b81c 	.word	0x0800b81c

0800b664 <memcpy>:
 800b664:	b510      	push	{r4, lr}
 800b666:	1e43      	subs	r3, r0, #1
 800b668:	440a      	add	r2, r1
 800b66a:	4291      	cmp	r1, r2
 800b66c:	d100      	bne.n	800b670 <memcpy+0xc>
 800b66e:	bd10      	pop	{r4, pc}
 800b670:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b674:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b678:	e7f7      	b.n	800b66a <memcpy+0x6>

0800b67a <memset>:
 800b67a:	4402      	add	r2, r0
 800b67c:	4603      	mov	r3, r0
 800b67e:	4293      	cmp	r3, r2
 800b680:	d100      	bne.n	800b684 <memset+0xa>
 800b682:	4770      	bx	lr
 800b684:	f803 1b01 	strb.w	r1, [r3], #1
 800b688:	e7f9      	b.n	800b67e <memset+0x4>
	...

0800b68c <_init>:
 800b68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b68e:	bf00      	nop
 800b690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b692:	bc08      	pop	{r3}
 800b694:	469e      	mov	lr, r3
 800b696:	4770      	bx	lr

0800b698 <_fini>:
 800b698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b69a:	bf00      	nop
 800b69c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b69e:	bc08      	pop	{r3}
 800b6a0:	469e      	mov	lr, r3
 800b6a2:	4770      	bx	lr
